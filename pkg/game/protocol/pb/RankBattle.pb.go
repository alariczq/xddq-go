// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: RankBattle.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBattleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                     *int32                     `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerBattleShowDataMsg []*PlayerBattleShowDataMsg `protobuf:"bytes,2,rep,name=playerBattleShowDataMsg" json:"playerBattleShowDataMsg,omitempty"`
	RobotScoreLimit         *bool                      `protobuf:"varint,3,opt,name=robotScoreLimit" json:"robotScoreLimit,omitempty"`
}

func (x *GetBattleListResp) Reset() {
	*x = GetBattleListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattleListResp) ProtoMessage() {}

func (x *GetBattleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattleListResp.ProtoReflect.Descriptor instead.
func (*GetBattleListResp) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{0}
}

func (x *GetBattleListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetBattleListResp) GetPlayerBattleShowDataMsg() []*PlayerBattleShowDataMsg {
	if x != nil {
		return x.PlayerBattleShowDataMsg
	}
	return nil
}

func (x *GetBattleListResp) GetRobotScoreLimit() bool {
	if x != nil && x.RobotScoreLimit != nil {
		return *x.RobotScoreLimit
	}
	return false
}

type PlayerBattleShowDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBaseDataMsg *PlayerBaseDataMsg `protobuf:"bytes,1,opt,name=playerBaseDataMsg" json:"playerBaseDataMsg,omitempty"`
	Score             *int64             `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	ProtectEndTime    *int64             `protobuf:"varint,3,opt,name=protectEndTime" json:"protectEndTime,omitempty"`
}

func (x *PlayerBattleShowDataMsg) Reset() {
	*x = PlayerBattleShowDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBattleShowDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBattleShowDataMsg) ProtoMessage() {}

func (x *PlayerBattleShowDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBattleShowDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerBattleShowDataMsg) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerBattleShowDataMsg) GetPlayerBaseDataMsg() *PlayerBaseDataMsg {
	if x != nil {
		return x.PlayerBaseDataMsg
	}
	return nil
}

func (x *PlayerBattleShowDataMsg) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *PlayerBattleShowDataMsg) GetProtectEndTime() int64 {
	if x != nil && x.ProtectEndTime != nil {
		return *x.ProtectEndTime
	}
	return 0
}

type RefreshBattleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                     *int32                     `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerBattleShowDataMsg []*PlayerBattleShowDataMsg `protobuf:"bytes,2,rep,name=playerBattleShowDataMsg" json:"playerBattleShowDataMsg,omitempty"`
	RobotScoreLimit         *bool                      `protobuf:"varint,3,opt,name=robotScoreLimit" json:"robotScoreLimit,omitempty"`
}

func (x *RefreshBattleListResp) Reset() {
	*x = RefreshBattleListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshBattleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshBattleListResp) ProtoMessage() {}

func (x *RefreshBattleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshBattleListResp.ProtoReflect.Descriptor instead.
func (*RefreshBattleListResp) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{2}
}

func (x *RefreshBattleListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RefreshBattleListResp) GetPlayerBattleShowDataMsg() []*PlayerBattleShowDataMsg {
	if x != nil {
		return x.PlayerBattleShowDataMsg
	}
	return nil
}

func (x *RefreshBattleListResp) GetRobotScoreLimit() bool {
	if x != nil && x.RobotScoreLimit != nil {
		return *x.RobotScoreLimit
	}
	return false
}

type RankBattleChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
}

func (x *RankBattleChallengeReq) Reset() {
	*x = RankBattleChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleChallengeReq) ProtoMessage() {}

func (x *RankBattleChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleChallengeReq.ProtoReflect.Descriptor instead.
func (*RankBattleChallengeReq) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{3}
}

func (x *RankBattleChallengeReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type RankBattleChallengeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RankBattleResultMsg *RankBattleResultMsg `protobuf:"bytes,2,opt,name=rankBattleResultMsg" json:"rankBattleResultMsg,omitempty"`
}

func (x *RankBattleChallengeResp) Reset() {
	*x = RankBattleChallengeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleChallengeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleChallengeResp) ProtoMessage() {}

func (x *RankBattleChallengeResp) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleChallengeResp.ProtoReflect.Descriptor instead.
func (*RankBattleChallengeResp) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{4}
}

func (x *RankBattleChallengeResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RankBattleChallengeResp) GetRankBattleResultMsg() *RankBattleResultMsg {
	if x != nil {
		return x.RankBattleResultMsg
	}
	return nil
}

type RankBattleResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllBattleRecord      *BattleRecordMsg        `protobuf:"bytes,1,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	ChallengeSuccess     *bool                   `protobuf:"varint,2,opt,name=challengeSuccess" json:"challengeSuccess,omitempty"`
	Rewards              *string                 `protobuf:"bytes,3,opt,name=rewards" json:"rewards,omitempty"`
	BattleScoreChangeMsg []*BattleScoreChangeMsg `protobuf:"bytes,4,rep,name=battleScoreChangeMsg" json:"battleScoreChangeMsg,omitempty"`
}

func (x *RankBattleResultMsg) Reset() {
	*x = RankBattleResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleResultMsg) ProtoMessage() {}

func (x *RankBattleResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleResultMsg.ProtoReflect.Descriptor instead.
func (*RankBattleResultMsg) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{5}
}

func (x *RankBattleResultMsg) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *RankBattleResultMsg) GetChallengeSuccess() bool {
	if x != nil && x.ChallengeSuccess != nil {
		return *x.ChallengeSuccess
	}
	return false
}

func (x *RankBattleResultMsg) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *RankBattleResultMsg) GetBattleScoreChangeMsg() []*BattleScoreChangeMsg {
	if x != nil {
		return x.BattleScoreChangeMsg
	}
	return nil
}

type BattleScoreChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBaseDataMsg *PlayerBaseDataMsg `protobuf:"bytes,1,opt,name=playerBaseDataMsg" json:"playerBaseDataMsg,omitempty"`
	Score             *int64             `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	ChangeScore       *int64             `protobuf:"varint,3,opt,name=changeScore" json:"changeScore,omitempty"`
}

func (x *BattleScoreChangeMsg) Reset() {
	*x = BattleScoreChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleScoreChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleScoreChangeMsg) ProtoMessage() {}

func (x *BattleScoreChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleScoreChangeMsg.ProtoReflect.Descriptor instead.
func (*BattleScoreChangeMsg) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{6}
}

func (x *BattleScoreChangeMsg) GetPlayerBaseDataMsg() *PlayerBaseDataMsg {
	if x != nil {
		return x.PlayerBaseDataMsg
	}
	return nil
}

func (x *BattleScoreChangeMsg) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *BattleScoreChangeMsg) GetChangeScore() int64 {
	if x != nil && x.ChangeScore != nil {
		return *x.ChangeScore
	}
	return 0
}

type GetRankBattleLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RankBattleLogMsg []*RankBattleLogMsg `protobuf:"bytes,2,rep,name=rankBattleLogMsg" json:"rankBattleLogMsg,omitempty"`
}

func (x *GetRankBattleLogResp) Reset() {
	*x = GetRankBattleLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankBattleLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankBattleLogResp) ProtoMessage() {}

func (x *GetRankBattleLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankBattleLogResp.ProtoReflect.Descriptor instead.
func (*GetRankBattleLogResp) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{7}
}

func (x *GetRankBattleLogResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetRankBattleLogResp) GetRankBattleLogMsg() []*RankBattleLogMsg {
	if x != nil {
		return x.RankBattleLogMsg
	}
	return nil
}

type RankBattleLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId          *int32             `protobuf:"varint,1,opt,name=logId" json:"logId,omitempty"`
	BeAttackTime   *int64             `protobuf:"varint,2,opt,name=beAttackTime" json:"beAttackTime,omitempty"`
	AttackPlayer   *PlayerBaseDataMsg `protobuf:"bytes,3,opt,name=attackPlayer" json:"attackPlayer,omitempty"`
	ScoreChange    *int64             `protobuf:"varint,4,opt,name=scoreChange" json:"scoreChange,omitempty"`
	RevengeSuccess *bool              `protobuf:"varint,5,opt,name=revengeSuccess" json:"revengeSuccess,omitempty"`
}

func (x *RankBattleLogMsg) Reset() {
	*x = RankBattleLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleLogMsg) ProtoMessage() {}

func (x *RankBattleLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleLogMsg.ProtoReflect.Descriptor instead.
func (*RankBattleLogMsg) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{8}
}

func (x *RankBattleLogMsg) GetLogId() int32 {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return 0
}

func (x *RankBattleLogMsg) GetBeAttackTime() int64 {
	if x != nil && x.BeAttackTime != nil {
		return *x.BeAttackTime
	}
	return 0
}

func (x *RankBattleLogMsg) GetAttackPlayer() *PlayerBaseDataMsg {
	if x != nil {
		return x.AttackPlayer
	}
	return nil
}

func (x *RankBattleLogMsg) GetScoreChange() int64 {
	if x != nil && x.ScoreChange != nil {
		return *x.ScoreChange
	}
	return 0
}

func (x *RankBattleLogMsg) GetRevengeSuccess() bool {
	if x != nil && x.RevengeSuccess != nil {
		return *x.RevengeSuccess
	}
	return false
}

type RankBattleRevengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId *int32 `protobuf:"varint,1,req,name=logId" json:"logId,omitempty"`
}

func (x *RankBattleRevengeReq) Reset() {
	*x = RankBattleRevengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleRevengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleRevengeReq) ProtoMessage() {}

func (x *RankBattleRevengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleRevengeReq.ProtoReflect.Descriptor instead.
func (*RankBattleRevengeReq) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{9}
}

func (x *RankBattleRevengeReq) GetLogId() int32 {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return 0
}

type RankBattleRevengeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RankBattleResultMsg *RankBattleResultMsg `protobuf:"bytes,2,opt,name=rankBattleResultMsg" json:"rankBattleResultMsg,omitempty"`
}

func (x *RankBattleRevengeResp) Reset() {
	*x = RankBattleRevengeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleRevengeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleRevengeResp) ProtoMessage() {}

func (x *RankBattleRevengeResp) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleRevengeResp.ProtoReflect.Descriptor instead.
func (*RankBattleRevengeResp) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{10}
}

func (x *RankBattleRevengeResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RankBattleRevengeResp) GetRankBattleResultMsg() *RankBattleResultMsg {
	if x != nil {
		return x.RankBattleResultMsg
	}
	return nil
}

type RankBattleSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *int32 `protobuf:"varint,1,req,name=groupId" json:"groupId,omitempty"`
	Round   *int32 `protobuf:"varint,2,req,name=round" json:"round,omitempty"`
}

func (x *RankBattleSync) Reset() {
	*x = RankBattleSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleSync) ProtoMessage() {}

func (x *RankBattleSync) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleSync.ProtoReflect.Descriptor instead.
func (*RankBattleSync) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{11}
}

func (x *RankBattleSync) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *RankBattleSync) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

type RankBattleServerListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RankBattleServerListReq) Reset() {
	*x = RankBattleServerListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleServerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleServerListReq) ProtoMessage() {}

func (x *RankBattleServerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleServerListReq.ProtoReflect.Descriptor instead.
func (*RankBattleServerListReq) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{12}
}

type RankBattleServerListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	ServerId []int64 `protobuf:"varint,2,rep,name=serverId" json:"serverId,omitempty"`
}

func (x *RankBattleServerListResp) Reset() {
	*x = RankBattleServerListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RankBattle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankBattleServerListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankBattleServerListResp) ProtoMessage() {}

func (x *RankBattleServerListResp) ProtoReflect() protoreflect.Message {
	mi := &file_RankBattle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankBattleServerListResp.ProtoReflect.Descriptor instead.
func (*RankBattleServerListResp) Descriptor() ([]byte, []int) {
	return file_RankBattle_proto_rawDescGZIP(), []int{13}
}

func (x *RankBattleServerListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RankBattleServerListResp) GetServerId() []int64 {
	if x != nil {
		return x.ServerId
	}
	return nil
}

var File_RankBattle_proto protoreflect.FileDescriptor

var file_RankBattle_proto_rawDesc = []byte{
	0x0a, 0x10, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x65, 0x0a, 0x17, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x17,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x65, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x2e, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x6b, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x52, 0x61, 0x6e, 0x6b,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x72, 0x61, 0x6e,
	0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67,
	0x22, 0x88, 0x02, 0x0a, 0x13, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x5c, 0x0a,
	0x14, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x14, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x14,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x7a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x72,
	0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x72, 0x61, 0x6e,
	0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x22, 0xe1, 0x01,
	0x0a, 0x10, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x2c, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x72,
	0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x40, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x61, 0x6e, 0x6b,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x48, 0x0a, 0x18, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68,
	0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_RankBattle_proto_rawDescOnce sync.Once
	file_RankBattle_proto_rawDescData = file_RankBattle_proto_rawDesc
)

func file_RankBattle_proto_rawDescGZIP() []byte {
	file_RankBattle_proto_rawDescOnce.Do(func() {
		file_RankBattle_proto_rawDescData = protoimpl.X.CompressGZIP(file_RankBattle_proto_rawDescData)
	})
	return file_RankBattle_proto_rawDescData
}

var file_RankBattle_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_RankBattle_proto_goTypes = []any{
	(*GetBattleListResp)(nil),        // 0: com.yq.msg.CityMsg.GetBattleListResp
	(*PlayerBattleShowDataMsg)(nil),  // 1: com.yq.msg.CityMsg.PlayerBattleShowDataMsg
	(*RefreshBattleListResp)(nil),    // 2: com.yq.msg.CityMsg.RefreshBattleListResp
	(*RankBattleChallengeReq)(nil),   // 3: com.yq.msg.CityMsg.RankBattleChallengeReq
	(*RankBattleChallengeResp)(nil),  // 4: com.yq.msg.CityMsg.RankBattleChallengeResp
	(*RankBattleResultMsg)(nil),      // 5: com.yq.msg.CityMsg.RankBattleResultMsg
	(*BattleScoreChangeMsg)(nil),     // 6: com.yq.msg.CityMsg.BattleScoreChangeMsg
	(*GetRankBattleLogResp)(nil),     // 7: com.yq.msg.CityMsg.GetRankBattleLogResp
	(*RankBattleLogMsg)(nil),         // 8: com.yq.msg.CityMsg.RankBattleLogMsg
	(*RankBattleRevengeReq)(nil),     // 9: com.yq.msg.CityMsg.RankBattleRevengeReq
	(*RankBattleRevengeResp)(nil),    // 10: com.yq.msg.CityMsg.RankBattleRevengeResp
	(*RankBattleSync)(nil),           // 11: com.yq.msg.CityMsg.RankBattleSync
	(*RankBattleServerListReq)(nil),  // 12: com.yq.msg.CityMsg.RankBattleServerListReq
	(*RankBattleServerListResp)(nil), // 13: com.yq.msg.CityMsg.RankBattleServerListResp
	(*PlayerBaseDataMsg)(nil),        // 14: com.yq.msg.CityMsg.PlayerBaseDataMsg
	(*BattleRecordMsg)(nil),          // 15: com.yq.msg.CityMsg.BattleRecordMsg
}
var file_RankBattle_proto_depIdxs = []int32{
	1,  // 0: com.yq.msg.CityMsg.GetBattleListResp.playerBattleShowDataMsg:type_name -> com.yq.msg.CityMsg.PlayerBattleShowDataMsg
	14, // 1: com.yq.msg.CityMsg.PlayerBattleShowDataMsg.playerBaseDataMsg:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	1,  // 2: com.yq.msg.CityMsg.RefreshBattleListResp.playerBattleShowDataMsg:type_name -> com.yq.msg.CityMsg.PlayerBattleShowDataMsg
	5,  // 3: com.yq.msg.CityMsg.RankBattleChallengeResp.rankBattleResultMsg:type_name -> com.yq.msg.CityMsg.RankBattleResultMsg
	15, // 4: com.yq.msg.CityMsg.RankBattleResultMsg.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	6,  // 5: com.yq.msg.CityMsg.RankBattleResultMsg.battleScoreChangeMsg:type_name -> com.yq.msg.CityMsg.BattleScoreChangeMsg
	14, // 6: com.yq.msg.CityMsg.BattleScoreChangeMsg.playerBaseDataMsg:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	8,  // 7: com.yq.msg.CityMsg.GetRankBattleLogResp.rankBattleLogMsg:type_name -> com.yq.msg.CityMsg.RankBattleLogMsg
	14, // 8: com.yq.msg.CityMsg.RankBattleLogMsg.attackPlayer:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	5,  // 9: com.yq.msg.CityMsg.RankBattleRevengeResp.rankBattleResultMsg:type_name -> com.yq.msg.CityMsg.RankBattleResultMsg
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_RankBattle_proto_init() }
func file_RankBattle_proto_init() {
	if File_RankBattle_proto != nil {
		return
	}
	file_Common_proto_init()
	file_Battle_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RankBattle_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetBattleListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerBattleShowDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshBattleListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleChallengeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BattleScoreChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetRankBattleLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleRevengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleRevengeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleServerListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RankBattle_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RankBattleServerListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RankBattle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RankBattle_proto_goTypes,
		DependencyIndexes: file_RankBattle_proto_depIdxs,
		MessageInfos:      file_RankBattle_proto_msgTypes,
	}.Build()
	File_RankBattle_proto = out.File
	file_RankBattle_proto_rawDesc = nil
	file_RankBattle_proto_goTypes = nil
	file_RankBattle_proto_depIdxs = nil
}
