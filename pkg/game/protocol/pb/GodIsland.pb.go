// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: GodIsland.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GodIslandProtocols int32

const (
	GodIslandProtocols_god_island_base_info_load                   GodIslandProtocols = 206801
	GodIslandProtocols_god_island_group                            GodIslandProtocols = 206802
	GodIslandProtocols_god_island_report_data                      GodIslandProtocols = 206803
	GodIslandProtocols_god_island_report_detail                    GodIslandProtocols = 206804
	GodIslandProtocols_god_island_union_damage_info                GodIslandProtocols = 206805
	GodIslandProtocols_god_island_union_get_member_list            GodIslandProtocols = 206806
	GodIslandProtocols_god_island_union_group_damage_info          GodIslandProtocols = 206807
	GodIslandProtocols_god_island_red_dot_data                     GodIslandProtocols = 206808
	GodIslandProtocols_god_island_worship                          GodIslandProtocols = 206809
	GodIslandProtocols_god_island_player_battle_report             GodIslandProtocols = 206810
	GodIslandProtocols_god_island_update_power                     GodIslandProtocols = 206811
	GodIslandProtocols_god_island_union_battle_score_list          GodIslandProtocols = 206812
	GodIslandProtocols_god_island_union_liquid_receive_record      GodIslandProtocols = 206813
	GodIslandProtocols_god_island_union_member_score_list          GodIslandProtocols = 206814
	GodIslandProtocols_god_island_heart_beat                       GodIslandProtocols = 206819
	GodIslandProtocols_god_island_game_info_load                   GodIslandProtocols = 206820
	GodIslandProtocols_god_island_game_route_info_sync             GodIslandProtocols = 206822
	GodIslandProtocols_god_island_game_map_city_info               GodIslandProtocols = 206823
	GodIslandProtocols_god_island_game_event                       GodIslandProtocols = 206824
	GodIslandProtocols_god_island_game_city_buff_sync              GodIslandProtocols = 206825
	GodIslandProtocols_god_island_game_spiritualBall_info          GodIslandProtocols = 206826
	GodIslandProtocols_god_island_game_useSpiritualBall            GodIslandProtocols = 206827
	GodIslandProtocols_god_island_game_target_city_info            GodIslandProtocols = 206828
	GodIslandProtocols_god_island_game_target_city_line_info       GodIslandProtocols = 206829
	GodIslandProtocols_god_island_game_attack                      GodIslandProtocols = 206830
	GodIslandProtocols_god_island_game_auto_attack                 GodIslandProtocols = 206831
	GodIslandProtocols_god_island_game_move                        GodIslandProtocols = 206832
	GodIslandProtocols_god_island_game_event_sync                  GodIslandProtocols = 206833
	GodIslandProtocols_god_island_game_miniMap_info                GodIslandProtocols = 206834
	GodIslandProtocols_god_island_game_set_union_type              GodIslandProtocols = 206835
	GodIslandProtocols_god_island_game_plant_info                  GodIslandProtocols = 206836
	GodIslandProtocols_god_island_game_use_fruit                   GodIslandProtocols = 206837
	GodIslandProtocols_god_island_game_plant_receive_fruits        GodIslandProtocols = 206838
	GodIslandProtocols_god_island_game_plant_water                 GodIslandProtocols = 206839
	GodIslandProtocols_god_island_crystal_info                     GodIslandProtocols = 206840
	GodIslandProtocols_god_island_crystal_receive                  GodIslandProtocols = 206841
	GodIslandProtocols_god_island_game_strategy_info               GodIslandProtocols = 206842
	GodIslandProtocols_god_island_game_commander_set               GodIslandProtocols = 206843
	GodIslandProtocols_god_island_game_set_union_target            GodIslandProtocols = 206844
	GodIslandProtocols_god_island_game_for_help                    GodIslandProtocols = 206845
	GodIslandProtocols_god_island_game_city_change_sync            GodIslandProtocols = 206846
	GodIslandProtocols_god_island_game_player_win_sync             GodIslandProtocols = 206847
	GodIslandProtocols_god_island_game_line_info_sync              GodIslandProtocols = 206848
	GodIslandProtocols_god_island_game_accelerate_move             GodIslandProtocols = 206849
	GodIslandProtocols_god_island_game_myGameInfo_sync             GodIslandProtocols = 206850
	GodIslandProtocols_god_island_game_plant_Send_liquid           GodIslandProtocols = 206851
	GodIslandProtocols_god_island_game_plant_Send_liquid_record    GodIslandProtocols = 206852
	GodIslandProtocols_god_island_game_horse_lamp_sync             GodIslandProtocols = 206853
	GodIslandProtocols_god_island_suppress_buff_sync               GodIslandProtocols = 206854
	GodIslandProtocols_god_island_game_city_buff_info              GodIslandProtocols = 206855
	GodIslandProtocols_god_island_game_back_home                   GodIslandProtocols = 206856
	GodIslandProtocols_god_island_game_left_out_sync               GodIslandProtocols = 206857
	GodIslandProtocols_god_island_game_set_friend_union            GodIslandProtocols = 206858
	GodIslandProtocols_god_island_game_friend_union_sync           GodIslandProtocols = 206859
	GodIslandProtocols_god_island_game_commander_change_sync       GodIslandProtocols = 206860
	GodIslandProtocols_god_island_been_kill_sync                   GodIslandProtocols = 206861
	GodIslandProtocols_god_island_game_city_battle                 GodIslandProtocols = 206862
	GodIslandProtocols_god_island_auto_battle_stop_sync            GodIslandProtocols = 206863
	GodIslandProtocols_god_island_ghost_city_unlock_sync           GodIslandProtocols = 206864
	GodIslandProtocols_god_island_worship_back                     GodIslandProtocols = 206870
	GodIslandProtocols_god_island_union_apply                      GodIslandProtocols = 206871
	GodIslandProtocols_god_island_member_lock                      GodIslandProtocols = 206872
	GodIslandProtocols_god_island_data_sync_agent                  GodIslandProtocols = 206873
	GodIslandProtocols_god_island_game_plant_water_receive_reward  GodIslandProtocols = 206874
	GodIslandProtocols_god_island_game_plant_receive_fruits_reward GodIslandProtocols = 206875
	GodIslandProtocols_god_island_game_send_liquid_cross           GodIslandProtocols = 206876
	GodIslandProtocols_god_island_crystal_receive_back             GodIslandProtocols = 206877
	GodIslandProtocols_god_island_move_speed_up_back               GodIslandProtocols = 206878
	GodIslandProtocols_god_island_crystal_reward_after_occupied    GodIslandProtocols = 206879
	GodIslandProtocols_god_island_crystal_reward_after_end         GodIslandProtocols = 206880
	GodIslandProtocols_god_island_auto_send_reward                 GodIslandProtocols = 206881
	GodIslandProtocols_god_island_use_fruit_back                   GodIslandProtocols = 206882
	GodIslandProtocols_god_island_broadcast_agent                  GodIslandProtocols = 206883
	GodIslandProtocols_god_island_red_point_back                   GodIslandProtocols = 206884
	GodIslandProtocols_god_island_union_data_agent                 GodIslandProtocols = 206885
	GodIslandProtocols_god_island_base_info_load_back              GodIslandProtocols = 206886
)

// Enum value maps for GodIslandProtocols.
var (
	GodIslandProtocols_name = map[int32]string{
		206801: "god_island_base_info_load",
		206802: "god_island_group",
		206803: "god_island_report_data",
		206804: "god_island_report_detail",
		206805: "god_island_union_damage_info",
		206806: "god_island_union_get_member_list",
		206807: "god_island_union_group_damage_info",
		206808: "god_island_red_dot_data",
		206809: "god_island_worship",
		206810: "god_island_player_battle_report",
		206811: "god_island_update_power",
		206812: "god_island_union_battle_score_list",
		206813: "god_island_union_liquid_receive_record",
		206814: "god_island_union_member_score_list",
		206819: "god_island_heart_beat",
		206820: "god_island_game_info_load",
		206822: "god_island_game_route_info_sync",
		206823: "god_island_game_map_city_info",
		206824: "god_island_game_event",
		206825: "god_island_game_city_buff_sync",
		206826: "god_island_game_spiritualBall_info",
		206827: "god_island_game_useSpiritualBall",
		206828: "god_island_game_target_city_info",
		206829: "god_island_game_target_city_line_info",
		206830: "god_island_game_attack",
		206831: "god_island_game_auto_attack",
		206832: "god_island_game_move",
		206833: "god_island_game_event_sync",
		206834: "god_island_game_miniMap_info",
		206835: "god_island_game_set_union_type",
		206836: "god_island_game_plant_info",
		206837: "god_island_game_use_fruit",
		206838: "god_island_game_plant_receive_fruits",
		206839: "god_island_game_plant_water",
		206840: "god_island_crystal_info",
		206841: "god_island_crystal_receive",
		206842: "god_island_game_strategy_info",
		206843: "god_island_game_commander_set",
		206844: "god_island_game_set_union_target",
		206845: "god_island_game_for_help",
		206846: "god_island_game_city_change_sync",
		206847: "god_island_game_player_win_sync",
		206848: "god_island_game_line_info_sync",
		206849: "god_island_game_accelerate_move",
		206850: "god_island_game_myGameInfo_sync",
		206851: "god_island_game_plant_Send_liquid",
		206852: "god_island_game_plant_Send_liquid_record",
		206853: "god_island_game_horse_lamp_sync",
		206854: "god_island_suppress_buff_sync",
		206855: "god_island_game_city_buff_info",
		206856: "god_island_game_back_home",
		206857: "god_island_game_left_out_sync",
		206858: "god_island_game_set_friend_union",
		206859: "god_island_game_friend_union_sync",
		206860: "god_island_game_commander_change_sync",
		206861: "god_island_been_kill_sync",
		206862: "god_island_game_city_battle",
		206863: "god_island_auto_battle_stop_sync",
		206864: "god_island_ghost_city_unlock_sync",
		206870: "god_island_worship_back",
		206871: "god_island_union_apply",
		206872: "god_island_member_lock",
		206873: "god_island_data_sync_agent",
		206874: "god_island_game_plant_water_receive_reward",
		206875: "god_island_game_plant_receive_fruits_reward",
		206876: "god_island_game_send_liquid_cross",
		206877: "god_island_crystal_receive_back",
		206878: "god_island_move_speed_up_back",
		206879: "god_island_crystal_reward_after_occupied",
		206880: "god_island_crystal_reward_after_end",
		206881: "god_island_auto_send_reward",
		206882: "god_island_use_fruit_back",
		206883: "god_island_broadcast_agent",
		206884: "god_island_red_point_back",
		206885: "god_island_union_data_agent",
		206886: "god_island_base_info_load_back",
	}
	GodIslandProtocols_value = map[string]int32{
		"god_island_base_info_load":                   206801,
		"god_island_group":                            206802,
		"god_island_report_data":                      206803,
		"god_island_report_detail":                    206804,
		"god_island_union_damage_info":                206805,
		"god_island_union_get_member_list":            206806,
		"god_island_union_group_damage_info":          206807,
		"god_island_red_dot_data":                     206808,
		"god_island_worship":                          206809,
		"god_island_player_battle_report":             206810,
		"god_island_update_power":                     206811,
		"god_island_union_battle_score_list":          206812,
		"god_island_union_liquid_receive_record":      206813,
		"god_island_union_member_score_list":          206814,
		"god_island_heart_beat":                       206819,
		"god_island_game_info_load":                   206820,
		"god_island_game_route_info_sync":             206822,
		"god_island_game_map_city_info":               206823,
		"god_island_game_event":                       206824,
		"god_island_game_city_buff_sync":              206825,
		"god_island_game_spiritualBall_info":          206826,
		"god_island_game_useSpiritualBall":            206827,
		"god_island_game_target_city_info":            206828,
		"god_island_game_target_city_line_info":       206829,
		"god_island_game_attack":                      206830,
		"god_island_game_auto_attack":                 206831,
		"god_island_game_move":                        206832,
		"god_island_game_event_sync":                  206833,
		"god_island_game_miniMap_info":                206834,
		"god_island_game_set_union_type":              206835,
		"god_island_game_plant_info":                  206836,
		"god_island_game_use_fruit":                   206837,
		"god_island_game_plant_receive_fruits":        206838,
		"god_island_game_plant_water":                 206839,
		"god_island_crystal_info":                     206840,
		"god_island_crystal_receive":                  206841,
		"god_island_game_strategy_info":               206842,
		"god_island_game_commander_set":               206843,
		"god_island_game_set_union_target":            206844,
		"god_island_game_for_help":                    206845,
		"god_island_game_city_change_sync":            206846,
		"god_island_game_player_win_sync":             206847,
		"god_island_game_line_info_sync":              206848,
		"god_island_game_accelerate_move":             206849,
		"god_island_game_myGameInfo_sync":             206850,
		"god_island_game_plant_Send_liquid":           206851,
		"god_island_game_plant_Send_liquid_record":    206852,
		"god_island_game_horse_lamp_sync":             206853,
		"god_island_suppress_buff_sync":               206854,
		"god_island_game_city_buff_info":              206855,
		"god_island_game_back_home":                   206856,
		"god_island_game_left_out_sync":               206857,
		"god_island_game_set_friend_union":            206858,
		"god_island_game_friend_union_sync":           206859,
		"god_island_game_commander_change_sync":       206860,
		"god_island_been_kill_sync":                   206861,
		"god_island_game_city_battle":                 206862,
		"god_island_auto_battle_stop_sync":            206863,
		"god_island_ghost_city_unlock_sync":           206864,
		"god_island_worship_back":                     206870,
		"god_island_union_apply":                      206871,
		"god_island_member_lock":                      206872,
		"god_island_data_sync_agent":                  206873,
		"god_island_game_plant_water_receive_reward":  206874,
		"god_island_game_plant_receive_fruits_reward": 206875,
		"god_island_game_send_liquid_cross":           206876,
		"god_island_crystal_receive_back":             206877,
		"god_island_move_speed_up_back":               206878,
		"god_island_crystal_reward_after_occupied":    206879,
		"god_island_crystal_reward_after_end":         206880,
		"god_island_auto_send_reward":                 206881,
		"god_island_use_fruit_back":                   206882,
		"god_island_broadcast_agent":                  206883,
		"god_island_red_point_back":                   206884,
		"god_island_union_data_agent":                 206885,
		"god_island_base_info_load_back":              206886,
	}
)

func (x GodIslandProtocols) Enum() *GodIslandProtocols {
	p := new(GodIslandProtocols)
	*p = x
	return p
}

func (x GodIslandProtocols) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GodIslandProtocols) Descriptor() protoreflect.EnumDescriptor {
	return file_GodIsland_proto_enumTypes[0].Descriptor()
}

func (GodIslandProtocols) Type() protoreflect.EnumType {
	return &file_GodIsland_proto_enumTypes[0]
}

func (x GodIslandProtocols) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GodIslandProtocols) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GodIslandProtocols(num)
	return nil
}

// Deprecated: Use GodIslandProtocols.Descriptor instead.
func (GodIslandProtocols) EnumDescriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{0}
}

type GodIslandRedPointEnum int32

const (
	GodIslandRedPointEnum_godIslandRedNone              GodIslandRedPointEnum = 0
	GodIslandRedPointEnum_godIslandRedPowerFull         GodIslandRedPointEnum = 1
	GodIslandRedPointEnum_godIslandRedGuess             GodIslandRedPointEnum = 2
	GodIslandRedPointEnum_godIslandRedGuessReward       GodIslandRedPointEnum = 3
	GodIslandRedPointEnum_godIslandRedPlantWater        GodIslandRedPointEnum = 4
	GodIslandRedPointEnum_godIslandRedFruitReward       GodIslandRedPointEnum = 5
	GodIslandRedPointEnum_godIslandRedCrystalReward     GodIslandRedPointEnum = 6
	GodIslandRedPointEnum_godIslandRedPlayerReport      GodIslandRedPointEnum = 7
	GodIslandRedPointEnum_godIslandRedUnionReport       GodIslandRedPointEnum = 8
	GodIslandRedPointEnum_godIslandRedPlayerRankReward  GodIslandRedPointEnum = 9
	GodIslandRedPointEnum_godIslandRedPlayerUnionReward GodIslandRedPointEnum = 10
	GodIslandRedPointEnum_godIslandRedWorship           GodIslandRedPointEnum = 11
	GodIslandRedPointEnum_godIslandRedPowerUpdate       GodIslandRedPointEnum = 12
	GodIslandRedPointEnum_godIslandRedUnionRecharge     GodIslandRedPointEnum = 13
)

// Enum value maps for GodIslandRedPointEnum.
var (
	GodIslandRedPointEnum_name = map[int32]string{
		0:  "godIslandRedNone",
		1:  "godIslandRedPowerFull",
		2:  "godIslandRedGuess",
		3:  "godIslandRedGuessReward",
		4:  "godIslandRedPlantWater",
		5:  "godIslandRedFruitReward",
		6:  "godIslandRedCrystalReward",
		7:  "godIslandRedPlayerReport",
		8:  "godIslandRedUnionReport",
		9:  "godIslandRedPlayerRankReward",
		10: "godIslandRedPlayerUnionReward",
		11: "godIslandRedWorship",
		12: "godIslandRedPowerUpdate",
		13: "godIslandRedUnionRecharge",
	}
	GodIslandRedPointEnum_value = map[string]int32{
		"godIslandRedNone":              0,
		"godIslandRedPowerFull":         1,
		"godIslandRedGuess":             2,
		"godIslandRedGuessReward":       3,
		"godIslandRedPlantWater":        4,
		"godIslandRedFruitReward":       5,
		"godIslandRedCrystalReward":     6,
		"godIslandRedPlayerReport":      7,
		"godIslandRedUnionReport":       8,
		"godIslandRedPlayerRankReward":  9,
		"godIslandRedPlayerUnionReward": 10,
		"godIslandRedWorship":           11,
		"godIslandRedPowerUpdate":       12,
		"godIslandRedUnionRecharge":     13,
	}
)

func (x GodIslandRedPointEnum) Enum() *GodIslandRedPointEnum {
	p := new(GodIslandRedPointEnum)
	*p = x
	return p
}

func (x GodIslandRedPointEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GodIslandRedPointEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GodIsland_proto_enumTypes[1].Descriptor()
}

func (GodIslandRedPointEnum) Type() protoreflect.EnumType {
	return &file_GodIsland_proto_enumTypes[1]
}

func (x GodIslandRedPointEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GodIslandRedPointEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GodIslandRedPointEnum(num)
	return nil
}

// Deprecated: Use GodIslandRedPointEnum.Descriptor instead.
func (GodIslandRedPointEnum) EnumDescriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{1}
}

type GodIslandConfigSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeakHoldTimeConfigs []*ActivityPeakHoldTimeConfig `protobuf:"bytes,1,rep,name=peakHoldTimeConfigs" json:"peakHoldTimeConfigs,omitempty"`
	GroupConfig         []*GodIslandGroupConfig       `protobuf:"bytes,2,rep,name=groupConfig" json:"groupConfig,omitempty"`
	NpcEventConfig      []*GodIslandEventConfig       `protobuf:"bytes,3,rep,name=npcEventConfig" json:"npcEventConfig,omitempty"`
	CityConfig          []*GodIslandCityConfig        `protobuf:"bytes,4,rep,name=cityConfig" json:"cityConfig,omitempty"`
}

func (x *GodIslandConfigSync) Reset() {
	*x = GodIslandConfigSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandConfigSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandConfigSync) ProtoMessage() {}

func (x *GodIslandConfigSync) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandConfigSync.ProtoReflect.Descriptor instead.
func (*GodIslandConfigSync) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{0}
}

func (x *GodIslandConfigSync) GetPeakHoldTimeConfigs() []*ActivityPeakHoldTimeConfig {
	if x != nil {
		return x.PeakHoldTimeConfigs
	}
	return nil
}

func (x *GodIslandConfigSync) GetGroupConfig() []*GodIslandGroupConfig {
	if x != nil {
		return x.GroupConfig
	}
	return nil
}

func (x *GodIslandConfigSync) GetNpcEventConfig() []*GodIslandEventConfig {
	if x != nil {
		return x.NpcEventConfig
	}
	return nil
}

func (x *GodIslandConfigSync) GetCityConfig() []*GodIslandCityConfig {
	if x != nil {
		return x.CityConfig
	}
	return nil
}

type GodIslandGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RankId     *int32  `protobuf:"varint,2,req,name=rankId" json:"rankId,omitempty"`
	Size       *int32  `protobuf:"varint,3,req,name=size" json:"size,omitempty"`
	Up         *int32  `protobuf:"varint,4,req,name=up" json:"up,omitempty"`
	Down       *int32  `protobuf:"varint,5,req,name=down" json:"down,omitempty"`
	Score      *string `protobuf:"bytes,6,req,name=score" json:"score,omitempty"`
}

func (x *GodIslandGroupConfig) Reset() {
	*x = GodIslandGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGroupConfig) ProtoMessage() {}

func (x *GodIslandGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGroupConfig.ProtoReflect.Descriptor instead.
func (*GodIslandGroupConfig) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{1}
}

func (x *GodIslandGroupConfig) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGroupConfig) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *GodIslandGroupConfig) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *GodIslandGroupConfig) GetUp() int32 {
	if x != nil && x.Up != nil {
		return *x.Up
	}
	return 0
}

func (x *GodIslandGroupConfig) GetDown() int32 {
	if x != nil && x.Down != nil {
		return *x.Down
	}
	return 0
}

func (x *GodIslandGroupConfig) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

type GodIslandEventConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id         *int32  `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Type       *int32  `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Weight     *int32  `protobuf:"varint,4,req,name=weight" json:"weight,omitempty"`
	Icon       *int32  `protobuf:"varint,5,req,name=icon" json:"icon,omitempty"`
	Rewards    *string `protobuf:"bytes,6,req,name=rewards" json:"rewards,omitempty"`
	Param      *string `protobuf:"bytes,7,req,name=param" json:"param,omitempty"`
}

func (x *GodIslandEventConfig) Reset() {
	*x = GodIslandEventConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandEventConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandEventConfig) ProtoMessage() {}

func (x *GodIslandEventConfig) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandEventConfig.ProtoReflect.Descriptor instead.
func (*GodIslandEventConfig) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{2}
}

func (x *GodIslandEventConfig) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandEventConfig) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GodIslandEventConfig) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *GodIslandEventConfig) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *GodIslandEventConfig) GetIcon() int32 {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return 0
}

func (x *GodIslandEventConfig) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *GodIslandEventConfig) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

type GodIslandCityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId     *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Type           *int32  `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	PlaceParam     *string `protobuf:"bytes,3,req,name=placeParam" json:"placeParam,omitempty"`
	GuardParam     *string `protobuf:"bytes,4,req,name=guardParam" json:"guardParam,omitempty"`
	GuardMonsterId *int32  `protobuf:"varint,5,req,name=guardMonsterId" json:"guardMonsterId,omitempty"`
	RankId         *int32  `protobuf:"varint,6,req,name=rankId" json:"rankId,omitempty"`
}

func (x *GodIslandCityConfig) Reset() {
	*x = GodIslandCityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCityConfig) ProtoMessage() {}

func (x *GodIslandCityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCityConfig.ProtoReflect.Descriptor instead.
func (*GodIslandCityConfig) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{3}
}

func (x *GodIslandCityConfig) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandCityConfig) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *GodIslandCityConfig) GetPlaceParam() string {
	if x != nil && x.PlaceParam != nil {
		return *x.PlaceParam
	}
	return ""
}

func (x *GodIslandCityConfig) GetGuardParam() string {
	if x != nil && x.GuardParam != nil {
		return *x.GuardParam
	}
	return ""
}

func (x *GodIslandCityConfig) GetGuardMonsterId() int32 {
	if x != nil && x.GuardMonsterId != nil {
		return *x.GuardMonsterId
	}
	return 0
}

func (x *GodIslandCityConfig) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

type GodIslandGetJoinMemberListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGetJoinMemberListReq) Reset() {
	*x = GodIslandGetJoinMemberListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGetJoinMemberListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGetJoinMemberListReq) ProtoMessage() {}

func (x *GodIslandGetJoinMemberListReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGetJoinMemberListReq.ProtoReflect.Descriptor instead.
func (*GodIslandGetJoinMemberListReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{4}
}

func (x *GodIslandGetJoinMemberListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGetJoinMemberListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32                    `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	JoinMemberList []*GodIslandJoinMemberMsg `protobuf:"bytes,2,rep,name=joinMemberList" json:"joinMemberList,omitempty"`
	UnionExp       *int64                    `protobuf:"varint,3,opt,name=unionExp" json:"unionExp,omitempty"`
}

func (x *GodIslandGetJoinMemberListRsp) Reset() {
	*x = GodIslandGetJoinMemberListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGetJoinMemberListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGetJoinMemberListRsp) ProtoMessage() {}

func (x *GodIslandGetJoinMemberListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGetJoinMemberListRsp.ProtoReflect.Descriptor instead.
func (*GodIslandGetJoinMemberListRsp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{5}
}

func (x *GodIslandGetJoinMemberListRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGetJoinMemberListRsp) GetJoinMemberList() []*GodIslandJoinMemberMsg {
	if x != nil {
		return x.JoinMemberList
	}
	return nil
}

func (x *GodIslandGetJoinMemberListRsp) GetUnionExp() int64 {
	if x != nil && x.UnionExp != nil {
		return *x.UnionExp
	}
	return 0
}

type GodIslandJoinMemberMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadInfo   *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=headInfo" json:"headInfo,omitempty"`
	Nickname   *string            `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	FightValue *string            `protobuf:"bytes,3,opt,name=fightValue" json:"fightValue,omitempty"`
	Position   *int32             `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
}

func (x *GodIslandJoinMemberMsg) Reset() {
	*x = GodIslandJoinMemberMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandJoinMemberMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandJoinMemberMsg) ProtoMessage() {}

func (x *GodIslandJoinMemberMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandJoinMemberMsg.ProtoReflect.Descriptor instead.
func (*GodIslandJoinMemberMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{6}
}

func (x *GodIslandJoinMemberMsg) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *GodIslandJoinMemberMsg) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *GodIslandJoinMemberMsg) GetFightValue() string {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return ""
}

func (x *GodIslandJoinMemberMsg) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type GodIslandUnionRankMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseData   *UnionBaseData `protobuf:"bytes,1,opt,name=baseData" json:"baseData,omitempty"`
	Score      *int32         `protobuf:"varint,2,req,name=score" json:"score,omitempty"`
	FightValue *int64         `protobuf:"varint,3,req,name=fightValue" json:"fightValue,omitempty"`
	Rank       *int32         `protobuf:"varint,4,req,name=rank" json:"rank,omitempty"`
	MasterId   *int64         `protobuf:"varint,5,req,name=masterId" json:"masterId,omitempty"`
	MasterName *string        `protobuf:"bytes,6,req,name=masterName" json:"masterName,omitempty"`
}

func (x *GodIslandUnionRankMsg) Reset() {
	*x = GodIslandUnionRankMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionRankMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionRankMsg) ProtoMessage() {}

func (x *GodIslandUnionRankMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionRankMsg.ProtoReflect.Descriptor instead.
func (*GodIslandUnionRankMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{7}
}

func (x *GodIslandUnionRankMsg) GetBaseData() *UnionBaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *GodIslandUnionRankMsg) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *GodIslandUnionRankMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *GodIslandUnionRankMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *GodIslandUnionRankMsg) GetMasterId() int64 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

func (x *GodIslandUnionRankMsg) GetMasterName() string {
	if x != nil && x.MasterName != nil {
		return *x.MasterName
	}
	return ""
}

type GodIslandUnionRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInfo []*GodIslandUnionRankMsg `protobuf:"bytes,1,rep,name=rankInfo" json:"rankInfo,omitempty"`
}

func (x *GodIslandUnionRankList) Reset() {
	*x = GodIslandUnionRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionRankList) ProtoMessage() {}

func (x *GodIslandUnionRankList) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionRankList.ProtoReflect.Descriptor instead.
func (*GodIslandUnionRankList) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{8}
}

func (x *GodIslandUnionRankList) GetRankInfo() []*GodIslandUnionRankMsg {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

type GodIslandPlayerRankMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       *int64                   `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	PlayerBaseData *PlayerCharacterImageMsg `protobuf:"bytes,2,req,name=playerBaseData" json:"playerBaseData,omitempty"`
	Value          *string                  `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
	Rank           *int32                   `protobuf:"varint,4,req,name=rank" json:"rank,omitempty"`
}

func (x *GodIslandPlayerRankMsg) Reset() {
	*x = GodIslandPlayerRankMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerRankMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerRankMsg) ProtoMessage() {}

func (x *GodIslandPlayerRankMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerRankMsg.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerRankMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{9}
}

func (x *GodIslandPlayerRankMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodIslandPlayerRankMsg) GetPlayerBaseData() *PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerBaseData
	}
	return nil
}

func (x *GodIslandPlayerRankMsg) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *GodIslandPlayerRankMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type GodIslandPlayerRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInfo []*GodIslandPlayerRankMsg `protobuf:"bytes,1,rep,name=rankInfo" json:"rankInfo,omitempty"`
}

func (x *GodIslandPlayerRankList) Reset() {
	*x = GodIslandPlayerRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerRankList) ProtoMessage() {}

func (x *GodIslandPlayerRankList) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerRankList.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerRankList) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{10}
}

func (x *GodIslandPlayerRankList) GetRankInfo() []*GodIslandPlayerRankMsg {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

type GodIslandBaseInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandBaseInfoReqMsg) Reset() {
	*x = GodIslandBaseInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBaseInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBaseInfoReqMsg) ProtoMessage() {}

func (x *GodIslandBaseInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBaseInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandBaseInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{11}
}

func (x *GodIslandBaseInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandBaseInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	ActivityId      *int32                     `protobuf:"varint,2,opt,name=activityId" json:"activityId,omitempty"`
	SelfRank        *int32                     `protobuf:"varint,3,opt,name=selfRank" json:"selfRank,omitempty"`
	Group           *int32                     `protobuf:"varint,4,opt,name=group" json:"group,omitempty"`
	Floor           *int32                     `protobuf:"varint,5,opt,name=floor" json:"floor,omitempty"`
	UnionId         *int64                     `protobuf:"varint,6,opt,name=unionId" json:"unionId,omitempty"`
	Position        *int32                     `protobuf:"varint,7,opt,name=position" json:"position,omitempty"`
	RoundSettleInfo *GodIslandRoundSettleData  `protobuf:"bytes,8,opt,name=roundSettleInfo" json:"roundSettleInfo,omitempty"`
	FloorGroupList  []*FloorGroupCountMsg      `protobuf:"bytes,9,rep,name=floorGroupList" json:"floorGroupList,omitempty"`
	WorshipPlayer   *GodIslandWorshipPlayerMsg `protobuf:"bytes,10,opt,name=worshipPlayer" json:"worshipPlayer,omitempty"`
	Top3Union       []*UnionBaseData           `protobuf:"bytes,11,rep,name=top3Union" json:"top3Union,omitempty"`
	CanWorship      *bool                      `protobuf:"varint,12,opt,name=canWorship" json:"canWorship,omitempty"`
}

func (x *GodIslandBaseInfoRespMsg) Reset() {
	*x = GodIslandBaseInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBaseInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBaseInfoRespMsg) ProtoMessage() {}

func (x *GodIslandBaseInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBaseInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandBaseInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{12}
}

func (x *GodIslandBaseInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandBaseInfoRespMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandBaseInfoRespMsg) GetSelfRank() int32 {
	if x != nil && x.SelfRank != nil {
		return *x.SelfRank
	}
	return 0
}

func (x *GodIslandBaseInfoRespMsg) GetGroup() int32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

func (x *GodIslandBaseInfoRespMsg) GetFloor() int32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return 0
}

func (x *GodIslandBaseInfoRespMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandBaseInfoRespMsg) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *GodIslandBaseInfoRespMsg) GetRoundSettleInfo() *GodIslandRoundSettleData {
	if x != nil {
		return x.RoundSettleInfo
	}
	return nil
}

func (x *GodIslandBaseInfoRespMsg) GetFloorGroupList() []*FloorGroupCountMsg {
	if x != nil {
		return x.FloorGroupList
	}
	return nil
}

func (x *GodIslandBaseInfoRespMsg) GetWorshipPlayer() *GodIslandWorshipPlayerMsg {
	if x != nil {
		return x.WorshipPlayer
	}
	return nil
}

func (x *GodIslandBaseInfoRespMsg) GetTop3Union() []*UnionBaseData {
	if x != nil {
		return x.Top3Union
	}
	return nil
}

func (x *GodIslandBaseInfoRespMsg) GetCanWorship() bool {
	if x != nil && x.CanWorship != nil {
		return *x.CanWorship
	}
	return false
}

type FloorGroupCountMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloorId    *int32 `protobuf:"varint,1,opt,name=floorId" json:"floorId,omitempty"`
	GroupCount *int32 `protobuf:"varint,2,opt,name=groupCount" json:"groupCount,omitempty"`
}

func (x *FloorGroupCountMsg) Reset() {
	*x = FloorGroupCountMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloorGroupCountMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloorGroupCountMsg) ProtoMessage() {}

func (x *FloorGroupCountMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloorGroupCountMsg.ProtoReflect.Descriptor instead.
func (*FloorGroupCountMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{13}
}

func (x *FloorGroupCountMsg) GetFloorId() int32 {
	if x != nil && x.FloorId != nil {
		return *x.FloorId
	}
	return 0
}

func (x *FloorGroupCountMsg) GetGroupCount() int32 {
	if x != nil && x.GroupCount != nil {
		return *x.GroupCount
	}
	return 0
}

type GodIslandRoundSettleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round           *int32  `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
	Statues         *int32  `protobuf:"varint,2,opt,name=statues" json:"statues,omitempty"`
	GroupRank       *int32  `protobuf:"varint,3,opt,name=groupRank" json:"groupRank,omitempty"`
	Rank            *int32  `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	RankScore       *int32  `protobuf:"varint,5,opt,name=rankScore" json:"rankScore,omitempty"`
	TotalScore      *int32  `protobuf:"varint,6,opt,name=totalScore" json:"totalScore,omitempty"`
	CityCount       *int32  `protobuf:"varint,7,opt,name=cityCount" json:"cityCount,omitempty"`
	PlayerKillCount *int32  `protobuf:"varint,8,opt,name=playerKillCount" json:"playerKillCount,omitempty"`
	UnionName       *string `protobuf:"bytes,9,opt,name=unionName" json:"unionName,omitempty"`
	FirstUnionName  *string `protobuf:"bytes,10,opt,name=first_unionName,json=firstUnionName" json:"first_unionName,omitempty"`
	FirstServerId   *int64  `protobuf:"varint,11,opt,name=first_serverId,json=firstServerId" json:"first_serverId,omitempty"`
	FirstUnionFlag  *int64  `protobuf:"varint,12,opt,name=first_unionFlag,json=firstUnionFlag" json:"first_unionFlag,omitempty"`
	Floor           *int32  `protobuf:"varint,13,opt,name=floor" json:"floor,omitempty"`
	Group           *int32  `protobuf:"varint,14,opt,name=group" json:"group,omitempty"`
}

func (x *GodIslandRoundSettleData) Reset() {
	*x = GodIslandRoundSettleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandRoundSettleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandRoundSettleData) ProtoMessage() {}

func (x *GodIslandRoundSettleData) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandRoundSettleData.ProtoReflect.Descriptor instead.
func (*GodIslandRoundSettleData) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{14}
}

func (x *GodIslandRoundSettleData) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetStatues() int32 {
	if x != nil && x.Statues != nil {
		return *x.Statues
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetGroupRank() int32 {
	if x != nil && x.GroupRank != nil {
		return *x.GroupRank
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetRankScore() int32 {
	if x != nil && x.RankScore != nil {
		return *x.RankScore
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetTotalScore() int32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetCityCount() int32 {
	if x != nil && x.CityCount != nil {
		return *x.CityCount
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetPlayerKillCount() int32 {
	if x != nil && x.PlayerKillCount != nil {
		return *x.PlayerKillCount
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandRoundSettleData) GetFirstUnionName() string {
	if x != nil && x.FirstUnionName != nil {
		return *x.FirstUnionName
	}
	return ""
}

func (x *GodIslandRoundSettleData) GetFirstServerId() int64 {
	if x != nil && x.FirstServerId != nil {
		return *x.FirstServerId
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetFirstUnionFlag() int64 {
	if x != nil && x.FirstUnionFlag != nil {
		return *x.FirstUnionFlag
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetFloor() int32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return 0
}

func (x *GodIslandRoundSettleData) GetGroup() int32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

type GodIslandWorshipPlayerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId         *int64             `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId         *int64             `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
	NickName         *string            `protobuf:"bytes,3,req,name=nickName" json:"nickName,omitempty"`
	Pet              []int32            `protobuf:"varint,4,rep,name=pet" json:"pet,omitempty"`
	Spirit           []int32            `protobuf:"varint,5,rep,name=spirit" json:"spirit,omitempty"`
	AppearanceId     *int32             `protobuf:"varint,6,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId     *int32             `protobuf:"varint,7,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	RealmsId         *int32             `protobuf:"varint,8,opt,name=realmsId" json:"realmsId,omitempty"`
	Rank             *int32             `protobuf:"varint,10,opt,name=rank" json:"rank,omitempty"`
	HeadInfo         *PlayerHeadDataMsg `protobuf:"bytes,13,opt,name=headInfo" json:"headInfo,omitempty"`
	PetSoulShapeList []int32            `protobuf:"varint,14,rep,name=petSoulShapeList" json:"petSoulShapeList,omitempty"`
	TitleId          *int32             `protobuf:"varint,15,opt,name=titleId" json:"titleId,omitempty"`
	PetLinkageId     []int32            `protobuf:"varint,16,rep,name=petLinkageId" json:"petLinkageId,omitempty"`
	SpiritLinkageId  []int32            `protobuf:"varint,17,rep,name=spiritLinkageId" json:"spiritLinkageId,omitempty"`
}

func (x *GodIslandWorshipPlayerMsg) Reset() {
	*x = GodIslandWorshipPlayerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandWorshipPlayerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandWorshipPlayerMsg) ProtoMessage() {}

func (x *GodIslandWorshipPlayerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandWorshipPlayerMsg.ProtoReflect.Descriptor instead.
func (*GodIslandWorshipPlayerMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{15}
}

func (x *GodIslandWorshipPlayerMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodIslandWorshipPlayerMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *GodIslandWorshipPlayerMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *GodIslandWorshipPlayerMsg) GetPet() []int32 {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *GodIslandWorshipPlayerMsg) GetSpirit() []int32 {
	if x != nil {
		return x.Spirit
	}
	return nil
}

func (x *GodIslandWorshipPlayerMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *GodIslandWorshipPlayerMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *GodIslandWorshipPlayerMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *GodIslandWorshipPlayerMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *GodIslandWorshipPlayerMsg) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *GodIslandWorshipPlayerMsg) GetPetSoulShapeList() []int32 {
	if x != nil {
		return x.PetSoulShapeList
	}
	return nil
}

func (x *GodIslandWorshipPlayerMsg) GetTitleId() int32 {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return 0
}

func (x *GodIslandWorshipPlayerMsg) GetPetLinkageId() []int32 {
	if x != nil {
		return x.PetLinkageId
	}
	return nil
}

func (x *GodIslandWorshipPlayerMsg) GetSpiritLinkageId() []int32 {
	if x != nil {
		return x.SpiritLinkageId
	}
	return nil
}

type GodIslandUnionDamageReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *GodIslandUnionDamageReqMsg) Reset() {
	*x = GodIslandUnionDamageReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionDamageReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionDamageReqMsg) ProtoMessage() {}

func (x *GodIslandUnionDamageReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionDamageReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandUnionDamageReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{16}
}

func (x *GodIslandUnionDamageReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandUnionDamageReqMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type GodIslandUnionDamageRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionId    *int64                     `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	UnionName  *string                    `protobuf:"bytes,3,opt,name=unionName" json:"unionName,omitempty"`
	PlayerInfo []*GodIslandPlayerBaseInfo `protobuf:"bytes,4,rep,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *GodIslandUnionDamageRespMsg) Reset() {
	*x = GodIslandUnionDamageRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionDamageRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionDamageRespMsg) ProtoMessage() {}

func (x *GodIslandUnionDamageRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionDamageRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandUnionDamageRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{17}
}

func (x *GodIslandUnionDamageRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandUnionDamageRespMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandUnionDamageRespMsg) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandUnionDamageRespMsg) GetPlayerInfo() []*GodIslandPlayerBaseInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type GodIslandPlayerBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   *int64  `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	MemberName *string `protobuf:"bytes,2,req,name=memberName" json:"memberName,omitempty"`
	Score      *string `protobuf:"bytes,3,req,name=score" json:"score,omitempty"`
}

func (x *GodIslandPlayerBaseInfo) Reset() {
	*x = GodIslandPlayerBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerBaseInfo) ProtoMessage() {}

func (x *GodIslandPlayerBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerBaseInfo.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerBaseInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{18}
}

func (x *GodIslandPlayerBaseInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodIslandPlayerBaseInfo) GetMemberName() string {
	if x != nil && x.MemberName != nil {
		return *x.MemberName
	}
	return ""
}

func (x *GodIslandPlayerBaseInfo) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

type GodIslandGroupReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	FloorId    *int32 `protobuf:"varint,2,req,name=floorId" json:"floorId,omitempty"`
	GroupId    *int32 `protobuf:"varint,3,req,name=groupId" json:"groupId,omitempty"`
}

func (x *GodIslandGroupReqMsg) Reset() {
	*x = GodIslandGroupReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGroupReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGroupReqMsg) ProtoMessage() {}

func (x *GodIslandGroupReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGroupReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGroupReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{19}
}

func (x *GodIslandGroupReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGroupReqMsg) GetFloorId() int32 {
	if x != nil && x.FloorId != nil {
		return *x.FloorId
	}
	return 0
}

func (x *GodIslandGroupReqMsg) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type GodIslandGroupRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                   `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	GroupId   *int32                   `protobuf:"varint,2,opt,name=groupId" json:"groupId,omitempty"`
	FloorId   *int32                   `protobuf:"varint,3,req,name=floorId" json:"floorId,omitempty"`
	GroupInfo []*GodIslandGroupBaseMsg `protobuf:"bytes,4,rep,name=groupInfo" json:"groupInfo,omitempty"`
}

func (x *GodIslandGroupRespMsg) Reset() {
	*x = GodIslandGroupRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGroupRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGroupRespMsg) ProtoMessage() {}

func (x *GodIslandGroupRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGroupRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGroupRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{20}
}

func (x *GodIslandGroupRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGroupRespMsg) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *GodIslandGroupRespMsg) GetFloorId() int32 {
	if x != nil && x.FloorId != nil {
		return *x.FloorId
	}
	return 0
}

func (x *GodIslandGroupRespMsg) GetGroupInfo() []*GodIslandGroupBaseMsg {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

type GodIslandGroupBaseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId    *int64  `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	UnionName  *string `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	Flag       *int32  `protobuf:"varint,3,opt,name=flag" json:"flag,omitempty"`
	MasterName *string `protobuf:"bytes,4,opt,name=masterName" json:"masterName,omitempty"`
	Rank       *int32  `protobuf:"varint,5,opt,name=rank" json:"rank,omitempty"`
	CityScore  *int64  `protobuf:"varint,6,opt,name=cityScore" json:"cityScore,omitempty"`
	ServerId   *int64  `protobuf:"varint,7,opt,name=serverId" json:"serverId,omitempty"`
}

func (x *GodIslandGroupBaseMsg) Reset() {
	*x = GodIslandGroupBaseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGroupBaseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGroupBaseMsg) ProtoMessage() {}

func (x *GodIslandGroupBaseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGroupBaseMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGroupBaseMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{21}
}

func (x *GodIslandGroupBaseMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandGroupBaseMsg) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandGroupBaseMsg) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *GodIslandGroupBaseMsg) GetMasterName() string {
	if x != nil && x.MasterName != nil {
		return *x.MasterName
	}
	return ""
}

func (x *GodIslandGroupBaseMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *GodIslandGroupBaseMsg) GetCityScore() int64 {
	if x != nil && x.CityScore != nil {
		return *x.CityScore
	}
	return 0
}

func (x *GodIslandGroupBaseMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type GodIslandReportReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *GodIslandReportReqMsg) Reset() {
	*x = GodIslandReportReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandReportReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandReportReqMsg) ProtoMessage() {}

func (x *GodIslandReportReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandReportReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandReportReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{22}
}

func (x *GodIslandReportReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandReportReqMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type GodIslandReportRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionId     *int64                       `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	CityReports []*GodIslandCityBattleReport `protobuf:"bytes,3,rep,name=cityReports" json:"cityReports,omitempty"`
	UnionName   *string                      `protobuf:"bytes,4,opt,name=unionName" json:"unionName,omitempty"`
}

func (x *GodIslandReportRespMsg) Reset() {
	*x = GodIslandReportRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandReportRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandReportRespMsg) ProtoMessage() {}

func (x *GodIslandReportRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandReportRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandReportRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{23}
}

func (x *GodIslandReportRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandReportRespMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandReportRespMsg) GetCityReports() []*GodIslandCityBattleReport {
	if x != nil {
		return x.CityReports
	}
	return nil
}

func (x *GodIslandReportRespMsg) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

type GodIslandCityBattleReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportUid      *int64  `protobuf:"varint,1,opt,name=reportUid" json:"reportUid,omitempty"`
	Win            *bool   `protobuf:"varint,2,opt,name=win" json:"win,omitempty"`
	Time           *int64  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	CityId         *int32  `protobuf:"varint,4,opt,name=cityId" json:"cityId,omitempty"`
	EnemyUnionSid  *int64  `protobuf:"varint,5,opt,name=enemyUnionSid" json:"enemyUnionSid,omitempty"`
	EnemyUnionName *string `protobuf:"bytes,6,opt,name=enemyUnionName" json:"enemyUnionName,omitempty"`
	DetailCount    *int32  `protobuf:"varint,8,opt,name=detailCount" json:"detailCount,omitempty"`
}

func (x *GodIslandCityBattleReport) Reset() {
	*x = GodIslandCityBattleReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCityBattleReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCityBattleReport) ProtoMessage() {}

func (x *GodIslandCityBattleReport) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCityBattleReport.ProtoReflect.Descriptor instead.
func (*GodIslandCityBattleReport) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{24}
}

func (x *GodIslandCityBattleReport) GetReportUid() int64 {
	if x != nil && x.ReportUid != nil {
		return *x.ReportUid
	}
	return 0
}

func (x *GodIslandCityBattleReport) GetWin() bool {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return false
}

func (x *GodIslandCityBattleReport) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *GodIslandCityBattleReport) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandCityBattleReport) GetEnemyUnionSid() int64 {
	if x != nil && x.EnemyUnionSid != nil {
		return *x.EnemyUnionSid
	}
	return 0
}

func (x *GodIslandCityBattleReport) GetEnemyUnionName() string {
	if x != nil && x.EnemyUnionName != nil {
		return *x.EnemyUnionName
	}
	return ""
}

func (x *GodIslandCityBattleReport) GetDetailCount() int32 {
	if x != nil && x.DetailCount != nil {
		return *x.DetailCount
	}
	return 0
}

type GodIslandReportDetailReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	ReportUid  *int64 `protobuf:"varint,2,req,name=reportUid" json:"reportUid,omitempty"`
	From       *int32 `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	Size       *int32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (x *GodIslandReportDetailReqMsg) Reset() {
	*x = GodIslandReportDetailReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandReportDetailReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandReportDetailReqMsg) ProtoMessage() {}

func (x *GodIslandReportDetailReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandReportDetailReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandReportDetailReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{25}
}

func (x *GodIslandReportDetailReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandReportDetailReqMsg) GetReportUid() int64 {
	if x != nil && x.ReportUid != nil {
		return *x.ReportUid
	}
	return 0
}

func (x *GodIslandReportDetailReqMsg) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *GodIslandReportDetailReqMsg) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type GodIslandReportDetailRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	ReportUid     *int64                       `protobuf:"varint,2,opt,name=reportUid" json:"reportUid,omitempty"`
	ReportDetails []*GodIslandCityReportDetail `protobuf:"bytes,3,rep,name=reportDetails" json:"reportDetails,omitempty"`
	From          *int32                       `protobuf:"varint,4,opt,name=from" json:"from,omitempty"`
}

func (x *GodIslandReportDetailRespMsg) Reset() {
	*x = GodIslandReportDetailRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandReportDetailRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandReportDetailRespMsg) ProtoMessage() {}

func (x *GodIslandReportDetailRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandReportDetailRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandReportDetailRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{26}
}

func (x *GodIslandReportDetailRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandReportDetailRespMsg) GetReportUid() int64 {
	if x != nil && x.ReportUid != nil {
		return *x.ReportUid
	}
	return 0
}

func (x *GodIslandReportDetailRespMsg) GetReportDetails() []*GodIslandCityReportDetail {
	if x != nil {
		return x.ReportDetails
	}
	return nil
}

func (x *GodIslandReportDetailRespMsg) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

type GodIslandCityReportDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackHeadInfo   *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=attackHeadInfo" json:"attackHeadInfo,omitempty"`
	AttackName       *string            `protobuf:"bytes,2,opt,name=attackName" json:"attackName,omitempty"`
	BeAttackHeadInfo *PlayerHeadDataMsg `protobuf:"bytes,3,opt,name=beAttackHeadInfo" json:"beAttackHeadInfo,omitempty"`
	BeAttackName     *string            `protobuf:"bytes,4,opt,name=beAttackName" json:"beAttackName,omitempty"`
	AttackWin        *bool              `protobuf:"varint,5,opt,name=attackWin" json:"attackWin,omitempty"`
	AttackPower      *int64             `protobuf:"varint,6,opt,name=attackPower" json:"attackPower,omitempty"`
	BeAttackPower    *int64             `protobuf:"varint,7,opt,name=beAttackPower" json:"beAttackPower,omitempty"`
}

func (x *GodIslandCityReportDetail) Reset() {
	*x = GodIslandCityReportDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCityReportDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCityReportDetail) ProtoMessage() {}

func (x *GodIslandCityReportDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCityReportDetail.ProtoReflect.Descriptor instead.
func (*GodIslandCityReportDetail) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{27}
}

func (x *GodIslandCityReportDetail) GetAttackHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.AttackHeadInfo
	}
	return nil
}

func (x *GodIslandCityReportDetail) GetAttackName() string {
	if x != nil && x.AttackName != nil {
		return *x.AttackName
	}
	return ""
}

func (x *GodIslandCityReportDetail) GetBeAttackHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.BeAttackHeadInfo
	}
	return nil
}

func (x *GodIslandCityReportDetail) GetBeAttackName() string {
	if x != nil && x.BeAttackName != nil {
		return *x.BeAttackName
	}
	return ""
}

func (x *GodIslandCityReportDetail) GetAttackWin() bool {
	if x != nil && x.AttackWin != nil {
		return *x.AttackWin
	}
	return false
}

func (x *GodIslandCityReportDetail) GetAttackPower() int64 {
	if x != nil && x.AttackPower != nil {
		return *x.AttackPower
	}
	return 0
}

func (x *GodIslandCityReportDetail) GetBeAttackPower() int64 {
	if x != nil && x.BeAttackPower != nil {
		return *x.BeAttackPower
	}
	return 0
}

type GodIslandCityReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName *string `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	Score    *string `protobuf:"bytes,2,opt,name=score" json:"score,omitempty"`
}

func (x *GodIslandCityReportItem) Reset() {
	*x = GodIslandCityReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCityReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCityReportItem) ProtoMessage() {}

func (x *GodIslandCityReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCityReportItem.ProtoReflect.Descriptor instead.
func (*GodIslandCityReportItem) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{28}
}

func (x *GodIslandCityReportItem) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *GodIslandCityReportItem) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

type GodIslandWorshipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandWorshipReq) Reset() {
	*x = GodIslandWorshipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandWorshipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandWorshipReq) ProtoMessage() {}

func (x *GodIslandWorshipReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandWorshipReq.ProtoReflect.Descriptor instead.
func (*GodIslandWorshipReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{29}
}

func (x *GodIslandWorshipReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandWorshipResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward        *string                    `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	WorshipPlayer *GodIslandWorshipPlayerMsg `protobuf:"bytes,3,opt,name=worshipPlayer" json:"worshipPlayer,omitempty"`
}

func (x *GodIslandWorshipResp) Reset() {
	*x = GodIslandWorshipResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandWorshipResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandWorshipResp) ProtoMessage() {}

func (x *GodIslandWorshipResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandWorshipResp.ProtoReflect.Descriptor instead.
func (*GodIslandWorshipResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{30}
}

func (x *GodIslandWorshipResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandWorshipResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *GodIslandWorshipResp) GetWorshipPlayer() *GodIslandWorshipPlayerMsg {
	if x != nil {
		return x.WorshipPlayer
	}
	return nil
}

type GodIslandRedDotReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandRedDotReqMsg) Reset() {
	*x = GodIslandRedDotReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandRedDotReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandRedDotReqMsg) ProtoMessage() {}

func (x *GodIslandRedDotReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandRedDotReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandRedDotReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{31}
}

func (x *GodIslandRedDotReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandRedDotRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *GodIslandRedDotRespMsg) Reset() {
	*x = GodIslandRedDotRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandRedDotRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandRedDotRespMsg) ProtoMessage() {}

func (x *GodIslandRedDotRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandRedDotRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandRedDotRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{32}
}

func (x *GodIslandRedDotRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandRedDotRespMsg) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type GodIslandBetUnionInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList []*GodIslandBetUnionInfo `protobuf:"bytes,1,rep,name=infoList" json:"infoList,omitempty"`
}

func (x *GodIslandBetUnionInfoList) Reset() {
	*x = GodIslandBetUnionInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBetUnionInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBetUnionInfoList) ProtoMessage() {}

func (x *GodIslandBetUnionInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBetUnionInfoList.ProtoReflect.Descriptor instead.
func (*GodIslandBetUnionInfoList) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{33}
}

func (x *GodIslandBetUnionInfoList) GetInfoList() []*GodIslandBetUnionInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type GodIslandBetUnionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInfo      *GodIslandUnionRankMsg `protobuf:"bytes,1,opt,name=rankInfo" json:"rankInfo,omitempty"`
	SelectedCount *int32                 `protobuf:"varint,2,opt,name=selectedCount" json:"selectedCount,omitempty"`
}

func (x *GodIslandBetUnionInfo) Reset() {
	*x = GodIslandBetUnionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBetUnionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBetUnionInfo) ProtoMessage() {}

func (x *GodIslandBetUnionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBetUnionInfo.ProtoReflect.Descriptor instead.
func (*GodIslandBetUnionInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{34}
}

func (x *GodIslandBetUnionInfo) GetRankInfo() *GodIslandUnionRankMsg {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

func (x *GodIslandBetUnionInfo) GetSelectedCount() int32 {
	if x != nil && x.SelectedCount != nil {
		return *x.SelectedCount
	}
	return 0
}

type GodIslandSettleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeId     *int32 `protobuf:"varint,1,opt,name=timeId" json:"timeId,omitempty"`
	Upgrade    *bool  `protobuf:"varint,2,opt,name=upgrade" json:"upgrade,omitempty"`
	Rank       *int32 `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	GroupRank  *int32 `protobuf:"varint,4,opt,name=groupRank" json:"groupRank,omitempty"`
	RiseScore  *int32 `protobuf:"varint,5,opt,name=riseScore" json:"riseScore,omitempty"`
	TotalScore *int32 `protobuf:"varint,6,opt,name=totalScore" json:"totalScore,omitempty"`
}

func (x *GodIslandSettleData) Reset() {
	*x = GodIslandSettleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandSettleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandSettleData) ProtoMessage() {}

func (x *GodIslandSettleData) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandSettleData.ProtoReflect.Descriptor instead.
func (*GodIslandSettleData) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{35}
}

func (x *GodIslandSettleData) GetTimeId() int32 {
	if x != nil && x.TimeId != nil {
		return *x.TimeId
	}
	return 0
}

func (x *GodIslandSettleData) GetUpgrade() bool {
	if x != nil && x.Upgrade != nil {
		return *x.Upgrade
	}
	return false
}

func (x *GodIslandSettleData) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *GodIslandSettleData) GetGroupRank() int32 {
	if x != nil && x.GroupRank != nil {
		return *x.GroupRank
	}
	return 0
}

func (x *GodIslandSettleData) GetRiseScore() int32 {
	if x != nil && x.RiseScore != nil {
		return *x.RiseScore
	}
	return 0
}

func (x *GodIslandSettleData) GetTotalScore() int32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

type GodIslandUnionGroupDamageReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *GodIslandUnionGroupDamageReqMsg) Reset() {
	*x = GodIslandUnionGroupDamageReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionGroupDamageReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionGroupDamageReqMsg) ProtoMessage() {}

func (x *GodIslandUnionGroupDamageReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionGroupDamageReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandUnionGroupDamageReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{36}
}

func (x *GodIslandUnionGroupDamageReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandUnionGroupDamageReqMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type GodIslandUnionGroupDamageRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionId   *int64                     `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	UnionName *string                    `protobuf:"bytes,3,opt,name=unionName" json:"unionName,omitempty"`
	Info      []*GodIslandGroupScoreInfo `protobuf:"bytes,4,rep,name=info" json:"info,omitempty"`
}

func (x *GodIslandUnionGroupDamageRespMsg) Reset() {
	*x = GodIslandUnionGroupDamageRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionGroupDamageRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionGroupDamageRespMsg) ProtoMessage() {}

func (x *GodIslandUnionGroupDamageRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionGroupDamageRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandUnionGroupDamageRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{37}
}

func (x *GodIslandUnionGroupDamageRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandUnionGroupDamageRespMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandUnionGroupDamageRespMsg) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandUnionGroupDamageRespMsg) GetInfo() []*GodIslandGroupScoreInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GodIslandGroupScoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   *int32 `protobuf:"varint,1,req,name=groupId" json:"groupId,omitempty"`
	Rank      *int32 `protobuf:"varint,2,req,name=rank" json:"rank,omitempty"`
	CityScore *int64 `protobuf:"varint,3,req,name=cityScore" json:"cityScore,omitempty"`
	Point     *int32 `protobuf:"varint,4,req,name=point" json:"point,omitempty"`
	Floor     *int32 `protobuf:"varint,5,req,name=floor" json:"floor,omitempty"`
}

func (x *GodIslandGroupScoreInfo) Reset() {
	*x = GodIslandGroupScoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGroupScoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGroupScoreInfo) ProtoMessage() {}

func (x *GodIslandGroupScoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGroupScoreInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGroupScoreInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{38}
}

func (x *GodIslandGroupScoreInfo) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *GodIslandGroupScoreInfo) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *GodIslandGroupScoreInfo) GetCityScore() int64 {
	if x != nil && x.CityScore != nil {
		return *x.CityScore
	}
	return 0
}

func (x *GodIslandGroupScoreInfo) GetPoint() int32 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

func (x *GodIslandGroupScoreInfo) GetFloor() int32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return 0
}

type GodIslandHeartBeatReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandHeartBeatReqMsg) Reset() {
	*x = GodIslandHeartBeatReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandHeartBeatReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandHeartBeatReqMsg) ProtoMessage() {}

func (x *GodIslandHeartBeatReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandHeartBeatReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandHeartBeatReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{39}
}

func (x *GodIslandHeartBeatReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandHeartBeatRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandHeartBeatRespMsg) Reset() {
	*x = GodIslandHeartBeatRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandHeartBeatRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandHeartBeatRespMsg) ProtoMessage() {}

func (x *GodIslandHeartBeatRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandHeartBeatRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandHeartBeatRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{40}
}

func (x *GodIslandHeartBeatRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandGameInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGameInfoReqMsg) Reset() {
	*x = GodIslandGameInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{41}
}

func (x *GodIslandGameInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGameInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Home            *int32                       `protobuf:"varint,2,opt,name=home" json:"home,omitempty"`
	NpcEvents       []*GodIslandNpcEvent         `protobuf:"bytes,3,rep,name=npcEvents" json:"npcEvents,omitempty"`
	FriendUnions    []int64                      `protobuf:"varint,4,rep,name=friendUnions" json:"friendUnions,omitempty"`
	MyRouteInfo     *GodIslandGameRouteInfo      `protobuf:"bytes,5,opt,name=myRouteInfo" json:"myRouteInfo,omitempty"`
	CityBuffInfo    []*GodIslandGameCityBuffInfo `protobuf:"bytes,6,rep,name=cityBuffInfo" json:"cityBuffInfo,omitempty"`
	Leftout         *bool                        `protobuf:"varint,7,opt,name=leftout" json:"leftout,omitempty"`
	Location        *int32                       `protobuf:"varint,8,opt,name=location" json:"location,omitempty"`
	SpeedUpCount    *int32                       `protobuf:"varint,9,opt,name=speedUpCount" json:"speedUpCount,omitempty"`
	HaveCommand     *bool                        `protobuf:"varint,11,opt,name=haveCommand" json:"haveCommand,omitempty"`
	CurPower        *string                      `protobuf:"bytes,12,opt,name=curPower" json:"curPower,omitempty"`
	MaxPower        *string                      `protobuf:"bytes,13,opt,name=maxPower" json:"maxPower,omitempty"`
	AutoAtkCityId   *int32                       `protobuf:"varint,14,opt,name=autoAtkCityId" json:"autoAtkCityId,omitempty"`
	AttackCd        *int64                       `protobuf:"varint,15,opt,name=attackCd" json:"attackCd,omitempty"`
	UnlockGhostCity *bool                        `protobuf:"varint,16,opt,name=unlockGhostCity" json:"unlockGhostCity,omitempty"`
	SuppressBuff    *bool                        `protobuf:"varint,17,opt,name=suppressBuff" json:"suppressBuff,omitempty"`
	OnlyAttackNpc   *bool                        `protobuf:"varint,18,opt,name=onlyAttackNpc" json:"onlyAttackNpc,omitempty"`
	DeadWeakEffect  *GodIslandDeadWeakEffectMsg  `protobuf:"bytes,19,opt,name=deadWeakEffect" json:"deadWeakEffect,omitempty"`
}

func (x *GodIslandGameInfoRespMsg) Reset() {
	*x = GodIslandGameInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{42}
}

func (x *GodIslandGameInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameInfoRespMsg) GetHome() int32 {
	if x != nil && x.Home != nil {
		return *x.Home
	}
	return 0
}

func (x *GodIslandGameInfoRespMsg) GetNpcEvents() []*GodIslandNpcEvent {
	if x != nil {
		return x.NpcEvents
	}
	return nil
}

func (x *GodIslandGameInfoRespMsg) GetFriendUnions() []int64 {
	if x != nil {
		return x.FriendUnions
	}
	return nil
}

func (x *GodIslandGameInfoRespMsg) GetMyRouteInfo() *GodIslandGameRouteInfo {
	if x != nil {
		return x.MyRouteInfo
	}
	return nil
}

func (x *GodIslandGameInfoRespMsg) GetCityBuffInfo() []*GodIslandGameCityBuffInfo {
	if x != nil {
		return x.CityBuffInfo
	}
	return nil
}

func (x *GodIslandGameInfoRespMsg) GetLeftout() bool {
	if x != nil && x.Leftout != nil {
		return *x.Leftout
	}
	return false
}

func (x *GodIslandGameInfoRespMsg) GetLocation() int32 {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return 0
}

func (x *GodIslandGameInfoRespMsg) GetSpeedUpCount() int32 {
	if x != nil && x.SpeedUpCount != nil {
		return *x.SpeedUpCount
	}
	return 0
}

func (x *GodIslandGameInfoRespMsg) GetHaveCommand() bool {
	if x != nil && x.HaveCommand != nil {
		return *x.HaveCommand
	}
	return false
}

func (x *GodIslandGameInfoRespMsg) GetCurPower() string {
	if x != nil && x.CurPower != nil {
		return *x.CurPower
	}
	return ""
}

func (x *GodIslandGameInfoRespMsg) GetMaxPower() string {
	if x != nil && x.MaxPower != nil {
		return *x.MaxPower
	}
	return ""
}

func (x *GodIslandGameInfoRespMsg) GetAutoAtkCityId() int32 {
	if x != nil && x.AutoAtkCityId != nil {
		return *x.AutoAtkCityId
	}
	return 0
}

func (x *GodIslandGameInfoRespMsg) GetAttackCd() int64 {
	if x != nil && x.AttackCd != nil {
		return *x.AttackCd
	}
	return 0
}

func (x *GodIslandGameInfoRespMsg) GetUnlockGhostCity() bool {
	if x != nil && x.UnlockGhostCity != nil {
		return *x.UnlockGhostCity
	}
	return false
}

func (x *GodIslandGameInfoRespMsg) GetSuppressBuff() bool {
	if x != nil && x.SuppressBuff != nil {
		return *x.SuppressBuff
	}
	return false
}

func (x *GodIslandGameInfoRespMsg) GetOnlyAttackNpc() bool {
	if x != nil && x.OnlyAttackNpc != nil {
		return *x.OnlyAttackNpc
	}
	return false
}

func (x *GodIslandGameInfoRespMsg) GetDeadWeakEffect() *GodIslandDeadWeakEffectMsg {
	if x != nil {
		return x.DeadWeakEffect
	}
	return nil
}

type GodIslandNpcEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ConfigId *int32 `protobuf:"varint,2,req,name=configId" json:"configId,omitempty"`
	Expired  *int64 `protobuf:"varint,3,req,name=expired" json:"expired,omitempty"`
}

func (x *GodIslandNpcEvent) Reset() {
	*x = GodIslandNpcEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandNpcEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandNpcEvent) ProtoMessage() {}

func (x *GodIslandNpcEvent) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandNpcEvent.ProtoReflect.Descriptor instead.
func (*GodIslandNpcEvent) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{43}
}

func (x *GodIslandNpcEvent) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GodIslandNpcEvent) GetConfigId() int32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *GodIslandNpcEvent) GetExpired() int64 {
	if x != nil && x.Expired != nil {
		return *x.Expired
	}
	return 0
}

type GodIslandGameRouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *int64                        `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	FromCityId   *int32                        `protobuf:"varint,2,opt,name=fromCityId" json:"fromCityId,omitempty"`
	ToCityId     *int32                        `protobuf:"varint,3,opt,name=toCityId" json:"toCityId,omitempty"`
	Time         *int64                        `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Arrival      *int64                        `protobuf:"varint,5,opt,name=arrival" json:"arrival,omitempty"`
	UnionId      *int64                        `protobuf:"varint,6,opt,name=unionId" json:"unionId,omitempty"`
	Appearance   *GodIslandRouterAppearanceMsg `protobuf:"bytes,7,opt,name=appearance" json:"appearance,omitempty"`
	CurrentRank  *int32                        `protobuf:"varint,8,opt,name=currentRank" json:"currentRank,omitempty"`
	Name         *string                       `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	SuppressBuff *bool                         `protobuf:"varint,10,opt,name=suppressBuff" json:"suppressBuff,omitempty"`
}

func (x *GodIslandGameRouteInfo) Reset() {
	*x = GodIslandGameRouteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameRouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameRouteInfo) ProtoMessage() {}

func (x *GodIslandGameRouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameRouteInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameRouteInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{44}
}

func (x *GodIslandGameRouteInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodIslandGameRouteInfo) GetFromCityId() int32 {
	if x != nil && x.FromCityId != nil {
		return *x.FromCityId
	}
	return 0
}

func (x *GodIslandGameRouteInfo) GetToCityId() int32 {
	if x != nil && x.ToCityId != nil {
		return *x.ToCityId
	}
	return 0
}

func (x *GodIslandGameRouteInfo) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *GodIslandGameRouteInfo) GetArrival() int64 {
	if x != nil && x.Arrival != nil {
		return *x.Arrival
	}
	return 0
}

func (x *GodIslandGameRouteInfo) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandGameRouteInfo) GetAppearance() *GodIslandRouterAppearanceMsg {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *GodIslandGameRouteInfo) GetCurrentRank() int32 {
	if x != nil && x.CurrentRank != nil {
		return *x.CurrentRank
	}
	return 0
}

func (x *GodIslandGameRouteInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GodIslandGameRouteInfo) GetSuppressBuff() bool {
	if x != nil && x.SuppressBuff != nil {
		return *x.SuppressBuff
	}
	return false
}

// *
// 前X名 显示形象和坐骑, 其他玩家使用头像
type GodIslandRouterAppearanceMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadIcon     *int32  `protobuf:"varint,1,opt,name=headIcon" json:"headIcon,omitempty"`
	WxHeadUrl    *string `protobuf:"bytes,2,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	AppearanceId *int32  `protobuf:"varint,3,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId *int32  `protobuf:"varint,4,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
}

func (x *GodIslandRouterAppearanceMsg) Reset() {
	*x = GodIslandRouterAppearanceMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandRouterAppearanceMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandRouterAppearanceMsg) ProtoMessage() {}

func (x *GodIslandRouterAppearanceMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandRouterAppearanceMsg.ProtoReflect.Descriptor instead.
func (*GodIslandRouterAppearanceMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{45}
}

func (x *GodIslandRouterAppearanceMsg) GetHeadIcon() int32 {
	if x != nil && x.HeadIcon != nil {
		return *x.HeadIcon
	}
	return 0
}

func (x *GodIslandRouterAppearanceMsg) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *GodIslandRouterAppearanceMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *GodIslandRouterAppearanceMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

type GodIslandGameRouteInfoSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteInfo []*GodIslandGameRouteInfo `protobuf:"bytes,2,rep,name=routeInfo" json:"routeInfo,omitempty"`
}

func (x *GodIslandGameRouteInfoSyncMsg) Reset() {
	*x = GodIslandGameRouteInfoSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameRouteInfoSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameRouteInfoSyncMsg) ProtoMessage() {}

func (x *GodIslandGameRouteInfoSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameRouteInfoSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameRouteInfoSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{46}
}

func (x *GodIslandGameRouteInfoSyncMsg) GetRouteInfo() []*GodIslandGameRouteInfo {
	if x != nil {
		return x.RouteInfo
	}
	return nil
}

type GodIslandGameCityInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CityVec    []int32 `protobuf:"varint,2,rep,name=cityVec" json:"cityVec,omitempty"`
	FloorId    *int32  `protobuf:"varint,3,req,name=floorId" json:"floorId,omitempty"`
	GroupId    *int32  `protobuf:"varint,4,req,name=groupId" json:"groupId,omitempty"`
}

func (x *GodIslandGameCityInfoReqMsg) Reset() {
	*x = GodIslandGameCityInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameCityInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{47}
}

func (x *GodIslandGameCityInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameCityInfoReqMsg) GetCityVec() []int32 {
	if x != nil {
		return x.CityVec
	}
	return nil
}

func (x *GodIslandGameCityInfoReqMsg) GetFloorId() int32 {
	if x != nil && x.FloorId != nil {
		return *x.FloorId
	}
	return 0
}

func (x *GodIslandGameCityInfoReqMsg) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type GodIslandGameCityInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CityInfo  []*GodIslandGameCityInfo  `protobuf:"bytes,2,rep,name=cityInfo" json:"cityInfo,omitempty"`
	RouteInfo []*GodIslandGameRouteInfo `protobuf:"bytes,3,rep,name=routeInfo" json:"routeInfo,omitempty"`
	FloorId   *int32                    `protobuf:"varint,4,opt,name=floorId" json:"floorId,omitempty"`
	GroupId   *int32                    `protobuf:"varint,5,opt,name=groupId" json:"groupId,omitempty"`
}

func (x *GodIslandGameCityInfoRespMsg) Reset() {
	*x = GodIslandGameCityInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameCityInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{48}
}

func (x *GodIslandGameCityInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameCityInfoRespMsg) GetCityInfo() []*GodIslandGameCityInfo {
	if x != nil {
		return x.CityInfo
	}
	return nil
}

func (x *GodIslandGameCityInfoRespMsg) GetRouteInfo() []*GodIslandGameRouteInfo {
	if x != nil {
		return x.RouteInfo
	}
	return nil
}

func (x *GodIslandGameCityInfoRespMsg) GetFloorId() int32 {
	if x != nil && x.FloorId != nil {
		return *x.FloorId
	}
	return 0
}

func (x *GodIslandGameCityInfoRespMsg) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type GodIslandGameCityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId     *int32                    `protobuf:"varint,1,req,name=cityId" json:"cityId,omitempty"`
	HaveFight  *bool                     `protobuf:"varint,2,opt,name=haveFight" json:"haveFight,omitempty"`
	BaseData   *GodIslandUnionSimpleInfo `protobuf:"bytes,3,opt,name=baseData" json:"baseData,omitempty"`
	HeadInfo   []*PlayerHeadDataMsg      `protobuf:"bytes,4,rep,name=headInfo" json:"headInfo,omitempty"`
	Hp         *int32                    `protobuf:"varint,5,opt,name=hp" json:"hp,omitempty"`
	CurHp      *int32                    `protobuf:"varint,6,opt,name=curHp" json:"curHp,omitempty"`
	UpdateType *bool                     `protobuf:"varint,7,req,name=updateType" json:"updateType,omitempty"`
	Destroyed  *bool                     `protobuf:"varint,8,opt,name=destroyed" json:"destroyed,omitempty"`
}

func (x *GodIslandGameCityInfo) Reset() {
	*x = GodIslandGameCityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityInfo) ProtoMessage() {}

func (x *GodIslandGameCityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{49}
}

func (x *GodIslandGameCityInfo) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandGameCityInfo) GetHaveFight() bool {
	if x != nil && x.HaveFight != nil {
		return *x.HaveFight
	}
	return false
}

func (x *GodIslandGameCityInfo) GetBaseData() *GodIslandUnionSimpleInfo {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *GodIslandGameCityInfo) GetHeadInfo() []*PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *GodIslandGameCityInfo) GetHp() int32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *GodIslandGameCityInfo) GetCurHp() int32 {
	if x != nil && x.CurHp != nil {
		return *x.CurHp
	}
	return 0
}

func (x *GodIslandGameCityInfo) GetUpdateType() bool {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return false
}

func (x *GodIslandGameCityInfo) GetDestroyed() bool {
	if x != nil && x.Destroyed != nil {
		return *x.Destroyed
	}
	return false
}

type GodIslandUnionSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId   *int64  `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	UnionName *string `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	ServerId  *int64  `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`
}

func (x *GodIslandUnionSimpleInfo) Reset() {
	*x = GodIslandUnionSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionSimpleInfo) ProtoMessage() {}

func (x *GodIslandUnionSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionSimpleInfo.ProtoReflect.Descriptor instead.
func (*GodIslandUnionSimpleInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{50}
}

func (x *GodIslandUnionSimpleInfo) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandUnionSimpleInfo) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandUnionSimpleInfo) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type GodIslandGameEventReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	EventId    *int32 `protobuf:"varint,2,req,name=eventId" json:"eventId,omitempty"`
	ChooseId   *int32 `protobuf:"varint,3,req,name=chooseId" json:"chooseId,omitempty"`
}

func (x *GodIslandGameEventReqMsg) Reset() {
	*x = GodIslandGameEventReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameEventReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameEventReqMsg) ProtoMessage() {}

func (x *GodIslandGameEventReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameEventReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameEventReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{51}
}

func (x *GodIslandGameEventReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameEventReqMsg) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *GodIslandGameEventReqMsg) GetChooseId() int32 {
	if x != nil && x.ChooseId != nil {
		return *x.ChooseId
	}
	return 0
}

type GodIslandGameEventRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *GodIslandGameEventRespMsg) Reset() {
	*x = GodIslandGameEventRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameEventRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameEventRespMsg) ProtoMessage() {}

func (x *GodIslandGameEventRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameEventRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameEventRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{52}
}

func (x *GodIslandGameEventRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameEventRespMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type GodIslandGameEventSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventVec []int32 `protobuf:"varint,1,rep,name=eventVec" json:"eventVec,omitempty"`
}

func (x *GodIslandGameEventSyncMsg) Reset() {
	*x = GodIslandGameEventSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameEventSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameEventSyncMsg) ProtoMessage() {}

func (x *GodIslandGameEventSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameEventSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameEventSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{53}
}

func (x *GodIslandGameEventSyncMsg) GetEventVec() []int32 {
	if x != nil {
		return x.EventVec
	}
	return nil
}

type GodIslandGameCityBuffSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityBuffInfo []*GodIslandGameCityBuffInfo `protobuf:"bytes,1,rep,name=cityBuffInfo" json:"cityBuffInfo,omitempty"`
}

func (x *GodIslandGameCityBuffSync) Reset() {
	*x = GodIslandGameCityBuffSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityBuffSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityBuffSync) ProtoMessage() {}

func (x *GodIslandGameCityBuffSync) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityBuffSync.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityBuffSync) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{54}
}

func (x *GodIslandGameCityBuffSync) GetCityBuffInfo() []*GodIslandGameCityBuffInfo {
	if x != nil {
		return x.CityBuffInfo
	}
	return nil
}

type GodIslandGameCityBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId        *int32  `protobuf:"varint,1,opt,name=cityId" json:"cityId,omitempty"`
	BuffId        *int32  `protobuf:"varint,2,opt,name=buffId" json:"buffId,omitempty"`
	UnionName     *string `protobuf:"bytes,3,opt,name=unionName" json:"unionName,omitempty"`
	BeginTime     *int64  `protobuf:"varint,4,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime       *int64  `protobuf:"varint,5,opt,name=endTime" json:"endTime,omitempty"`
	BeginShowTime *int64  `protobuf:"varint,6,opt,name=beginShowTime" json:"beginShowTime,omitempty"`
	UnionServerId *int64  `protobuf:"varint,7,opt,name=unionServerId" json:"unionServerId,omitempty"`
	UnionId       *int64  `protobuf:"varint,8,opt,name=unionId" json:"unionId,omitempty"`
}

func (x *GodIslandGameCityBuffInfo) Reset() {
	*x = GodIslandGameCityBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityBuffInfo) ProtoMessage() {}

func (x *GodIslandGameCityBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityBuffInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityBuffInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{55}
}

func (x *GodIslandGameCityBuffInfo) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandGameCityBuffInfo) GetBuffId() int32 {
	if x != nil && x.BuffId != nil {
		return *x.BuffId
	}
	return 0
}

func (x *GodIslandGameCityBuffInfo) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandGameCityBuffInfo) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *GodIslandGameCityBuffInfo) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *GodIslandGameCityBuffInfo) GetBeginShowTime() int64 {
	if x != nil && x.BeginShowTime != nil {
		return *x.BeginShowTime
	}
	return 0
}

func (x *GodIslandGameCityBuffInfo) GetUnionServerId() int64 {
	if x != nil && x.UnionServerId != nil {
		return *x.UnionServerId
	}
	return 0
}

func (x *GodIslandGameCityBuffInfo) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type GodIslandGameSpiritualBallInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGameSpiritualBallInfoReqMsg) Reset() {
	*x = GodIslandGameSpiritualBallInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSpiritualBallInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSpiritualBallInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameSpiritualBallInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSpiritualBallInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSpiritualBallInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{56}
}

func (x *GodIslandGameSpiritualBallInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGameSpiritualBallInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CurPower            *string                     `protobuf:"bytes,2,opt,name=curPower" json:"curPower,omitempty"`
	MaxPower            *string                     `protobuf:"bytes,3,opt,name=maxPower" json:"maxPower,omitempty"`
	BallCurPower        *string                     `protobuf:"bytes,4,opt,name=ballCurPower" json:"ballCurPower,omitempty"`
	BallMaxPower        *string                     `protobuf:"bytes,5,opt,name=ballMaxPower" json:"ballMaxPower,omitempty"`
	FightValue          *int64                      `protobuf:"varint,6,opt,name=fightValue" json:"fightValue,omitempty"`
	Time                *int64                      `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
	UpdatePowerCount    *int32                      `protobuf:"varint,8,opt,name=updatePowerCount" json:"updatePowerCount,omitempty"`
	LastUpdatePowerTime *int64                      `protobuf:"varint,9,opt,name=lastUpdatePowerTime" json:"lastUpdatePowerTime,omitempty"`
	DeadWeakEffect      *GodIslandDeadWeakEffectMsg `protobuf:"bytes,10,opt,name=deadWeakEffect" json:"deadWeakEffect,omitempty"`
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) Reset() {
	*x = GodIslandGameSpiritualBallInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSpiritualBallInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameSpiritualBallInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSpiritualBallInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSpiritualBallInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{57}
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetCurPower() string {
	if x != nil && x.CurPower != nil {
		return *x.CurPower
	}
	return ""
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetMaxPower() string {
	if x != nil && x.MaxPower != nil {
		return *x.MaxPower
	}
	return ""
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetBallCurPower() string {
	if x != nil && x.BallCurPower != nil {
		return *x.BallCurPower
	}
	return ""
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetBallMaxPower() string {
	if x != nil && x.BallMaxPower != nil {
		return *x.BallMaxPower
	}
	return ""
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetUpdatePowerCount() int32 {
	if x != nil && x.UpdatePowerCount != nil {
		return *x.UpdatePowerCount
	}
	return 0
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetLastUpdatePowerTime() int64 {
	if x != nil && x.LastUpdatePowerTime != nil {
		return *x.LastUpdatePowerTime
	}
	return 0
}

func (x *GodIslandGameSpiritualBallInfoRespMsg) GetDeadWeakEffect() *GodIslandDeadWeakEffectMsg {
	if x != nil {
		return x.DeadWeakEffect
	}
	return nil
}

type GodIslandGameUseSpiritualBallReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UsePower   *int64 `protobuf:"varint,2,opt,name=usePower" json:"usePower,omitempty"`
}

func (x *GodIslandGameUseSpiritualBallReqMsg) Reset() {
	*x = GodIslandGameUseSpiritualBallReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameUseSpiritualBallReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameUseSpiritualBallReqMsg) ProtoMessage() {}

func (x *GodIslandGameUseSpiritualBallReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameUseSpiritualBallReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameUseSpiritualBallReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{58}
}

func (x *GodIslandGameUseSpiritualBallReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameUseSpiritualBallReqMsg) GetUsePower() int64 {
	if x != nil && x.UsePower != nil {
		return *x.UsePower
	}
	return 0
}

type GodIslandGameUseSpiritualBallRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CurPower     *string `protobuf:"bytes,2,opt,name=curPower" json:"curPower,omitempty"`
	BallCurPower *string `protobuf:"bytes,3,opt,name=ballCurPower" json:"ballCurPower,omitempty"`
}

func (x *GodIslandGameUseSpiritualBallRespMsg) Reset() {
	*x = GodIslandGameUseSpiritualBallRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameUseSpiritualBallRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameUseSpiritualBallRespMsg) ProtoMessage() {}

func (x *GodIslandGameUseSpiritualBallRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameUseSpiritualBallRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameUseSpiritualBallRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{59}
}

func (x *GodIslandGameUseSpiritualBallRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameUseSpiritualBallRespMsg) GetCurPower() string {
	if x != nil && x.CurPower != nil {
		return *x.CurPower
	}
	return ""
}

func (x *GodIslandGameUseSpiritualBallRespMsg) GetBallCurPower() string {
	if x != nil && x.BallCurPower != nil {
		return *x.BallCurPower
	}
	return ""
}

type GodIslandGameTargetCityInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CityId     *int32 `protobuf:"varint,2,req,name=cityId" json:"cityId,omitempty"`
}

func (x *GodIslandGameTargetCityInfoReqMsg) Reset() {
	*x = GodIslandGameTargetCityInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameTargetCityInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameTargetCityInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameTargetCityInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameTargetCityInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameTargetCityInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{60}
}

func (x *GodIslandGameTargetCityInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameTargetCityInfoReqMsg) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

type GodIslandGameTargetCityInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	IsTarget   *bool                          `protobuf:"varint,2,opt,name=isTarget" json:"isTarget,omitempty"`
	CostTime   *int64                         `protobuf:"varint,3,opt,name=costTime" json:"costTime,omitempty"`
	AttackIcon []*GodIslandPlayerIconMsg      `protobuf:"bytes,4,rep,name=attackIcon" json:"attackIcon,omitempty"`
	DefendIcon []*GodIslandPlayerIconMsg      `protobuf:"bytes,5,rep,name=defendIcon" json:"defendIcon,omitempty"`
	BattleInfo []*GodIslandGameLineBattleInfo `protobuf:"bytes,6,rep,name=battleInfo" json:"battleInfo,omitempty"`
	NpcList    []int64                        `protobuf:"varint,7,rep,name=npcList" json:"npcList,omitempty"`
}

func (x *GodIslandGameTargetCityInfoRespMsg) Reset() {
	*x = GodIslandGameTargetCityInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameTargetCityInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameTargetCityInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameTargetCityInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameTargetCityInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameTargetCityInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{61}
}

func (x *GodIslandGameTargetCityInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameTargetCityInfoRespMsg) GetIsTarget() bool {
	if x != nil && x.IsTarget != nil {
		return *x.IsTarget
	}
	return false
}

func (x *GodIslandGameTargetCityInfoRespMsg) GetCostTime() int64 {
	if x != nil && x.CostTime != nil {
		return *x.CostTime
	}
	return 0
}

func (x *GodIslandGameTargetCityInfoRespMsg) GetAttackIcon() []*GodIslandPlayerIconMsg {
	if x != nil {
		return x.AttackIcon
	}
	return nil
}

func (x *GodIslandGameTargetCityInfoRespMsg) GetDefendIcon() []*GodIslandPlayerIconMsg {
	if x != nil {
		return x.DefendIcon
	}
	return nil
}

func (x *GodIslandGameTargetCityInfoRespMsg) GetBattleInfo() []*GodIslandGameLineBattleInfo {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

func (x *GodIslandGameTargetCityInfoRespMsg) GetNpcList() []int64 {
	if x != nil {
		return x.NpcList
	}
	return nil
}

type GodIslandPlayerIconMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon    *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=icon" json:"icon,omitempty"`
	UnionId *int64             `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
}

func (x *GodIslandPlayerIconMsg) Reset() {
	*x = GodIslandPlayerIconMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerIconMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerIconMsg) ProtoMessage() {}

func (x *GodIslandPlayerIconMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerIconMsg.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerIconMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{62}
}

func (x *GodIslandPlayerIconMsg) GetIcon() *PlayerHeadDataMsg {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *GodIslandPlayerIconMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type GodIslandGameTargetCityLineInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CityId     *int32 `protobuf:"varint,2,req,name=cityId" json:"cityId,omitempty"`
	Type       *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (x *GodIslandGameTargetCityLineInfoReqMsg) Reset() {
	*x = GodIslandGameTargetCityLineInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameTargetCityLineInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameTargetCityLineInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameTargetCityLineInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameTargetCityLineInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameTargetCityLineInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{63}
}

func (x *GodIslandGameTargetCityLineInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameTargetCityLineInfoReqMsg) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandGameTargetCityLineInfoReqMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type GodIslandGameTargetCityLineInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AttackInfo   []*GodIslandGameLinePlayerInfo `protobuf:"bytes,2,rep,name=attackInfo" json:"attackInfo,omitempty"`
	DefendInfo   []*GodIslandGameLinePlayerInfo `protobuf:"bytes,3,rep,name=defendInfo" json:"defendInfo,omitempty"`
	NpcGuardInfo []*GodIslandGameLinePlayerInfo `protobuf:"bytes,4,rep,name=npcGuardInfo" json:"npcGuardInfo,omitempty"`
	BattleInfo   []*GodIslandBattleMsg          `protobuf:"bytes,5,rep,name=battleInfo" json:"battleInfo,omitempty"`
}

func (x *GodIslandGameTargetCityLineInfoRespMsg) Reset() {
	*x = GodIslandGameTargetCityLineInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameTargetCityLineInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameTargetCityLineInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameTargetCityLineInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameTargetCityLineInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameTargetCityLineInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{64}
}

func (x *GodIslandGameTargetCityLineInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameTargetCityLineInfoRespMsg) GetAttackInfo() []*GodIslandGameLinePlayerInfo {
	if x != nil {
		return x.AttackInfo
	}
	return nil
}

func (x *GodIslandGameTargetCityLineInfoRespMsg) GetDefendInfo() []*GodIslandGameLinePlayerInfo {
	if x != nil {
		return x.DefendInfo
	}
	return nil
}

func (x *GodIslandGameTargetCityLineInfoRespMsg) GetNpcGuardInfo() []*GodIslandGameLinePlayerInfo {
	if x != nil {
		return x.NpcGuardInfo
	}
	return nil
}

func (x *GodIslandGameTargetCityLineInfoRespMsg) GetBattleInfo() []*GodIslandBattleMsg {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

type GodIslandBattleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId        *int32                 `protobuf:"varint,1,opt,name=cityId" json:"cityId,omitempty"`
	Attacker      *GodIslandBattlePlayer `protobuf:"bytes,2,opt,name=attacker" json:"attacker,omitempty"`
	BeAttacker    *GodIslandBattlePlayer `protobuf:"bytes,3,opt,name=beAttacker" json:"beAttacker,omitempty"`
	BattleTime    *int64                 `protobuf:"varint,4,opt,name=battleTime" json:"battleTime,omitempty"`
	AttackSpeedUp *bool                  `protobuf:"varint,5,opt,name=attackSpeedUp" json:"attackSpeedUp,omitempty"`
}

func (x *GodIslandBattleMsg) Reset() {
	*x = GodIslandBattleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBattleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBattleMsg) ProtoMessage() {}

func (x *GodIslandBattleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBattleMsg.ProtoReflect.Descriptor instead.
func (*GodIslandBattleMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{65}
}

func (x *GodIslandBattleMsg) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandBattleMsg) GetAttacker() *GodIslandBattlePlayer {
	if x != nil {
		return x.Attacker
	}
	return nil
}

func (x *GodIslandBattleMsg) GetBeAttacker() *GodIslandBattlePlayer {
	if x != nil {
		return x.BeAttacker
	}
	return nil
}

func (x *GodIslandBattleMsg) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *GodIslandBattleMsg) GetAttackSpeedUp() bool {
	if x != nil && x.AttackSpeedUp != nil {
		return *x.AttackSpeedUp
	}
	return false
}

type GodIslandGameLinePlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Power     *string            `protobuf:"bytes,2,opt,name=power" json:"power,omitempty"`
	Union     *int64             `protobuf:"varint,3,opt,name=union" json:"union,omitempty"`
	HeadInfo  *PlayerHeadDataMsg `protobuf:"bytes,4,opt,name=headInfo" json:"headInfo,omitempty"`
	PlayerId  *int64             `protobuf:"varint,5,opt,name=playerId" json:"playerId,omitempty"`
	Npc       *bool              `protobuf:"varint,6,opt,name=npc" json:"npc,omitempty"`
	UnionName *string            `protobuf:"bytes,7,opt,name=unionName" json:"unionName,omitempty"`
	MaxPower  *string            `protobuf:"bytes,8,opt,name=maxPower" json:"maxPower,omitempty"`
}

func (x *GodIslandGameLinePlayerInfo) Reset() {
	*x = GodIslandGameLinePlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameLinePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameLinePlayerInfo) ProtoMessage() {}

func (x *GodIslandGameLinePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameLinePlayerInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameLinePlayerInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{66}
}

func (x *GodIslandGameLinePlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GodIslandGameLinePlayerInfo) GetPower() string {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return ""
}

func (x *GodIslandGameLinePlayerInfo) GetUnion() int64 {
	if x != nil && x.Union != nil {
		return *x.Union
	}
	return 0
}

func (x *GodIslandGameLinePlayerInfo) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *GodIslandGameLinePlayerInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodIslandGameLinePlayerInfo) GetNpc() bool {
	if x != nil && x.Npc != nil {
		return *x.Npc
	}
	return false
}

func (x *GodIslandGameLinePlayerInfo) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandGameLinePlayerInfo) GetMaxPower() string {
	if x != nil && x.MaxPower != nil {
		return *x.MaxPower
	}
	return ""
}

type GodIslandGameLineBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerIdAttack *int64 `protobuf:"varint,1,opt,name=playerIdAttack" json:"playerIdAttack,omitempty"`
	PlayerIdDefend *int64 `protobuf:"varint,2,opt,name=playerIdDefend" json:"playerIdDefend,omitempty"`
	BattleTime     *int64 `protobuf:"varint,3,opt,name=battleTime" json:"battleTime,omitempty"`
	AttackSpeedUp  *bool  `protobuf:"varint,4,opt,name=attackSpeedUp" json:"attackSpeedUp,omitempty"`
}

func (x *GodIslandGameLineBattleInfo) Reset() {
	*x = GodIslandGameLineBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameLineBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameLineBattleInfo) ProtoMessage() {}

func (x *GodIslandGameLineBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameLineBattleInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameLineBattleInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{67}
}

func (x *GodIslandGameLineBattleInfo) GetPlayerIdAttack() int64 {
	if x != nil && x.PlayerIdAttack != nil {
		return *x.PlayerIdAttack
	}
	return 0
}

func (x *GodIslandGameLineBattleInfo) GetPlayerIdDefend() int64 {
	if x != nil && x.PlayerIdDefend != nil {
		return *x.PlayerIdDefend
	}
	return 0
}

func (x *GodIslandGameLineBattleInfo) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *GodIslandGameLineBattleInfo) GetAttackSpeedUp() bool {
	if x != nil && x.AttackSpeedUp != nil {
		return *x.AttackSpeedUp
	}
	return false
}

type GodIslandGameAttackReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	TargetId   *int32 `protobuf:"varint,2,req,name=targetId" json:"targetId,omitempty"`
	EnemyId    *int64 `protobuf:"varint,3,opt,name=enemyId" json:"enemyId,omitempty"`
	IsNpc      *bool  `protobuf:"varint,4,req,name=isNpc" json:"isNpc,omitempty"`
}

func (x *GodIslandGameAttackReqMsg) Reset() {
	*x = GodIslandGameAttackReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameAttackReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameAttackReqMsg) ProtoMessage() {}

func (x *GodIslandGameAttackReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameAttackReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameAttackReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{68}
}

func (x *GodIslandGameAttackReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameAttackReqMsg) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GodIslandGameAttackReqMsg) GetEnemyId() int64 {
	if x != nil && x.EnemyId != nil {
		return *x.EnemyId
	}
	return 0
}

func (x *GodIslandGameAttackReqMsg) GetIsNpc() bool {
	if x != nil && x.IsNpc != nil {
		return *x.IsNpc
	}
	return false
}

type GodIslandGameAttackRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandGameAttackRespMsg) Reset() {
	*x = GodIslandGameAttackRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameAttackRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameAttackRespMsg) ProtoMessage() {}

func (x *GodIslandGameAttackRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameAttackRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameAttackRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{69}
}

func (x *GodIslandGameAttackRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandGameAutoAttackReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	TargetId   *int32 `protobuf:"varint,2,req,name=targetId" json:"targetId,omitempty"`
	OnlyNpc    *bool  `protobuf:"varint,3,opt,name=onlyNpc" json:"onlyNpc,omitempty"`
}

func (x *GodIslandGameAutoAttackReqMsg) Reset() {
	*x = GodIslandGameAutoAttackReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameAutoAttackReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameAutoAttackReqMsg) ProtoMessage() {}

func (x *GodIslandGameAutoAttackReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameAutoAttackReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameAutoAttackReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{70}
}

func (x *GodIslandGameAutoAttackReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameAutoAttackReqMsg) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GodIslandGameAutoAttackReqMsg) GetOnlyNpc() bool {
	if x != nil && x.OnlyNpc != nil {
		return *x.OnlyNpc
	}
	return false
}

type GodIslandGameAutoAttackRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TargetId *int32 `protobuf:"varint,2,opt,name=targetId" json:"targetId,omitempty"`
	OnlyNpc  *bool  `protobuf:"varint,3,opt,name=onlyNpc" json:"onlyNpc,omitempty"`
}

func (x *GodIslandGameAutoAttackRespMsg) Reset() {
	*x = GodIslandGameAutoAttackRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameAutoAttackRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameAutoAttackRespMsg) ProtoMessage() {}

func (x *GodIslandGameAutoAttackRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameAutoAttackRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameAutoAttackRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{71}
}

func (x *GodIslandGameAutoAttackRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameAutoAttackRespMsg) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GodIslandGameAutoAttackRespMsg) GetOnlyNpc() bool {
	if x != nil && x.OnlyNpc != nil {
		return *x.OnlyNpc
	}
	return false
}

type GodIslandGameMoveReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	TargetId   *int32 `protobuf:"varint,2,req,name=targetId" json:"targetId,omitempty"`
}

func (x *GodIslandGameMoveReqMsg) Reset() {
	*x = GodIslandGameMoveReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameMoveReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameMoveReqMsg) ProtoMessage() {}

func (x *GodIslandGameMoveReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameMoveReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameMoveReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{72}
}

func (x *GodIslandGameMoveReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameMoveReqMsg) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type GodIslandGameMoveRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandGameMoveRespMsg) Reset() {
	*x = GodIslandGameMoveRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameMoveRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameMoveRespMsg) ProtoMessage() {}

func (x *GodIslandGameMoveRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameMoveRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameMoveRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{73}
}

func (x *GodIslandGameMoveRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandGameMiniMapInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Floor      *int32 `protobuf:"varint,2,opt,name=floor" json:"floor,omitempty"`
	Group      *int32 `protobuf:"varint,3,opt,name=group" json:"group,omitempty"`
}

func (x *GodIslandGameMiniMapInfoReqMsg) Reset() {
	*x = GodIslandGameMiniMapInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameMiniMapInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameMiniMapInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameMiniMapInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameMiniMapInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameMiniMapInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{74}
}

func (x *GodIslandGameMiniMapInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameMiniMapInfoReqMsg) GetFloor() int32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return 0
}

func (x *GodIslandGameMiniMapInfoReqMsg) GetGroup() int32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

type GodIslandGameMiniMapInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CityInfo        []*GodIslandGameMiniCityInfo `protobuf:"bytes,2,rep,name=cityInfo" json:"cityInfo,omitempty"`
	UnlockGhostCity *bool                        `protobuf:"varint,3,opt,name=unlockGhostCity" json:"unlockGhostCity,omitempty"`
}

func (x *GodIslandGameMiniMapInfoRespMsg) Reset() {
	*x = GodIslandGameMiniMapInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameMiniMapInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameMiniMapInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameMiniMapInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameMiniMapInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameMiniMapInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{75}
}

func (x *GodIslandGameMiniMapInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameMiniMapInfoRespMsg) GetCityInfo() []*GodIslandGameMiniCityInfo {
	if x != nil {
		return x.CityInfo
	}
	return nil
}

func (x *GodIslandGameMiniMapInfoRespMsg) GetUnlockGhostCity() bool {
	if x != nil && x.UnlockGhostCity != nil {
		return *x.UnlockGhostCity
	}
	return false
}

type GodIslandGameMiniCityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId    *int32         `protobuf:"varint,1,opt,name=cityId" json:"cityId,omitempty"`
	BaseData  *UnionBaseData `protobuf:"bytes,2,opt,name=baseData" json:"baseData,omitempty"`
	HaveFight *bool          `protobuf:"varint,3,opt,name=haveFight" json:"haveFight,omitempty"`
}

func (x *GodIslandGameMiniCityInfo) Reset() {
	*x = GodIslandGameMiniCityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameMiniCityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameMiniCityInfo) ProtoMessage() {}

func (x *GodIslandGameMiniCityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameMiniCityInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameMiniCityInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{76}
}

func (x *GodIslandGameMiniCityInfo) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandGameMiniCityInfo) GetBaseData() *UnionBaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *GodIslandGameMiniCityInfo) GetHaveFight() bool {
	if x != nil && x.HaveFight != nil {
		return *x.HaveFight
	}
	return false
}

type GodIslandGameSetUnionTypeReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
	Type       *int32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
}

func (x *GodIslandGameSetUnionTypeReqMsg) Reset() {
	*x = GodIslandGameSetUnionTypeReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSetUnionTypeReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSetUnionTypeReqMsg) ProtoMessage() {}

func (x *GodIslandGameSetUnionTypeReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSetUnionTypeReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSetUnionTypeReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{77}
}

func (x *GodIslandGameSetUnionTypeReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameSetUnionTypeReqMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandGameSetUnionTypeReqMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type GodIslandGameSetUnionTypeRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandGameSetUnionTypeRespMsg) Reset() {
	*x = GodIslandGameSetUnionTypeRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSetUnionTypeRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSetUnionTypeRespMsg) ProtoMessage() {}

func (x *GodIslandGameSetUnionTypeRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSetUnionTypeRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSetUnionTypeRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{78}
}

func (x *GodIslandGameSetUnionTypeRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandGamePlantInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGamePlantInfoReqMsg) Reset() {
	*x = GodIslandGamePlantInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlantInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlantInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGamePlantInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlantInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlantInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{79}
}

func (x *GodIslandGamePlantInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGamePlantInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                          `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Lv         *int32                          `protobuf:"varint,2,opt,name=lv" json:"lv,omitempty"`
	Exp        *int32                          `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	NoticeInfo []*GodIslandGamePlantNoticeInfo `protobuf:"bytes,4,rep,name=noticeInfo" json:"noticeInfo,omitempty"`
	CanReceive *int32                          `protobuf:"varint,5,opt,name=canReceive" json:"canReceive,omitempty"`
	WaterCount *int32                          `protobuf:"varint,6,opt,name=waterCount" json:"waterCount,omitempty"`
}

func (x *GodIslandGamePlantInfoRespMsg) Reset() {
	*x = GodIslandGamePlantInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlantInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlantInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGamePlantInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlantInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlantInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{80}
}

func (x *GodIslandGamePlantInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGamePlantInfoRespMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *GodIslandGamePlantInfoRespMsg) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *GodIslandGamePlantInfoRespMsg) GetNoticeInfo() []*GodIslandGamePlantNoticeInfo {
	if x != nil {
		return x.NoticeInfo
	}
	return nil
}

func (x *GodIslandGamePlantInfoRespMsg) GetCanReceive() int32 {
	if x != nil && x.CanReceive != nil {
		return *x.CanReceive
	}
	return 0
}

func (x *GodIslandGamePlantInfoRespMsg) GetWaterCount() int32 {
	if x != nil && x.WaterCount != nil {
		return *x.WaterCount
	}
	return 0
}

type GodIslandGamePlantNoticeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	LiquidId *int32  `protobuf:"varint,2,opt,name=liquidId" json:"liquidId,omitempty"`
	Id       *int64  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Status   *int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	Time     *int64  `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

func (x *GodIslandGamePlantNoticeInfo) Reset() {
	*x = GodIslandGamePlantNoticeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlantNoticeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlantNoticeInfo) ProtoMessage() {}

func (x *GodIslandGamePlantNoticeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlantNoticeInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlantNoticeInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{81}
}

func (x *GodIslandGamePlantNoticeInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GodIslandGamePlantNoticeInfo) GetLiquidId() int32 {
	if x != nil && x.LiquidId != nil {
		return *x.LiquidId
	}
	return 0
}

func (x *GodIslandGamePlantNoticeInfo) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GodIslandGamePlantNoticeInfo) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *GodIslandGamePlantNoticeInfo) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type GodIslandGamePlantReceiveFruitsReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGamePlantReceiveFruitsReqMsg) Reset() {
	*x = GodIslandGamePlantReceiveFruitsReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlantReceiveFruitsReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlantReceiveFruitsReqMsg) ProtoMessage() {}

func (x *GodIslandGamePlantReceiveFruitsReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlantReceiveFruitsReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlantReceiveFruitsReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{82}
}

func (x *GodIslandGamePlantReceiveFruitsReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGamePlantReceiveFruitsRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward     *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	Lv         *int32  `protobuf:"varint,3,opt,name=lv" json:"lv,omitempty"`
	Exp        *int32  `protobuf:"varint,4,opt,name=exp" json:"exp,omitempty"`
	CanReceive *int32  `protobuf:"varint,5,opt,name=canReceive" json:"canReceive,omitempty"`
}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) Reset() {
	*x = GodIslandGamePlantReceiveFruitsRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlantReceiveFruitsRespMsg) ProtoMessage() {}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlantReceiveFruitsRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlantReceiveFruitsRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{83}
}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *GodIslandGamePlantReceiveFruitsRespMsg) GetCanReceive() int32 {
	if x != nil && x.CanReceive != nil {
		return *x.CanReceive
	}
	return 0
}

type GodIslandGamePlantWaterReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id         *int64 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
}

func (x *GodIslandGamePlantWaterReqMsg) Reset() {
	*x = GodIslandGamePlantWaterReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlantWaterReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlantWaterReqMsg) ProtoMessage() {}

func (x *GodIslandGamePlantWaterReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlantWaterReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlantWaterReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{84}
}

func (x *GodIslandGamePlantWaterReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGamePlantWaterReqMsg) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type GodIslandGamePlantWaterRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward     *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	Exp        *int32  `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	CanReceive *int32  `protobuf:"varint,4,opt,name=canReceive" json:"canReceive,omitempty"`
	Lv         *int32  `protobuf:"varint,5,opt,name=lv" json:"lv,omitempty"`
	WaterCount *int32  `protobuf:"varint,6,opt,name=waterCount" json:"waterCount,omitempty"`
}

func (x *GodIslandGamePlantWaterRespMsg) Reset() {
	*x = GodIslandGamePlantWaterRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlantWaterRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlantWaterRespMsg) ProtoMessage() {}

func (x *GodIslandGamePlantWaterRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlantWaterRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlantWaterRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{85}
}

func (x *GodIslandGamePlantWaterRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGamePlantWaterRespMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *GodIslandGamePlantWaterRespMsg) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *GodIslandGamePlantWaterRespMsg) GetCanReceive() int32 {
	if x != nil && x.CanReceive != nil {
		return *x.CanReceive
	}
	return 0
}

func (x *GodIslandGamePlantWaterRespMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *GodIslandGamePlantWaterRespMsg) GetWaterCount() int32 {
	if x != nil && x.WaterCount != nil {
		return *x.WaterCount
	}
	return 0
}

type GodIslandCrystalInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandCrystalInfoReqMsg) Reset() {
	*x = GodIslandCrystalInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCrystalInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCrystalInfoReqMsg) ProtoMessage() {}

func (x *GodIslandCrystalInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCrystalInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandCrystalInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{86}
}

func (x *GodIslandCrystalInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandCrystalInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CrystalInfo []*GodIslandCityCrystalInfo `protobuf:"bytes,2,rep,name=crystalInfo" json:"crystalInfo,omitempty"`
}

func (x *GodIslandCrystalInfoRespMsg) Reset() {
	*x = GodIslandCrystalInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCrystalInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCrystalInfoRespMsg) ProtoMessage() {}

func (x *GodIslandCrystalInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCrystalInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandCrystalInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{87}
}

func (x *GodIslandCrystalInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandCrystalInfoRespMsg) GetCrystalInfo() []*GodIslandCityCrystalInfo {
	if x != nil {
		return x.CrystalInfo
	}
	return nil
}

type GodIslandCityCrystalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId *int32 `protobuf:"varint,1,opt,name=cityId" json:"cityId,omitempty"`
	Num    *int64 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *GodIslandCityCrystalInfo) Reset() {
	*x = GodIslandCityCrystalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCityCrystalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCityCrystalInfo) ProtoMessage() {}

func (x *GodIslandCityCrystalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCityCrystalInfo.ProtoReflect.Descriptor instead.
func (*GodIslandCityCrystalInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{88}
}

func (x *GodIslandCityCrystalInfo) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandCityCrystalInfo) GetNum() int64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type GodIslandCrystalReceiveReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandCrystalReceiveReqMsg) Reset() {
	*x = GodIslandCrystalReceiveReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCrystalReceiveReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCrystalReceiveReqMsg) ProtoMessage() {}

func (x *GodIslandCrystalReceiveReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCrystalReceiveReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandCrystalReceiveReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{89}
}

func (x *GodIslandCrystalReceiveReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandCrystalReceiveRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *GodIslandCrystalReceiveRespMsg) Reset() {
	*x = GodIslandCrystalReceiveRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCrystalReceiveRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCrystalReceiveRespMsg) ProtoMessage() {}

func (x *GodIslandCrystalReceiveRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCrystalReceiveRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandCrystalReceiveRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{90}
}

func (x *GodIslandCrystalReceiveRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandCrystalReceiveRespMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type GodIslandGameStrategyInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGameStrategyInfoReqMsg) Reset() {
	*x = GodIslandGameStrategyInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameStrategyInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameStrategyInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameStrategyInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameStrategyInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameStrategyInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{91}
}

func (x *GodIslandGameStrategyInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGameStrategyInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	OccupyCities []*GodIslandOccupyCities     `protobuf:"bytes,2,rep,name=occupyCities" json:"occupyCities,omitempty"`
	Commanders   []*GodIslandPlayerSimpleInfo `protobuf:"bytes,3,rep,name=commanders" json:"commanders,omitempty"`
	CityId       []int32                      `protobuf:"varint,4,rep,name=cityId" json:"cityId,omitempty"`
}

func (x *GodIslandGameStrategyInfoRespMsg) Reset() {
	*x = GodIslandGameStrategyInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameStrategyInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameStrategyInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameStrategyInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameStrategyInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameStrategyInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{92}
}

func (x *GodIslandGameStrategyInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameStrategyInfoRespMsg) GetOccupyCities() []*GodIslandOccupyCities {
	if x != nil {
		return x.OccupyCities
	}
	return nil
}

func (x *GodIslandGameStrategyInfoRespMsg) GetCommanders() []*GodIslandPlayerSimpleInfo {
	if x != nil {
		return x.Commanders
	}
	return nil
}

func (x *GodIslandGameStrategyInfoRespMsg) GetCityId() []int32 {
	if x != nil {
		return x.CityId
	}
	return nil
}

type GodIslandPlayerSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadInfo *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=headInfo" json:"headInfo,omitempty"`
	Nickname *string            `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
}

func (x *GodIslandPlayerSimpleInfo) Reset() {
	*x = GodIslandPlayerSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerSimpleInfo) ProtoMessage() {}

func (x *GodIslandPlayerSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerSimpleInfo.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerSimpleInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{93}
}

func (x *GodIslandPlayerSimpleInfo) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *GodIslandPlayerSimpleInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

type GodIslandOccupyCities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Count *int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *GodIslandOccupyCities) Reset() {
	*x = GodIslandOccupyCities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandOccupyCities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandOccupyCities) ProtoMessage() {}

func (x *GodIslandOccupyCities) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandOccupyCities.ProtoReflect.Descriptor instead.
func (*GodIslandOccupyCities) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{94}
}

func (x *GodIslandOccupyCities) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *GodIslandOccupyCities) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type GodIslandGameCommanderSetReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Commanders []int64 `protobuf:"varint,2,rep,name=commanders" json:"commanders,omitempty"`
}

func (x *GodIslandGameCommanderSetReqMsg) Reset() {
	*x = GodIslandGameCommanderSetReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCommanderSetReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCommanderSetReqMsg) ProtoMessage() {}

func (x *GodIslandGameCommanderSetReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCommanderSetReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCommanderSetReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{95}
}

func (x *GodIslandGameCommanderSetReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameCommanderSetReqMsg) GetCommanders() []int64 {
	if x != nil {
		return x.Commanders
	}
	return nil
}

type GodIslandGameCommanderSetRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Commanders []int64 `protobuf:"varint,2,rep,name=commanders" json:"commanders,omitempty"`
}

func (x *GodIslandGameCommanderSetRespMsg) Reset() {
	*x = GodIslandGameCommanderSetRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCommanderSetRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCommanderSetRespMsg) ProtoMessage() {}

func (x *GodIslandGameCommanderSetRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCommanderSetRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCommanderSetRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{96}
}

func (x *GodIslandGameCommanderSetRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameCommanderSetRespMsg) GetCommanders() []int64 {
	if x != nil {
		return x.Commanders
	}
	return nil
}

type GodIslandGameSetUnionTargetReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CityId     []int32 `protobuf:"varint,2,rep,name=cityId" json:"cityId,omitempty"`
}

func (x *GodIslandGameSetUnionTargetReqMsg) Reset() {
	*x = GodIslandGameSetUnionTargetReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSetUnionTargetReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSetUnionTargetReqMsg) ProtoMessage() {}

func (x *GodIslandGameSetUnionTargetReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSetUnionTargetReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSetUnionTargetReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{97}
}

func (x *GodIslandGameSetUnionTargetReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameSetUnionTargetReqMsg) GetCityId() []int32 {
	if x != nil {
		return x.CityId
	}
	return nil
}

type GodIslandGameSetUnionTargetRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CityId *int32 `protobuf:"varint,2,opt,name=cityId" json:"cityId,omitempty"`
}

func (x *GodIslandGameSetUnionTargetRespMsg) Reset() {
	*x = GodIslandGameSetUnionTargetRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSetUnionTargetRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSetUnionTargetRespMsg) ProtoMessage() {}

func (x *GodIslandGameSetUnionTargetRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSetUnionTargetRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSetUnionTargetRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{98}
}

func (x *GodIslandGameSetUnionTargetRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameSetUnionTargetRespMsg) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

type GodIslandGameForHelpReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CityId     *int32 `protobuf:"varint,2,req,name=cityId" json:"cityId,omitempty"`
}

func (x *GodIslandGameForHelpReqMsg) Reset() {
	*x = GodIslandGameForHelpReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameForHelpReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameForHelpReqMsg) ProtoMessage() {}

func (x *GodIslandGameForHelpReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameForHelpReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameForHelpReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{99}
}

func (x *GodIslandGameForHelpReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameForHelpReqMsg) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

type GodIslandGameForHelpRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandGameForHelpRespMsg) Reset() {
	*x = GodIslandGameForHelpRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameForHelpRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameForHelpRespMsg) ProtoMessage() {}

func (x *GodIslandGameForHelpRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameForHelpRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameForHelpRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{100}
}

func (x *GodIslandGameForHelpRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandGameCityChangeSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityInfo []*GodIslandGameCityInfo `protobuf:"bytes,1,rep,name=cityInfo" json:"cityInfo,omitempty"`
}

func (x *GodIslandGameCityChangeSyncMsg) Reset() {
	*x = GodIslandGameCityChangeSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityChangeSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityChangeSyncMsg) ProtoMessage() {}

func (x *GodIslandGameCityChangeSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityChangeSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityChangeSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{101}
}

func (x *GodIslandGameCityChangeSyncMsg) GetCityInfo() []*GodIslandGameCityInfo {
	if x != nil {
		return x.CityInfo
	}
	return nil
}

type GodIslandGamePlayerWinSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*GodIslandGamePlayerWinInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (x *GodIslandGamePlayerWinSyncMsg) Reset() {
	*x = GodIslandGamePlayerWinSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlayerWinSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlayerWinSyncMsg) ProtoMessage() {}

func (x *GodIslandGamePlayerWinSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlayerWinSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlayerWinSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{102}
}

func (x *GodIslandGamePlayerWinSyncMsg) GetInfo() []*GodIslandGamePlayerWinInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GodIslandGamePlayerWinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	UnionName *string            `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	WinCount  *int32             `protobuf:"varint,3,opt,name=winCount" json:"winCount,omitempty"`
	HeadInfo  *PlayerHeadDataMsg `protobuf:"bytes,4,opt,name=headInfo" json:"headInfo,omitempty"`
}

func (x *GodIslandGamePlayerWinInfo) Reset() {
	*x = GodIslandGamePlayerWinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGamePlayerWinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGamePlayerWinInfo) ProtoMessage() {}

func (x *GodIslandGamePlayerWinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGamePlayerWinInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGamePlayerWinInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{103}
}

func (x *GodIslandGamePlayerWinInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GodIslandGamePlayerWinInfo) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandGamePlayerWinInfo) GetWinCount() int32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *GodIslandGamePlayerWinInfo) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

type GodIslandGameLineInfoSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineInfo    []*GodIslandGameLineInfo          `protobuf:"bytes,1,rep,name=lineInfo" json:"lineInfo,omitempty"`
	BattleInfo  []*GodIslandBattleMsg             `protobuf:"bytes,2,rep,name=battleInfo" json:"battleInfo,omitempty"`
	PowerChange []*GodIslandPlayerPowerChangeInfo `protobuf:"bytes,3,rep,name=powerChange" json:"powerChange,omitempty"`
}

func (x *GodIslandGameLineInfoSyncMsg) Reset() {
	*x = GodIslandGameLineInfoSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameLineInfoSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameLineInfoSyncMsg) ProtoMessage() {}

func (x *GodIslandGameLineInfoSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameLineInfoSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameLineInfoSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{104}
}

func (x *GodIslandGameLineInfoSyncMsg) GetLineInfo() []*GodIslandGameLineInfo {
	if x != nil {
		return x.LineInfo
	}
	return nil
}

func (x *GodIslandGameLineInfoSyncMsg) GetBattleInfo() []*GodIslandBattleMsg {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

func (x *GodIslandGameLineInfoSyncMsg) GetPowerChange() []*GodIslandPlayerPowerChangeInfo {
	if x != nil {
		return x.PowerChange
	}
	return nil
}

type GodIslandBattlePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealmsType *int32                       `protobuf:"varint,1,opt,name=realmsType" json:"realmsType,omitempty"`
	PlayerInfo *GodIslandGameLinePlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *GodIslandBattlePlayer) Reset() {
	*x = GodIslandBattlePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBattlePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBattlePlayer) ProtoMessage() {}

func (x *GodIslandBattlePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBattlePlayer.ProtoReflect.Descriptor instead.
func (*GodIslandBattlePlayer) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{105}
}

func (x *GodIslandBattlePlayer) GetRealmsType() int32 {
	if x != nil && x.RealmsType != nil {
		return *x.RealmsType
	}
	return 0
}

func (x *GodIslandBattlePlayer) GetPlayerInfo() *GodIslandGameLinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type GodIslandGameLineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InCityId    *int32                       `protobuf:"varint,1,opt,name=inCityId" json:"inCityId,omitempty"`
	OutCityId   *int32                       `protobuf:"varint,2,opt,name=outCityId" json:"outCityId,omitempty"`
	InLineType  *int32                       `protobuf:"varint,3,opt,name=inLineType" json:"inLineType,omitempty"`
	OutLineType *int32                       `protobuf:"varint,4,opt,name=outLineType" json:"outLineType,omitempty"`
	PlayerId    *int64                       `protobuf:"varint,5,opt,name=playerId" json:"playerId,omitempty"`
	PlayerInfo  *GodIslandGameLinePlayerInfo `protobuf:"bytes,6,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *GodIslandGameLineInfo) Reset() {
	*x = GodIslandGameLineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameLineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameLineInfo) ProtoMessage() {}

func (x *GodIslandGameLineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameLineInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameLineInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{106}
}

func (x *GodIslandGameLineInfo) GetInCityId() int32 {
	if x != nil && x.InCityId != nil {
		return *x.InCityId
	}
	return 0
}

func (x *GodIslandGameLineInfo) GetOutCityId() int32 {
	if x != nil && x.OutCityId != nil {
		return *x.OutCityId
	}
	return 0
}

func (x *GodIslandGameLineInfo) GetInLineType() int32 {
	if x != nil && x.InLineType != nil {
		return *x.InLineType
	}
	return 0
}

func (x *GodIslandGameLineInfo) GetOutLineType() int32 {
	if x != nil && x.OutLineType != nil {
		return *x.OutLineType
	}
	return 0
}

func (x *GodIslandGameLineInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodIslandGameLineInfo) GetPlayerInfo() *GodIslandGameLinePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type GodIslandPlayerPowerChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId   *int32  `protobuf:"varint,1,opt,name=cityId" json:"cityId,omitempty"`
	PlayerId *int64  `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
	Power    *string `protobuf:"bytes,3,opt,name=power" json:"power,omitempty"`
}

func (x *GodIslandPlayerPowerChangeInfo) Reset() {
	*x = GodIslandPlayerPowerChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerPowerChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerPowerChangeInfo) ProtoMessage() {}

func (x *GodIslandPlayerPowerChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerPowerChangeInfo.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerPowerChangeInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{107}
}

func (x *GodIslandPlayerPowerChangeInfo) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandPlayerPowerChangeInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodIslandPlayerPowerChangeInfo) GetPower() string {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return ""
}

type GodIslandGameAcclerateMoveMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	SpeedUpCount *int32 `protobuf:"varint,2,opt,name=speedUpCount" json:"speedUpCount,omitempty"`
}

func (x *GodIslandGameAcclerateMoveMsg) Reset() {
	*x = GodIslandGameAcclerateMoveMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameAcclerateMoveMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameAcclerateMoveMsg) ProtoMessage() {}

func (x *GodIslandGameAcclerateMoveMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameAcclerateMoveMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameAcclerateMoveMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{108}
}

func (x *GodIslandGameAcclerateMoveMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameAcclerateMoveMsg) GetSpeedUpCount() int32 {
	if x != nil && x.SpeedUpCount != nil {
		return *x.SpeedUpCount
	}
	return 0
}

type GodIslandGameAcclerateMoveRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CostInfo     *string `protobuf:"bytes,2,opt,name=costInfo" json:"costInfo,omitempty"`
	SpeedUpCount *int32  `protobuf:"varint,3,opt,name=speedUpCount" json:"speedUpCount,omitempty"`
}

func (x *GodIslandGameAcclerateMoveRespMsg) Reset() {
	*x = GodIslandGameAcclerateMoveRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameAcclerateMoveRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameAcclerateMoveRespMsg) ProtoMessage() {}

func (x *GodIslandGameAcclerateMoveRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameAcclerateMoveRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameAcclerateMoveRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{109}
}

func (x *GodIslandGameAcclerateMoveRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameAcclerateMoveRespMsg) GetCostInfo() string {
	if x != nil && x.CostInfo != nil {
		return *x.CostInfo
	}
	return ""
}

func (x *GodIslandGameAcclerateMoveRespMsg) GetSpeedUpCount() int32 {
	if x != nil && x.SpeedUpCount != nil {
		return *x.SpeedUpCount
	}
	return 0
}

type GodIslandGameMyGameInfoSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Location   *int32  `protobuf:"varint,2,opt,name=location" json:"location,omitempty"`
	CurPower   *string `protobuf:"bytes,3,opt,name=curPower" json:"curPower,omitempty"`
	MaxPower   *string `protobuf:"bytes,4,opt,name=maxPower" json:"maxPower,omitempty"`
	AttackCd   *int64  `protobuf:"varint,5,opt,name=attackCd" json:"attackCd,omitempty"`
}

func (x *GodIslandGameMyGameInfoSyncMsg) Reset() {
	*x = GodIslandGameMyGameInfoSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameMyGameInfoSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameMyGameInfoSyncMsg) ProtoMessage() {}

func (x *GodIslandGameMyGameInfoSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameMyGameInfoSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameMyGameInfoSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{110}
}

func (x *GodIslandGameMyGameInfoSyncMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameMyGameInfoSyncMsg) GetLocation() int32 {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return 0
}

func (x *GodIslandGameMyGameInfoSyncMsg) GetCurPower() string {
	if x != nil && x.CurPower != nil {
		return *x.CurPower
	}
	return ""
}

func (x *GodIslandGameMyGameInfoSyncMsg) GetMaxPower() string {
	if x != nil && x.MaxPower != nil {
		return *x.MaxPower
	}
	return ""
}

func (x *GodIslandGameMyGameInfoSyncMsg) GetAttackCd() int64 {
	if x != nil && x.AttackCd != nil {
		return *x.AttackCd
	}
	return 0
}

type GodIslandGameSendLiquidReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	LiquidId   *int32 `protobuf:"varint,2,req,name=liquidId" json:"liquidId,omitempty"`
	SendNum    *int32 `protobuf:"varint,3,req,name=sendNum" json:"sendNum,omitempty"`
}

func (x *GodIslandGameSendLiquidReqMsg) Reset() {
	*x = GodIslandGameSendLiquidReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSendLiquidReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSendLiquidReqMsg) ProtoMessage() {}

func (x *GodIslandGameSendLiquidReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSendLiquidReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSendLiquidReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{111}
}

func (x *GodIslandGameSendLiquidReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGameSendLiquidReqMsg) GetLiquidId() int32 {
	if x != nil && x.LiquidId != nil {
		return *x.LiquidId
	}
	return 0
}

func (x *GodIslandGameSendLiquidReqMsg) GetSendNum() int32 {
	if x != nil && x.SendNum != nil {
		return *x.SendNum
	}
	return 0
}

type GodIslandGameSendLiquidRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	NoticeInfo *GodIslandGamePlantNoticeInfo `protobuf:"bytes,2,opt,name=noticeInfo" json:"noticeInfo,omitempty"`
}

func (x *GodIslandGameSendLiquidRespMsg) Reset() {
	*x = GodIslandGameSendLiquidRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSendLiquidRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSendLiquidRespMsg) ProtoMessage() {}

func (x *GodIslandGameSendLiquidRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSendLiquidRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSendLiquidRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{112}
}

func (x *GodIslandGameSendLiquidRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameSendLiquidRespMsg) GetNoticeInfo() *GodIslandGamePlantNoticeInfo {
	if x != nil {
		return x.NoticeInfo
	}
	return nil
}

type GodIslandGameSendLiquidRecordReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGameSendLiquidRecordReqMsg) Reset() {
	*x = GodIslandGameSendLiquidRecordReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSendLiquidRecordReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSendLiquidRecordReqMsg) ProtoMessage() {}

func (x *GodIslandGameSendLiquidRecordReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSendLiquidRecordReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSendLiquidRecordReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{113}
}

func (x *GodIslandGameSendLiquidRecordReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGameSendLiquidRecordRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	SendLiquidRecord []*GodIslandSendLiquidRecord `protobuf:"bytes,2,rep,name=sendLiquidRecord" json:"sendLiquidRecord,omitempty"`
}

func (x *GodIslandGameSendLiquidRecordRespMsg) Reset() {
	*x = GodIslandGameSendLiquidRecordRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameSendLiquidRecordRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameSendLiquidRecordRespMsg) ProtoMessage() {}

func (x *GodIslandGameSendLiquidRecordRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameSendLiquidRecordRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameSendLiquidRecordRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{114}
}

func (x *GodIslandGameSendLiquidRecordRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameSendLiquidRecordRespMsg) GetSendLiquidRecord() []*GodIslandSendLiquidRecord {
	if x != nil {
		return x.SendLiquidRecord
	}
	return nil
}

type GodIslandSendLiquidRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName *string `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	Reward   *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *GodIslandSendLiquidRecord) Reset() {
	*x = GodIslandSendLiquidRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandSendLiquidRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandSendLiquidRecord) ProtoMessage() {}

func (x *GodIslandSendLiquidRecord) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandSendLiquidRecord.ProtoReflect.Descriptor instead.
func (*GodIslandSendLiquidRecord) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{115}
}

func (x *GodIslandSendLiquidRecord) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *GodIslandSendLiquidRecord) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type GodIslandGameHorseLampSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*GodIslandGameHorseLampInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (x *GodIslandGameHorseLampSyncMsg) Reset() {
	*x = GodIslandGameHorseLampSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameHorseLampSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameHorseLampSyncMsg) ProtoMessage() {}

func (x *GodIslandGameHorseLampSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameHorseLampSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameHorseLampSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{116}
}

func (x *GodIslandGameHorseLampSyncMsg) GetInfo() []*GodIslandGameHorseLampInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GodIslandGameHorseLampInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId  *int64  `protobuf:"varint,1,opt,name=serverId" json:"serverId,omitempty"`
	UnionName *string `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	CityId    *int32  `protobuf:"varint,3,opt,name=cityId" json:"cityId,omitempty"`
}

func (x *GodIslandGameHorseLampInfo) Reset() {
	*x = GodIslandGameHorseLampInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameHorseLampInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameHorseLampInfo) ProtoMessage() {}

func (x *GodIslandGameHorseLampInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameHorseLampInfo.ProtoReflect.Descriptor instead.
func (*GodIslandGameHorseLampInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{117}
}

func (x *GodIslandGameHorseLampInfo) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *GodIslandGameHorseLampInfo) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandGameHorseLampInfo) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

type GodIslandGameCityBuffInfoReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandGameCityBuffInfoReqMsg) Reset() {
	*x = GodIslandGameCityBuffInfoReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityBuffInfoReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityBuffInfoReqMsg) ProtoMessage() {}

func (x *GodIslandGameCityBuffInfoReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityBuffInfoReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityBuffInfoReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{118}
}

func (x *GodIslandGameCityBuffInfoReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandGameCityBuffInfoRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Info []*GodIslandGameCityBuffInfo `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (x *GodIslandGameCityBuffInfoRespMsg) Reset() {
	*x = GodIslandGameCityBuffInfoRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityBuffInfoRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityBuffInfoRespMsg) ProtoMessage() {}

func (x *GodIslandGameCityBuffInfoRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityBuffInfoRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityBuffInfoRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{119}
}

func (x *GodIslandGameCityBuffInfoRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandGameCityBuffInfoRespMsg) GetInfo() []*GodIslandGameCityBuffInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GodIslandPlayerReportReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandPlayerReportReqMsg) Reset() {
	*x = GodIslandPlayerReportReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerReportReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerReportReqMsg) ProtoMessage() {}

func (x *GodIslandPlayerReportReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerReportReqMsg.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerReportReqMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{120}
}

func (x *GodIslandPlayerReportReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandPlayerReportRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                            `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	ReportList []*GodIslandPlayerBattleReportMsg `protobuf:"bytes,2,rep,name=reportList" json:"reportList,omitempty"`
}

func (x *GodIslandPlayerReportRespMsg) Reset() {
	*x = GodIslandPlayerReportRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerReportRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerReportRespMsg) ProtoMessage() {}

func (x *GodIslandPlayerReportRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerReportRespMsg.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerReportRespMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{121}
}

func (x *GodIslandPlayerReportRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandPlayerReportRespMsg) GetReportList() []*GodIslandPlayerBattleReportMsg {
	if x != nil {
		return x.ReportList
	}
	return nil
}

type GodIslandPlayerBattleReportMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enemy          *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=enemy" json:"enemy,omitempty"`
	EnemyName      *string            `protobuf:"bytes,2,opt,name=enemyName" json:"enemyName,omitempty"`
	Win            *bool              `protobuf:"varint,3,opt,name=win" json:"win,omitempty"`
	Time           *int64             `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	SelfPower      *string            `protobuf:"bytes,5,opt,name=selfPower" json:"selfPower,omitempty"`
	EnemyPower     *string            `protobuf:"bytes,6,opt,name=enemyPower" json:"enemyPower,omitempty"`
	EnemyLostPower *string            `protobuf:"bytes,7,opt,name=enemyLostPower" json:"enemyLostPower,omitempty"`
	AddScore       *string            `protobuf:"bytes,8,opt,name=addScore" json:"addScore,omitempty"`
	CityId         *int32             `protobuf:"varint,9,opt,name=cityId" json:"cityId,omitempty"`
}

func (x *GodIslandPlayerBattleReportMsg) Reset() {
	*x = GodIslandPlayerBattleReportMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerBattleReportMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerBattleReportMsg) ProtoMessage() {}

func (x *GodIslandPlayerBattleReportMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerBattleReportMsg.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerBattleReportMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{122}
}

func (x *GodIslandPlayerBattleReportMsg) GetEnemy() *PlayerHeadDataMsg {
	if x != nil {
		return x.Enemy
	}
	return nil
}

func (x *GodIslandPlayerBattleReportMsg) GetEnemyName() string {
	if x != nil && x.EnemyName != nil {
		return *x.EnemyName
	}
	return ""
}

func (x *GodIslandPlayerBattleReportMsg) GetWin() bool {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return false
}

func (x *GodIslandPlayerBattleReportMsg) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *GodIslandPlayerBattleReportMsg) GetSelfPower() string {
	if x != nil && x.SelfPower != nil {
		return *x.SelfPower
	}
	return ""
}

func (x *GodIslandPlayerBattleReportMsg) GetEnemyPower() string {
	if x != nil && x.EnemyPower != nil {
		return *x.EnemyPower
	}
	return ""
}

func (x *GodIslandPlayerBattleReportMsg) GetEnemyLostPower() string {
	if x != nil && x.EnemyLostPower != nil {
		return *x.EnemyLostPower
	}
	return ""
}

func (x *GodIslandPlayerBattleReportMsg) GetAddScore() string {
	if x != nil && x.AddScore != nil {
		return *x.AddScore
	}
	return ""
}

func (x *GodIslandPlayerBattleReportMsg) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

type GodIslandUseFruitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UseCount   *int32 `protobuf:"varint,2,req,name=useCount" json:"useCount,omitempty"`
}

func (x *GodIslandUseFruitReq) Reset() {
	*x = GodIslandUseFruitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUseFruitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUseFruitReq) ProtoMessage() {}

func (x *GodIslandUseFruitReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUseFruitReq.ProtoReflect.Descriptor instead.
func (*GodIslandUseFruitReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{123}
}

func (x *GodIslandUseFruitReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandUseFruitReq) GetUseCount() int32 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

type GodIslandUseFruitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CostInfo     *string `protobuf:"bytes,2,opt,name=costInfo" json:"costInfo,omitempty"`
	BallCurPower *string `protobuf:"bytes,3,opt,name=ballCurPower" json:"ballCurPower,omitempty"`
	BallMaxPower *string `protobuf:"bytes,4,opt,name=ballMaxPower" json:"ballMaxPower,omitempty"`
}

func (x *GodIslandUseFruitResp) Reset() {
	*x = GodIslandUseFruitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUseFruitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUseFruitResp) ProtoMessage() {}

func (x *GodIslandUseFruitResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUseFruitResp.ProtoReflect.Descriptor instead.
func (*GodIslandUseFruitResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{124}
}

func (x *GodIslandUseFruitResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandUseFruitResp) GetCostInfo() string {
	if x != nil && x.CostInfo != nil {
		return *x.CostInfo
	}
	return ""
}

func (x *GodIslandUseFruitResp) GetBallCurPower() string {
	if x != nil && x.BallCurPower != nil {
		return *x.BallCurPower
	}
	return ""
}

func (x *GodIslandUseFruitResp) GetBallMaxPower() string {
	if x != nil && x.BallMaxPower != nil {
		return *x.BallMaxPower
	}
	return ""
}

type GodIslandUpdatePowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandUpdatePowerReq) Reset() {
	*x = GodIslandUpdatePowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUpdatePowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUpdatePowerReq) ProtoMessage() {}

func (x *GodIslandUpdatePowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUpdatePowerReq.ProtoReflect.Descriptor instead.
func (*GodIslandUpdatePowerReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{125}
}

func (x *GodIslandUpdatePowerReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandUpdatePowerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandUpdatePowerResp) Reset() {
	*x = GodIslandUpdatePowerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUpdatePowerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUpdatePowerResp) ProtoMessage() {}

func (x *GodIslandUpdatePowerResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUpdatePowerResp.ProtoReflect.Descriptor instead.
func (*GodIslandUpdatePowerResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{126}
}

func (x *GodIslandUpdatePowerResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandBackHomeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandBackHomeReq) Reset() {
	*x = GodIslandBackHomeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBackHomeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBackHomeReq) ProtoMessage() {}

func (x *GodIslandBackHomeReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBackHomeReq.ProtoReflect.Descriptor instead.
func (*GodIslandBackHomeReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{127}
}

func (x *GodIslandBackHomeReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandBackHomeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandBackHomeResp) Reset() {
	*x = GodIslandBackHomeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBackHomeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBackHomeResp) ProtoMessage() {}

func (x *GodIslandBackHomeResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBackHomeResp.ProtoReflect.Descriptor instead.
func (*GodIslandBackHomeResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{128}
}

func (x *GodIslandBackHomeResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandLeftOutSyncInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *GodIslandLeftOutSyncInfo) Reset() {
	*x = GodIslandLeftOutSyncInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandLeftOutSyncInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandLeftOutSyncInfo) ProtoMessage() {}

func (x *GodIslandLeftOutSyncInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandLeftOutSyncInfo.ProtoReflect.Descriptor instead.
func (*GodIslandLeftOutSyncInfo) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{129}
}

func (x *GodIslandLeftOutSyncInfo) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandLeftOutSyncInfo) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type GodIslandSetFriendUnionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	TargetId   *int64 `protobuf:"varint,2,req,name=targetId" json:"targetId,omitempty"`
	Friend     *bool  `protobuf:"varint,3,req,name=friend" json:"friend,omitempty"`
}

func (x *GodIslandSetFriendUnionReq) Reset() {
	*x = GodIslandSetFriendUnionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandSetFriendUnionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandSetFriendUnionReq) ProtoMessage() {}

func (x *GodIslandSetFriendUnionReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandSetFriendUnionReq.ProtoReflect.Descriptor instead.
func (*GodIslandSetFriendUnionReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{130}
}

func (x *GodIslandSetFriendUnionReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandSetFriendUnionReq) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GodIslandSetFriendUnionReq) GetFriend() bool {
	if x != nil && x.Friend != nil {
		return *x.Friend
	}
	return false
}

type GodIslandSetFriendUnionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *GodIslandSetFriendUnionResp) Reset() {
	*x = GodIslandSetFriendUnionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandSetFriendUnionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandSetFriendUnionResp) ProtoMessage() {}

func (x *GodIslandSetFriendUnionResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandSetFriendUnionResp.ProtoReflect.Descriptor instead.
func (*GodIslandSetFriendUnionResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{131}
}

func (x *GodIslandSetFriendUnionResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GodIslandSyncFriendUnionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId *int64 `protobuf:"varint,1,req,name=targetId" json:"targetId,omitempty"`
	Friend   *bool  `protobuf:"varint,2,req,name=friend" json:"friend,omitempty"`
}

func (x *GodIslandSyncFriendUnionMsg) Reset() {
	*x = GodIslandSyncFriendUnionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandSyncFriendUnionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandSyncFriendUnionMsg) ProtoMessage() {}

func (x *GodIslandSyncFriendUnionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandSyncFriendUnionMsg.ProtoReflect.Descriptor instead.
func (*GodIslandSyncFriendUnionMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{132}
}

func (x *GodIslandSyncFriendUnionMsg) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GodIslandSyncFriendUnionMsg) GetFriend() bool {
	if x != nil && x.Friend != nil {
		return *x.Friend
	}
	return false
}

type GodIslandCommanderChangeSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId  *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	HaveCommand *bool  `protobuf:"varint,2,req,name=haveCommand" json:"haveCommand,omitempty"`
}

func (x *GodIslandCommanderChangeSyncMsg) Reset() {
	*x = GodIslandCommanderChangeSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCommanderChangeSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCommanderChangeSyncMsg) ProtoMessage() {}

func (x *GodIslandCommanderChangeSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCommanderChangeSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandCommanderChangeSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{133}
}

func (x *GodIslandCommanderChangeSyncMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandCommanderChangeSyncMsg) GetHaveCommand() bool {
	if x != nil && x.HaveCommand != nil {
		return *x.HaveCommand
	}
	return false
}

type GodIslandBeenKillSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CityId     *int32  `protobuf:"varint,2,opt,name=cityId" json:"cityId,omitempty"`
	TargetId   *int64  `protobuf:"varint,3,opt,name=targetId" json:"targetId,omitempty"`
	TargetName *string `protobuf:"bytes,4,opt,name=targetName" json:"targetName,omitempty"`
	KillByNPc  *bool   `protobuf:"varint,5,opt,name=killByNPc" json:"killByNPc,omitempty"`
}

func (x *GodIslandBeenKillSyncMsg) Reset() {
	*x = GodIslandBeenKillSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandBeenKillSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandBeenKillSyncMsg) ProtoMessage() {}

func (x *GodIslandBeenKillSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandBeenKillSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandBeenKillSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{134}
}

func (x *GodIslandBeenKillSyncMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandBeenKillSyncMsg) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandBeenKillSyncMsg) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GodIslandBeenKillSyncMsg) GetTargetName() string {
	if x != nil && x.TargetName != nil {
		return *x.TargetName
	}
	return ""
}

func (x *GodIslandBeenKillSyncMsg) GetKillByNPc() bool {
	if x != nil && x.KillByNPc != nil {
		return *x.KillByNPc
	}
	return false
}

type GodIslandGameCityBattleSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityStates []*GodIslandCityBattleState `protobuf:"bytes,1,rep,name=cityStates" json:"cityStates,omitempty"`
}

func (x *GodIslandGameCityBattleSyncMsg) Reset() {
	*x = GodIslandGameCityBattleSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGameCityBattleSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGameCityBattleSyncMsg) ProtoMessage() {}

func (x *GodIslandGameCityBattleSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGameCityBattleSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGameCityBattleSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{135}
}

func (x *GodIslandGameCityBattleSyncMsg) GetCityStates() []*GodIslandCityBattleState {
	if x != nil {
		return x.CityStates
	}
	return nil
}

type GodIslandCityBattleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId   *int32 `protobuf:"varint,1,opt,name=cityId" json:"cityId,omitempty"`
	IsBattle *bool  `protobuf:"varint,2,opt,name=isBattle" json:"isBattle,omitempty"`
}

func (x *GodIslandCityBattleState) Reset() {
	*x = GodIslandCityBattleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandCityBattleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandCityBattleState) ProtoMessage() {}

func (x *GodIslandCityBattleState) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandCityBattleState.ProtoReflect.Descriptor instead.
func (*GodIslandCityBattleState) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{136}
}

func (x *GodIslandCityBattleState) GetCityId() int32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GodIslandCityBattleState) GetIsBattle() bool {
	if x != nil && x.IsBattle != nil {
		return *x.IsBattle
	}
	return false
}

type GodIslandAutoBattleStopSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandAutoBattleStopSyncMsg) Reset() {
	*x = GodIslandAutoBattleStopSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandAutoBattleStopSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandAutoBattleStopSyncMsg) ProtoMessage() {}

func (x *GodIslandAutoBattleStopSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandAutoBattleStopSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandAutoBattleStopSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{137}
}

func (x *GodIslandAutoBattleStopSyncMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandUnionBattleScoreListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandUnionBattleScoreListReq) Reset() {
	*x = GodIslandUnionBattleScoreListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionBattleScoreListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionBattleScoreListReq) ProtoMessage() {}

func (x *GodIslandUnionBattleScoreListReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionBattleScoreListReq.ProtoReflect.Descriptor instead.
func (*GodIslandUnionBattleScoreListReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{138}
}

func (x *GodIslandUnionBattleScoreListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandUnionBattleScoreListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ScoreList []*GodIslandUnionBattleScoreMsg `protobuf:"bytes,2,rep,name=scoreList" json:"scoreList,omitempty"`
}

func (x *GodIslandUnionBattleScoreListResp) Reset() {
	*x = GodIslandUnionBattleScoreListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionBattleScoreListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionBattleScoreListResp) ProtoMessage() {}

func (x *GodIslandUnionBattleScoreListResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionBattleScoreListResp.ProtoReflect.Descriptor instead.
func (*GodIslandUnionBattleScoreListResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{139}
}

func (x *GodIslandUnionBattleScoreListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandUnionBattleScoreListResp) GetScoreList() []*GodIslandUnionBattleScoreMsg {
	if x != nil {
		return x.ScoreList
	}
	return nil
}

type GodIslandUnionBattleScoreMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId     *int64  `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	UnionName   *string `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	Flag        *int32  `protobuf:"varint,3,opt,name=flag" json:"flag,omitempty"`
	MasterName  *string `protobuf:"bytes,4,opt,name=masterName" json:"masterName,omitempty"`
	ServerId    *int64  `protobuf:"varint,5,opt,name=serverId" json:"serverId,omitempty"`
	BattleScore *int64  `protobuf:"varint,6,opt,name=battleScore" json:"battleScore,omitempty"`
}

func (x *GodIslandUnionBattleScoreMsg) Reset() {
	*x = GodIslandUnionBattleScoreMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionBattleScoreMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionBattleScoreMsg) ProtoMessage() {}

func (x *GodIslandUnionBattleScoreMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionBattleScoreMsg.ProtoReflect.Descriptor instead.
func (*GodIslandUnionBattleScoreMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{140}
}

func (x *GodIslandUnionBattleScoreMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandUnionBattleScoreMsg) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *GodIslandUnionBattleScoreMsg) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *GodIslandUnionBattleScoreMsg) GetMasterName() string {
	if x != nil && x.MasterName != nil {
		return *x.MasterName
	}
	return ""
}

func (x *GodIslandUnionBattleScoreMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *GodIslandUnionBattleScoreMsg) GetBattleScore() int64 {
	if x != nil && x.BattleScore != nil {
		return *x.BattleScore
	}
	return 0
}

type GodIslandGhostCityUnlockSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Floor      *int32 `protobuf:"varint,2,req,name=floor" json:"floor,omitempty"`
	Group      *int32 `protobuf:"varint,3,req,name=group" json:"group,omitempty"`
}

func (x *GodIslandGhostCityUnlockSyncMsg) Reset() {
	*x = GodIslandGhostCityUnlockSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandGhostCityUnlockSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandGhostCityUnlockSyncMsg) ProtoMessage() {}

func (x *GodIslandGhostCityUnlockSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandGhostCityUnlockSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandGhostCityUnlockSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{141}
}

func (x *GodIslandGhostCityUnlockSyncMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandGhostCityUnlockSyncMsg) GetFloor() int32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return 0
}

func (x *GodIslandGhostCityUnlockSyncMsg) GetGroup() int32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

type GodIslandDeadWeakEffectMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overlay    *int32 `protobuf:"varint,1,opt,name=overlay" json:"overlay,omitempty"`
	Value      *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	ExpireTime *int64 `protobuf:"varint,3,opt,name=expireTime" json:"expireTime,omitempty"`
}

func (x *GodIslandDeadWeakEffectMsg) Reset() {
	*x = GodIslandDeadWeakEffectMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandDeadWeakEffectMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandDeadWeakEffectMsg) ProtoMessage() {}

func (x *GodIslandDeadWeakEffectMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandDeadWeakEffectMsg.ProtoReflect.Descriptor instead.
func (*GodIslandDeadWeakEffectMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{142}
}

func (x *GodIslandDeadWeakEffectMsg) GetOverlay() int32 {
	if x != nil && x.Overlay != nil {
		return *x.Overlay
	}
	return 0
}

func (x *GodIslandDeadWeakEffectMsg) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *GodIslandDeadWeakEffectMsg) GetExpireTime() int64 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

type GodIslandSuppressBuffSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuppressBuff *bool `protobuf:"varint,1,opt,name=suppressBuff" json:"suppressBuff,omitempty"`
}

func (x *GodIslandSuppressBuffSyncMsg) Reset() {
	*x = GodIslandSuppressBuffSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandSuppressBuffSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandSuppressBuffSyncMsg) ProtoMessage() {}

func (x *GodIslandSuppressBuffSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandSuppressBuffSyncMsg.ProtoReflect.Descriptor instead.
func (*GodIslandSuppressBuffSyncMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{143}
}

func (x *GodIslandSuppressBuffSyncMsg) GetSuppressBuff() bool {
	if x != nil && x.SuppressBuff != nil {
		return *x.SuppressBuff
	}
	return false
}

type GodIslandLiquidReceiveRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *GodIslandLiquidReceiveRecordReq) Reset() {
	*x = GodIslandLiquidReceiveRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandLiquidReceiveRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandLiquidReceiveRecordReq) ProtoMessage() {}

func (x *GodIslandLiquidReceiveRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandLiquidReceiveRecordReq.ProtoReflect.Descriptor instead.
func (*GodIslandLiquidReceiveRecordReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{144}
}

func (x *GodIslandLiquidReceiveRecordReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type GodIslandLiquidReceiveRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32                       `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ReceiveLiquidRecord []*GodIslandSendLiquidRecord `protobuf:"bytes,2,rep,name=receiveLiquidRecord" json:"receiveLiquidRecord,omitempty"`
}

func (x *GodIslandLiquidReceiveRecordResp) Reset() {
	*x = GodIslandLiquidReceiveRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandLiquidReceiveRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandLiquidReceiveRecordResp) ProtoMessage() {}

func (x *GodIslandLiquidReceiveRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandLiquidReceiveRecordResp.ProtoReflect.Descriptor instead.
func (*GodIslandLiquidReceiveRecordResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{145}
}

func (x *GodIslandLiquidReceiveRecordResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandLiquidReceiveRecordResp) GetReceiveLiquidRecord() []*GodIslandSendLiquidRecord {
	if x != nil {
		return x.ReceiveLiquidRecord
	}
	return nil
}

type GodIslandUnionMemberScoreListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *GodIslandUnionMemberScoreListReq) Reset() {
	*x = GodIslandUnionMemberScoreListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionMemberScoreListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionMemberScoreListReq) ProtoMessage() {}

func (x *GodIslandUnionMemberScoreListReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionMemberScoreListReq.ProtoReflect.Descriptor instead.
func (*GodIslandUnionMemberScoreListReq) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{146}
}

func (x *GodIslandUnionMemberScoreListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *GodIslandUnionMemberScoreListReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type GodIslandUnionMemberScoreListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32                     `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	UnionId *int64                     `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
	Scores  []*GodIslandPlayerScoreMsg `protobuf:"bytes,3,rep,name=scores" json:"scores,omitempty"`
}

func (x *GodIslandUnionMemberScoreListResp) Reset() {
	*x = GodIslandUnionMemberScoreListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandUnionMemberScoreListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandUnionMemberScoreListResp) ProtoMessage() {}

func (x *GodIslandUnionMemberScoreListResp) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandUnionMemberScoreListResp.ProtoReflect.Descriptor instead.
func (*GodIslandUnionMemberScoreListResp) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{147}
}

func (x *GodIslandUnionMemberScoreListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodIslandUnionMemberScoreListResp) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *GodIslandUnionMemberScoreListResp) GetScores() []*GodIslandPlayerScoreMsg {
	if x != nil {
		return x.Scores
	}
	return nil
}

type GodIslandPlayerScoreMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadInfo     *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=headInfo" json:"headInfo,omitempty"`
	Score        *int64             `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	RoundScore   []int64            `protobuf:"varint,3,rep,name=roundScore" json:"roundScore,omitempty"`
	SuppressBuff *bool              `protobuf:"varint,4,opt,name=suppressBuff" json:"suppressBuff,omitempty"`
}

func (x *GodIslandPlayerScoreMsg) Reset() {
	*x = GodIslandPlayerScoreMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodIsland_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodIslandPlayerScoreMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodIslandPlayerScoreMsg) ProtoMessage() {}

func (x *GodIslandPlayerScoreMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodIsland_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodIslandPlayerScoreMsg.ProtoReflect.Descriptor instead.
func (*GodIslandPlayerScoreMsg) Descriptor() ([]byte, []int) {
	return file_GodIsland_proto_rawDescGZIP(), []int{148}
}

func (x *GodIslandPlayerScoreMsg) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *GodIslandPlayerScoreMsg) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *GodIslandPlayerScoreMsg) GetRoundScore() []int64 {
	if x != nil {
		return x.RoundScore
	}
	return nil
}

func (x *GodIslandPlayerScoreMsg) GetSuppressBuff() bool {
	if x != nil && x.SuppressBuff != nil {
		return *x.SuppressBuff
	}
	return false
}

var File_GodIsland_proto protoreflect.FileDescriptor

var file_GodIsland_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x02, 0x0a, 0x13, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x60, 0x0a, 0x13, 0x70, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x65, 0x61,
	0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x13, 0x70, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x50, 0x0a, 0x0e, 0x6e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x6e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x14,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x43, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x26, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x22,
	0x3f, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x15, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x16, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x22, 0x61, 0x0a, 0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72,
	0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xa8,
	0x04, 0x0a, 0x18, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x33,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x33, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x4e, 0x0a, 0x12, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x03, 0x0a, 0x18, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0xe8, 0x03, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x57,
	0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x10, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1a,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x17, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd1, 0x01,
	0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43,
	0x69, 0x74, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0b, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1c, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x22, 0xe7, 0x02, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x10, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x52, 0x10, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x57, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x4b,
	0x0a, 0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x35, 0x0a, 0x13, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x15, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x42, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x42, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb7,
	0x01, 0x0a, 0x13, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5b, 0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x20, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x18, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x4d,
	0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0x39, 0x0a, 0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x8c, 0x06, 0x0a, 0x18, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x4e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x70,
	0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x6d,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x69, 0x74,
	0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x63, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x65, 0x66, 0x74, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c,
	0x65, 0x66, 0x74, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x6b,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x43, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x43, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x68, 0x6f, 0x73,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x70,
	0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x4e, 0x70, 0x63, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x57, 0x65,
	0x61, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x61,
	0x64, 0x57, 0x65, 0x61, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0e,
	0x64, 0x65, 0x61, 0x64, 0x57, 0x65, 0x61, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x59,
	0x0a, 0x11, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4e, 0x70, 0x63, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x16, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66,
	0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8b,
	0x01, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x56, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x69, 0x74, 0x79, 0x56, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a,
	0x1c, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x45, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0xbe, 0x02, 0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x76, 0x65, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41,
	0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x18, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x18, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x4d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x37,
	0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x63, 0x22, 0x6e, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74,
	0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x46, 0x0a, 0x24, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xa3, 0x03, 0x0a, 0x25, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x57,
	0x65, 0x61, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65,
	0x61, 0x64, 0x57, 0x65, 0x61, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x0e, 0x64, 0x65, 0x61, 0x64, 0x57, 0x65, 0x61, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22,
	0x61, 0x0a, 0x23, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x22, 0x78, 0x0a, 0x24, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x6c,
	0x43, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x21,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x22, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x63, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a,
	0x16, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x63, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x25,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xf9, 0x02, 0x0a, 0x26, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4f,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4f, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x53, 0x0a, 0x0c, 0x6e, 0x70, 0x63, 0x47, 0x75, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x70, 0x63, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x73,
	0x67, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x02,
	0x0a, 0x12, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x0a, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x55, 0x70, 0x22, 0x88, 0x02, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6e, 0x70, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22,
	0xb3, 0x01, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e,
	0x70, 0x63, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x22,
	0x2e, 0x0a, 0x1a, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22,
	0x75, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x6e, 0x6c, 0x79, 0x4e, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f,
	0x6e, 0x6c, 0x79, 0x4e, 0x70, 0x63, 0x22, 0x68, 0x0a, 0x1e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x4e, 0x70,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x6e, 0x6c, 0x79, 0x4e, 0x70, 0x63,
	0x22, 0x55, 0x0a, 0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x18, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x6c, 0x0a, 0x1e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x68,
	0x6f, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x22, 0x90,
	0x01, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x69, 0x6e, 0x69, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x76, 0x65, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x6f, 0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x34, 0x0a, 0x20, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x1c, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x1d, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x50,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a,
	0x25, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x26, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0x4f, 0x0a,
	0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac,
	0x01, 0x0a, 0x1e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a,
	0x1a, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1b, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x0b,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x43, 0x69, 0x74, 0x79, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x44, 0x0a, 0x18,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x22, 0x3f, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22,
	0x41, 0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d,
	0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x20, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x79, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x7a, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x43, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61,
	0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x4d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x54, 0x0a, 0x20, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x21, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x22, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1a, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x4d,
	0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x65,
	0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x1e, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a,
	0x08, 0x63, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x42, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x57, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x1c, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a,
	0x1e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x1d, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75,
	0x0a, 0x21, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x64, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x22,
	0x84, 0x01, 0x0a, 0x1e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x4d,
	0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f,
	0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x23, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x93, 0x01,
	0x0a, 0x24, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x72, 0x73, 0x65, 0x4c, 0x61, 0x6d, 0x70, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x42, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x72, 0x73, 0x65, 0x4c, 0x61, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x1a, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x72, 0x73, 0x65, 0x4c,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1f, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x20,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74,
	0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x1e,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4c, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4c, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x14, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x46, 0x72, 0x75, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x01,
	0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x46, 0x72,
	0x75, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6c,
	0x6c, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6c,
	0x6c, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x39, 0x0a,
	0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x18, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x36, 0x0a, 0x14, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x29,
	0x0a, 0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x48,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x4f, 0x75, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x70, 0x0a, 0x1a, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x22, 0x51, 0x0a, 0x1b, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53,
	0x79, 0x6e, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x63, 0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x68,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x65, 0x65, 0x6e, 0x4b, 0x69, 0x6c, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6b,
	0x69, 0x6c, 0x6c, 0x42, 0x79, 0x4e, 0x50, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x79, 0x4e, 0x50, 0x63, 0x22, 0x6e, 0x0a, 0x1e, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x4c, 0x0a, 0x0a, 0x63,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x69,
	0x74, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x18, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x1e, 0x47, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x20, 0x47,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x85, 0x01, 0x0a, 0x21, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x47, 0x6f, 0x64, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x6d, 0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x68, 0x6f, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x6c, 0x0a, 0x1a, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65,
	0x61, 0x64, 0x57, 0x65, 0x61, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x42, 0x0a, 0x1c, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x66, 0x66, 0x22, 0x41, 0x0a, 0x1f, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x20, 0x47, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x5f, 0x0a,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x5c,
	0x0a, 0x20, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x21, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x2a, 0x8d, 0x16, 0x0a,
	0x12, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x19, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x10, 0xd1, 0xcf, 0x0c, 0x12, 0x16, 0x0a, 0x10, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xd2, 0xcf, 0x0c, 0x12, 0x1c, 0x0a, 0x16,
	0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x10, 0xd3, 0xcf, 0x0c, 0x12, 0x1e, 0x0a, 0x18, 0x67, 0x6f,
	0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0xd4, 0xcf, 0x0c, 0x12, 0x22, 0x0a, 0x1c, 0x67, 0x6f,
	0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0xd5, 0xcf, 0x0c, 0x12, 0x26,
	0x0a, 0x20, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x10, 0xd6, 0xcf, 0x0c, 0x12, 0x28, 0x0a, 0x22, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0xd7, 0xcf, 0x0c,
	0x12, 0x1d, 0x0a, 0x17, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x64, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x10, 0xd8, 0xcf, 0x0c, 0x12,
	0x18, 0x0a, 0x12, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0xd9, 0xcf, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x67, 0x6f, 0x64,
	0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0xda, 0xcf, 0x0c,
	0x12, 0x1d, 0x0a, 0x17, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0xdb, 0xcf, 0x0c, 0x12,
	0x28, 0x0a, 0x22, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0xdc, 0xcf, 0x0c, 0x12, 0x2c, 0x0a, 0x26, 0x67, 0x6f, 0x64,
	0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x10, 0xdd, 0xcf, 0x0c, 0x12, 0x28, 0x0a, 0x22, 0x67, 0x6f, 0x64, 0x5f, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0xde, 0xcf,
	0x0c, 0x12, 0x1b, 0x0a, 0x15, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x10, 0xe3, 0xcf, 0x0c, 0x12, 0x1f,
	0x0a, 0x19, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xe4, 0xcf, 0x0c, 0x12,
	0x25, 0x0a, 0x1f, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x10, 0xe6, 0xcf, 0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0xe7, 0xcf, 0x0c, 0x12, 0x1b, 0x0a, 0x15, 0x67,
	0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0xe8, 0xcf, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x67, 0x6f, 0x64, 0x5f,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x10, 0xe9, 0xcf, 0x0c, 0x12, 0x28,
	0x0a, 0x22, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x10, 0xea, 0xcf, 0x0c, 0x12, 0x26, 0x0a, 0x20, 0x67, 0x6f, 0x64, 0x5f,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x53,
	0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x10, 0xeb, 0xcf, 0x0c,
	0x12, 0x26, 0x0a, 0x20, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x10, 0xec, 0xcf, 0x0c, 0x12, 0x2b, 0x0a, 0x25, 0x67, 0x6f, 0x64, 0x5f,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x10, 0xed, 0xcf, 0x0c, 0x12, 0x1c, 0x0a, 0x16, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10,
	0xee, 0xcf, 0x0c, 0x12, 0x21, 0x0a, 0x1b, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x10, 0xef, 0xcf, 0x0c, 0x12, 0x1a, 0x0a, 0x14, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0xf0,
	0xcf, 0x0c, 0x12, 0x20, 0x0a, 0x1a, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x10, 0xf1, 0xcf, 0x0c, 0x12, 0x22, 0x0a, 0x1c, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x10, 0xf2, 0xcf, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x67, 0x6f, 0x64, 0x5f,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0xf3, 0xcf, 0x0c, 0x12, 0x20,
	0x0a, 0x1a, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0xf4, 0xcf, 0x0c,
	0x12, 0x1f, 0x0a, 0x19, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x75, 0x69, 0x74, 0x10, 0xf5, 0xcf,
	0x0c, 0x12, 0x2a, 0x0a, 0x24, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x66, 0x72, 0x75, 0x69, 0x74, 0x73, 0x10, 0xf6, 0xcf, 0x0c, 0x12, 0x21, 0x0a,
	0x1b, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x10, 0xf7, 0xcf, 0x0c,
	0x12, 0x1d, 0x0a, 0x17, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0xf8, 0xcf, 0x0c, 0x12,
	0x20, 0x0a, 0x1a, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x10, 0xf9, 0xcf,
	0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x10, 0xfa, 0xcf, 0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x10, 0xfb, 0xcf, 0x0c, 0x12, 0x26, 0x0a, 0x20, 0x67,
	0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x10,
	0xfc, 0xcf, 0x0c, 0x12, 0x1e, 0x0a, 0x18, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x10,
	0xfd, 0xcf, 0x0c, 0x12, 0x26, 0x0a, 0x20, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x10, 0xfe, 0xcf, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x67,
	0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x10, 0xff,
	0xcf, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x10, 0x80, 0xd0, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x67, 0x6f, 0x64, 0x5f,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x81, 0xd0, 0x0c, 0x12,
	0x25, 0x0a, 0x1f, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x10, 0x82, 0xd0, 0x0c, 0x12, 0x27, 0x0a, 0x21, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f,
	0x53, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x10, 0x83, 0xd0, 0x0c, 0x12,
	0x2e, 0x0a, 0x28, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x84, 0xd0, 0x0c, 0x12,
	0x25, 0x0a, 0x1f, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x10, 0x85, 0xd0, 0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x10, 0x86, 0xd0, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x67,
	0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x87, 0xd0,
	0x0c, 0x12, 0x1f, 0x0a, 0x19, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x10, 0x88,
	0xd0, 0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x10, 0x89, 0xd0, 0x0c, 0x12, 0x26, 0x0a, 0x20, 0x67, 0x6f, 0x64, 0x5f, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x8a, 0xd0, 0x0c, 0x12,
	0x27, 0x0a, 0x21, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x10, 0x8b, 0xd0, 0x0c, 0x12, 0x2b, 0x0a, 0x25, 0x67, 0x6f, 0x64, 0x5f,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x10, 0x8c, 0xd0, 0x0c, 0x12, 0x1f, 0x0a, 0x19, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x10, 0x8d, 0xd0, 0x0c, 0x12, 0x21, 0x0a, 0x1b, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x8e, 0xd0, 0x0c, 0x12, 0x26, 0x0a, 0x20, 0x67, 0x6f, 0x64,
	0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x10, 0x8f, 0xd0,
	0x0c, 0x12, 0x27, 0x0a, 0x21, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x10, 0x90, 0xd0, 0x0c, 0x12, 0x1d, 0x0a, 0x17, 0x67, 0x6f,
	0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x96, 0xd0, 0x0c, 0x12, 0x1c, 0x0a, 0x16, 0x67, 0x6f, 0x64,
	0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x10, 0x97, 0xd0, 0x0c, 0x12, 0x1c, 0x0a, 0x16, 0x67, 0x6f, 0x64, 0x5f, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x10, 0x98, 0xd0, 0x0c, 0x12, 0x20, 0x0a, 0x1a, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x10, 0x99, 0xd0, 0x0c, 0x12, 0x30, 0x0a, 0x2a, 0x67, 0x6f, 0x64, 0x5f, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x9a, 0xd0, 0x0c, 0x12, 0x31, 0x0a, 0x2b, 0x67, 0x6f, 0x64,
	0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x75, 0x69, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x9b, 0xd0, 0x0c, 0x12, 0x27, 0x0a, 0x21,
	0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x10, 0x9c, 0xd0, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x9d, 0xd0, 0x0c, 0x12, 0x23, 0x0a, 0x1d,
	0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x9e, 0xd0,
	0x0c, 0x12, 0x2e, 0x0a, 0x28, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x9f, 0xd0,
	0x0c, 0x12, 0x29, 0x0a, 0x23, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x10, 0xa0, 0xd0, 0x0c, 0x12, 0x21, 0x0a, 0x1b,
	0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0xa1, 0xd0, 0x0c, 0x12,
	0x1f, 0x0a, 0x19, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x66, 0x72, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0xa2, 0xd0, 0x0c,
	0x12, 0x20, 0x0a, 0x1a, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0xa3,
	0xd0, 0x0c, 0x12, 0x1f, 0x0a, 0x19, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10,
	0xa4, 0xd0, 0x0c, 0x12, 0x21, 0x0a, 0x1b, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x10, 0xa5, 0xd0, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x67, 0x6f, 0x64, 0x5f, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0xa6, 0xd0, 0x0c, 0x2a, 0xa9, 0x03, 0x0a,
	0x15, 0x47, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x47, 0x75,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x67,
	0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x67, 0x6f, 0x64, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x46, 0x72, 0x75, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x64, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0x07, 0x12, 0x1b, 0x0a, 0x17, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x08, 0x12, 0x20,
	0x0a, 0x1c, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x09,
	0x12, 0x21, 0x0a, 0x1d, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17,
	0x67, 0x6f, 0x64, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x67, 0x6f, 0x64,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x0d, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69,
	0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_GodIsland_proto_rawDescOnce sync.Once
	file_GodIsland_proto_rawDescData = file_GodIsland_proto_rawDesc
)

func file_GodIsland_proto_rawDescGZIP() []byte {
	file_GodIsland_proto_rawDescOnce.Do(func() {
		file_GodIsland_proto_rawDescData = protoimpl.X.CompressGZIP(file_GodIsland_proto_rawDescData)
	})
	return file_GodIsland_proto_rawDescData
}

var file_GodIsland_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_GodIsland_proto_msgTypes = make([]protoimpl.MessageInfo, 149)
var file_GodIsland_proto_goTypes = []any{
	(GodIslandProtocols)(0),                        // 0: com.yq.msg.CityMsg.GodIslandProtocols
	(GodIslandRedPointEnum)(0),                     // 1: com.yq.msg.CityMsg.GodIslandRedPointEnum
	(*GodIslandConfigSync)(nil),                    // 2: com.yq.msg.CityMsg.GodIslandConfigSync
	(*GodIslandGroupConfig)(nil),                   // 3: com.yq.msg.CityMsg.GodIslandGroupConfig
	(*GodIslandEventConfig)(nil),                   // 4: com.yq.msg.CityMsg.GodIslandEventConfig
	(*GodIslandCityConfig)(nil),                    // 5: com.yq.msg.CityMsg.GodIslandCityConfig
	(*GodIslandGetJoinMemberListReq)(nil),          // 6: com.yq.msg.CityMsg.GodIslandGetJoinMemberListReq
	(*GodIslandGetJoinMemberListRsp)(nil),          // 7: com.yq.msg.CityMsg.GodIslandGetJoinMemberListRsp
	(*GodIslandJoinMemberMsg)(nil),                 // 8: com.yq.msg.CityMsg.GodIslandJoinMemberMsg
	(*GodIslandUnionRankMsg)(nil),                  // 9: com.yq.msg.CityMsg.GodIslandUnionRankMsg
	(*GodIslandUnionRankList)(nil),                 // 10: com.yq.msg.CityMsg.GodIslandUnionRankList
	(*GodIslandPlayerRankMsg)(nil),                 // 11: com.yq.msg.CityMsg.GodIslandPlayerRankMsg
	(*GodIslandPlayerRankList)(nil),                // 12: com.yq.msg.CityMsg.GodIslandPlayerRankList
	(*GodIslandBaseInfoReqMsg)(nil),                // 13: com.yq.msg.CityMsg.GodIslandBaseInfoReqMsg
	(*GodIslandBaseInfoRespMsg)(nil),               // 14: com.yq.msg.CityMsg.GodIslandBaseInfoRespMsg
	(*FloorGroupCountMsg)(nil),                     // 15: com.yq.msg.CityMsg.FloorGroupCountMsg
	(*GodIslandRoundSettleData)(nil),               // 16: com.yq.msg.CityMsg.GodIslandRoundSettleData
	(*GodIslandWorshipPlayerMsg)(nil),              // 17: com.yq.msg.CityMsg.GodIslandWorshipPlayerMsg
	(*GodIslandUnionDamageReqMsg)(nil),             // 18: com.yq.msg.CityMsg.GodIslandUnionDamageReqMsg
	(*GodIslandUnionDamageRespMsg)(nil),            // 19: com.yq.msg.CityMsg.GodIslandUnionDamageRespMsg
	(*GodIslandPlayerBaseInfo)(nil),                // 20: com.yq.msg.CityMsg.GodIslandPlayerBaseInfo
	(*GodIslandGroupReqMsg)(nil),                   // 21: com.yq.msg.CityMsg.GodIslandGroupReqMsg
	(*GodIslandGroupRespMsg)(nil),                  // 22: com.yq.msg.CityMsg.GodIslandGroupRespMsg
	(*GodIslandGroupBaseMsg)(nil),                  // 23: com.yq.msg.CityMsg.GodIslandGroupBaseMsg
	(*GodIslandReportReqMsg)(nil),                  // 24: com.yq.msg.CityMsg.GodIslandReportReqMsg
	(*GodIslandReportRespMsg)(nil),                 // 25: com.yq.msg.CityMsg.GodIslandReportRespMsg
	(*GodIslandCityBattleReport)(nil),              // 26: com.yq.msg.CityMsg.GodIslandCityBattleReport
	(*GodIslandReportDetailReqMsg)(nil),            // 27: com.yq.msg.CityMsg.GodIslandReportDetailReqMsg
	(*GodIslandReportDetailRespMsg)(nil),           // 28: com.yq.msg.CityMsg.GodIslandReportDetailRespMsg
	(*GodIslandCityReportDetail)(nil),              // 29: com.yq.msg.CityMsg.GodIslandCityReportDetail
	(*GodIslandCityReportItem)(nil),                // 30: com.yq.msg.CityMsg.GodIslandCityReportItem
	(*GodIslandWorshipReq)(nil),                    // 31: com.yq.msg.CityMsg.GodIslandWorshipReq
	(*GodIslandWorshipResp)(nil),                   // 32: com.yq.msg.CityMsg.GodIslandWorshipResp
	(*GodIslandRedDotReqMsg)(nil),                  // 33: com.yq.msg.CityMsg.GodIslandRedDotReqMsg
	(*GodIslandRedDotRespMsg)(nil),                 // 34: com.yq.msg.CityMsg.GodIslandRedDotRespMsg
	(*GodIslandBetUnionInfoList)(nil),              // 35: com.yq.msg.CityMsg.GodIslandBetUnionInfoList
	(*GodIslandBetUnionInfo)(nil),                  // 36: com.yq.msg.CityMsg.GodIslandBetUnionInfo
	(*GodIslandSettleData)(nil),                    // 37: com.yq.msg.CityMsg.GodIslandSettleData
	(*GodIslandUnionGroupDamageReqMsg)(nil),        // 38: com.yq.msg.CityMsg.GodIslandUnionGroupDamageReqMsg
	(*GodIslandUnionGroupDamageRespMsg)(nil),       // 39: com.yq.msg.CityMsg.GodIslandUnionGroupDamageRespMsg
	(*GodIslandGroupScoreInfo)(nil),                // 40: com.yq.msg.CityMsg.GodIslandGroupScoreInfo
	(*GodIslandHeartBeatReqMsg)(nil),               // 41: com.yq.msg.CityMsg.GodIslandHeartBeatReqMsg
	(*GodIslandHeartBeatRespMsg)(nil),              // 42: com.yq.msg.CityMsg.GodIslandHeartBeatRespMsg
	(*GodIslandGameInfoReqMsg)(nil),                // 43: com.yq.msg.CityMsg.GodIslandGameInfoReqMsg
	(*GodIslandGameInfoRespMsg)(nil),               // 44: com.yq.msg.CityMsg.GodIslandGameInfoRespMsg
	(*GodIslandNpcEvent)(nil),                      // 45: com.yq.msg.CityMsg.GodIslandNpcEvent
	(*GodIslandGameRouteInfo)(nil),                 // 46: com.yq.msg.CityMsg.GodIslandGameRouteInfo
	(*GodIslandRouterAppearanceMsg)(nil),           // 47: com.yq.msg.CityMsg.GodIslandRouterAppearanceMsg
	(*GodIslandGameRouteInfoSyncMsg)(nil),          // 48: com.yq.msg.CityMsg.GodIslandGameRouteInfoSyncMsg
	(*GodIslandGameCityInfoReqMsg)(nil),            // 49: com.yq.msg.CityMsg.GodIslandGameCityInfoReqMsg
	(*GodIslandGameCityInfoRespMsg)(nil),           // 50: com.yq.msg.CityMsg.GodIslandGameCityInfoRespMsg
	(*GodIslandGameCityInfo)(nil),                  // 51: com.yq.msg.CityMsg.GodIslandGameCityInfo
	(*GodIslandUnionSimpleInfo)(nil),               // 52: com.yq.msg.CityMsg.GodIslandUnionSimpleInfo
	(*GodIslandGameEventReqMsg)(nil),               // 53: com.yq.msg.CityMsg.GodIslandGameEventReqMsg
	(*GodIslandGameEventRespMsg)(nil),              // 54: com.yq.msg.CityMsg.GodIslandGameEventRespMsg
	(*GodIslandGameEventSyncMsg)(nil),              // 55: com.yq.msg.CityMsg.GodIslandGameEventSyncMsg
	(*GodIslandGameCityBuffSync)(nil),              // 56: com.yq.msg.CityMsg.GodIslandGameCityBuffSync
	(*GodIslandGameCityBuffInfo)(nil),              // 57: com.yq.msg.CityMsg.GodIslandGameCityBuffInfo
	(*GodIslandGameSpiritualBallInfoReqMsg)(nil),   // 58: com.yq.msg.CityMsg.GodIslandGameSpiritualBallInfoReqMsg
	(*GodIslandGameSpiritualBallInfoRespMsg)(nil),  // 59: com.yq.msg.CityMsg.GodIslandGameSpiritualBallInfoRespMsg
	(*GodIslandGameUseSpiritualBallReqMsg)(nil),    // 60: com.yq.msg.CityMsg.GodIslandGameUseSpiritualBallReqMsg
	(*GodIslandGameUseSpiritualBallRespMsg)(nil),   // 61: com.yq.msg.CityMsg.GodIslandGameUseSpiritualBallRespMsg
	(*GodIslandGameTargetCityInfoReqMsg)(nil),      // 62: com.yq.msg.CityMsg.GodIslandGameTargetCityInfoReqMsg
	(*GodIslandGameTargetCityInfoRespMsg)(nil),     // 63: com.yq.msg.CityMsg.GodIslandGameTargetCityInfoRespMsg
	(*GodIslandPlayerIconMsg)(nil),                 // 64: com.yq.msg.CityMsg.GodIslandPlayerIconMsg
	(*GodIslandGameTargetCityLineInfoReqMsg)(nil),  // 65: com.yq.msg.CityMsg.GodIslandGameTargetCityLineInfoReqMsg
	(*GodIslandGameTargetCityLineInfoRespMsg)(nil), // 66: com.yq.msg.CityMsg.GodIslandGameTargetCityLineInfoRespMsg
	(*GodIslandBattleMsg)(nil),                     // 67: com.yq.msg.CityMsg.GodIslandBattleMsg
	(*GodIslandGameLinePlayerInfo)(nil),            // 68: com.yq.msg.CityMsg.GodIslandGameLinePlayerInfo
	(*GodIslandGameLineBattleInfo)(nil),            // 69: com.yq.msg.CityMsg.GodIslandGameLineBattleInfo
	(*GodIslandGameAttackReqMsg)(nil),              // 70: com.yq.msg.CityMsg.GodIslandGameAttackReqMsg
	(*GodIslandGameAttackRespMsg)(nil),             // 71: com.yq.msg.CityMsg.GodIslandGameAttackRespMsg
	(*GodIslandGameAutoAttackReqMsg)(nil),          // 72: com.yq.msg.CityMsg.GodIslandGameAutoAttackReqMsg
	(*GodIslandGameAutoAttackRespMsg)(nil),         // 73: com.yq.msg.CityMsg.GodIslandGameAutoAttackRespMsg
	(*GodIslandGameMoveReqMsg)(nil),                // 74: com.yq.msg.CityMsg.GodIslandGameMoveReqMsg
	(*GodIslandGameMoveRespMsg)(nil),               // 75: com.yq.msg.CityMsg.GodIslandGameMoveRespMsg
	(*GodIslandGameMiniMapInfoReqMsg)(nil),         // 76: com.yq.msg.CityMsg.GodIslandGameMiniMapInfoReqMsg
	(*GodIslandGameMiniMapInfoRespMsg)(nil),        // 77: com.yq.msg.CityMsg.GodIslandGameMiniMapInfoRespMsg
	(*GodIslandGameMiniCityInfo)(nil),              // 78: com.yq.msg.CityMsg.GodIslandGameMiniCityInfo
	(*GodIslandGameSetUnionTypeReqMsg)(nil),        // 79: com.yq.msg.CityMsg.GodIslandGameSetUnionTypeReqMsg
	(*GodIslandGameSetUnionTypeRespMsg)(nil),       // 80: com.yq.msg.CityMsg.GodIslandGameSetUnionTypeRespMsg
	(*GodIslandGamePlantInfoReqMsg)(nil),           // 81: com.yq.msg.CityMsg.GodIslandGamePlantInfoReqMsg
	(*GodIslandGamePlantInfoRespMsg)(nil),          // 82: com.yq.msg.CityMsg.GodIslandGamePlantInfoRespMsg
	(*GodIslandGamePlantNoticeInfo)(nil),           // 83: com.yq.msg.CityMsg.GodIslandGamePlantNoticeInfo
	(*GodIslandGamePlantReceiveFruitsReqMsg)(nil),  // 84: com.yq.msg.CityMsg.GodIslandGamePlantReceiveFruitsReqMsg
	(*GodIslandGamePlantReceiveFruitsRespMsg)(nil), // 85: com.yq.msg.CityMsg.GodIslandGamePlantReceiveFruitsRespMsg
	(*GodIslandGamePlantWaterReqMsg)(nil),          // 86: com.yq.msg.CityMsg.GodIslandGamePlantWaterReqMsg
	(*GodIslandGamePlantWaterRespMsg)(nil),         // 87: com.yq.msg.CityMsg.GodIslandGamePlantWaterRespMsg
	(*GodIslandCrystalInfoReqMsg)(nil),             // 88: com.yq.msg.CityMsg.GodIslandCrystalInfoReqMsg
	(*GodIslandCrystalInfoRespMsg)(nil),            // 89: com.yq.msg.CityMsg.GodIslandCrystalInfoRespMsg
	(*GodIslandCityCrystalInfo)(nil),               // 90: com.yq.msg.CityMsg.GodIslandCityCrystalInfo
	(*GodIslandCrystalReceiveReqMsg)(nil),          // 91: com.yq.msg.CityMsg.GodIslandCrystalReceiveReqMsg
	(*GodIslandCrystalReceiveRespMsg)(nil),         // 92: com.yq.msg.CityMsg.GodIslandCrystalReceiveRespMsg
	(*GodIslandGameStrategyInfoReqMsg)(nil),        // 93: com.yq.msg.CityMsg.GodIslandGameStrategyInfoReqMsg
	(*GodIslandGameStrategyInfoRespMsg)(nil),       // 94: com.yq.msg.CityMsg.GodIslandGameStrategyInfoRespMsg
	(*GodIslandPlayerSimpleInfo)(nil),              // 95: com.yq.msg.CityMsg.GodIslandPlayerSimpleInfo
	(*GodIslandOccupyCities)(nil),                  // 96: com.yq.msg.CityMsg.GodIslandOccupyCities
	(*GodIslandGameCommanderSetReqMsg)(nil),        // 97: com.yq.msg.CityMsg.GodIslandGameCommanderSetReqMsg
	(*GodIslandGameCommanderSetRespMsg)(nil),       // 98: com.yq.msg.CityMsg.GodIslandGameCommanderSetRespMsg
	(*GodIslandGameSetUnionTargetReqMsg)(nil),      // 99: com.yq.msg.CityMsg.GodIslandGameSetUnionTargetReqMsg
	(*GodIslandGameSetUnionTargetRespMsg)(nil),     // 100: com.yq.msg.CityMsg.GodIslandGameSetUnionTargetRespMsg
	(*GodIslandGameForHelpReqMsg)(nil),             // 101: com.yq.msg.CityMsg.GodIslandGameForHelpReqMsg
	(*GodIslandGameForHelpRespMsg)(nil),            // 102: com.yq.msg.CityMsg.GodIslandGameForHelpRespMsg
	(*GodIslandGameCityChangeSyncMsg)(nil),         // 103: com.yq.msg.CityMsg.GodIslandGameCityChangeSyncMsg
	(*GodIslandGamePlayerWinSyncMsg)(nil),          // 104: com.yq.msg.CityMsg.GodIslandGamePlayerWinSyncMsg
	(*GodIslandGamePlayerWinInfo)(nil),             // 105: com.yq.msg.CityMsg.GodIslandGamePlayerWinInfo
	(*GodIslandGameLineInfoSyncMsg)(nil),           // 106: com.yq.msg.CityMsg.GodIslandGameLineInfoSyncMsg
	(*GodIslandBattlePlayer)(nil),                  // 107: com.yq.msg.CityMsg.GodIslandBattlePlayer
	(*GodIslandGameLineInfo)(nil),                  // 108: com.yq.msg.CityMsg.GodIslandGameLineInfo
	(*GodIslandPlayerPowerChangeInfo)(nil),         // 109: com.yq.msg.CityMsg.GodIslandPlayerPowerChangeInfo
	(*GodIslandGameAcclerateMoveMsg)(nil),          // 110: com.yq.msg.CityMsg.GodIslandGameAcclerateMoveMsg
	(*GodIslandGameAcclerateMoveRespMsg)(nil),      // 111: com.yq.msg.CityMsg.GodIslandGameAcclerateMoveRespMsg
	(*GodIslandGameMyGameInfoSyncMsg)(nil),         // 112: com.yq.msg.CityMsg.GodIslandGameMyGameInfoSyncMsg
	(*GodIslandGameSendLiquidReqMsg)(nil),          // 113: com.yq.msg.CityMsg.GodIslandGameSendLiquidReqMsg
	(*GodIslandGameSendLiquidRespMsg)(nil),         // 114: com.yq.msg.CityMsg.GodIslandGameSendLiquidRespMsg
	(*GodIslandGameSendLiquidRecordReqMsg)(nil),    // 115: com.yq.msg.CityMsg.GodIslandGameSendLiquidRecordReqMsg
	(*GodIslandGameSendLiquidRecordRespMsg)(nil),   // 116: com.yq.msg.CityMsg.GodIslandGameSendLiquidRecordRespMsg
	(*GodIslandSendLiquidRecord)(nil),              // 117: com.yq.msg.CityMsg.GodIslandSendLiquidRecord
	(*GodIslandGameHorseLampSyncMsg)(nil),          // 118: com.yq.msg.CityMsg.GodIslandGameHorseLampSyncMsg
	(*GodIslandGameHorseLampInfo)(nil),             // 119: com.yq.msg.CityMsg.GodIslandGameHorseLampInfo
	(*GodIslandGameCityBuffInfoReqMsg)(nil),        // 120: com.yq.msg.CityMsg.GodIslandGameCityBuffInfoReqMsg
	(*GodIslandGameCityBuffInfoRespMsg)(nil),       // 121: com.yq.msg.CityMsg.GodIslandGameCityBuffInfoRespMsg
	(*GodIslandPlayerReportReqMsg)(nil),            // 122: com.yq.msg.CityMsg.GodIslandPlayerReportReqMsg
	(*GodIslandPlayerReportRespMsg)(nil),           // 123: com.yq.msg.CityMsg.GodIslandPlayerReportRespMsg
	(*GodIslandPlayerBattleReportMsg)(nil),         // 124: com.yq.msg.CityMsg.GodIslandPlayerBattleReportMsg
	(*GodIslandUseFruitReq)(nil),                   // 125: com.yq.msg.CityMsg.GodIslandUseFruitReq
	(*GodIslandUseFruitResp)(nil),                  // 126: com.yq.msg.CityMsg.GodIslandUseFruitResp
	(*GodIslandUpdatePowerReq)(nil),                // 127: com.yq.msg.CityMsg.GodIslandUpdatePowerReq
	(*GodIslandUpdatePowerResp)(nil),               // 128: com.yq.msg.CityMsg.GodIslandUpdatePowerResp
	(*GodIslandBackHomeReq)(nil),                   // 129: com.yq.msg.CityMsg.GodIslandBackHomeReq
	(*GodIslandBackHomeResp)(nil),                  // 130: com.yq.msg.CityMsg.GodIslandBackHomeResp
	(*GodIslandLeftOutSyncInfo)(nil),               // 131: com.yq.msg.CityMsg.GodIslandLeftOutSyncInfo
	(*GodIslandSetFriendUnionReq)(nil),             // 132: com.yq.msg.CityMsg.GodIslandSetFriendUnionReq
	(*GodIslandSetFriendUnionResp)(nil),            // 133: com.yq.msg.CityMsg.GodIslandSetFriendUnionResp
	(*GodIslandSyncFriendUnionMsg)(nil),            // 134: com.yq.msg.CityMsg.GodIslandSyncFriendUnionMsg
	(*GodIslandCommanderChangeSyncMsg)(nil),        // 135: com.yq.msg.CityMsg.GodIslandCommanderChangeSyncMsg
	(*GodIslandBeenKillSyncMsg)(nil),               // 136: com.yq.msg.CityMsg.GodIslandBeenKillSyncMsg
	(*GodIslandGameCityBattleSyncMsg)(nil),         // 137: com.yq.msg.CityMsg.GodIslandGameCityBattleSyncMsg
	(*GodIslandCityBattleState)(nil),               // 138: com.yq.msg.CityMsg.GodIslandCityBattleState
	(*GodIslandAutoBattleStopSyncMsg)(nil),         // 139: com.yq.msg.CityMsg.GodIslandAutoBattleStopSyncMsg
	(*GodIslandUnionBattleScoreListReq)(nil),       // 140: com.yq.msg.CityMsg.GodIslandUnionBattleScoreListReq
	(*GodIslandUnionBattleScoreListResp)(nil),      // 141: com.yq.msg.CityMsg.GodIslandUnionBattleScoreListResp
	(*GodIslandUnionBattleScoreMsg)(nil),           // 142: com.yq.msg.CityMsg.GodIslandUnionBattleScoreMsg
	(*GodIslandGhostCityUnlockSyncMsg)(nil),        // 143: com.yq.msg.CityMsg.GodIslandGhostCityUnlockSyncMsg
	(*GodIslandDeadWeakEffectMsg)(nil),             // 144: com.yq.msg.CityMsg.GodIslandDeadWeakEffectMsg
	(*GodIslandSuppressBuffSyncMsg)(nil),           // 145: com.yq.msg.CityMsg.GodIslandSuppressBuffSyncMsg
	(*GodIslandLiquidReceiveRecordReq)(nil),        // 146: com.yq.msg.CityMsg.GodIslandLiquidReceiveRecordReq
	(*GodIslandLiquidReceiveRecordResp)(nil),       // 147: com.yq.msg.CityMsg.GodIslandLiquidReceiveRecordResp
	(*GodIslandUnionMemberScoreListReq)(nil),       // 148: com.yq.msg.CityMsg.GodIslandUnionMemberScoreListReq
	(*GodIslandUnionMemberScoreListResp)(nil),      // 149: com.yq.msg.CityMsg.GodIslandUnionMemberScoreListResp
	(*GodIslandPlayerScoreMsg)(nil),                // 150: com.yq.msg.CityMsg.GodIslandPlayerScoreMsg
	(*ActivityPeakHoldTimeConfig)(nil),             // 151: com.yq.msg.CityMsg.ActivityPeakHoldTimeConfig
	(*PlayerHeadDataMsg)(nil),                      // 152: com.yq.msg.CityMsg.PlayerHeadDataMsg
	(*UnionBaseData)(nil),                          // 153: com.yq.msg.CityMsg.UnionBaseData
	(*PlayerCharacterImageMsg)(nil),                // 154: com.yq.msg.CityMsg.PlayerCharacterImageMsg
}
var file_GodIsland_proto_depIdxs = []int32{
	151, // 0: com.yq.msg.CityMsg.GodIslandConfigSync.peakHoldTimeConfigs:type_name -> com.yq.msg.CityMsg.ActivityPeakHoldTimeConfig
	3,   // 1: com.yq.msg.CityMsg.GodIslandConfigSync.groupConfig:type_name -> com.yq.msg.CityMsg.GodIslandGroupConfig
	4,   // 2: com.yq.msg.CityMsg.GodIslandConfigSync.npcEventConfig:type_name -> com.yq.msg.CityMsg.GodIslandEventConfig
	5,   // 3: com.yq.msg.CityMsg.GodIslandConfigSync.cityConfig:type_name -> com.yq.msg.CityMsg.GodIslandCityConfig
	8,   // 4: com.yq.msg.CityMsg.GodIslandGetJoinMemberListRsp.joinMemberList:type_name -> com.yq.msg.CityMsg.GodIslandJoinMemberMsg
	152, // 5: com.yq.msg.CityMsg.GodIslandJoinMemberMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	153, // 6: com.yq.msg.CityMsg.GodIslandUnionRankMsg.baseData:type_name -> com.yq.msg.CityMsg.UnionBaseData
	9,   // 7: com.yq.msg.CityMsg.GodIslandUnionRankList.rankInfo:type_name -> com.yq.msg.CityMsg.GodIslandUnionRankMsg
	154, // 8: com.yq.msg.CityMsg.GodIslandPlayerRankMsg.playerBaseData:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	11,  // 9: com.yq.msg.CityMsg.GodIslandPlayerRankList.rankInfo:type_name -> com.yq.msg.CityMsg.GodIslandPlayerRankMsg
	16,  // 10: com.yq.msg.CityMsg.GodIslandBaseInfoRespMsg.roundSettleInfo:type_name -> com.yq.msg.CityMsg.GodIslandRoundSettleData
	15,  // 11: com.yq.msg.CityMsg.GodIslandBaseInfoRespMsg.floorGroupList:type_name -> com.yq.msg.CityMsg.FloorGroupCountMsg
	17,  // 12: com.yq.msg.CityMsg.GodIslandBaseInfoRespMsg.worshipPlayer:type_name -> com.yq.msg.CityMsg.GodIslandWorshipPlayerMsg
	153, // 13: com.yq.msg.CityMsg.GodIslandBaseInfoRespMsg.top3Union:type_name -> com.yq.msg.CityMsg.UnionBaseData
	152, // 14: com.yq.msg.CityMsg.GodIslandWorshipPlayerMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	20,  // 15: com.yq.msg.CityMsg.GodIslandUnionDamageRespMsg.playerInfo:type_name -> com.yq.msg.CityMsg.GodIslandPlayerBaseInfo
	23,  // 16: com.yq.msg.CityMsg.GodIslandGroupRespMsg.groupInfo:type_name -> com.yq.msg.CityMsg.GodIslandGroupBaseMsg
	26,  // 17: com.yq.msg.CityMsg.GodIslandReportRespMsg.cityReports:type_name -> com.yq.msg.CityMsg.GodIslandCityBattleReport
	29,  // 18: com.yq.msg.CityMsg.GodIslandReportDetailRespMsg.reportDetails:type_name -> com.yq.msg.CityMsg.GodIslandCityReportDetail
	152, // 19: com.yq.msg.CityMsg.GodIslandCityReportDetail.attackHeadInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	152, // 20: com.yq.msg.CityMsg.GodIslandCityReportDetail.beAttackHeadInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	17,  // 21: com.yq.msg.CityMsg.GodIslandWorshipResp.worshipPlayer:type_name -> com.yq.msg.CityMsg.GodIslandWorshipPlayerMsg
	36,  // 22: com.yq.msg.CityMsg.GodIslandBetUnionInfoList.infoList:type_name -> com.yq.msg.CityMsg.GodIslandBetUnionInfo
	9,   // 23: com.yq.msg.CityMsg.GodIslandBetUnionInfo.rankInfo:type_name -> com.yq.msg.CityMsg.GodIslandUnionRankMsg
	40,  // 24: com.yq.msg.CityMsg.GodIslandUnionGroupDamageRespMsg.info:type_name -> com.yq.msg.CityMsg.GodIslandGroupScoreInfo
	45,  // 25: com.yq.msg.CityMsg.GodIslandGameInfoRespMsg.npcEvents:type_name -> com.yq.msg.CityMsg.GodIslandNpcEvent
	46,  // 26: com.yq.msg.CityMsg.GodIslandGameInfoRespMsg.myRouteInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameRouteInfo
	57,  // 27: com.yq.msg.CityMsg.GodIslandGameInfoRespMsg.cityBuffInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameCityBuffInfo
	144, // 28: com.yq.msg.CityMsg.GodIslandGameInfoRespMsg.deadWeakEffect:type_name -> com.yq.msg.CityMsg.GodIslandDeadWeakEffectMsg
	47,  // 29: com.yq.msg.CityMsg.GodIslandGameRouteInfo.appearance:type_name -> com.yq.msg.CityMsg.GodIslandRouterAppearanceMsg
	46,  // 30: com.yq.msg.CityMsg.GodIslandGameRouteInfoSyncMsg.routeInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameRouteInfo
	51,  // 31: com.yq.msg.CityMsg.GodIslandGameCityInfoRespMsg.cityInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameCityInfo
	46,  // 32: com.yq.msg.CityMsg.GodIslandGameCityInfoRespMsg.routeInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameRouteInfo
	52,  // 33: com.yq.msg.CityMsg.GodIslandGameCityInfo.baseData:type_name -> com.yq.msg.CityMsg.GodIslandUnionSimpleInfo
	152, // 34: com.yq.msg.CityMsg.GodIslandGameCityInfo.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	57,  // 35: com.yq.msg.CityMsg.GodIslandGameCityBuffSync.cityBuffInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameCityBuffInfo
	144, // 36: com.yq.msg.CityMsg.GodIslandGameSpiritualBallInfoRespMsg.deadWeakEffect:type_name -> com.yq.msg.CityMsg.GodIslandDeadWeakEffectMsg
	64,  // 37: com.yq.msg.CityMsg.GodIslandGameTargetCityInfoRespMsg.attackIcon:type_name -> com.yq.msg.CityMsg.GodIslandPlayerIconMsg
	64,  // 38: com.yq.msg.CityMsg.GodIslandGameTargetCityInfoRespMsg.defendIcon:type_name -> com.yq.msg.CityMsg.GodIslandPlayerIconMsg
	69,  // 39: com.yq.msg.CityMsg.GodIslandGameTargetCityInfoRespMsg.battleInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameLineBattleInfo
	152, // 40: com.yq.msg.CityMsg.GodIslandPlayerIconMsg.icon:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	68,  // 41: com.yq.msg.CityMsg.GodIslandGameTargetCityLineInfoRespMsg.attackInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameLinePlayerInfo
	68,  // 42: com.yq.msg.CityMsg.GodIslandGameTargetCityLineInfoRespMsg.defendInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameLinePlayerInfo
	68,  // 43: com.yq.msg.CityMsg.GodIslandGameTargetCityLineInfoRespMsg.npcGuardInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameLinePlayerInfo
	67,  // 44: com.yq.msg.CityMsg.GodIslandGameTargetCityLineInfoRespMsg.battleInfo:type_name -> com.yq.msg.CityMsg.GodIslandBattleMsg
	107, // 45: com.yq.msg.CityMsg.GodIslandBattleMsg.attacker:type_name -> com.yq.msg.CityMsg.GodIslandBattlePlayer
	107, // 46: com.yq.msg.CityMsg.GodIslandBattleMsg.beAttacker:type_name -> com.yq.msg.CityMsg.GodIslandBattlePlayer
	152, // 47: com.yq.msg.CityMsg.GodIslandGameLinePlayerInfo.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	78,  // 48: com.yq.msg.CityMsg.GodIslandGameMiniMapInfoRespMsg.cityInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameMiniCityInfo
	153, // 49: com.yq.msg.CityMsg.GodIslandGameMiniCityInfo.baseData:type_name -> com.yq.msg.CityMsg.UnionBaseData
	83,  // 50: com.yq.msg.CityMsg.GodIslandGamePlantInfoRespMsg.noticeInfo:type_name -> com.yq.msg.CityMsg.GodIslandGamePlantNoticeInfo
	90,  // 51: com.yq.msg.CityMsg.GodIslandCrystalInfoRespMsg.crystalInfo:type_name -> com.yq.msg.CityMsg.GodIslandCityCrystalInfo
	96,  // 52: com.yq.msg.CityMsg.GodIslandGameStrategyInfoRespMsg.occupyCities:type_name -> com.yq.msg.CityMsg.GodIslandOccupyCities
	95,  // 53: com.yq.msg.CityMsg.GodIslandGameStrategyInfoRespMsg.commanders:type_name -> com.yq.msg.CityMsg.GodIslandPlayerSimpleInfo
	152, // 54: com.yq.msg.CityMsg.GodIslandPlayerSimpleInfo.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	51,  // 55: com.yq.msg.CityMsg.GodIslandGameCityChangeSyncMsg.cityInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameCityInfo
	105, // 56: com.yq.msg.CityMsg.GodIslandGamePlayerWinSyncMsg.info:type_name -> com.yq.msg.CityMsg.GodIslandGamePlayerWinInfo
	152, // 57: com.yq.msg.CityMsg.GodIslandGamePlayerWinInfo.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	108, // 58: com.yq.msg.CityMsg.GodIslandGameLineInfoSyncMsg.lineInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameLineInfo
	67,  // 59: com.yq.msg.CityMsg.GodIslandGameLineInfoSyncMsg.battleInfo:type_name -> com.yq.msg.CityMsg.GodIslandBattleMsg
	109, // 60: com.yq.msg.CityMsg.GodIslandGameLineInfoSyncMsg.powerChange:type_name -> com.yq.msg.CityMsg.GodIslandPlayerPowerChangeInfo
	68,  // 61: com.yq.msg.CityMsg.GodIslandBattlePlayer.playerInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameLinePlayerInfo
	68,  // 62: com.yq.msg.CityMsg.GodIslandGameLineInfo.playerInfo:type_name -> com.yq.msg.CityMsg.GodIslandGameLinePlayerInfo
	83,  // 63: com.yq.msg.CityMsg.GodIslandGameSendLiquidRespMsg.noticeInfo:type_name -> com.yq.msg.CityMsg.GodIslandGamePlantNoticeInfo
	117, // 64: com.yq.msg.CityMsg.GodIslandGameSendLiquidRecordRespMsg.sendLiquidRecord:type_name -> com.yq.msg.CityMsg.GodIslandSendLiquidRecord
	119, // 65: com.yq.msg.CityMsg.GodIslandGameHorseLampSyncMsg.info:type_name -> com.yq.msg.CityMsg.GodIslandGameHorseLampInfo
	57,  // 66: com.yq.msg.CityMsg.GodIslandGameCityBuffInfoRespMsg.info:type_name -> com.yq.msg.CityMsg.GodIslandGameCityBuffInfo
	124, // 67: com.yq.msg.CityMsg.GodIslandPlayerReportRespMsg.reportList:type_name -> com.yq.msg.CityMsg.GodIslandPlayerBattleReportMsg
	152, // 68: com.yq.msg.CityMsg.GodIslandPlayerBattleReportMsg.enemy:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	138, // 69: com.yq.msg.CityMsg.GodIslandGameCityBattleSyncMsg.cityStates:type_name -> com.yq.msg.CityMsg.GodIslandCityBattleState
	142, // 70: com.yq.msg.CityMsg.GodIslandUnionBattleScoreListResp.scoreList:type_name -> com.yq.msg.CityMsg.GodIslandUnionBattleScoreMsg
	117, // 71: com.yq.msg.CityMsg.GodIslandLiquidReceiveRecordResp.receiveLiquidRecord:type_name -> com.yq.msg.CityMsg.GodIslandSendLiquidRecord
	150, // 72: com.yq.msg.CityMsg.GodIslandUnionMemberScoreListResp.scores:type_name -> com.yq.msg.CityMsg.GodIslandPlayerScoreMsg
	152, // 73: com.yq.msg.CityMsg.GodIslandPlayerScoreMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	74,  // [74:74] is the sub-list for method output_type
	74,  // [74:74] is the sub-list for method input_type
	74,  // [74:74] is the sub-list for extension type_name
	74,  // [74:74] is the sub-list for extension extendee
	0,   // [0:74] is the sub-list for field type_name
}

func init() { file_GodIsland_proto_init() }
func file_GodIsland_proto_init() {
	if File_GodIsland_proto != nil {
		return
	}
	file_ActivityBase_proto_init()
	file_WatchPlayer_proto_init()
	file_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GodIsland_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandConfigSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandEventConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGetJoinMemberListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGetJoinMemberListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandJoinMemberMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionRankMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerRankMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBaseInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBaseInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*FloorGroupCountMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandRoundSettleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandWorshipPlayerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionDamageReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionDamageRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGroupReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGroupRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGroupBaseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandReportReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandReportRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCityBattleReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandReportDetailReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandReportDetailRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCityReportDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCityReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandWorshipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandWorshipResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandRedDotReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandRedDotRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBetUnionInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBetUnionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandSettleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionGroupDamageReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionGroupDamageRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGroupScoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandHeartBeatReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandHeartBeatRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandNpcEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameRouteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandRouterAppearanceMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameRouteInfoSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameEventReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameEventRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameEventSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityBuffSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSpiritualBallInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSpiritualBallInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameUseSpiritualBallReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameUseSpiritualBallRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameTargetCityInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameTargetCityInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerIconMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameTargetCityLineInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameTargetCityLineInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBattleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameLinePlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameLineBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameAttackReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameAttackRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameAutoAttackReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameAutoAttackRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameMoveReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameMoveRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameMiniMapInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameMiniMapInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameMiniCityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSetUnionTypeReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSetUnionTypeRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlantInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlantInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlantNoticeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlantReceiveFruitsReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlantReceiveFruitsRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlantWaterReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlantWaterRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCrystalInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCrystalInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCityCrystalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCrystalReceiveReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCrystalReceiveRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameStrategyInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameStrategyInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandOccupyCities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCommanderSetReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCommanderSetRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSetUnionTargetReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSetUnionTargetRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameForHelpReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameForHelpRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityChangeSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlayerWinSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGamePlayerWinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameLineInfoSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBattlePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameLineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerPowerChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameAcclerateMoveMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameAcclerateMoveRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameMyGameInfoSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSendLiquidReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSendLiquidRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSendLiquidRecordReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameSendLiquidRecordRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandSendLiquidRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameHorseLampSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameHorseLampInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityBuffInfoReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityBuffInfoRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerReportReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerReportRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerBattleReportMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUseFruitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUseFruitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUpdatePowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUpdatePowerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBackHomeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBackHomeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandLeftOutSyncInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandSetFriendUnionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandSetFriendUnionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandSyncFriendUnionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCommanderChangeSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandBeenKillSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGameCityBattleSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandCityBattleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandAutoBattleStopSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionBattleScoreListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionBattleScoreListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionBattleScoreMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandGhostCityUnlockSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandDeadWeakEffectMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandSuppressBuffSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandLiquidReceiveRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandLiquidReceiveRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionMemberScoreListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandUnionMemberScoreListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodIsland_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*GodIslandPlayerScoreMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GodIsland_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   149,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GodIsland_proto_goTypes,
		DependencyIndexes: file_GodIsland_proto_depIdxs,
		EnumInfos:         file_GodIsland_proto_enumTypes,
		MessageInfos:      file_GodIsland_proto_msgTypes,
	}.Build()
	File_GodIsland_proto = out.File
	file_GodIsland_proto_rawDesc = nil
	file_GodIsland_proto_goTypes = nil
	file_GodIsland_proto_depIdxs = nil
}
