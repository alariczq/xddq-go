// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: MountainSea.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MountainSeaPb int32

const (
	MountainSeaPb_MOUNTAIN_SEA_NULL                          MountainSeaPb = 0
	MountainSeaPb_MOUNTAIN_SEA_ENTER                         MountainSeaPb = 209701
	MountainSeaPb_MOUNTAIN_SEA_ENTER_TEAM                    MountainSeaPb = 209702
	MountainSeaPb_MOUNTAIN_SEA_TEAM_START                    MountainSeaPb = 209703
	MountainSeaPb_MOUNTAIN_SEA_CREATE_TEAM                   MountainSeaPb = 209704
	MountainSeaPb_MOUNTAIN_SEA_GET_TEAM_LIST                 MountainSeaPb = 209705
	MountainSeaPb_MOUNTAIN_SEA_GET_TEAM_INFO                 MountainSeaPb = 209706
	MountainSeaPb_MOUNTAIN_SEA_CANCEL_TEAM_APPLY             MountainSeaPb = 209708
	MountainSeaPb_MOUNTAIN_SEA_APPLY_JOIN_TEAM_AGREE         MountainSeaPb = 209709
	MountainSeaPb_MOUNTAIN_SEA_APPLY_JOIN_TEAM_REFUSED       MountainSeaPb = 209710
	MountainSeaPb_MOUNTAIN_SEA_QUIT_TEAM                     MountainSeaPb = 209711
	MountainSeaPb_MOUNTAIN_SEA_KICK_OUT_TEAM                 MountainSeaPb = 209712
	MountainSeaPb_MOUNTAIN_SEA_CHANGE_LEADER                 MountainSeaPb = 209713
	MountainSeaPb_MOUNTAIN_SEA_TEAM_PREPARE                  MountainSeaPb = 209714
	MountainSeaPb_MOUNTAIN_SEA_MATCH_MEMBER                  MountainSeaPb = 209715
	MountainSeaPb_MOUNTAIN_SEA_START_BATTLE                  MountainSeaPb = 209716
	MountainSeaPb_MOUNTAIN_SEA_RANK_PLAYER_INFO              MountainSeaPb = 209717
	MountainSeaPb_MOUNTAIN_SEA_WORSHIP                       MountainSeaPb = 209718
	MountainSeaPb_MOUNTAIN_SEA_GET_BATTLE_REPLAY             MountainSeaPb = 209719
	MountainSeaPb_MOUNTAIN_SEA_GET_BOSS_INFO                 MountainSeaPb = 209720
	MountainSeaPb_MOUNTAIN_SEA_START_MATCH                   MountainSeaPb = 209722
	MountainSeaPb_MOUNTAIN_SEA_INVITE                        MountainSeaPb = 209723
	MountainSeaPb_MOUNTAIN_SEA_LEAVE                         MountainSeaPb = 209724
	MountainSeaPb_MOUNTAIN_SEA_GET_BOSS_POWER                MountainSeaPb = 209725
	MountainSeaPb_MOUNTAIN_SEA_TEAM_LEADER_NOTIFY            MountainSeaPb = 209731
	MountainSeaPb_MOUNTAIN_SEA_TEAM_MEMBER_NOTIFY            MountainSeaPb = 209732
	MountainSeaPb_MOUNTAIN_SEA_WORSHIP_CROSS                 MountainSeaPb = 209733
	MountainSeaPb_MOUNTAIN_SEA_INVITE_CROSS                  MountainSeaPb = 209734
	MountainSeaPb_MOUNTAIN_SEA_MATCH_MEMBER_CROSS            MountainSeaPb = 209735
	MountainSeaPb_MOUNTAIN_SEA_ENTER_BATTLE                  MountainSeaPb = 209750
	MountainSeaPb_MOUNTAIN_SEA_ENTER_SWITCH_SEPARATION       MountainSeaPb = 209752
	MountainSeaPb_MOUNTAIN_SEA_SWITCH_SEPARATION             MountainSeaPb = 209753
	MountainSeaPb_MOUNTAIN_SEA_SEPARATION_DETAIL             MountainSeaPb = 209754
	MountainSeaPb_MOUNTAIN_SEA_CHANGE_POS                    MountainSeaPb = 209755
	MountainSeaPb_MOUNTAIN_SEA_CHANGE_TEAM_SKILL             MountainSeaPb = 209756
	MountainSeaPb_MOUNTAIN_SEA_DO_BATTLE                     MountainSeaPb = 209757
	MountainSeaPb_MOUNTAIN_SEA_ENTER_SWITCH_SEPARATION_CROSS MountainSeaPb = 209762
	MountainSeaPb_MOUNTAIN_SEA_CHANGE_TEAM_SKILL_CROSS       MountainSeaPb = 209763
	MountainSeaPb_MOUNTAIN_SEA_CHANGE_POS_CROSS              MountainSeaPb = 209764
	MountainSeaPb_MOUNTAIN_SEA_DO_BATTLE_CROSS               MountainSeaPb = 209765
	MountainSeaPb_MOUNTAIN_SEA_SWITCH_SEPARATION_CROSS       MountainSeaPb = 209766
	MountainSeaPb_MOUNTAIN_SEA_ENTER_BATTLE_NOTIFY           MountainSeaPb = 209770
	MountainSeaPb_MOUNTAIN_SEA_SWITCH_SEPARATION_NOTIFY      MountainSeaPb = 209771
	MountainSeaPb_MOUNTAIN_SEA_CHANGE_TEAM_SKILL_NOTIFY      MountainSeaPb = 209772
	MountainSeaPb_MOUNTAIN_SEA_DO_BATTLE_NOTIFY              MountainSeaPb = 209773
	MountainSeaPb_MOUNTAIN_SEA_CHANGE_POS_NOTIFY             MountainSeaPb = 209774
	MountainSeaPb_MOUNTAIN_SEA_ENTER_BATTLE_CROSS            MountainSeaPb = 209780
	MountainSeaPb_MOUNTAIN_SEA_START_BATTLE_LOCK_CROSS       MountainSeaPb = 209781
	MountainSeaPb_MOUNTAIN_SEA_START_BATTLE_CROSS            MountainSeaPb = 209782
	MountainSeaPb_MOUNTAIN_SEA_INVITE_LIST                   MountainSeaPb = 209783
	MountainSeaPb_MOUNTAIN_SEA_RED_INFO                      MountainSeaPb = 209784
	MountainSeaPb_MOUNTAIN_SEA_INVITE_REFUSE                 MountainSeaPb = 209785
	MountainSeaPb_MOUNTAIN_SEA_SEARCH_SET_APPOINT            MountainSeaPb = 209786
	MountainSeaPb_MOUNTAIN_SEA_INVITE_JOIN_TEAM              MountainSeaPb = 209787
)

// Enum value maps for MountainSeaPb.
var (
	MountainSeaPb_name = map[int32]string{
		0:      "MOUNTAIN_SEA_NULL",
		209701: "MOUNTAIN_SEA_ENTER",
		209702: "MOUNTAIN_SEA_ENTER_TEAM",
		209703: "MOUNTAIN_SEA_TEAM_START",
		209704: "MOUNTAIN_SEA_CREATE_TEAM",
		209705: "MOUNTAIN_SEA_GET_TEAM_LIST",
		209706: "MOUNTAIN_SEA_GET_TEAM_INFO",
		209708: "MOUNTAIN_SEA_CANCEL_TEAM_APPLY",
		209709: "MOUNTAIN_SEA_APPLY_JOIN_TEAM_AGREE",
		209710: "MOUNTAIN_SEA_APPLY_JOIN_TEAM_REFUSED",
		209711: "MOUNTAIN_SEA_QUIT_TEAM",
		209712: "MOUNTAIN_SEA_KICK_OUT_TEAM",
		209713: "MOUNTAIN_SEA_CHANGE_LEADER",
		209714: "MOUNTAIN_SEA_TEAM_PREPARE",
		209715: "MOUNTAIN_SEA_MATCH_MEMBER",
		209716: "MOUNTAIN_SEA_START_BATTLE",
		209717: "MOUNTAIN_SEA_RANK_PLAYER_INFO",
		209718: "MOUNTAIN_SEA_WORSHIP",
		209719: "MOUNTAIN_SEA_GET_BATTLE_REPLAY",
		209720: "MOUNTAIN_SEA_GET_BOSS_INFO",
		209722: "MOUNTAIN_SEA_START_MATCH",
		209723: "MOUNTAIN_SEA_INVITE",
		209724: "MOUNTAIN_SEA_LEAVE",
		209725: "MOUNTAIN_SEA_GET_BOSS_POWER",
		209731: "MOUNTAIN_SEA_TEAM_LEADER_NOTIFY",
		209732: "MOUNTAIN_SEA_TEAM_MEMBER_NOTIFY",
		209733: "MOUNTAIN_SEA_WORSHIP_CROSS",
		209734: "MOUNTAIN_SEA_INVITE_CROSS",
		209735: "MOUNTAIN_SEA_MATCH_MEMBER_CROSS",
		209750: "MOUNTAIN_SEA_ENTER_BATTLE",
		209752: "MOUNTAIN_SEA_ENTER_SWITCH_SEPARATION",
		209753: "MOUNTAIN_SEA_SWITCH_SEPARATION",
		209754: "MOUNTAIN_SEA_SEPARATION_DETAIL",
		209755: "MOUNTAIN_SEA_CHANGE_POS",
		209756: "MOUNTAIN_SEA_CHANGE_TEAM_SKILL",
		209757: "MOUNTAIN_SEA_DO_BATTLE",
		209762: "MOUNTAIN_SEA_ENTER_SWITCH_SEPARATION_CROSS",
		209763: "MOUNTAIN_SEA_CHANGE_TEAM_SKILL_CROSS",
		209764: "MOUNTAIN_SEA_CHANGE_POS_CROSS",
		209765: "MOUNTAIN_SEA_DO_BATTLE_CROSS",
		209766: "MOUNTAIN_SEA_SWITCH_SEPARATION_CROSS",
		209770: "MOUNTAIN_SEA_ENTER_BATTLE_NOTIFY",
		209771: "MOUNTAIN_SEA_SWITCH_SEPARATION_NOTIFY",
		209772: "MOUNTAIN_SEA_CHANGE_TEAM_SKILL_NOTIFY",
		209773: "MOUNTAIN_SEA_DO_BATTLE_NOTIFY",
		209774: "MOUNTAIN_SEA_CHANGE_POS_NOTIFY",
		209780: "MOUNTAIN_SEA_ENTER_BATTLE_CROSS",
		209781: "MOUNTAIN_SEA_START_BATTLE_LOCK_CROSS",
		209782: "MOUNTAIN_SEA_START_BATTLE_CROSS",
		209783: "MOUNTAIN_SEA_INVITE_LIST",
		209784: "MOUNTAIN_SEA_RED_INFO",
		209785: "MOUNTAIN_SEA_INVITE_REFUSE",
		209786: "MOUNTAIN_SEA_SEARCH_SET_APPOINT",
		209787: "MOUNTAIN_SEA_INVITE_JOIN_TEAM",
	}
	MountainSeaPb_value = map[string]int32{
		"MOUNTAIN_SEA_NULL":                          0,
		"MOUNTAIN_SEA_ENTER":                         209701,
		"MOUNTAIN_SEA_ENTER_TEAM":                    209702,
		"MOUNTAIN_SEA_TEAM_START":                    209703,
		"MOUNTAIN_SEA_CREATE_TEAM":                   209704,
		"MOUNTAIN_SEA_GET_TEAM_LIST":                 209705,
		"MOUNTAIN_SEA_GET_TEAM_INFO":                 209706,
		"MOUNTAIN_SEA_CANCEL_TEAM_APPLY":             209708,
		"MOUNTAIN_SEA_APPLY_JOIN_TEAM_AGREE":         209709,
		"MOUNTAIN_SEA_APPLY_JOIN_TEAM_REFUSED":       209710,
		"MOUNTAIN_SEA_QUIT_TEAM":                     209711,
		"MOUNTAIN_SEA_KICK_OUT_TEAM":                 209712,
		"MOUNTAIN_SEA_CHANGE_LEADER":                 209713,
		"MOUNTAIN_SEA_TEAM_PREPARE":                  209714,
		"MOUNTAIN_SEA_MATCH_MEMBER":                  209715,
		"MOUNTAIN_SEA_START_BATTLE":                  209716,
		"MOUNTAIN_SEA_RANK_PLAYER_INFO":              209717,
		"MOUNTAIN_SEA_WORSHIP":                       209718,
		"MOUNTAIN_SEA_GET_BATTLE_REPLAY":             209719,
		"MOUNTAIN_SEA_GET_BOSS_INFO":                 209720,
		"MOUNTAIN_SEA_START_MATCH":                   209722,
		"MOUNTAIN_SEA_INVITE":                        209723,
		"MOUNTAIN_SEA_LEAVE":                         209724,
		"MOUNTAIN_SEA_GET_BOSS_POWER":                209725,
		"MOUNTAIN_SEA_TEAM_LEADER_NOTIFY":            209731,
		"MOUNTAIN_SEA_TEAM_MEMBER_NOTIFY":            209732,
		"MOUNTAIN_SEA_WORSHIP_CROSS":                 209733,
		"MOUNTAIN_SEA_INVITE_CROSS":                  209734,
		"MOUNTAIN_SEA_MATCH_MEMBER_CROSS":            209735,
		"MOUNTAIN_SEA_ENTER_BATTLE":                  209750,
		"MOUNTAIN_SEA_ENTER_SWITCH_SEPARATION":       209752,
		"MOUNTAIN_SEA_SWITCH_SEPARATION":             209753,
		"MOUNTAIN_SEA_SEPARATION_DETAIL":             209754,
		"MOUNTAIN_SEA_CHANGE_POS":                    209755,
		"MOUNTAIN_SEA_CHANGE_TEAM_SKILL":             209756,
		"MOUNTAIN_SEA_DO_BATTLE":                     209757,
		"MOUNTAIN_SEA_ENTER_SWITCH_SEPARATION_CROSS": 209762,
		"MOUNTAIN_SEA_CHANGE_TEAM_SKILL_CROSS":       209763,
		"MOUNTAIN_SEA_CHANGE_POS_CROSS":              209764,
		"MOUNTAIN_SEA_DO_BATTLE_CROSS":               209765,
		"MOUNTAIN_SEA_SWITCH_SEPARATION_CROSS":       209766,
		"MOUNTAIN_SEA_ENTER_BATTLE_NOTIFY":           209770,
		"MOUNTAIN_SEA_SWITCH_SEPARATION_NOTIFY":      209771,
		"MOUNTAIN_SEA_CHANGE_TEAM_SKILL_NOTIFY":      209772,
		"MOUNTAIN_SEA_DO_BATTLE_NOTIFY":              209773,
		"MOUNTAIN_SEA_CHANGE_POS_NOTIFY":             209774,
		"MOUNTAIN_SEA_ENTER_BATTLE_CROSS":            209780,
		"MOUNTAIN_SEA_START_BATTLE_LOCK_CROSS":       209781,
		"MOUNTAIN_SEA_START_BATTLE_CROSS":            209782,
		"MOUNTAIN_SEA_INVITE_LIST":                   209783,
		"MOUNTAIN_SEA_RED_INFO":                      209784,
		"MOUNTAIN_SEA_INVITE_REFUSE":                 209785,
		"MOUNTAIN_SEA_SEARCH_SET_APPOINT":            209786,
		"MOUNTAIN_SEA_INVITE_JOIN_TEAM":              209787,
	}
)

func (x MountainSeaPb) Enum() *MountainSeaPb {
	p := new(MountainSeaPb)
	*p = x
	return p
}

func (x MountainSeaPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountainSeaPb) Descriptor() protoreflect.EnumDescriptor {
	return file_MountainSea_proto_enumTypes[0].Descriptor()
}

func (MountainSeaPb) Type() protoreflect.EnumType {
	return &file_MountainSea_proto_enumTypes[0]
}

func (x MountainSeaPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MountainSeaPb) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MountainSeaPb(num)
	return nil
}

// Deprecated: Use MountainSeaPb.Descriptor instead.
func (MountainSeaPb) EnumDescriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{0}
}

type GetTeamListTypeEnum int32

const (
	GetTeamListTypeEnum_ALL    GetTeamListTypeEnum = 0
	GetTeamListTypeEnum_PLAYER GetTeamListTypeEnum = 1
)

// Enum value maps for GetTeamListTypeEnum.
var (
	GetTeamListTypeEnum_name = map[int32]string{
		0: "ALL",
		1: "PLAYER",
	}
	GetTeamListTypeEnum_value = map[string]int32{
		"ALL":    0,
		"PLAYER": 1,
	}
)

func (x GetTeamListTypeEnum) Enum() *GetTeamListTypeEnum {
	p := new(GetTeamListTypeEnum)
	*p = x
	return p
}

func (x GetTeamListTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTeamListTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_MountainSea_proto_enumTypes[1].Descriptor()
}

func (GetTeamListTypeEnum) Type() protoreflect.EnumType {
	return &file_MountainSea_proto_enumTypes[1]
}

func (x GetTeamListTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetTeamListTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetTeamListTypeEnum(num)
	return nil
}

// Deprecated: Use GetTeamListTypeEnum.Descriptor instead.
func (GetTeamListTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{1}
}

type TeamLeaderNotifyTypeEnum int32

const (
	TeamLeaderNotifyTypeEnum_APPLY_JOIN_TEAM   TeamLeaderNotifyTypeEnum = 1
	TeamLeaderNotifyTypeEnum_CANCEL_JOIN_TEAM  TeamLeaderNotifyTypeEnum = 2
	TeamLeaderNotifyTypeEnum_MEMBER_LEAVE_TEAM TeamLeaderNotifyTypeEnum = 3
)

// Enum value maps for TeamLeaderNotifyTypeEnum.
var (
	TeamLeaderNotifyTypeEnum_name = map[int32]string{
		1: "APPLY_JOIN_TEAM",
		2: "CANCEL_JOIN_TEAM",
		3: "MEMBER_LEAVE_TEAM",
	}
	TeamLeaderNotifyTypeEnum_value = map[string]int32{
		"APPLY_JOIN_TEAM":   1,
		"CANCEL_JOIN_TEAM":  2,
		"MEMBER_LEAVE_TEAM": 3,
	}
)

func (x TeamLeaderNotifyTypeEnum) Enum() *TeamLeaderNotifyTypeEnum {
	p := new(TeamLeaderNotifyTypeEnum)
	*p = x
	return p
}

func (x TeamLeaderNotifyTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamLeaderNotifyTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_MountainSea_proto_enumTypes[2].Descriptor()
}

func (TeamLeaderNotifyTypeEnum) Type() protoreflect.EnumType {
	return &file_MountainSea_proto_enumTypes[2]
}

func (x TeamLeaderNotifyTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TeamLeaderNotifyTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TeamLeaderNotifyTypeEnum(num)
	return nil
}

// Deprecated: Use TeamLeaderNotifyTypeEnum.Descriptor instead.
func (TeamLeaderNotifyTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{2}
}

type TeamMemberNotifyTypeEnum int32

const (
	TeamMemberNotifyTypeEnum_KICK_OUT_TEAM          TeamMemberNotifyTypeEnum = 1
	TeamMemberNotifyTypeEnum_TEAM_DISMISS           TeamMemberNotifyTypeEnum = 2
	TeamMemberNotifyTypeEnum_JOIN_TEAM_SUCCESS      TeamMemberNotifyTypeEnum = 3
	TeamMemberNotifyTypeEnum_TEAM_MEMBER_NUM_CHANGE TeamMemberNotifyTypeEnum = 4
	TeamMemberNotifyTypeEnum_TEAM_PREPARE           TeamMemberNotifyTypeEnum = 5
	TeamMemberNotifyTypeEnum_TEAM_MATCH             TeamMemberNotifyTypeEnum = 6
	TeamMemberNotifyTypeEnum_CANCEL_PREPARE         TeamMemberNotifyTypeEnum = 7
	TeamMemberNotifyTypeEnum_CANCEL_MATCH           TeamMemberNotifyTypeEnum = 8
	TeamMemberNotifyTypeEnum_MATCH_SUCCESS          TeamMemberNotifyTypeEnum = 9
	TeamMemberNotifyTypeEnum_START_BATTLE           TeamMemberNotifyTypeEnum = 10
)

// Enum value maps for TeamMemberNotifyTypeEnum.
var (
	TeamMemberNotifyTypeEnum_name = map[int32]string{
		1:  "KICK_OUT_TEAM",
		2:  "TEAM_DISMISS",
		3:  "JOIN_TEAM_SUCCESS",
		4:  "TEAM_MEMBER_NUM_CHANGE",
		5:  "TEAM_PREPARE",
		6:  "TEAM_MATCH",
		7:  "CANCEL_PREPARE",
		8:  "CANCEL_MATCH",
		9:  "MATCH_SUCCESS",
		10: "START_BATTLE",
	}
	TeamMemberNotifyTypeEnum_value = map[string]int32{
		"KICK_OUT_TEAM":          1,
		"TEAM_DISMISS":           2,
		"JOIN_TEAM_SUCCESS":      3,
		"TEAM_MEMBER_NUM_CHANGE": 4,
		"TEAM_PREPARE":           5,
		"TEAM_MATCH":             6,
		"CANCEL_PREPARE":         7,
		"CANCEL_MATCH":           8,
		"MATCH_SUCCESS":          9,
		"START_BATTLE":           10,
	}
)

func (x TeamMemberNotifyTypeEnum) Enum() *TeamMemberNotifyTypeEnum {
	p := new(TeamMemberNotifyTypeEnum)
	*p = x
	return p
}

func (x TeamMemberNotifyTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamMemberNotifyTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_MountainSea_proto_enumTypes[3].Descriptor()
}

func (TeamMemberNotifyTypeEnum) Type() protoreflect.EnumType {
	return &file_MountainSea_proto_enumTypes[3]
}

func (x TeamMemberNotifyTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TeamMemberNotifyTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TeamMemberNotifyTypeEnum(num)
	return nil
}

// Deprecated: Use TeamMemberNotifyTypeEnum.Descriptor instead.
func (TeamMemberNotifyTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{3}
}

type TeamPrepareTypeEnum int32

const (
	TeamPrepareTypeEnum_PREPARE TeamPrepareTypeEnum = 1
	TeamPrepareTypeEnum_CANCEL  TeamPrepareTypeEnum = 2
)

// Enum value maps for TeamPrepareTypeEnum.
var (
	TeamPrepareTypeEnum_name = map[int32]string{
		1: "PREPARE",
		2: "CANCEL",
	}
	TeamPrepareTypeEnum_value = map[string]int32{
		"PREPARE": 1,
		"CANCEL":  2,
	}
)

func (x TeamPrepareTypeEnum) Enum() *TeamPrepareTypeEnum {
	p := new(TeamPrepareTypeEnum)
	*p = x
	return p
}

func (x TeamPrepareTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamPrepareTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_MountainSea_proto_enumTypes[4].Descriptor()
}

func (TeamPrepareTypeEnum) Type() protoreflect.EnumType {
	return &file_MountainSea_proto_enumTypes[4]
}

func (x TeamPrepareTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TeamPrepareTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TeamPrepareTypeEnum(num)
	return nil
}

// Deprecated: Use TeamPrepareTypeEnum.Descriptor instead.
func (TeamPrepareTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{4}
}

type EnterMountainSeaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealmsId *int32 `protobuf:"varint,1,opt,name=realmsId" json:"realmsId,omitempty"`
}

func (x *EnterMountainSeaReq) Reset() {
	*x = EnterMountainSeaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterMountainSeaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterMountainSeaReq) ProtoMessage() {}

func (x *EnterMountainSeaReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterMountainSeaReq.ProtoReflect.Descriptor instead.
func (*EnterMountainSeaReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{0}
}

func (x *EnterMountainSeaReq) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

type EnterMountainSeaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UserId           *int64                       `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	TeamId           *int64                       `protobuf:"varint,3,opt,name=teamId" json:"teamId,omitempty"`
	MemberNum        *int32                       `protobuf:"varint,4,opt,name=memberNum" json:"memberNum,omitempty"`
	ChallengeTimes   *int32                       `protobuf:"varint,5,opt,name=challengeTimes" json:"challengeTimes,omitempty"`
	AssistanceTimes  *int32                       `protobuf:"varint,6,opt,name=assistanceTimes" json:"assistanceTimes,omitempty"`
	RealmsId         *int32                       `protobuf:"varint,7,opt,name=realmsId" json:"realmsId,omitempty"`
	MaxBossId        *int32                       `protobuf:"varint,8,opt,name=maxBossId" json:"maxBossId,omitempty"`
	MyRealmsId       *int32                       `protobuf:"varint,9,opt,name=myRealmsId" json:"myRealmsId,omitempty"`
	MyMaxBossId      *int32                       `protobuf:"varint,10,opt,name=myMaxBossId" json:"myMaxBossId,omitempty"`
	CanWorship       *bool                        `protobuf:"varint,11,opt,name=canWorship" json:"canWorship,omitempty"`
	TeamMemberNotify *MountainSeaTeamMemberNotify `protobuf:"bytes,12,opt,name=teamMemberNotify" json:"teamMemberNotify,omitempty"`
	RedPoint         *bool                        `protobuf:"varint,13,opt,name=redPoint" json:"redPoint,omitempty"`
	TeamState        *int32                       `protobuf:"varint,14,opt,name=teamState" json:"teamState,omitempty"`
	ServerId         []int64                      `protobuf:"varint,15,rep,name=serverId" json:"serverId,omitempty"`
	InviteRedPoint   *bool                        `protobuf:"varint,16,opt,name=inviteRedPoint" json:"inviteRedPoint,omitempty"`
}

func (x *EnterMountainSeaRsp) Reset() {
	*x = EnterMountainSeaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterMountainSeaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterMountainSeaRsp) ProtoMessage() {}

func (x *EnterMountainSeaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterMountainSeaRsp.ProtoReflect.Descriptor instead.
func (*EnterMountainSeaRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{1}
}

func (x *EnterMountainSeaRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetMemberNum() int32 {
	if x != nil && x.MemberNum != nil {
		return *x.MemberNum
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetChallengeTimes() int32 {
	if x != nil && x.ChallengeTimes != nil {
		return *x.ChallengeTimes
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetAssistanceTimes() int32 {
	if x != nil && x.AssistanceTimes != nil {
		return *x.AssistanceTimes
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetMaxBossId() int32 {
	if x != nil && x.MaxBossId != nil {
		return *x.MaxBossId
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetMyRealmsId() int32 {
	if x != nil && x.MyRealmsId != nil {
		return *x.MyRealmsId
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetMyMaxBossId() int32 {
	if x != nil && x.MyMaxBossId != nil {
		return *x.MyMaxBossId
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetCanWorship() bool {
	if x != nil && x.CanWorship != nil {
		return *x.CanWorship
	}
	return false
}

func (x *EnterMountainSeaRsp) GetTeamMemberNotify() *MountainSeaTeamMemberNotify {
	if x != nil {
		return x.TeamMemberNotify
	}
	return nil
}

func (x *EnterMountainSeaRsp) GetRedPoint() bool {
	if x != nil && x.RedPoint != nil {
		return *x.RedPoint
	}
	return false
}

func (x *EnterMountainSeaRsp) GetTeamState() int32 {
	if x != nil && x.TeamState != nil {
		return *x.TeamState
	}
	return 0
}

func (x *EnterMountainSeaRsp) GetServerId() []int64 {
	if x != nil {
		return x.ServerId
	}
	return nil
}

func (x *EnterMountainSeaRsp) GetInviteRedPoint() bool {
	if x != nil && x.InviteRedPoint != nil {
		return *x.InviteRedPoint
	}
	return false
}

type LeaveMountainSeaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaveMountainSeaReq) Reset() {
	*x = LeaveMountainSeaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveMountainSeaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMountainSeaReq) ProtoMessage() {}

func (x *LeaveMountainSeaReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMountainSeaReq.ProtoReflect.Descriptor instead.
func (*LeaveMountainSeaReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{2}
}

type LeaveMountainSeaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *LeaveMountainSeaRsp) Reset() {
	*x = LeaveMountainSeaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveMountainSeaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMountainSeaRsp) ProtoMessage() {}

func (x *LeaveMountainSeaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMountainSeaRsp.ProtoReflect.Descriptor instead.
func (*LeaveMountainSeaRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{3}
}

func (x *LeaveMountainSeaRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type EnterMountainSeaTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnterMountainSeaTeamReq) Reset() {
	*x = EnterMountainSeaTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterMountainSeaTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterMountainSeaTeamReq) ProtoMessage() {}

func (x *EnterMountainSeaTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterMountainSeaTeamReq.ProtoReflect.Descriptor instead.
func (*EnterMountainSeaTeamReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{4}
}

type EnterMountainSeaTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *MountainSeaInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *EnterMountainSeaTeamRsp) Reset() {
	*x = EnterMountainSeaTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterMountainSeaTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterMountainSeaTeamRsp) ProtoMessage() {}

func (x *EnterMountainSeaTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterMountainSeaTeamRsp.ProtoReflect.Descriptor instead.
func (*EnterMountainSeaTeamRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{5}
}

func (x *EnterMountainSeaTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *EnterMountainSeaTeamRsp) GetTeamInfo() *MountainSeaInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type MountainSeaTeamStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaTeamStartReq) Reset() {
	*x = MountainSeaTeamStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaTeamStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaTeamStartReq) ProtoMessage() {}

func (x *MountainSeaTeamStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaTeamStartReq.ProtoReflect.Descriptor instead.
func (*MountainSeaTeamStartReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{6}
}

type MountainSeaTeamStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	LastLeaveTeam       *int64  `protobuf:"varint,2,opt,name=lastLeaveTeam" json:"lastLeaveTeam,omitempty"`
	ApplyJoinTeamIdList []int64 `protobuf:"varint,3,rep,name=applyJoinTeamIdList" json:"applyJoinTeamIdList,omitempty"`
}

func (x *MountainSeaTeamStartRsp) Reset() {
	*x = MountainSeaTeamStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaTeamStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaTeamStartRsp) ProtoMessage() {}

func (x *MountainSeaTeamStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaTeamStartRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaTeamStartRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{7}
}

func (x *MountainSeaTeamStartRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaTeamStartRsp) GetLastLeaveTeam() int64 {
	if x != nil && x.LastLeaveTeam != nil {
		return *x.LastLeaveTeam
	}
	return 0
}

func (x *MountainSeaTeamStartRsp) GetApplyJoinTeamIdList() []int64 {
	if x != nil {
		return x.ApplyJoinTeamIdList
	}
	return nil
}

type MountainSeaOutterTeamEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId         *int64                           `protobuf:"varint,1,opt,name=teamId" json:"teamId,omitempty"`
	TeamName       *string                          `protobuf:"bytes,2,opt,name=teamName" json:"teamName,omitempty"`
	LeaderId       *int64                           `protobuf:"varint,3,opt,name=leaderId" json:"leaderId,omitempty"`
	LeaderName     *string                          `protobuf:"bytes,4,opt,name=leaderName" json:"leaderName,omitempty"`
	LeaderServerId *int64                           `protobuf:"varint,5,opt,name=leaderServerId" json:"leaderServerId,omitempty"`
	FightValue     *int64                           `protobuf:"varint,6,opt,name=fightValue" json:"fightValue,omitempty"`
	CreateTime     *int64                           `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	Members        []*MountainSeaOutterMemberEntity `protobuf:"bytes,8,rep,name=members" json:"members,omitempty"`
}

func (x *MountainSeaOutterTeamEntity) Reset() {
	*x = MountainSeaOutterTeamEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaOutterTeamEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaOutterTeamEntity) ProtoMessage() {}

func (x *MountainSeaOutterTeamEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaOutterTeamEntity.ProtoReflect.Descriptor instead.
func (*MountainSeaOutterTeamEntity) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{8}
}

func (x *MountainSeaOutterTeamEntity) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *MountainSeaOutterTeamEntity) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *MountainSeaOutterTeamEntity) GetLeaderId() int64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *MountainSeaOutterTeamEntity) GetLeaderName() string {
	if x != nil && x.LeaderName != nil {
		return *x.LeaderName
	}
	return ""
}

func (x *MountainSeaOutterTeamEntity) GetLeaderServerId() int64 {
	if x != nil && x.LeaderServerId != nil {
		return *x.LeaderServerId
	}
	return 0
}

func (x *MountainSeaOutterTeamEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *MountainSeaOutterTeamEntity) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *MountainSeaOutterTeamEntity) GetMembers() []*MountainSeaOutterMemberEntity {
	if x != nil {
		return x.Members
	}
	return nil
}

type MountainSeaOutterMemberEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberInfo *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=memberInfo" json:"memberInfo,omitempty"`
	FightValue *int64                `protobuf:"varint,2,opt,name=fightValue" json:"fightValue,omitempty"`
}

func (x *MountainSeaOutterMemberEntity) Reset() {
	*x = MountainSeaOutterMemberEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaOutterMemberEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaOutterMemberEntity) ProtoMessage() {}

func (x *MountainSeaOutterMemberEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaOutterMemberEntity.ProtoReflect.Descriptor instead.
func (*MountainSeaOutterMemberEntity) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{9}
}

func (x *MountainSeaOutterMemberEntity) GetMemberInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.MemberInfo
	}
	return nil
}

func (x *MountainSeaOutterMemberEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

type MountainSeaInnerTeamEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId         *int64                        `protobuf:"varint,1,opt,name=teamId" json:"teamId,omitempty"`
	TeamName       *string                       `protobuf:"bytes,2,opt,name=teamName" json:"teamName,omitempty"`
	LeaderId       *int64                        `protobuf:"varint,3,opt,name=leaderId" json:"leaderId,omitempty"`
	LeaderServerId *int64                        `protobuf:"varint,4,opt,name=leaderServerId" json:"leaderServerId,omitempty"`
	LeaderName     *string                       `protobuf:"bytes,5,opt,name=leaderName" json:"leaderName,omitempty"`
	Members        []*MountainSeaMemberEntity    `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
	CreateTime     *int64                        `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	ApplyList      []*MountainSeaApplyUserEntity `protobuf:"bytes,8,rep,name=applyList" json:"applyList,omitempty"`
	State          *int32                        `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
	RealmsId       *int32                        `protobuf:"varint,10,opt,name=realmsId" json:"realmsId,omitempty"`
}

func (x *MountainSeaInnerTeamEntity) Reset() {
	*x = MountainSeaInnerTeamEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaInnerTeamEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaInnerTeamEntity) ProtoMessage() {}

func (x *MountainSeaInnerTeamEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaInnerTeamEntity.ProtoReflect.Descriptor instead.
func (*MountainSeaInnerTeamEntity) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{10}
}

func (x *MountainSeaInnerTeamEntity) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *MountainSeaInnerTeamEntity) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *MountainSeaInnerTeamEntity) GetLeaderId() int64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *MountainSeaInnerTeamEntity) GetLeaderServerId() int64 {
	if x != nil && x.LeaderServerId != nil {
		return *x.LeaderServerId
	}
	return 0
}

func (x *MountainSeaInnerTeamEntity) GetLeaderName() string {
	if x != nil && x.LeaderName != nil {
		return *x.LeaderName
	}
	return ""
}

func (x *MountainSeaInnerTeamEntity) GetMembers() []*MountainSeaMemberEntity {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *MountainSeaInnerTeamEntity) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *MountainSeaInnerTeamEntity) GetApplyList() []*MountainSeaApplyUserEntity {
	if x != nil {
		return x.ApplyList
	}
	return nil
}

func (x *MountainSeaInnerTeamEntity) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *MountainSeaInnerTeamEntity) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

type MountainSeaMemberEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberInfo      *PlayerAppearanceDataMsg `protobuf:"bytes,1,opt,name=memberInfo" json:"memberInfo,omitempty"`
	State           *int32                   `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	AssistanceTimes *int32                   `protobuf:"varint,3,opt,name=assistanceTimes" json:"assistanceTimes,omitempty"`
}

func (x *MountainSeaMemberEntity) Reset() {
	*x = MountainSeaMemberEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaMemberEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaMemberEntity) ProtoMessage() {}

func (x *MountainSeaMemberEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaMemberEntity.ProtoReflect.Descriptor instead.
func (*MountainSeaMemberEntity) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{11}
}

func (x *MountainSeaMemberEntity) GetMemberInfo() *PlayerAppearanceDataMsg {
	if x != nil {
		return x.MemberInfo
	}
	return nil
}

func (x *MountainSeaMemberEntity) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *MountainSeaMemberEntity) GetAssistanceTimes() int32 {
	if x != nil && x.AssistanceTimes != nil {
		return *x.AssistanceTimes
	}
	return 0
}

type MountainSeaApplyUserEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=playerInfo" json:"playerInfo,omitempty"`
	ApplyTime  *int64                `protobuf:"varint,2,opt,name=applyTime" json:"applyTime,omitempty"`
	FightValue *int64                `protobuf:"varint,3,opt,name=fightValue" json:"fightValue,omitempty"`
}

func (x *MountainSeaApplyUserEntity) Reset() {
	*x = MountainSeaApplyUserEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaApplyUserEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaApplyUserEntity) ProtoMessage() {}

func (x *MountainSeaApplyUserEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaApplyUserEntity.ProtoReflect.Descriptor instead.
func (*MountainSeaApplyUserEntity) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{12}
}

func (x *MountainSeaApplyUserEntity) GetPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *MountainSeaApplyUserEntity) GetApplyTime() int64 {
	if x != nil && x.ApplyTime != nil {
		return *x.ApplyTime
	}
	return 0
}

func (x *MountainSeaApplyUserEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

type MountainSeaCreateTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName *string `protobuf:"bytes,1,req,name=teamName" json:"teamName,omitempty"`
}

func (x *MountainSeaCreateTeamReq) Reset() {
	*x = MountainSeaCreateTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaCreateTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaCreateTeamReq) ProtoMessage() {}

func (x *MountainSeaCreateTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaCreateTeamReq.ProtoReflect.Descriptor instead.
func (*MountainSeaCreateTeamReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{13}
}

func (x *MountainSeaCreateTeamReq) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

type MountainSeaCreateTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *MountainSeaInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *MountainSeaCreateTeamRsp) Reset() {
	*x = MountainSeaCreateTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaCreateTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaCreateTeamRsp) ProtoMessage() {}

func (x *MountainSeaCreateTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaCreateTeamRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaCreateTeamRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{14}
}

func (x *MountainSeaCreateTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaCreateTeamRsp) GetTeamInfo() *MountainSeaInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type MountainSeaGetTeamListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Page *int32 `protobuf:"varint,2,req,name=page" json:"page,omitempty"`
}

func (x *MountainSeaGetTeamListReq) Reset() {
	*x = MountainSeaGetTeamListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetTeamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetTeamListReq) ProtoMessage() {}

func (x *MountainSeaGetTeamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetTeamListReq.ProtoReflect.Descriptor instead.
func (*MountainSeaGetTeamListReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{15}
}

func (x *MountainSeaGetTeamListReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MountainSeaGetTeamListReq) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type MountainSeaGetTeamListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamList []*MountainSeaOutterTeamEntity `protobuf:"bytes,2,rep,name=teamList" json:"teamList,omitempty"`
}

func (x *MountainSeaGetTeamListRsp) Reset() {
	*x = MountainSeaGetTeamListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetTeamListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetTeamListRsp) ProtoMessage() {}

func (x *MountainSeaGetTeamListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetTeamListRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaGetTeamListRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{16}
}

func (x *MountainSeaGetTeamListRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaGetTeamListRsp) GetTeamList() []*MountainSeaOutterTeamEntity {
	if x != nil {
		return x.TeamList
	}
	return nil
}

type MountainSeaGetTeamInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *MountainSeaGetTeamInfoReq) Reset() {
	*x = MountainSeaGetTeamInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetTeamInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetTeamInfoReq) ProtoMessage() {}

func (x *MountainSeaGetTeamInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetTeamInfoReq.ProtoReflect.Descriptor instead.
func (*MountainSeaGetTeamInfoReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{17}
}

func (x *MountainSeaGetTeamInfoReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type MountainSeaGetTeamInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *MountainSeaOutterTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *MountainSeaGetTeamInfoRsp) Reset() {
	*x = MountainSeaGetTeamInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetTeamInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetTeamInfoRsp) ProtoMessage() {}

func (x *MountainSeaGetTeamInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetTeamInfoRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaGetTeamInfoRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{18}
}

func (x *MountainSeaGetTeamInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaGetTeamInfoRsp) GetTeamInfo() *MountainSeaOutterTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type MountainSeaCancelTeamApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *MountainSeaCancelTeamApplyReq) Reset() {
	*x = MountainSeaCancelTeamApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaCancelTeamApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaCancelTeamApplyReq) ProtoMessage() {}

func (x *MountainSeaCancelTeamApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaCancelTeamApplyReq.ProtoReflect.Descriptor instead.
func (*MountainSeaCancelTeamApplyReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{19}
}

func (x *MountainSeaCancelTeamApplyReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type MountainSeaCancelTeamApplyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaCancelTeamApplyRsp) Reset() {
	*x = MountainSeaCancelTeamApplyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaCancelTeamApplyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaCancelTeamApplyRsp) ProtoMessage() {}

func (x *MountainSeaCancelTeamApplyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaCancelTeamApplyRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaCancelTeamApplyRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{20}
}

func (x *MountainSeaCancelTeamApplyRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaApplyJoinTeamAgreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *MountainSeaApplyJoinTeamAgreeReq) Reset() {
	*x = MountainSeaApplyJoinTeamAgreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaApplyJoinTeamAgreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaApplyJoinTeamAgreeReq) ProtoMessage() {}

func (x *MountainSeaApplyJoinTeamAgreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaApplyJoinTeamAgreeReq.ProtoReflect.Descriptor instead.
func (*MountainSeaApplyJoinTeamAgreeReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{21}
}

func (x *MountainSeaApplyJoinTeamAgreeReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MountainSeaApplyJoinTeamAgreeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *MountainSeaInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *MountainSeaApplyJoinTeamAgreeRsp) Reset() {
	*x = MountainSeaApplyJoinTeamAgreeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaApplyJoinTeamAgreeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaApplyJoinTeamAgreeRsp) ProtoMessage() {}

func (x *MountainSeaApplyJoinTeamAgreeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaApplyJoinTeamAgreeRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaApplyJoinTeamAgreeRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{22}
}

func (x *MountainSeaApplyJoinTeamAgreeRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaApplyJoinTeamAgreeRsp) GetTeamInfo() *MountainSeaInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type MountainSeaApplyJoinTeamRefusedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaApplyJoinTeamRefusedReq) Reset() {
	*x = MountainSeaApplyJoinTeamRefusedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaApplyJoinTeamRefusedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaApplyJoinTeamRefusedReq) ProtoMessage() {}

func (x *MountainSeaApplyJoinTeamRefusedReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaApplyJoinTeamRefusedReq.ProtoReflect.Descriptor instead.
func (*MountainSeaApplyJoinTeamRefusedReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{23}
}

type MountainSeaApplyJoinTeamRefusedRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *MountainSeaInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *MountainSeaApplyJoinTeamRefusedRsp) Reset() {
	*x = MountainSeaApplyJoinTeamRefusedRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaApplyJoinTeamRefusedRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaApplyJoinTeamRefusedRsp) ProtoMessage() {}

func (x *MountainSeaApplyJoinTeamRefusedRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaApplyJoinTeamRefusedRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaApplyJoinTeamRefusedRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{24}
}

func (x *MountainSeaApplyJoinTeamRefusedRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaApplyJoinTeamRefusedRsp) GetTeamInfo() *MountainSeaInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type MountainSeaQuitTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaQuitTeamReq) Reset() {
	*x = MountainSeaQuitTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaQuitTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaQuitTeamReq) ProtoMessage() {}

func (x *MountainSeaQuitTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaQuitTeamReq.ProtoReflect.Descriptor instead.
func (*MountainSeaQuitTeamReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{25}
}

type MountainSeaQuitTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaQuitTeamRsp) Reset() {
	*x = MountainSeaQuitTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaQuitTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaQuitTeamRsp) ProtoMessage() {}

func (x *MountainSeaQuitTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaQuitTeamRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaQuitTeamRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{26}
}

func (x *MountainSeaQuitTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaKickOutTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *MountainSeaKickOutTeamReq) Reset() {
	*x = MountainSeaKickOutTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaKickOutTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaKickOutTeamReq) ProtoMessage() {}

func (x *MountainSeaKickOutTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaKickOutTeamReq.ProtoReflect.Descriptor instead.
func (*MountainSeaKickOutTeamReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{27}
}

func (x *MountainSeaKickOutTeamReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MountainSeaKickOutTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaKickOutTeamRsp) Reset() {
	*x = MountainSeaKickOutTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaKickOutTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaKickOutTeamRsp) ProtoMessage() {}

func (x *MountainSeaKickOutTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaKickOutTeamRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaKickOutTeamRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{28}
}

func (x *MountainSeaKickOutTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaChangeLeaderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *MountainSeaChangeLeaderReq) Reset() {
	*x = MountainSeaChangeLeaderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangeLeaderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangeLeaderReq) ProtoMessage() {}

func (x *MountainSeaChangeLeaderReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangeLeaderReq.ProtoReflect.Descriptor instead.
func (*MountainSeaChangeLeaderReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{29}
}

func (x *MountainSeaChangeLeaderReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MountainSeaChangeLeaderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RealmsId *int32 `protobuf:"varint,2,opt,name=realmsId" json:"realmsId,omitempty"`
}

func (x *MountainSeaChangeLeaderRsp) Reset() {
	*x = MountainSeaChangeLeaderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangeLeaderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangeLeaderRsp) ProtoMessage() {}

func (x *MountainSeaChangeLeaderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangeLeaderRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaChangeLeaderRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{30}
}

func (x *MountainSeaChangeLeaderRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaChangeLeaderRsp) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

type MountainSeaTeamLeaderNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *int32                      `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	UserData *MountainSeaApplyUserEntity `protobuf:"bytes,2,opt,name=userData" json:"userData,omitempty"`
}

func (x *MountainSeaTeamLeaderNotify) Reset() {
	*x = MountainSeaTeamLeaderNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaTeamLeaderNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaTeamLeaderNotify) ProtoMessage() {}

func (x *MountainSeaTeamLeaderNotify) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaTeamLeaderNotify.ProtoReflect.Descriptor instead.
func (*MountainSeaTeamLeaderNotify) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{31}
}

func (x *MountainSeaTeamLeaderNotify) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MountainSeaTeamLeaderNotify) GetUserData() *MountainSeaApplyUserEntity {
	if x != nil {
		return x.UserData
	}
	return nil
}

type MountainSeaTeamMemberNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *int32                      `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	TeamInfo *MountainSeaInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *MountainSeaTeamMemberNotify) Reset() {
	*x = MountainSeaTeamMemberNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaTeamMemberNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaTeamMemberNotify) ProtoMessage() {}

func (x *MountainSeaTeamMemberNotify) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaTeamMemberNotify.ProtoReflect.Descriptor instead.
func (*MountainSeaTeamMemberNotify) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{32}
}

func (x *MountainSeaTeamMemberNotify) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MountainSeaTeamMemberNotify) GetTeamInfo() *MountainSeaInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type MountainSeaTeamPrepareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
}

func (x *MountainSeaTeamPrepareReq) Reset() {
	*x = MountainSeaTeamPrepareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaTeamPrepareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaTeamPrepareReq) ProtoMessage() {}

func (x *MountainSeaTeamPrepareReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaTeamPrepareReq.ProtoReflect.Descriptor instead.
func (*MountainSeaTeamPrepareReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{33}
}

func (x *MountainSeaTeamPrepareReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type MountainSeaTeamPrepareRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaTeamPrepareRsp) Reset() {
	*x = MountainSeaTeamPrepareRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaTeamPrepareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaTeamPrepareRsp) ProtoMessage() {}

func (x *MountainSeaTeamPrepareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaTeamPrepareRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaTeamPrepareRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{34}
}

func (x *MountainSeaTeamPrepareRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaStartMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
}

func (x *MountainSeaStartMatchReq) Reset() {
	*x = MountainSeaStartMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaStartMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaStartMatchReq) ProtoMessage() {}

func (x *MountainSeaStartMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaStartMatchReq.ProtoReflect.Descriptor instead.
func (*MountainSeaStartMatchReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{35}
}

func (x *MountainSeaStartMatchReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type MountainSeaStartMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaStartMatchRsp) Reset() {
	*x = MountainSeaStartMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaStartMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaStartMatchRsp) ProtoMessage() {}

func (x *MountainSeaStartMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaStartMatchRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaStartMatchRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{36}
}

func (x *MountainSeaStartMatchRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaMatchMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaMatchMemberReq) Reset() {
	*x = MountainSeaMatchMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaMatchMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaMatchMemberReq) ProtoMessage() {}

func (x *MountainSeaMatchMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaMatchMemberReq.ProtoReflect.Descriptor instead.
func (*MountainSeaMatchMemberReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{37}
}

type MountainSeaMatchMemberRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MatchNum *int32 `protobuf:"varint,2,opt,name=matchNum" json:"matchNum,omitempty"`
	MemberId *int64 `protobuf:"varint,3,opt,name=memberId" json:"memberId,omitempty"`
}

func (x *MountainSeaMatchMemberRsp) Reset() {
	*x = MountainSeaMatchMemberRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaMatchMemberRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaMatchMemberRsp) ProtoMessage() {}

func (x *MountainSeaMatchMemberRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaMatchMemberRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaMatchMemberRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{38}
}

func (x *MountainSeaMatchMemberRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaMatchMemberRsp) GetMatchNum() int32 {
	if x != nil && x.MatchNum != nil {
		return *x.MatchNum
	}
	return 0
}

func (x *MountainSeaMatchMemberRsp) GetMemberId() int64 {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return 0
}

type MatchResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId []int64 `protobuf:"varint,1,rep,name=playerId" json:"playerId,omitempty"`
}

func (x *MatchResultMsg) Reset() {
	*x = MatchResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultMsg) ProtoMessage() {}

func (x *MatchResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultMsg.ProtoReflect.Descriptor instead.
func (*MatchResultMsg) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{39}
}

func (x *MatchResultMsg) GetPlayerId() []int64 {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

type MountainSeaStartBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaStartBattleReq) Reset() {
	*x = MountainSeaStartBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaStartBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaStartBattleReq) ProtoMessage() {}

func (x *MountainSeaStartBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaStartBattleReq.ProtoReflect.Descriptor instead.
func (*MountainSeaStartBattleReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{40}
}

type MountainSeaStartBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaStartBattleRsp) Reset() {
	*x = MountainSeaStartBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaStartBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaStartBattleRsp) ProtoMessage() {}

func (x *MountainSeaStartBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaStartBattleRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaStartBattleRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{41}
}

func (x *MountainSeaStartBattleRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	TargetPlayerId *int64 `protobuf:"varint,2,opt,name=targetPlayerId" json:"targetPlayerId,omitempty"`
}

func (x *MountainSeaInviteReq) Reset() {
	*x = MountainSeaInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaInviteReq) ProtoMessage() {}

func (x *MountainSeaInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaInviteReq.ProtoReflect.Descriptor instead.
func (*MountainSeaInviteReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{42}
}

func (x *MountainSeaInviteReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MountainSeaInviteReq) GetTargetPlayerId() int64 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

type MountainSeaInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaInviteRsp) Reset() {
	*x = MountainSeaInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaInviteRsp) ProtoMessage() {}

func (x *MountainSeaInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaInviteRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaInviteRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{43}
}

func (x *MountainSeaInviteRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaRankTeamEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int64                     `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	TeamName       *string                    `protobuf:"bytes,2,opt,name=teamName" json:"teamName,omitempty"`
	LeaderServerId *int64                     `protobuf:"varint,3,opt,name=leaderServerId" json:"leaderServerId,omitempty"`
	Members        []*PlayerCharacterImageMsg `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	BattleTime     *int64                     `protobuf:"varint,5,opt,name=battleTime" json:"battleTime,omitempty"`
	FightValue     *int64                     `protobuf:"varint,6,opt,name=fightValue" json:"fightValue,omitempty"`
	BattleId       []int64                    `protobuf:"varint,7,rep,name=battleId" json:"battleId,omitempty"`
}

func (x *MountainSeaRankTeamEntity) Reset() {
	*x = MountainSeaRankTeamEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaRankTeamEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaRankTeamEntity) ProtoMessage() {}

func (x *MountainSeaRankTeamEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaRankTeamEntity.ProtoReflect.Descriptor instead.
func (*MountainSeaRankTeamEntity) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{44}
}

func (x *MountainSeaRankTeamEntity) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MountainSeaRankTeamEntity) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *MountainSeaRankTeamEntity) GetLeaderServerId() int64 {
	if x != nil && x.LeaderServerId != nil {
		return *x.LeaderServerId
	}
	return 0
}

func (x *MountainSeaRankTeamEntity) GetMembers() []*PlayerCharacterImageMsg {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *MountainSeaRankTeamEntity) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *MountainSeaRankTeamEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *MountainSeaRankTeamEntity) GetBattleId() []int64 {
	if x != nil {
		return x.BattleId
	}
	return nil
}

type MountainSeaRankTeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurTeam []*MountainSeaRankTeamEntity `protobuf:"bytes,1,rep,name=curTeam" json:"curTeam,omitempty"`
}

func (x *MountainSeaRankTeamList) Reset() {
	*x = MountainSeaRankTeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaRankTeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaRankTeamList) ProtoMessage() {}

func (x *MountainSeaRankTeamList) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaRankTeamList.ProtoReflect.Descriptor instead.
func (*MountainSeaRankTeamList) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{45}
}

func (x *MountainSeaRankTeamList) GetCurTeam() []*MountainSeaRankTeamEntity {
	if x != nil {
		return x.CurTeam
	}
	return nil
}

type MountainSeaWorshipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *MountainSeaWorshipReq) Reset() {
	*x = MountainSeaWorshipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaWorshipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaWorshipReq) ProtoMessage() {}

func (x *MountainSeaWorshipReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaWorshipReq.ProtoReflect.Descriptor instead.
func (*MountainSeaWorshipReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{46}
}

func (x *MountainSeaWorshipReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MountainSeaWorshipRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward         *string              `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	PlayerShowData *PalacePlayerShowMsg `protobuf:"bytes,3,opt,name=playerShowData" json:"playerShowData,omitempty"`
}

func (x *MountainSeaWorshipRsp) Reset() {
	*x = MountainSeaWorshipRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaWorshipRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaWorshipRsp) ProtoMessage() {}

func (x *MountainSeaWorshipRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaWorshipRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaWorshipRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{47}
}

func (x *MountainSeaWorshipRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaWorshipRsp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MountainSeaWorshipRsp) GetPlayerShowData() *PalacePlayerShowMsg {
	if x != nil {
		return x.PlayerShowData
	}
	return nil
}

type MountainSeaGetBattleVideoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId *int64 `protobuf:"varint,1,req,name=battleId" json:"battleId,omitempty"`
}

func (x *MountainSeaGetBattleVideoReq) Reset() {
	*x = MountainSeaGetBattleVideoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetBattleVideoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetBattleVideoReq) ProtoMessage() {}

func (x *MountainSeaGetBattleVideoReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetBattleVideoReq.ProtoReflect.Descriptor instead.
func (*MountainSeaGetBattleVideoReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{48}
}

func (x *MountainSeaGetBattleVideoReq) GetBattleId() int64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

type MountainSeaGetBattleVideoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BattleRecordMsg *BattleRecordMsg `protobuf:"bytes,2,opt,name=battleRecordMsg" json:"battleRecordMsg,omitempty"`
}

func (x *MountainSeaGetBattleVideoRsp) Reset() {
	*x = MountainSeaGetBattleVideoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetBattleVideoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetBattleVideoRsp) ProtoMessage() {}

func (x *MountainSeaGetBattleVideoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetBattleVideoRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaGetBattleVideoRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{49}
}

func (x *MountainSeaGetBattleVideoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaGetBattleVideoRsp) GetBattleRecordMsg() *BattleRecordMsg {
	if x != nil {
		return x.BattleRecordMsg
	}
	return nil
}

type MountainSeaGetBossInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId *int32 `protobuf:"varint,1,req,name=bossId" json:"bossId,omitempty"`
}

func (x *MountainSeaGetBossInfoReq) Reset() {
	*x = MountainSeaGetBossInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetBossInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetBossInfoReq) ProtoMessage() {}

func (x *MountainSeaGetBossInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetBossInfoReq.ProtoReflect.Descriptor instead.
func (*MountainSeaGetBossInfoReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{50}
}

func (x *MountainSeaGetBossInfoReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

type MountainSeaGetBossInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BossInfo *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=bossInfo" json:"bossInfo,omitempty"`
}

func (x *MountainSeaGetBossInfoRsp) Reset() {
	*x = MountainSeaGetBossInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetBossInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetBossInfoRsp) ProtoMessage() {}

func (x *MountainSeaGetBossInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetBossInfoRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaGetBossInfoRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{51}
}

func (x *MountainSeaGetBossInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaGetBossInfoRsp) GetBossInfo() *PlayerDetailDataMsg {
	if x != nil {
		return x.BossInfo
	}
	return nil
}

type MountainSeaGetBossPowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId *int32 `protobuf:"varint,1,req,name=bossId" json:"bossId,omitempty"`
}

func (x *MountainSeaGetBossPowerReq) Reset() {
	*x = MountainSeaGetBossPowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetBossPowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetBossPowerReq) ProtoMessage() {}

func (x *MountainSeaGetBossPowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetBossPowerReq.ProtoReflect.Descriptor instead.
func (*MountainSeaGetBossPowerReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{52}
}

func (x *MountainSeaGetBossPowerReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

type MountainSeaGetBossPowerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Power *int64 `protobuf:"varint,2,opt,name=power" json:"power,omitempty"`
}

func (x *MountainSeaGetBossPowerRsp) Reset() {
	*x = MountainSeaGetBossPowerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetBossPowerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetBossPowerRsp) ProtoMessage() {}

func (x *MountainSeaGetBossPowerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetBossPowerRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaGetBossPowerRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{53}
}

func (x *MountainSeaGetBossPowerRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaGetBossPowerRsp) GetPower() int64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

type MountainSeaGetPlayerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	TeamId   *int64 `protobuf:"varint,2,req,name=teamId" json:"teamId,omitempty"`
	Type     *int32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	LeaderId *int64 `protobuf:"varint,4,opt,name=leaderId" json:"leaderId,omitempty"`
}

func (x *MountainSeaGetPlayerInfoReq) Reset() {
	*x = MountainSeaGetPlayerInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetPlayerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetPlayerInfoReq) ProtoMessage() {}

func (x *MountainSeaGetPlayerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetPlayerInfoReq.ProtoReflect.Descriptor instead.
func (*MountainSeaGetPlayerInfoReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{54}
}

func (x *MountainSeaGetPlayerInfoReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MountainSeaGetPlayerInfoReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *MountainSeaGetPlayerInfoReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MountainSeaGetPlayerInfoReq) GetLeaderId() int64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

type MountainSeaGetPlayerInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerInfo *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *MountainSeaGetPlayerInfoRsp) Reset() {
	*x = MountainSeaGetPlayerInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaGetPlayerInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaGetPlayerInfoRsp) ProtoMessage() {}

func (x *MountainSeaGetPlayerInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaGetPlayerInfoRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaGetPlayerInfoRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{55}
}

func (x *MountainSeaGetPlayerInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaGetPlayerInfoRsp) GetPlayerInfo() *PlayerDetailDataMsg {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type MountainSeaEnterBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaEnterBattleReq) Reset() {
	*x = MountainSeaEnterBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaEnterBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaEnterBattleReq) ProtoMessage() {}

func (x *MountainSeaEnterBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaEnterBattleReq.ProtoReflect.Descriptor instead.
func (*MountainSeaEnterBattleReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{56}
}

type MountainSeaEnterBattleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *MountainSeaEnterBattleData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *MountainSeaEnterBattleResp) Reset() {
	*x = MountainSeaEnterBattleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaEnterBattleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaEnterBattleResp) ProtoMessage() {}

func (x *MountainSeaEnterBattleResp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaEnterBattleResp.ProtoReflect.Descriptor instead.
func (*MountainSeaEnterBattleResp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{57}
}

func (x *MountainSeaEnterBattleResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaEnterBattleResp) GetData() *MountainSeaEnterBattleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MountainSeaEnterBattleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *MountainSeaEnterBattleData `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
}

func (x *MountainSeaEnterBattleNotify) Reset() {
	*x = MountainSeaEnterBattleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaEnterBattleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaEnterBattleNotify) ProtoMessage() {}

func (x *MountainSeaEnterBattleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaEnterBattleNotify.ProtoReflect.Descriptor instead.
func (*MountainSeaEnterBattleNotify) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{58}
}

func (x *MountainSeaEnterBattleNotify) GetData() *MountainSeaEnterBattleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MountainSeaEnterBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas       []*BattleMain `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
	TeamSkillId *int32        `protobuf:"varint,2,opt,name=teamSkillId" json:"teamSkillId,omitempty"`
}

func (x *MountainSeaEnterBattleData) Reset() {
	*x = MountainSeaEnterBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaEnterBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaEnterBattleData) ProtoMessage() {}

func (x *MountainSeaEnterBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaEnterBattleData.ProtoReflect.Descriptor instead.
func (*MountainSeaEnterBattleData) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{59}
}

func (x *MountainSeaEnterBattleData) GetDatas() []*BattleMain {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *MountainSeaEnterBattleData) GetTeamSkillId() int32 {
	if x != nil && x.TeamSkillId != nil {
		return *x.TeamSkillId
	}
	return 0
}

type MountainSeaEnterSwitchSeparationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaEnterSwitchSeparationReq) Reset() {
	*x = MountainSeaEnterSwitchSeparationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaEnterSwitchSeparationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaEnterSwitchSeparationReq) ProtoMessage() {}

func (x *MountainSeaEnterSwitchSeparationReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaEnterSwitchSeparationReq.ProtoReflect.Descriptor instead.
func (*MountainSeaEnterSwitchSeparationReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{60}
}

type MountainSeaEnterSwitchSeparationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32                             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Datas []*MountainSeaSeparationSimpleData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *MountainSeaEnterSwitchSeparationRsp) Reset() {
	*x = MountainSeaEnterSwitchSeparationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaEnterSwitchSeparationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaEnterSwitchSeparationRsp) ProtoMessage() {}

func (x *MountainSeaEnterSwitchSeparationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaEnterSwitchSeparationRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaEnterSwitchSeparationRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{61}
}

func (x *MountainSeaEnterSwitchSeparationRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaEnterSwitchSeparationRsp) GetDatas() []*MountainSeaSeparationSimpleData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type MountainSeaSeparationSimpleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *PlayerHeadAndNameMsg `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	Select  *int32                `protobuf:"varint,2,opt,name=select" json:"select,omitempty"`
	Powers  []int64               `protobuf:"varint,3,rep,name=powers" json:"powers,omitempty"`
	IsRobot *bool                 `protobuf:"varint,4,opt,name=isRobot" json:"isRobot,omitempty"`
}

func (x *MountainSeaSeparationSimpleData) Reset() {
	*x = MountainSeaSeparationSimpleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSeparationSimpleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSeparationSimpleData) ProtoMessage() {}

func (x *MountainSeaSeparationSimpleData) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSeparationSimpleData.ProtoReflect.Descriptor instead.
func (*MountainSeaSeparationSimpleData) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{62}
}

func (x *MountainSeaSeparationSimpleData) GetData() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MountainSeaSeparationSimpleData) GetSelect() int32 {
	if x != nil && x.Select != nil {
		return *x.Select
	}
	return 0
}

func (x *MountainSeaSeparationSimpleData) GetPowers() []int64 {
	if x != nil {
		return x.Powers
	}
	return nil
}

func (x *MountainSeaSeparationSimpleData) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

type MountainSeaSwitchSeparationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId     *int64        `protobuf:"varint,1,req,name=targetId" json:"targetId,omitempty"`
	SeparationId *int32        `protobuf:"varint,2,req,name=separationId" json:"separationId,omitempty"`
	IsRobot      *bool         `protobuf:"varint,3,req,name=isRobot" json:"isRobot,omitempty"`
	TeamId       *int64        `protobuf:"varint,4,req,name=teamId" json:"teamId,omitempty"`
	BattleMain   []*BattleMain `protobuf:"bytes,5,rep,name=battleMain" json:"battleMain,omitempty"`
}

func (x *MountainSeaSwitchSeparationReq) Reset() {
	*x = MountainSeaSwitchSeparationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSwitchSeparationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSwitchSeparationReq) ProtoMessage() {}

func (x *MountainSeaSwitchSeparationReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSwitchSeparationReq.ProtoReflect.Descriptor instead.
func (*MountainSeaSwitchSeparationReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{63}
}

func (x *MountainSeaSwitchSeparationReq) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *MountainSeaSwitchSeparationReq) GetSeparationId() int32 {
	if x != nil && x.SeparationId != nil {
		return *x.SeparationId
	}
	return 0
}

func (x *MountainSeaSwitchSeparationReq) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *MountainSeaSwitchSeparationReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *MountainSeaSwitchSeparationReq) GetBattleMain() []*BattleMain {
	if x != nil {
		return x.BattleMain
	}
	return nil
}

type MountainSeaSwitchSeparationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32                             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Notify *MountainSeaSwitchSeparationNotify `protobuf:"bytes,2,opt,name=notify" json:"notify,omitempty"`
}

func (x *MountainSeaSwitchSeparationRsp) Reset() {
	*x = MountainSeaSwitchSeparationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSwitchSeparationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSwitchSeparationRsp) ProtoMessage() {}

func (x *MountainSeaSwitchSeparationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSwitchSeparationRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaSwitchSeparationRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{64}
}

func (x *MountainSeaSwitchSeparationRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaSwitchSeparationRsp) GetNotify() *MountainSeaSwitchSeparationNotify {
	if x != nil {
		return x.Notify
	}
	return nil
}

type MountainSeaSwitchSeparationNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleMain   []*BattleMain `protobuf:"bytes,1,rep,name=battleMain" json:"battleMain,omitempty"`
	TargetId     *int64        `protobuf:"varint,2,opt,name=targetId" json:"targetId,omitempty"`
	SeparationId *int32        `protobuf:"varint,3,opt,name=separationId" json:"separationId,omitempty"`
	TeamId       *int64        `protobuf:"varint,4,opt,name=teamId" json:"teamId,omitempty"`
}

func (x *MountainSeaSwitchSeparationNotify) Reset() {
	*x = MountainSeaSwitchSeparationNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSwitchSeparationNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSwitchSeparationNotify) ProtoMessage() {}

func (x *MountainSeaSwitchSeparationNotify) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSwitchSeparationNotify.ProtoReflect.Descriptor instead.
func (*MountainSeaSwitchSeparationNotify) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{65}
}

func (x *MountainSeaSwitchSeparationNotify) GetBattleMain() []*BattleMain {
	if x != nil {
		return x.BattleMain
	}
	return nil
}

func (x *MountainSeaSwitchSeparationNotify) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *MountainSeaSwitchSeparationNotify) GetSeparationId() int32 {
	if x != nil && x.SeparationId != nil {
		return *x.SeparationId
	}
	return 0
}

func (x *MountainSeaSwitchSeparationNotify) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type MountainSeaSeparationDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId *int64 `protobuf:"varint,1,req,name=targetPlayerId" json:"targetPlayerId,omitempty"`
	TeamId         *int64 `protobuf:"varint,2,req,name=teamId" json:"teamId,omitempty"`
}

func (x *MountainSeaSeparationDetailReq) Reset() {
	*x = MountainSeaSeparationDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSeparationDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSeparationDetailReq) ProtoMessage() {}

func (x *MountainSeaSeparationDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSeparationDetailReq.ProtoReflect.Descriptor instead.
func (*MountainSeaSeparationDetailReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{66}
}

func (x *MountainSeaSeparationDetailReq) GetTargetPlayerId() int64 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

func (x *MountainSeaSeparationDetailReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type MountainSeaSeparationDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Datas        *GodBodyDetailDataMsg `protobuf:"bytes,2,opt,name=datas" json:"datas,omitempty"`
	AppearanceId *int32                `protobuf:"varint,3,opt,name=appearanceId" json:"appearanceId,omitempty"`
}

func (x *MountainSeaSeparationDetailRsp) Reset() {
	*x = MountainSeaSeparationDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSeparationDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSeparationDetailRsp) ProtoMessage() {}

func (x *MountainSeaSeparationDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSeparationDetailRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaSeparationDetailRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{67}
}

func (x *MountainSeaSeparationDetailRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaSeparationDetailRsp) GetDatas() *GodBodyDetailDataMsg {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *MountainSeaSeparationDetailRsp) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

type MountainSeaChangePosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResPlayerId *int64 `protobuf:"varint,1,req,name=resPlayerId" json:"resPlayerId,omitempty"`
	TarPlayerId *int64 `protobuf:"varint,2,req,name=tarPlayerId" json:"tarPlayerId,omitempty"`
	TarPos      *int32 `protobuf:"varint,3,req,name=tarPos" json:"tarPos,omitempty"`
	TeamId      *int64 `protobuf:"varint,4,req,name=teamId" json:"teamId,omitempty"`
}

func (x *MountainSeaChangePosReq) Reset() {
	*x = MountainSeaChangePosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangePosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangePosReq) ProtoMessage() {}

func (x *MountainSeaChangePosReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangePosReq.ProtoReflect.Descriptor instead.
func (*MountainSeaChangePosReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{68}
}

func (x *MountainSeaChangePosReq) GetResPlayerId() int64 {
	if x != nil && x.ResPlayerId != nil {
		return *x.ResPlayerId
	}
	return 0
}

func (x *MountainSeaChangePosReq) GetTarPlayerId() int64 {
	if x != nil && x.TarPlayerId != nil {
		return *x.TarPlayerId
	}
	return 0
}

func (x *MountainSeaChangePosReq) GetTarPos() int32 {
	if x != nil && x.TarPos != nil {
		return *x.TarPos
	}
	return 0
}

func (x *MountainSeaChangePosReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type MountainSeaChangePosRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaChangePosRsp) Reset() {
	*x = MountainSeaChangePosRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangePosRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangePosRsp) ProtoMessage() {}

func (x *MountainSeaChangePosRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangePosRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaChangePosRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{69}
}

func (x *MountainSeaChangePosRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaChangePosNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*MountainSeaChangePosData `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (x *MountainSeaChangePosNotify) Reset() {
	*x = MountainSeaChangePosNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangePosNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangePosNotify) ProtoMessage() {}

func (x *MountainSeaChangePosNotify) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangePosNotify.ProtoReflect.Descriptor instead.
func (*MountainSeaChangePosNotify) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{70}
}

func (x *MountainSeaChangePosNotify) GetDatas() []*MountainSeaChangePosData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type MountainSeaChangePosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	Pos      *int32 `protobuf:"varint,2,req,name=pos" json:"pos,omitempty"`
}

func (x *MountainSeaChangePosData) Reset() {
	*x = MountainSeaChangePosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangePosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangePosData) ProtoMessage() {}

func (x *MountainSeaChangePosData) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangePosData.ProtoReflect.Descriptor instead.
func (*MountainSeaChangePosData) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{71}
}

func (x *MountainSeaChangePosData) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MountainSeaChangePosData) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

type MountainSeaChangeTeamSkillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId *int32 `protobuf:"varint,1,req,name=skillId" json:"skillId,omitempty"`
}

func (x *MountainSeaChangeTeamSkillReq) Reset() {
	*x = MountainSeaChangeTeamSkillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangeTeamSkillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangeTeamSkillReq) ProtoMessage() {}

func (x *MountainSeaChangeTeamSkillReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangeTeamSkillReq.ProtoReflect.Descriptor instead.
func (*MountainSeaChangeTeamSkillReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{72}
}

func (x *MountainSeaChangeTeamSkillReq) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

type MountainSeaChangeTeamSkillRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	SkillId *int32 `protobuf:"varint,2,opt,name=skillId" json:"skillId,omitempty"`
	TeamId  *int64 `protobuf:"varint,3,opt,name=teamId" json:"teamId,omitempty"`
}

func (x *MountainSeaChangeTeamSkillRsp) Reset() {
	*x = MountainSeaChangeTeamSkillRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangeTeamSkillRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangeTeamSkillRsp) ProtoMessage() {}

func (x *MountainSeaChangeTeamSkillRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangeTeamSkillRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaChangeTeamSkillRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{73}
}

func (x *MountainSeaChangeTeamSkillRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaChangeTeamSkillRsp) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *MountainSeaChangeTeamSkillRsp) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type MountainSeaChangeTeamSkillNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectId *int32 `protobuf:"varint,1,req,name=selectId" json:"selectId,omitempty"`
}

func (x *MountainSeaChangeTeamSkillNotify) Reset() {
	*x = MountainSeaChangeTeamSkillNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaChangeTeamSkillNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaChangeTeamSkillNotify) ProtoMessage() {}

func (x *MountainSeaChangeTeamSkillNotify) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaChangeTeamSkillNotify.ProtoReflect.Descriptor instead.
func (*MountainSeaChangeTeamSkillNotify) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{74}
}

func (x *MountainSeaChangeTeamSkillNotify) GetSelectId() int32 {
	if x != nil && x.SelectId != nil {
		return *x.SelectId
	}
	return 0
}

type MountainSeaDoBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId            *int64                  `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
	BossId            *int32                  `protobuf:"varint,2,req,name=bossId" json:"bossId,omitempty"`
	RealmsId          *int32                  `protobuf:"varint,3,req,name=realmsId" json:"realmsId,omitempty"`
	AllBattleRecord   *BattleRecordMsg        `protobuf:"bytes,4,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	GodBodyDetailData []*GodBodyDetailDataMsg `protobuf:"bytes,5,rep,name=godBodyDetailData" json:"godBodyDetailData,omitempty"`
	TeamHp            []int64                 `protobuf:"varint,6,rep,name=teamHp" json:"teamHp,omitempty"`
	BattleReport      [][]byte                `protobuf:"bytes,7,rep,name=battleReport" json:"battleReport,omitempty"`
	BattleMainData    []string                `protobuf:"bytes,8,rep,name=battleMainData" json:"battleMainData,omitempty"`
}

func (x *MountainSeaDoBattleReq) Reset() {
	*x = MountainSeaDoBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaDoBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaDoBattleReq) ProtoMessage() {}

func (x *MountainSeaDoBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaDoBattleReq.ProtoReflect.Descriptor instead.
func (*MountainSeaDoBattleReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{75}
}

func (x *MountainSeaDoBattleReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *MountainSeaDoBattleReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

func (x *MountainSeaDoBattleReq) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *MountainSeaDoBattleReq) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *MountainSeaDoBattleReq) GetGodBodyDetailData() []*GodBodyDetailDataMsg {
	if x != nil {
		return x.GodBodyDetailData
	}
	return nil
}

func (x *MountainSeaDoBattleReq) GetTeamHp() []int64 {
	if x != nil {
		return x.TeamHp
	}
	return nil
}

func (x *MountainSeaDoBattleReq) GetBattleReport() [][]byte {
	if x != nil {
		return x.BattleReport
	}
	return nil
}

func (x *MountainSeaDoBattleReq) GetBattleMainData() []string {
	if x != nil {
		return x.BattleMainData
	}
	return nil
}

type MountainSeaDoBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	NotifyData *MountainSeaDoBattleNotify `protobuf:"bytes,2,opt,name=notifyData" json:"notifyData,omitempty"`
}

func (x *MountainSeaDoBattleRsp) Reset() {
	*x = MountainSeaDoBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaDoBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaDoBattleRsp) ProtoMessage() {}

func (x *MountainSeaDoBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaDoBattleRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaDoBattleRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{76}
}

func (x *MountainSeaDoBattleRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaDoBattleRsp) GetNotifyData() *MountainSeaDoBattleNotify {
	if x != nil {
		return x.NotifyData
	}
	return nil
}

type MountainSeaDoBattleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllBattleRecord *BattleRecordMsg `protobuf:"bytes,1,req,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	Rewards         *string          `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
	BossData        *BattleMain      `protobuf:"bytes,3,opt,name=bossData" json:"bossData,omitempty"`
	IsLastStar      *bool            `protobuf:"varint,4,opt,name=isLastStar" json:"isLastStar,omitempty"`
	Hps             []int64          `protobuf:"varint,5,rep,name=hps" json:"hps,omitempty"`
	TeamId          *int64           `protobuf:"varint,6,opt,name=teamId" json:"teamId,omitempty"`
	BigType         *int32           `protobuf:"varint,7,opt,name=bigType" json:"bigType,omitempty"`
	BattleReport    []byte           `protobuf:"bytes,8,opt,name=battleReport" json:"battleReport,omitempty"`
}

func (x *MountainSeaDoBattleNotify) Reset() {
	*x = MountainSeaDoBattleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaDoBattleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaDoBattleNotify) ProtoMessage() {}

func (x *MountainSeaDoBattleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaDoBattleNotify.ProtoReflect.Descriptor instead.
func (*MountainSeaDoBattleNotify) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{77}
}

func (x *MountainSeaDoBattleNotify) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *MountainSeaDoBattleNotify) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *MountainSeaDoBattleNotify) GetBossData() *BattleMain {
	if x != nil {
		return x.BossData
	}
	return nil
}

func (x *MountainSeaDoBattleNotify) GetIsLastStar() bool {
	if x != nil && x.IsLastStar != nil {
		return *x.IsLastStar
	}
	return false
}

func (x *MountainSeaDoBattleNotify) GetHps() []int64 {
	if x != nil {
		return x.Hps
	}
	return nil
}

func (x *MountainSeaDoBattleNotify) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *MountainSeaDoBattleNotify) GetBigType() int32 {
	if x != nil && x.BigType != nil {
		return *x.BigType
	}
	return 0
}

func (x *MountainSeaDoBattleNotify) GetBattleReport() []byte {
	if x != nil {
		return x.BattleReport
	}
	return nil
}

type MountainSeaInviteListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountainSeaInviteListReq) Reset() {
	*x = MountainSeaInviteListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaInviteListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaInviteListReq) ProtoMessage() {}

func (x *MountainSeaInviteListReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaInviteListReq.ProtoReflect.Descriptor instead.
func (*MountainSeaInviteListReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{78}
}

type MountainSeaInviteListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamList []*MountainSeaOutterTeamEntity `protobuf:"bytes,2,rep,name=teamList" json:"teamList,omitempty"`
	IsAccept *bool                          `protobuf:"varint,3,opt,name=isAccept" json:"isAccept,omitempty"`
}

func (x *MountainSeaInviteListResp) Reset() {
	*x = MountainSeaInviteListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaInviteListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaInviteListResp) ProtoMessage() {}

func (x *MountainSeaInviteListResp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaInviteListResp.ProtoReflect.Descriptor instead.
func (*MountainSeaInviteListResp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{79}
}

func (x *MountainSeaInviteListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaInviteListResp) GetTeamList() []*MountainSeaOutterTeamEntity {
	if x != nil {
		return x.TeamList
	}
	return nil
}

func (x *MountainSeaInviteListResp) GetIsAccept() bool {
	if x != nil && x.IsAccept != nil {
		return *x.IsAccept
	}
	return false
}

type MountainSeaRedPointResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteRedPoint *bool `protobuf:"varint,1,opt,name=inviteRedPoint" json:"inviteRedPoint,omitempty"`
}

func (x *MountainSeaRedPointResp) Reset() {
	*x = MountainSeaRedPointResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaRedPointResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaRedPointResp) ProtoMessage() {}

func (x *MountainSeaRedPointResp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaRedPointResp.ProtoReflect.Descriptor instead.
func (*MountainSeaRedPointResp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{80}
}

func (x *MountainSeaRedPointResp) GetInviteRedPoint() bool {
	if x != nil && x.InviteRedPoint != nil {
		return *x.InviteRedPoint
	}
	return false
}

type MountainSeaApplyJoinTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *MountainSeaApplyJoinTeamReq) Reset() {
	*x = MountainSeaApplyJoinTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaApplyJoinTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaApplyJoinTeamReq) ProtoMessage() {}

func (x *MountainSeaApplyJoinTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaApplyJoinTeamReq.ProtoReflect.Descriptor instead.
func (*MountainSeaApplyJoinTeamReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{81}
}

func (x *MountainSeaApplyJoinTeamReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type MountainSeaApplyJoinTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *MountainSeaInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *MountainSeaApplyJoinTeamRsp) Reset() {
	*x = MountainSeaApplyJoinTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaApplyJoinTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaApplyJoinTeamRsp) ProtoMessage() {}

func (x *MountainSeaApplyJoinTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaApplyJoinTeamRsp.ProtoReflect.Descriptor instead.
func (*MountainSeaApplyJoinTeamRsp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{82}
}

func (x *MountainSeaApplyJoinTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MountainSeaApplyJoinTeamRsp) GetTeamInfo() *MountainSeaInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type MountainSeaInviteRefuseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *MountainSeaInviteRefuseReq) Reset() {
	*x = MountainSeaInviteRefuseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaInviteRefuseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaInviteRefuseReq) ProtoMessage() {}

func (x *MountainSeaInviteRefuseReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaInviteRefuseReq.ProtoReflect.Descriptor instead.
func (*MountainSeaInviteRefuseReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{83}
}

func (x *MountainSeaInviteRefuseReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MountainSeaInviteRefuseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaInviteRefuseResp) Reset() {
	*x = MountainSeaInviteRefuseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaInviteRefuseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaInviteRefuseResp) ProtoMessage() {}

func (x *MountainSeaInviteRefuseResp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaInviteRefuseResp.ProtoReflect.Descriptor instead.
func (*MountainSeaInviteRefuseResp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{84}
}

func (x *MountainSeaInviteRefuseResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MountainSeaSetAppointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAcceptAppoint *bool `protobuf:"varint,1,req,name=isAcceptAppoint" json:"isAcceptAppoint,omitempty"`
}

func (x *MountainSeaSetAppointReq) Reset() {
	*x = MountainSeaSetAppointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSetAppointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSetAppointReq) ProtoMessage() {}

func (x *MountainSeaSetAppointReq) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSetAppointReq.ProtoReflect.Descriptor instead.
func (*MountainSeaSetAppointReq) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{85}
}

func (x *MountainSeaSetAppointReq) GetIsAcceptAppoint() bool {
	if x != nil && x.IsAcceptAppoint != nil {
		return *x.IsAcceptAppoint
	}
	return false
}

type MountainSeaSetAppointResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MountainSeaSetAppointResp) Reset() {
	*x = MountainSeaSetAppointResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MountainSea_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountainSeaSetAppointResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountainSeaSetAppointResp) ProtoMessage() {}

func (x *MountainSeaSetAppointResp) ProtoReflect() protoreflect.Message {
	mi := &file_MountainSea_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountainSeaSetAppointResp.ProtoReflect.Descriptor instead.
func (*MountainSeaSetAppointResp) Descriptor() ([]byte, []int) {
	return file_MountainSea_proto_rawDescGZIP(), []int{86}
}

func (x *MountainSeaSetAppointResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

var File_MountainSea_proto protoreflect.FileDescriptor

var file_MountainSea_proto_rawDesc = []byte{
	0x0a, 0x11, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x50, 0x61, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x22, 0xbe, 0x04, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x79, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x79, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5b, 0x0a,
	0x10, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x52, 0x65, 0x71, 0x22,
	0x27, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x22, 0x77, 0x0a, 0x17, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x19, 0x0a, 0x17,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x02,
	0x0a, 0x1b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4f, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b,
	0x03, 0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a,
	0x17, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x18,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x18, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43,
	0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x33, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x37, 0x0a, 0x1d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x1d, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x20,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a,
	0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x24, 0x0a, 0x22, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x22, 0x82, 0x01, 0x0a, 0x22, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4a,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x51, 0x75, 0x69, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x22, 0x2a, 0x0a, 0x16, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x51, 0x75, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x22, 0x37, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4b,
	0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x22, 0x7d,
	0x0a, 0x1b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a,
	0x1b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x19,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a,
	0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x54, 0x65, 0x61, 0x6d,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x2e, 0x0a, 0x18,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x18,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22, 0x65, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x22, 0x2d, 0x0a, 0x19, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x52, 0x0a, 0x14, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x14,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x17, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22,
	0x33, 0x0a, 0x15, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x57, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x61, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x1c, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x33, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x19, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x6f,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x34, 0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x6f, 0x73, 0x73, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x1b,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x78, 0x0a, 0x1b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x47, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x22, 0x72, 0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x1c, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74,
	0x0a, 0x1a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x82, 0x01, 0x0a, 0x23,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x22, 0xd2, 0x01, 0x0a,
	0x1e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x21, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47,
	0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8d,
	0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x2b,
	0x0a, 0x17, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x1a, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x6f, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x48, 0x0a,
	0x18, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x39, 0x0a, 0x1d, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x16, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x44, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f,
	0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61, 0x6c,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x56, 0x0a,
	0x11, 0x67, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x52, 0x11, 0x67, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x48, 0x70, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x48, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x16, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x44, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x44, 0x6f, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x02, 0x0a, 0x19, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x44, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x62,
	0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x62,
	0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x68, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x1a, 0x0a, 0x18, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x96, 0x01, 0x0a, 0x19,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x4f, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x22, 0x41, 0x0a, 0x17, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x1b, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x1b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x0a, 0x1a, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x44, 0x0a, 0x18, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x19,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x53, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x2a, 0x9d, 0x0f, 0x0a, 0x0d,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x50, 0x62, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x12, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x5f, 0x53, 0x45, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0xa5, 0xe6, 0x0c, 0x12, 0x1d,
	0x0a, 0x17, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0xa6, 0xe6, 0x0c, 0x12, 0x1d, 0x0a,
	0x17, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xa7, 0xe6, 0x0c, 0x12, 0x1e, 0x0a, 0x18,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0xa8, 0xe6, 0x0c, 0x12, 0x20, 0x0a, 0x1a,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xa9, 0xe6, 0x0c, 0x12, 0x20,
	0x0a, 0x1a, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xaa, 0xe6, 0x0c,
	0x12, 0x24, 0x0a, 0x1e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x10, 0xac, 0xe6, 0x0c, 0x12, 0x28, 0x0a, 0x22, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0xad, 0xe6, 0x0c,
	0x12, 0x2a, 0x0a, 0x24, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0xae, 0xe6, 0x0c, 0x12, 0x1c, 0x0a, 0x16,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x51, 0x55, 0x49,
	0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0xaf, 0xe6, 0x0c, 0x12, 0x20, 0x0a, 0x1a, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0xb0, 0xe6, 0x0c, 0x12, 0x20, 0x0a, 0x1a,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0xb1, 0xe6, 0x0c, 0x12, 0x1f,
	0x0a, 0x19, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0xb2, 0xe6, 0x0c, 0x12,
	0x1f, 0x0a, 0x19, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xb3, 0xe6, 0x0c,
	0x12, 0x1f, 0x0a, 0x19, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0xb4, 0xe6,
	0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45,
	0x41, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0xb5, 0xe6, 0x0c, 0x12, 0x1a, 0x0a, 0x14, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x57, 0x4f, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0xb6,
	0xe6, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53,
	0x45, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0xb7, 0xe6, 0x0c, 0x12, 0x20, 0x0a, 0x1a, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x53,
	0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xb8, 0xe6, 0x0c, 0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xba, 0xe6, 0x0c, 0x12, 0x19, 0x0a, 0x13, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x10, 0xbb, 0xe6, 0x0c, 0x12, 0x18, 0x0a, 0x12, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0xbc, 0xe6, 0x0c, 0x12,
	0x21, 0x0a, 0x1b, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xbd,
	0xe6, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53,
	0x45, 0x41, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xc3, 0xe6, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xc4, 0xe6, 0x0c,
	0x12, 0x20, 0x0a, 0x1a, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x57, 0x4f, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xc5,
	0xe6, 0x0c, 0x12, 0x1f, 0x0a, 0x19, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53,
	0x45, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10,
	0xc6, 0xe6, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f,
	0x53, 0x45, 0x41, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xc7, 0xe6, 0x0c, 0x12, 0x1f, 0x0a, 0x19, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0xd6, 0xe6, 0x0c, 0x12, 0x2a, 0x0a, 0x24, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xd8, 0xe6, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd9, 0xe6, 0x0c, 0x12, 0x24, 0x0a,
	0x1e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x53, 0x45,
	0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10,
	0xda, 0xe6, 0x0c, 0x12, 0x1d, 0x0a, 0x17, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f,
	0x53, 0x45, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0xdb,
	0xe6, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53,
	0x45, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xdc, 0xe6, 0x0c, 0x12, 0x1c, 0x0a, 0x16, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x44, 0x4f, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0xdd, 0xe6, 0x0c, 0x12, 0x30, 0x0a, 0x2a, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x52, 0x4f, 0x53, 0x53, 0x10, 0xe2, 0xe6, 0x0c, 0x12, 0x2a, 0x0a, 0x24, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53,
	0x10, 0xe3, 0xe6, 0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x5f, 0x53, 0x45, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f,
	0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xe4, 0xe6, 0x0c, 0x12, 0x22, 0x0a, 0x1c, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x44, 0x4f, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xe5, 0xe6, 0x0c, 0x12, 0x2a, 0x0a,
	0x24, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xe6, 0xe6, 0x0c, 0x12, 0x26, 0x0a, 0x20, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xea, 0xe6,
	0x0c, 0x12, 0x2b, 0x0a, 0x25, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45,
	0x41, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xeb, 0xe6, 0x0c, 0x12, 0x2b,
	0x0a, 0x25, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xec, 0xe6, 0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x44, 0x4f, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xed, 0xe6, 0x0c,
	0x12, 0x24, 0x0a, 0x1e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x10, 0xee, 0xe6, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xf4, 0xe6, 0x0c, 0x12, 0x2a, 0x0a,
	0x24, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xf5, 0xe6, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xf6, 0xe6, 0x0c,
	0x12, 0x1e, 0x0a, 0x18, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xf7, 0xe6, 0x0c,
	0x12, 0x1b, 0x0a, 0x15, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41,
	0x5f, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xf8, 0xe6, 0x0c, 0x12, 0x20, 0x0a,
	0x1a, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0xf9, 0xe6, 0x0c, 0x12,
	0x25, 0x0a, 0x1f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0xfa, 0xe6, 0x0c, 0x12, 0x23, 0x0a, 0x1d, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0xfb, 0xe6, 0x0c, 0x2a, 0x2a, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x5c, 0x0a, 0x18, 0x54, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x10, 0x03, 0x2a, 0xdf, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x55,
	0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x07,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x0a, 0x2a, 0x2e, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f,
	0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_MountainSea_proto_rawDescOnce sync.Once
	file_MountainSea_proto_rawDescData = file_MountainSea_proto_rawDesc
)

func file_MountainSea_proto_rawDescGZIP() []byte {
	file_MountainSea_proto_rawDescOnce.Do(func() {
		file_MountainSea_proto_rawDescData = protoimpl.X.CompressGZIP(file_MountainSea_proto_rawDescData)
	})
	return file_MountainSea_proto_rawDescData
}

var file_MountainSea_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_MountainSea_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_MountainSea_proto_goTypes = []any{
	(MountainSeaPb)(0),                          // 0: com.yq.msg.CityMsg.MountainSeaPb
	(GetTeamListTypeEnum)(0),                    // 1: com.yq.msg.CityMsg.GetTeamListTypeEnum
	(TeamLeaderNotifyTypeEnum)(0),               // 2: com.yq.msg.CityMsg.TeamLeaderNotifyTypeEnum
	(TeamMemberNotifyTypeEnum)(0),               // 3: com.yq.msg.CityMsg.TeamMemberNotifyTypeEnum
	(TeamPrepareTypeEnum)(0),                    // 4: com.yq.msg.CityMsg.TeamPrepareTypeEnum
	(*EnterMountainSeaReq)(nil),                 // 5: com.yq.msg.CityMsg.EnterMountainSeaReq
	(*EnterMountainSeaRsp)(nil),                 // 6: com.yq.msg.CityMsg.EnterMountainSeaRsp
	(*LeaveMountainSeaReq)(nil),                 // 7: com.yq.msg.CityMsg.LeaveMountainSeaReq
	(*LeaveMountainSeaRsp)(nil),                 // 8: com.yq.msg.CityMsg.LeaveMountainSeaRsp
	(*EnterMountainSeaTeamReq)(nil),             // 9: com.yq.msg.CityMsg.EnterMountainSeaTeamReq
	(*EnterMountainSeaTeamRsp)(nil),             // 10: com.yq.msg.CityMsg.EnterMountainSeaTeamRsp
	(*MountainSeaTeamStartReq)(nil),             // 11: com.yq.msg.CityMsg.MountainSeaTeamStartReq
	(*MountainSeaTeamStartRsp)(nil),             // 12: com.yq.msg.CityMsg.MountainSeaTeamStartRsp
	(*MountainSeaOutterTeamEntity)(nil),         // 13: com.yq.msg.CityMsg.MountainSeaOutterTeamEntity
	(*MountainSeaOutterMemberEntity)(nil),       // 14: com.yq.msg.CityMsg.MountainSeaOutterMemberEntity
	(*MountainSeaInnerTeamEntity)(nil),          // 15: com.yq.msg.CityMsg.MountainSeaInnerTeamEntity
	(*MountainSeaMemberEntity)(nil),             // 16: com.yq.msg.CityMsg.MountainSeaMemberEntity
	(*MountainSeaApplyUserEntity)(nil),          // 17: com.yq.msg.CityMsg.MountainSeaApplyUserEntity
	(*MountainSeaCreateTeamReq)(nil),            // 18: com.yq.msg.CityMsg.MountainSeaCreateTeamReq
	(*MountainSeaCreateTeamRsp)(nil),            // 19: com.yq.msg.CityMsg.MountainSeaCreateTeamRsp
	(*MountainSeaGetTeamListReq)(nil),           // 20: com.yq.msg.CityMsg.MountainSeaGetTeamListReq
	(*MountainSeaGetTeamListRsp)(nil),           // 21: com.yq.msg.CityMsg.MountainSeaGetTeamListRsp
	(*MountainSeaGetTeamInfoReq)(nil),           // 22: com.yq.msg.CityMsg.MountainSeaGetTeamInfoReq
	(*MountainSeaGetTeamInfoRsp)(nil),           // 23: com.yq.msg.CityMsg.MountainSeaGetTeamInfoRsp
	(*MountainSeaCancelTeamApplyReq)(nil),       // 24: com.yq.msg.CityMsg.MountainSeaCancelTeamApplyReq
	(*MountainSeaCancelTeamApplyRsp)(nil),       // 25: com.yq.msg.CityMsg.MountainSeaCancelTeamApplyRsp
	(*MountainSeaApplyJoinTeamAgreeReq)(nil),    // 26: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamAgreeReq
	(*MountainSeaApplyJoinTeamAgreeRsp)(nil),    // 27: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamAgreeRsp
	(*MountainSeaApplyJoinTeamRefusedReq)(nil),  // 28: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamRefusedReq
	(*MountainSeaApplyJoinTeamRefusedRsp)(nil),  // 29: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamRefusedRsp
	(*MountainSeaQuitTeamReq)(nil),              // 30: com.yq.msg.CityMsg.MountainSeaQuitTeamReq
	(*MountainSeaQuitTeamRsp)(nil),              // 31: com.yq.msg.CityMsg.MountainSeaQuitTeamRsp
	(*MountainSeaKickOutTeamReq)(nil),           // 32: com.yq.msg.CityMsg.MountainSeaKickOutTeamReq
	(*MountainSeaKickOutTeamRsp)(nil),           // 33: com.yq.msg.CityMsg.MountainSeaKickOutTeamRsp
	(*MountainSeaChangeLeaderReq)(nil),          // 34: com.yq.msg.CityMsg.MountainSeaChangeLeaderReq
	(*MountainSeaChangeLeaderRsp)(nil),          // 35: com.yq.msg.CityMsg.MountainSeaChangeLeaderRsp
	(*MountainSeaTeamLeaderNotify)(nil),         // 36: com.yq.msg.CityMsg.MountainSeaTeamLeaderNotify
	(*MountainSeaTeamMemberNotify)(nil),         // 37: com.yq.msg.CityMsg.MountainSeaTeamMemberNotify
	(*MountainSeaTeamPrepareReq)(nil),           // 38: com.yq.msg.CityMsg.MountainSeaTeamPrepareReq
	(*MountainSeaTeamPrepareRsp)(nil),           // 39: com.yq.msg.CityMsg.MountainSeaTeamPrepareRsp
	(*MountainSeaStartMatchReq)(nil),            // 40: com.yq.msg.CityMsg.MountainSeaStartMatchReq
	(*MountainSeaStartMatchRsp)(nil),            // 41: com.yq.msg.CityMsg.MountainSeaStartMatchRsp
	(*MountainSeaMatchMemberReq)(nil),           // 42: com.yq.msg.CityMsg.MountainSeaMatchMemberReq
	(*MountainSeaMatchMemberRsp)(nil),           // 43: com.yq.msg.CityMsg.MountainSeaMatchMemberRsp
	(*MatchResultMsg)(nil),                      // 44: com.yq.msg.CityMsg.MatchResultMsg
	(*MountainSeaStartBattleReq)(nil),           // 45: com.yq.msg.CityMsg.MountainSeaStartBattleReq
	(*MountainSeaStartBattleRsp)(nil),           // 46: com.yq.msg.CityMsg.MountainSeaStartBattleRsp
	(*MountainSeaInviteReq)(nil),                // 47: com.yq.msg.CityMsg.MountainSeaInviteReq
	(*MountainSeaInviteRsp)(nil),                // 48: com.yq.msg.CityMsg.MountainSeaInviteRsp
	(*MountainSeaRankTeamEntity)(nil),           // 49: com.yq.msg.CityMsg.MountainSeaRankTeamEntity
	(*MountainSeaRankTeamList)(nil),             // 50: com.yq.msg.CityMsg.MountainSeaRankTeamList
	(*MountainSeaWorshipReq)(nil),               // 51: com.yq.msg.CityMsg.MountainSeaWorshipReq
	(*MountainSeaWorshipRsp)(nil),               // 52: com.yq.msg.CityMsg.MountainSeaWorshipRsp
	(*MountainSeaGetBattleVideoReq)(nil),        // 53: com.yq.msg.CityMsg.MountainSeaGetBattleVideoReq
	(*MountainSeaGetBattleVideoRsp)(nil),        // 54: com.yq.msg.CityMsg.MountainSeaGetBattleVideoRsp
	(*MountainSeaGetBossInfoReq)(nil),           // 55: com.yq.msg.CityMsg.MountainSeaGetBossInfoReq
	(*MountainSeaGetBossInfoRsp)(nil),           // 56: com.yq.msg.CityMsg.MountainSeaGetBossInfoRsp
	(*MountainSeaGetBossPowerReq)(nil),          // 57: com.yq.msg.CityMsg.MountainSeaGetBossPowerReq
	(*MountainSeaGetBossPowerRsp)(nil),          // 58: com.yq.msg.CityMsg.MountainSeaGetBossPowerRsp
	(*MountainSeaGetPlayerInfoReq)(nil),         // 59: com.yq.msg.CityMsg.MountainSeaGetPlayerInfoReq
	(*MountainSeaGetPlayerInfoRsp)(nil),         // 60: com.yq.msg.CityMsg.MountainSeaGetPlayerInfoRsp
	(*MountainSeaEnterBattleReq)(nil),           // 61: com.yq.msg.CityMsg.MountainSeaEnterBattleReq
	(*MountainSeaEnterBattleResp)(nil),          // 62: com.yq.msg.CityMsg.MountainSeaEnterBattleResp
	(*MountainSeaEnterBattleNotify)(nil),        // 63: com.yq.msg.CityMsg.MountainSeaEnterBattleNotify
	(*MountainSeaEnterBattleData)(nil),          // 64: com.yq.msg.CityMsg.MountainSeaEnterBattleData
	(*MountainSeaEnterSwitchSeparationReq)(nil), // 65: com.yq.msg.CityMsg.MountainSeaEnterSwitchSeparationReq
	(*MountainSeaEnterSwitchSeparationRsp)(nil), // 66: com.yq.msg.CityMsg.MountainSeaEnterSwitchSeparationRsp
	(*MountainSeaSeparationSimpleData)(nil),     // 67: com.yq.msg.CityMsg.MountainSeaSeparationSimpleData
	(*MountainSeaSwitchSeparationReq)(nil),      // 68: com.yq.msg.CityMsg.MountainSeaSwitchSeparationReq
	(*MountainSeaSwitchSeparationRsp)(nil),      // 69: com.yq.msg.CityMsg.MountainSeaSwitchSeparationRsp
	(*MountainSeaSwitchSeparationNotify)(nil),   // 70: com.yq.msg.CityMsg.MountainSeaSwitchSeparationNotify
	(*MountainSeaSeparationDetailReq)(nil),      // 71: com.yq.msg.CityMsg.MountainSeaSeparationDetailReq
	(*MountainSeaSeparationDetailRsp)(nil),      // 72: com.yq.msg.CityMsg.MountainSeaSeparationDetailRsp
	(*MountainSeaChangePosReq)(nil),             // 73: com.yq.msg.CityMsg.MountainSeaChangePosReq
	(*MountainSeaChangePosRsp)(nil),             // 74: com.yq.msg.CityMsg.MountainSeaChangePosRsp
	(*MountainSeaChangePosNotify)(nil),          // 75: com.yq.msg.CityMsg.MountainSeaChangePosNotify
	(*MountainSeaChangePosData)(nil),            // 76: com.yq.msg.CityMsg.MountainSeaChangePosData
	(*MountainSeaChangeTeamSkillReq)(nil),       // 77: com.yq.msg.CityMsg.MountainSeaChangeTeamSkillReq
	(*MountainSeaChangeTeamSkillRsp)(nil),       // 78: com.yq.msg.CityMsg.MountainSeaChangeTeamSkillRsp
	(*MountainSeaChangeTeamSkillNotify)(nil),    // 79: com.yq.msg.CityMsg.MountainSeaChangeTeamSkillNotify
	(*MountainSeaDoBattleReq)(nil),              // 80: com.yq.msg.CityMsg.MountainSeaDoBattleReq
	(*MountainSeaDoBattleRsp)(nil),              // 81: com.yq.msg.CityMsg.MountainSeaDoBattleRsp
	(*MountainSeaDoBattleNotify)(nil),           // 82: com.yq.msg.CityMsg.MountainSeaDoBattleNotify
	(*MountainSeaInviteListReq)(nil),            // 83: com.yq.msg.CityMsg.MountainSeaInviteListReq
	(*MountainSeaInviteListResp)(nil),           // 84: com.yq.msg.CityMsg.MountainSeaInviteListResp
	(*MountainSeaRedPointResp)(nil),             // 85: com.yq.msg.CityMsg.MountainSeaRedPointResp
	(*MountainSeaApplyJoinTeamReq)(nil),         // 86: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamReq
	(*MountainSeaApplyJoinTeamRsp)(nil),         // 87: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamRsp
	(*MountainSeaInviteRefuseReq)(nil),          // 88: com.yq.msg.CityMsg.MountainSeaInviteRefuseReq
	(*MountainSeaInviteRefuseResp)(nil),         // 89: com.yq.msg.CityMsg.MountainSeaInviteRefuseResp
	(*MountainSeaSetAppointReq)(nil),            // 90: com.yq.msg.CityMsg.MountainSeaSetAppointReq
	(*MountainSeaSetAppointResp)(nil),           // 91: com.yq.msg.CityMsg.MountainSeaSetAppointResp
	(*PlayerHeadAndNameMsg)(nil),                // 92: com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	(*PlayerAppearanceDataMsg)(nil),             // 93: com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	(*PlayerCharacterImageMsg)(nil),             // 94: com.yq.msg.CityMsg.PlayerCharacterImageMsg
	(*PalacePlayerShowMsg)(nil),                 // 95: com.yq.msg.CityMsg.PalacePlayerShowMsg
	(*BattleRecordMsg)(nil),                     // 96: com.yq.msg.CityMsg.BattleRecordMsg
	(*PlayerDetailDataMsg)(nil),                 // 97: com.yq.msg.CityMsg.PlayerDetailDataMsg
	(*BattleMain)(nil),                          // 98: com.yq.msg.CityMsg.BattleMain
	(*GodBodyDetailDataMsg)(nil),                // 99: com.yq.msg.CityMsg.GodBodyDetailDataMsg
}
var file_MountainSea_proto_depIdxs = []int32{
	37, // 0: com.yq.msg.CityMsg.EnterMountainSeaRsp.teamMemberNotify:type_name -> com.yq.msg.CityMsg.MountainSeaTeamMemberNotify
	15, // 1: com.yq.msg.CityMsg.EnterMountainSeaTeamRsp.teamInfo:type_name -> com.yq.msg.CityMsg.MountainSeaInnerTeamEntity
	14, // 2: com.yq.msg.CityMsg.MountainSeaOutterTeamEntity.members:type_name -> com.yq.msg.CityMsg.MountainSeaOutterMemberEntity
	92, // 3: com.yq.msg.CityMsg.MountainSeaOutterMemberEntity.memberInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	16, // 4: com.yq.msg.CityMsg.MountainSeaInnerTeamEntity.members:type_name -> com.yq.msg.CityMsg.MountainSeaMemberEntity
	17, // 5: com.yq.msg.CityMsg.MountainSeaInnerTeamEntity.applyList:type_name -> com.yq.msg.CityMsg.MountainSeaApplyUserEntity
	93, // 6: com.yq.msg.CityMsg.MountainSeaMemberEntity.memberInfo:type_name -> com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	92, // 7: com.yq.msg.CityMsg.MountainSeaApplyUserEntity.playerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	15, // 8: com.yq.msg.CityMsg.MountainSeaCreateTeamRsp.teamInfo:type_name -> com.yq.msg.CityMsg.MountainSeaInnerTeamEntity
	13, // 9: com.yq.msg.CityMsg.MountainSeaGetTeamListRsp.teamList:type_name -> com.yq.msg.CityMsg.MountainSeaOutterTeamEntity
	13, // 10: com.yq.msg.CityMsg.MountainSeaGetTeamInfoRsp.teamInfo:type_name -> com.yq.msg.CityMsg.MountainSeaOutterTeamEntity
	15, // 11: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamAgreeRsp.teamInfo:type_name -> com.yq.msg.CityMsg.MountainSeaInnerTeamEntity
	15, // 12: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamRefusedRsp.teamInfo:type_name -> com.yq.msg.CityMsg.MountainSeaInnerTeamEntity
	17, // 13: com.yq.msg.CityMsg.MountainSeaTeamLeaderNotify.userData:type_name -> com.yq.msg.CityMsg.MountainSeaApplyUserEntity
	15, // 14: com.yq.msg.CityMsg.MountainSeaTeamMemberNotify.teamInfo:type_name -> com.yq.msg.CityMsg.MountainSeaInnerTeamEntity
	94, // 15: com.yq.msg.CityMsg.MountainSeaRankTeamEntity.members:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	49, // 16: com.yq.msg.CityMsg.MountainSeaRankTeamList.curTeam:type_name -> com.yq.msg.CityMsg.MountainSeaRankTeamEntity
	95, // 17: com.yq.msg.CityMsg.MountainSeaWorshipRsp.playerShowData:type_name -> com.yq.msg.CityMsg.PalacePlayerShowMsg
	96, // 18: com.yq.msg.CityMsg.MountainSeaGetBattleVideoRsp.battleRecordMsg:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	97, // 19: com.yq.msg.CityMsg.MountainSeaGetBossInfoRsp.bossInfo:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	97, // 20: com.yq.msg.CityMsg.MountainSeaGetPlayerInfoRsp.playerInfo:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	64, // 21: com.yq.msg.CityMsg.MountainSeaEnterBattleResp.data:type_name -> com.yq.msg.CityMsg.MountainSeaEnterBattleData
	64, // 22: com.yq.msg.CityMsg.MountainSeaEnterBattleNotify.data:type_name -> com.yq.msg.CityMsg.MountainSeaEnterBattleData
	98, // 23: com.yq.msg.CityMsg.MountainSeaEnterBattleData.datas:type_name -> com.yq.msg.CityMsg.BattleMain
	67, // 24: com.yq.msg.CityMsg.MountainSeaEnterSwitchSeparationRsp.datas:type_name -> com.yq.msg.CityMsg.MountainSeaSeparationSimpleData
	92, // 25: com.yq.msg.CityMsg.MountainSeaSeparationSimpleData.data:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	98, // 26: com.yq.msg.CityMsg.MountainSeaSwitchSeparationReq.battleMain:type_name -> com.yq.msg.CityMsg.BattleMain
	70, // 27: com.yq.msg.CityMsg.MountainSeaSwitchSeparationRsp.notify:type_name -> com.yq.msg.CityMsg.MountainSeaSwitchSeparationNotify
	98, // 28: com.yq.msg.CityMsg.MountainSeaSwitchSeparationNotify.battleMain:type_name -> com.yq.msg.CityMsg.BattleMain
	99, // 29: com.yq.msg.CityMsg.MountainSeaSeparationDetailRsp.datas:type_name -> com.yq.msg.CityMsg.GodBodyDetailDataMsg
	76, // 30: com.yq.msg.CityMsg.MountainSeaChangePosNotify.datas:type_name -> com.yq.msg.CityMsg.MountainSeaChangePosData
	96, // 31: com.yq.msg.CityMsg.MountainSeaDoBattleReq.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	99, // 32: com.yq.msg.CityMsg.MountainSeaDoBattleReq.godBodyDetailData:type_name -> com.yq.msg.CityMsg.GodBodyDetailDataMsg
	82, // 33: com.yq.msg.CityMsg.MountainSeaDoBattleRsp.notifyData:type_name -> com.yq.msg.CityMsg.MountainSeaDoBattleNotify
	96, // 34: com.yq.msg.CityMsg.MountainSeaDoBattleNotify.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	98, // 35: com.yq.msg.CityMsg.MountainSeaDoBattleNotify.bossData:type_name -> com.yq.msg.CityMsg.BattleMain
	13, // 36: com.yq.msg.CityMsg.MountainSeaInviteListResp.teamList:type_name -> com.yq.msg.CityMsg.MountainSeaOutterTeamEntity
	15, // 37: com.yq.msg.CityMsg.MountainSeaApplyJoinTeamRsp.teamInfo:type_name -> com.yq.msg.CityMsg.MountainSeaInnerTeamEntity
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_MountainSea_proto_init() }
func file_MountainSea_proto_init() {
	if File_MountainSea_proto != nil {
		return
	}
	file_Battle_proto_init()
	file_Palace_proto_init()
	file_WatchPlayer_proto_init()
	file_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MountainSea_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EnterMountainSeaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EnterMountainSeaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LeaveMountainSeaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LeaveMountainSeaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*EnterMountainSeaTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*EnterMountainSeaTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaTeamStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaTeamStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaOutterTeamEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaOutterMemberEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaInnerTeamEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaMemberEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaApplyUserEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaCreateTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaCreateTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetTeamListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetTeamListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetTeamInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetTeamInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaCancelTeamApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaCancelTeamApplyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaApplyJoinTeamAgreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaApplyJoinTeamAgreeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaApplyJoinTeamRefusedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaApplyJoinTeamRefusedRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaQuitTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaQuitTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaKickOutTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaKickOutTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangeLeaderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangeLeaderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaTeamLeaderNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaTeamMemberNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaTeamPrepareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaTeamPrepareRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaStartMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaStartMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaMatchMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaMatchMemberRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*MatchResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaStartBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaStartBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaRankTeamEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaRankTeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaWorshipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaWorshipRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetBattleVideoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetBattleVideoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetBossInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetBossInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetBossPowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetBossPowerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetPlayerInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaGetPlayerInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaEnterBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaEnterBattleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaEnterBattleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaEnterBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaEnterSwitchSeparationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaEnterSwitchSeparationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSeparationSimpleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSwitchSeparationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSwitchSeparationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSwitchSeparationNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSeparationDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSeparationDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangePosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangePosRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangePosNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangePosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangeTeamSkillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangeTeamSkillRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaChangeTeamSkillNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaDoBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaDoBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaDoBattleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaInviteListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaInviteListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaRedPointResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaApplyJoinTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaApplyJoinTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaInviteRefuseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaInviteRefuseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSetAppointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MountainSea_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*MountainSeaSetAppointResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MountainSea_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MountainSea_proto_goTypes,
		DependencyIndexes: file_MountainSea_proto_depIdxs,
		EnumInfos:         file_MountainSea_proto_enumTypes,
		MessageInfos:      file_MountainSea_proto_msgTypes,
	}.Build()
	File_MountainSea_proto = out.File
	file_MountainSea_proto_rawDesc = nil
	file_MountainSea_proto_goTypes = nil
	file_MountainSea_proto_depIdxs = nil
}
