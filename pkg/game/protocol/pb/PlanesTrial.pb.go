// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: PlanesTrial.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnterPlanesTrialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnterPlanesTrialReq) Reset() {
	*x = EnterPlanesTrialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPlanesTrialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPlanesTrialReq) ProtoMessage() {}

func (x *EnterPlanesTrialReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPlanesTrialReq.ProtoReflect.Descriptor instead.
func (*EnterPlanesTrialReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{0}
}

type EnterPlanesTrialRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32                          `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UserId           *int64                          `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	TeamId           *int64                          `protobuf:"varint,3,opt,name=teamId" json:"teamId,omitempty"`
	MemberNum        *int32                          `protobuf:"varint,4,opt,name=memberNum" json:"memberNum,omitempty"`
	ChallengeTimes   *int32                          `protobuf:"varint,5,opt,name=challengeTimes" json:"challengeTimes,omitempty"`
	Type             *int32                          `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
	CurStageId       *int32                          `protobuf:"varint,7,opt,name=curStageId" json:"curStageId,omitempty"`
	MyMaxStageId     *int32                          `protobuf:"varint,8,opt,name=myMaxStageId" json:"myMaxStageId,omitempty"`
	CanWorship       *bool                           `protobuf:"varint,9,opt,name=canWorship" json:"canWorship,omitempty"`
	TeamMemberNotify *PlanesTrialTeamMemberNotify    `protobuf:"bytes,10,opt,name=teamMemberNotify" json:"teamMemberNotify,omitempty"`
	RedPoint         *bool                           `protobuf:"varint,11,opt,name=redPoint" json:"redPoint,omitempty"`
	TeamState        *int32                          `protobuf:"varint,12,opt,name=teamState" json:"teamState,omitempty"`
	ServerId         []int64                         `protobuf:"varint,13,rep,name=serverId" json:"serverId,omitempty"`
	InviteRedPoint   *bool                           `protobuf:"varint,14,opt,name=inviteRedPoint" json:"inviteRedPoint,omitempty"`
	RewardedStageId  *int32                          `protobuf:"varint,15,opt,name=rewardedStageId" json:"rewardedStageId,omitempty"`
	BuffIdList       []int32                         `protobuf:"varint,16,rep,name=buffIdList" json:"buffIdList,omitempty"`
	GodBodyChange    []*PlanesTrialGodBodyChangeInfo `protobuf:"bytes,17,rep,name=godBodyChange" json:"godBodyChange,omitempty"`
	GrandPrizeRed    *bool                           `protobuf:"varint,18,opt,name=grandPrizeRed" json:"grandPrizeRed,omitempty"`
	RankMaxStageId   *int32                          `protobuf:"varint,19,opt,name=rankMaxStageId" json:"rankMaxStageId,omitempty"`
}

func (x *EnterPlanesTrialRsp) Reset() {
	*x = EnterPlanesTrialRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPlanesTrialRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPlanesTrialRsp) ProtoMessage() {}

func (x *EnterPlanesTrialRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPlanesTrialRsp.ProtoReflect.Descriptor instead.
func (*EnterPlanesTrialRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{1}
}

func (x *EnterPlanesTrialRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetMemberNum() int32 {
	if x != nil && x.MemberNum != nil {
		return *x.MemberNum
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetChallengeTimes() int32 {
	if x != nil && x.ChallengeTimes != nil {
		return *x.ChallengeTimes
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetCurStageId() int32 {
	if x != nil && x.CurStageId != nil {
		return *x.CurStageId
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetMyMaxStageId() int32 {
	if x != nil && x.MyMaxStageId != nil {
		return *x.MyMaxStageId
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetCanWorship() bool {
	if x != nil && x.CanWorship != nil {
		return *x.CanWorship
	}
	return false
}

func (x *EnterPlanesTrialRsp) GetTeamMemberNotify() *PlanesTrialTeamMemberNotify {
	if x != nil {
		return x.TeamMemberNotify
	}
	return nil
}

func (x *EnterPlanesTrialRsp) GetRedPoint() bool {
	if x != nil && x.RedPoint != nil {
		return *x.RedPoint
	}
	return false
}

func (x *EnterPlanesTrialRsp) GetTeamState() int32 {
	if x != nil && x.TeamState != nil {
		return *x.TeamState
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetServerId() []int64 {
	if x != nil {
		return x.ServerId
	}
	return nil
}

func (x *EnterPlanesTrialRsp) GetInviteRedPoint() bool {
	if x != nil && x.InviteRedPoint != nil {
		return *x.InviteRedPoint
	}
	return false
}

func (x *EnterPlanesTrialRsp) GetRewardedStageId() int32 {
	if x != nil && x.RewardedStageId != nil {
		return *x.RewardedStageId
	}
	return 0
}

func (x *EnterPlanesTrialRsp) GetBuffIdList() []int32 {
	if x != nil {
		return x.BuffIdList
	}
	return nil
}

func (x *EnterPlanesTrialRsp) GetGodBodyChange() []*PlanesTrialGodBodyChangeInfo {
	if x != nil {
		return x.GodBodyChange
	}
	return nil
}

func (x *EnterPlanesTrialRsp) GetGrandPrizeRed() bool {
	if x != nil && x.GrandPrizeRed != nil {
		return *x.GrandPrizeRed
	}
	return false
}

func (x *EnterPlanesTrialRsp) GetRankMaxStageId() int32 {
	if x != nil && x.RankMaxStageId != nil {
		return *x.RankMaxStageId
	}
	return 0
}

type GetPlanesTrialTrialMemberCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPlanesTrialTrialMemberCountReq) Reset() {
	*x = GetPlanesTrialTrialMemberCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanesTrialTrialMemberCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanesTrialTrialMemberCountReq) ProtoMessage() {}

func (x *GetPlanesTrialTrialMemberCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanesTrialTrialMemberCountReq.ProtoReflect.Descriptor instead.
func (*GetPlanesTrialTrialMemberCountReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{2}
}

type GetPlanesTrialTrialMemberCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TrialMemberCount []*PlanesTrialTrialMemberCount `protobuf:"bytes,2,rep,name=trialMemberCount" json:"trialMemberCount,omitempty"`
}

func (x *GetPlanesTrialTrialMemberCountResp) Reset() {
	*x = GetPlanesTrialTrialMemberCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanesTrialTrialMemberCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanesTrialTrialMemberCountResp) ProtoMessage() {}

func (x *GetPlanesTrialTrialMemberCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanesTrialTrialMemberCountResp.ProtoReflect.Descriptor instead.
func (*GetPlanesTrialTrialMemberCountResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlanesTrialTrialMemberCountResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetPlanesTrialTrialMemberCountResp) GetTrialMemberCount() []*PlanesTrialTrialMemberCount {
	if x != nil {
		return x.TrialMemberCount
	}
	return nil
}

type PlayerRestrainInfoMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseSeparationIdx *int32 `protobuf:"varint,1,opt,name=useSeparationIdx" json:"useSeparationIdx,omitempty"`
	TrialType        *int32 `protobuf:"varint,2,opt,name=trialType" json:"trialType,omitempty"`
}

func (x *PlayerRestrainInfoMsgReq) Reset() {
	*x = PlayerRestrainInfoMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRestrainInfoMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRestrainInfoMsgReq) ProtoMessage() {}

func (x *PlayerRestrainInfoMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRestrainInfoMsgReq.ProtoReflect.Descriptor instead.
func (*PlayerRestrainInfoMsgReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerRestrainInfoMsgReq) GetUseSeparationIdx() int32 {
	if x != nil && x.UseSeparationIdx != nil {
		return *x.UseSeparationIdx
	}
	return 0
}

func (x *PlayerRestrainInfoMsgReq) GetTrialType() int32 {
	if x != nil && x.TrialType != nil {
		return *x.TrialType
	}
	return 0
}

type PlayerRestrainInfoMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RestrainData *PlayerRestrainInfoMsg `protobuf:"bytes,2,opt,name=restrainData" json:"restrainData,omitempty"`
}

func (x *PlayerRestrainInfoMsgResp) Reset() {
	*x = PlayerRestrainInfoMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRestrainInfoMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRestrainInfoMsgResp) ProtoMessage() {}

func (x *PlayerRestrainInfoMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRestrainInfoMsgResp.ProtoReflect.Descriptor instead.
func (*PlayerRestrainInfoMsgResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerRestrainInfoMsgResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlayerRestrainInfoMsgResp) GetRestrainData() *PlayerRestrainInfoMsg {
	if x != nil {
		return x.RestrainData
	}
	return nil
}

type PlanesTrialTrialMemberCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialType   *int32 `protobuf:"varint,1,opt,name=trialType" json:"trialType,omitempty"`
	MemberCount *int32 `protobuf:"varint,2,opt,name=memberCount" json:"memberCount,omitempty"`
}

func (x *PlanesTrialTrialMemberCount) Reset() {
	*x = PlanesTrialTrialMemberCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialTrialMemberCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialTrialMemberCount) ProtoMessage() {}

func (x *PlanesTrialTrialMemberCount) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialTrialMemberCount.ProtoReflect.Descriptor instead.
func (*PlanesTrialTrialMemberCount) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{6}
}

func (x *PlanesTrialTrialMemberCount) GetTrialType() int32 {
	if x != nil && x.TrialType != nil {
		return *x.TrialType
	}
	return 0
}

func (x *PlanesTrialTrialMemberCount) GetMemberCount() int32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

type LeavePlanesTrialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeavePlanesTrialReq) Reset() {
	*x = LeavePlanesTrialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeavePlanesTrialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeavePlanesTrialReq) ProtoMessage() {}

func (x *LeavePlanesTrialReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeavePlanesTrialReq.ProtoReflect.Descriptor instead.
func (*LeavePlanesTrialReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{7}
}

type LeavePlanesTrialRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *LeavePlanesTrialRsp) Reset() {
	*x = LeavePlanesTrialRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeavePlanesTrialRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeavePlanesTrialRsp) ProtoMessage() {}

func (x *LeavePlanesTrialRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeavePlanesTrialRsp.ProtoReflect.Descriptor instead.
func (*LeavePlanesTrialRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{8}
}

func (x *LeavePlanesTrialRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialGetAchievementRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialGetAchievementRewardReq) Reset() {
	*x = PlanesTrialGetAchievementRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetAchievementRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetAchievementRewardReq) ProtoMessage() {}

func (x *PlanesTrialGetAchievementRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetAchievementRewardReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetAchievementRewardReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{9}
}

type PlanesTrialGetAchievementRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward        *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	RewardStageId *int32  `protobuf:"varint,3,opt,name=rewardStageId" json:"rewardStageId,omitempty"`
}

func (x *PlanesTrialGetAchievementRewardRsp) Reset() {
	*x = PlanesTrialGetAchievementRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetAchievementRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetAchievementRewardRsp) ProtoMessage() {}

func (x *PlanesTrialGetAchievementRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetAchievementRewardRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetAchievementRewardRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{10}
}

func (x *PlanesTrialGetAchievementRewardRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetAchievementRewardRsp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *PlanesTrialGetAchievementRewardRsp) GetRewardStageId() int32 {
	if x != nil && x.RewardStageId != nil {
		return *x.RewardStageId
	}
	return 0
}

type PlanesTrialGodBodyChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	ChangeTime *int64 `protobuf:"varint,2,opt,name=changeTime" json:"changeTime,omitempty"`
}

func (x *PlanesTrialGodBodyChangeInfo) Reset() {
	*x = PlanesTrialGodBodyChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGodBodyChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGodBodyChangeInfo) ProtoMessage() {}

func (x *PlanesTrialGodBodyChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGodBodyChangeInfo.ProtoReflect.Descriptor instead.
func (*PlanesTrialGodBodyChangeInfo) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{11}
}

func (x *PlanesTrialGodBodyChangeInfo) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PlanesTrialGodBodyChangeInfo) GetChangeTime() int64 {
	if x != nil && x.ChangeTime != nil {
		return *x.ChangeTime
	}
	return 0
}

type EnterPlanesTrialTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnterPlanesTrialTeamReq) Reset() {
	*x = EnterPlanesTrialTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPlanesTrialTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPlanesTrialTeamReq) ProtoMessage() {}

func (x *EnterPlanesTrialTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPlanesTrialTeamReq.ProtoReflect.Descriptor instead.
func (*EnterPlanesTrialTeamReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{12}
}

type EnterPlanesTrialTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *PlanesTrialInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *EnterPlanesTrialTeamRsp) Reset() {
	*x = EnterPlanesTrialTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPlanesTrialTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPlanesTrialTeamRsp) ProtoMessage() {}

func (x *EnterPlanesTrialTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPlanesTrialTeamRsp.ProtoReflect.Descriptor instead.
func (*EnterPlanesTrialTeamRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{13}
}

func (x *EnterPlanesTrialTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *EnterPlanesTrialTeamRsp) GetTeamInfo() *PlanesTrialInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type PlanesTrialTeamStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialTeamStartReq) Reset() {
	*x = PlanesTrialTeamStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialTeamStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialTeamStartReq) ProtoMessage() {}

func (x *PlanesTrialTeamStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialTeamStartReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialTeamStartReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{14}
}

type PlanesTrialTeamStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	LastLeaveTeam       *int64  `protobuf:"varint,2,opt,name=lastLeaveTeam" json:"lastLeaveTeam,omitempty"`
	ApplyJoinTeamIdList []int64 `protobuf:"varint,3,rep,name=applyJoinTeamIdList" json:"applyJoinTeamIdList,omitempty"`
}

func (x *PlanesTrialTeamStartRsp) Reset() {
	*x = PlanesTrialTeamStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialTeamStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialTeamStartRsp) ProtoMessage() {}

func (x *PlanesTrialTeamStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialTeamStartRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialTeamStartRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{15}
}

func (x *PlanesTrialTeamStartRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialTeamStartRsp) GetLastLeaveTeam() int64 {
	if x != nil && x.LastLeaveTeam != nil {
		return *x.LastLeaveTeam
	}
	return 0
}

func (x *PlanesTrialTeamStartRsp) GetApplyJoinTeamIdList() []int64 {
	if x != nil {
		return x.ApplyJoinTeamIdList
	}
	return nil
}

type PlanesTrialOutterTeamEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId         *int64                           `protobuf:"varint,1,opt,name=teamId" json:"teamId,omitempty"`
	TeamName       *string                          `protobuf:"bytes,2,opt,name=teamName" json:"teamName,omitempty"`
	LeaderId       *int64                           `protobuf:"varint,3,opt,name=leaderId" json:"leaderId,omitempty"`
	LeaderName     *string                          `protobuf:"bytes,4,opt,name=leaderName" json:"leaderName,omitempty"`
	LeaderServerId *int64                           `protobuf:"varint,5,opt,name=leaderServerId" json:"leaderServerId,omitempty"`
	FightValue     *int64                           `protobuf:"varint,6,opt,name=fightValue" json:"fightValue,omitempty"`
	CreateTime     *int64                           `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	Members        []*PlanesTrialOutterMemberEntity `protobuf:"bytes,8,rep,name=members" json:"members,omitempty"`
}

func (x *PlanesTrialOutterTeamEntity) Reset() {
	*x = PlanesTrialOutterTeamEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialOutterTeamEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialOutterTeamEntity) ProtoMessage() {}

func (x *PlanesTrialOutterTeamEntity) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialOutterTeamEntity.ProtoReflect.Descriptor instead.
func (*PlanesTrialOutterTeamEntity) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{16}
}

func (x *PlanesTrialOutterTeamEntity) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *PlanesTrialOutterTeamEntity) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *PlanesTrialOutterTeamEntity) GetLeaderId() int64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *PlanesTrialOutterTeamEntity) GetLeaderName() string {
	if x != nil && x.LeaderName != nil {
		return *x.LeaderName
	}
	return ""
}

func (x *PlanesTrialOutterTeamEntity) GetLeaderServerId() int64 {
	if x != nil && x.LeaderServerId != nil {
		return *x.LeaderServerId
	}
	return 0
}

func (x *PlanesTrialOutterTeamEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *PlanesTrialOutterTeamEntity) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *PlanesTrialOutterTeamEntity) GetMembers() []*PlanesTrialOutterMemberEntity {
	if x != nil {
		return x.Members
	}
	return nil
}

type PlanesTrialOutterMemberEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberInfo   *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=memberInfo" json:"memberInfo,omitempty"`
	FightValue   *int64                `protobuf:"varint,2,opt,name=fightValue" json:"fightValue,omitempty"`
	IsRobot      *bool                 `protobuf:"varint,3,opt,name=isRobot" json:"isRobot,omitempty"`
	MyMaxStageId *int32                `protobuf:"varint,4,opt,name=myMaxStageId" json:"myMaxStageId,omitempty"`
}

func (x *PlanesTrialOutterMemberEntity) Reset() {
	*x = PlanesTrialOutterMemberEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialOutterMemberEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialOutterMemberEntity) ProtoMessage() {}

func (x *PlanesTrialOutterMemberEntity) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialOutterMemberEntity.ProtoReflect.Descriptor instead.
func (*PlanesTrialOutterMemberEntity) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{17}
}

func (x *PlanesTrialOutterMemberEntity) GetMemberInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.MemberInfo
	}
	return nil
}

func (x *PlanesTrialOutterMemberEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *PlanesTrialOutterMemberEntity) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *PlanesTrialOutterMemberEntity) GetMyMaxStageId() int32 {
	if x != nil && x.MyMaxStageId != nil {
		return *x.MyMaxStageId
	}
	return 0
}

type PlanesTrialInnerTeamEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId         *int64                        `protobuf:"varint,1,opt,name=teamId" json:"teamId,omitempty"`
	TeamName       *string                       `protobuf:"bytes,2,opt,name=teamName" json:"teamName,omitempty"`
	LeaderId       *int64                        `protobuf:"varint,3,opt,name=leaderId" json:"leaderId,omitempty"`
	LeaderServerId *int64                        `protobuf:"varint,4,opt,name=leaderServerId" json:"leaderServerId,omitempty"`
	LeaderName     *string                       `protobuf:"bytes,5,opt,name=leaderName" json:"leaderName,omitempty"`
	Members        []*PlanesTrialMemberEntity    `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
	CreateTime     *int64                        `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	ApplyList      []*PlanesTrialApplyUserEntity `protobuf:"bytes,8,rep,name=applyList" json:"applyList,omitempty"`
	State          *int32                        `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
	Type           *int32                        `protobuf:"varint,10,opt,name=type" json:"type,omitempty"`
	ChallengeTimes *int32                        `protobuf:"varint,11,opt,name=challengeTimes" json:"challengeTimes,omitempty"`
	CurStageId     *int32                        `protobuf:"varint,12,opt,name=curStageId" json:"curStageId,omitempty"`
}

func (x *PlanesTrialInnerTeamEntity) Reset() {
	*x = PlanesTrialInnerTeamEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialInnerTeamEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialInnerTeamEntity) ProtoMessage() {}

func (x *PlanesTrialInnerTeamEntity) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialInnerTeamEntity.ProtoReflect.Descriptor instead.
func (*PlanesTrialInnerTeamEntity) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{18}
}

func (x *PlanesTrialInnerTeamEntity) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *PlanesTrialInnerTeamEntity) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *PlanesTrialInnerTeamEntity) GetLeaderId() int64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *PlanesTrialInnerTeamEntity) GetLeaderServerId() int64 {
	if x != nil && x.LeaderServerId != nil {
		return *x.LeaderServerId
	}
	return 0
}

func (x *PlanesTrialInnerTeamEntity) GetLeaderName() string {
	if x != nil && x.LeaderName != nil {
		return *x.LeaderName
	}
	return ""
}

func (x *PlanesTrialInnerTeamEntity) GetMembers() []*PlanesTrialMemberEntity {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *PlanesTrialInnerTeamEntity) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *PlanesTrialInnerTeamEntity) GetApplyList() []*PlanesTrialApplyUserEntity {
	if x != nil {
		return x.ApplyList
	}
	return nil
}

func (x *PlanesTrialInnerTeamEntity) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *PlanesTrialInnerTeamEntity) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PlanesTrialInnerTeamEntity) GetChallengeTimes() int32 {
	if x != nil && x.ChallengeTimes != nil {
		return *x.ChallengeTimes
	}
	return 0
}

func (x *PlanesTrialInnerTeamEntity) GetCurStageId() int32 {
	if x != nil && x.CurStageId != nil {
		return *x.CurStageId
	}
	return 0
}

type PlanesTrialMemberEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberInfo          *PlayerAppearanceDataMsg `protobuf:"bytes,1,opt,name=memberInfo" json:"memberInfo,omitempty"`
	State               *int32                   `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	MyMaxStageId        *int32                   `protobuf:"varint,3,opt,name=myMaxStageId" json:"myMaxStageId,omitempty"`
	LastChangeStateTime *int64                   `protobuf:"varint,4,opt,name=lastChangeStateTime" json:"lastChangeStateTime,omitempty"`
	IsRobot             *bool                    `protobuf:"varint,5,opt,name=isRobot" json:"isRobot,omitempty"`
	Pos                 *int32                   `protobuf:"varint,6,opt,name=pos" json:"pos,omitempty"`
	ChallengeTimes      *int32                   `protobuf:"varint,7,opt,name=challengeTimes" json:"challengeTimes,omitempty"`
	SelectedBuff        *bool                    `protobuf:"varint,8,opt,name=selectedBuff" json:"selectedBuff,omitempty"`
	HeadIconId          *int32                   `protobuf:"varint,9,opt,name=headIconId" json:"headIconId,omitempty"`
	WxHeadUrl           *string                  `protobuf:"bytes,10,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	HeadFrameId         *int32                   `protobuf:"varint,11,opt,name=headFrameId" json:"headFrameId,omitempty"`
}

func (x *PlanesTrialMemberEntity) Reset() {
	*x = PlanesTrialMemberEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialMemberEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialMemberEntity) ProtoMessage() {}

func (x *PlanesTrialMemberEntity) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialMemberEntity.ProtoReflect.Descriptor instead.
func (*PlanesTrialMemberEntity) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{19}
}

func (x *PlanesTrialMemberEntity) GetMemberInfo() *PlayerAppearanceDataMsg {
	if x != nil {
		return x.MemberInfo
	}
	return nil
}

func (x *PlanesTrialMemberEntity) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *PlanesTrialMemberEntity) GetMyMaxStageId() int32 {
	if x != nil && x.MyMaxStageId != nil {
		return *x.MyMaxStageId
	}
	return 0
}

func (x *PlanesTrialMemberEntity) GetLastChangeStateTime() int64 {
	if x != nil && x.LastChangeStateTime != nil {
		return *x.LastChangeStateTime
	}
	return 0
}

func (x *PlanesTrialMemberEntity) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *PlanesTrialMemberEntity) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *PlanesTrialMemberEntity) GetChallengeTimes() int32 {
	if x != nil && x.ChallengeTimes != nil {
		return *x.ChallengeTimes
	}
	return 0
}

func (x *PlanesTrialMemberEntity) GetSelectedBuff() bool {
	if x != nil && x.SelectedBuff != nil {
		return *x.SelectedBuff
	}
	return false
}

func (x *PlanesTrialMemberEntity) GetHeadIconId() int32 {
	if x != nil && x.HeadIconId != nil {
		return *x.HeadIconId
	}
	return 0
}

func (x *PlanesTrialMemberEntity) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *PlanesTrialMemberEntity) GetHeadFrameId() int32 {
	if x != nil && x.HeadFrameId != nil {
		return *x.HeadFrameId
	}
	return 0
}

type PlanesTrialApplyUserEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo   *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=playerInfo" json:"playerInfo,omitempty"`
	ApplyTime    *int64                `protobuf:"varint,2,opt,name=applyTime" json:"applyTime,omitempty"`
	FightValue   *int64                `protobuf:"varint,3,opt,name=fightValue" json:"fightValue,omitempty"`
	MyMaxStageId *int32                `protobuf:"varint,4,opt,name=myMaxStageId" json:"myMaxStageId,omitempty"`
}

func (x *PlanesTrialApplyUserEntity) Reset() {
	*x = PlanesTrialApplyUserEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialApplyUserEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialApplyUserEntity) ProtoMessage() {}

func (x *PlanesTrialApplyUserEntity) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialApplyUserEntity.ProtoReflect.Descriptor instead.
func (*PlanesTrialApplyUserEntity) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{20}
}

func (x *PlanesTrialApplyUserEntity) GetPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *PlanesTrialApplyUserEntity) GetApplyTime() int64 {
	if x != nil && x.ApplyTime != nil {
		return *x.ApplyTime
	}
	return 0
}

func (x *PlanesTrialApplyUserEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *PlanesTrialApplyUserEntity) GetMyMaxStageId() int32 {
	if x != nil && x.MyMaxStageId != nil {
		return *x.MyMaxStageId
	}
	return 0
}

type PlanesTrialCreateTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName *string `protobuf:"bytes,1,req,name=teamName" json:"teamName,omitempty"`
}

func (x *PlanesTrialCreateTeamReq) Reset() {
	*x = PlanesTrialCreateTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialCreateTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialCreateTeamReq) ProtoMessage() {}

func (x *PlanesTrialCreateTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialCreateTeamReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialCreateTeamReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{21}
}

func (x *PlanesTrialCreateTeamReq) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

type PlanesTrialCreateTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *PlanesTrialInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *PlanesTrialCreateTeamRsp) Reset() {
	*x = PlanesTrialCreateTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialCreateTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialCreateTeamRsp) ProtoMessage() {}

func (x *PlanesTrialCreateTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialCreateTeamRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialCreateTeamRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{22}
}

func (x *PlanesTrialCreateTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialCreateTeamRsp) GetTeamInfo() *PlanesTrialInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type PlanesTrialGetTeamListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Page *int32 `protobuf:"varint,2,req,name=page" json:"page,omitempty"`
}

func (x *PlanesTrialGetTeamListReq) Reset() {
	*x = PlanesTrialGetTeamListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetTeamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetTeamListReq) ProtoMessage() {}

func (x *PlanesTrialGetTeamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetTeamListReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetTeamListReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{23}
}

func (x *PlanesTrialGetTeamListReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PlanesTrialGetTeamListReq) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type PlanesTrialGetTeamListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamList []*PlanesTrialOutterTeamEntity `protobuf:"bytes,2,rep,name=teamList" json:"teamList,omitempty"`
}

func (x *PlanesTrialGetTeamListRsp) Reset() {
	*x = PlanesTrialGetTeamListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetTeamListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetTeamListRsp) ProtoMessage() {}

func (x *PlanesTrialGetTeamListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetTeamListRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetTeamListRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{24}
}

func (x *PlanesTrialGetTeamListRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetTeamListRsp) GetTeamList() []*PlanesTrialOutterTeamEntity {
	if x != nil {
		return x.TeamList
	}
	return nil
}

type PlanesTrialGetTeamInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *PlanesTrialGetTeamInfoReq) Reset() {
	*x = PlanesTrialGetTeamInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetTeamInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetTeamInfoReq) ProtoMessage() {}

func (x *PlanesTrialGetTeamInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetTeamInfoReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetTeamInfoReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{25}
}

func (x *PlanesTrialGetTeamInfoReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type PlanesTrialGetTeamInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *PlanesTrialOutterTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *PlanesTrialGetTeamInfoRsp) Reset() {
	*x = PlanesTrialGetTeamInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetTeamInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetTeamInfoRsp) ProtoMessage() {}

func (x *PlanesTrialGetTeamInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetTeamInfoRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetTeamInfoRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{26}
}

func (x *PlanesTrialGetTeamInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetTeamInfoRsp) GetTeamInfo() *PlanesTrialOutterTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type PlanesTrialCancelTeamApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *PlanesTrialCancelTeamApplyReq) Reset() {
	*x = PlanesTrialCancelTeamApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialCancelTeamApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialCancelTeamApplyReq) ProtoMessage() {}

func (x *PlanesTrialCancelTeamApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialCancelTeamApplyReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialCancelTeamApplyReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{27}
}

func (x *PlanesTrialCancelTeamApplyReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type PlanesTrialCancelTeamApplyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialCancelTeamApplyRsp) Reset() {
	*x = PlanesTrialCancelTeamApplyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialCancelTeamApplyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialCancelTeamApplyRsp) ProtoMessage() {}

func (x *PlanesTrialCancelTeamApplyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialCancelTeamApplyRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialCancelTeamApplyRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{28}
}

func (x *PlanesTrialCancelTeamApplyRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialApplyJoinTeamAgreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *PlanesTrialApplyJoinTeamAgreeReq) Reset() {
	*x = PlanesTrialApplyJoinTeamAgreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialApplyJoinTeamAgreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialApplyJoinTeamAgreeReq) ProtoMessage() {}

func (x *PlanesTrialApplyJoinTeamAgreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialApplyJoinTeamAgreeReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialApplyJoinTeamAgreeReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{29}
}

func (x *PlanesTrialApplyJoinTeamAgreeReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type PlanesTrialApplyJoinTeamAgreeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *PlanesTrialInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *PlanesTrialApplyJoinTeamAgreeRsp) Reset() {
	*x = PlanesTrialApplyJoinTeamAgreeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialApplyJoinTeamAgreeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialApplyJoinTeamAgreeRsp) ProtoMessage() {}

func (x *PlanesTrialApplyJoinTeamAgreeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialApplyJoinTeamAgreeRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialApplyJoinTeamAgreeRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{30}
}

func (x *PlanesTrialApplyJoinTeamAgreeRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialApplyJoinTeamAgreeRsp) GetTeamInfo() *PlanesTrialInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type PlanesTrialApplyJoinTeamRefusedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialApplyJoinTeamRefusedReq) Reset() {
	*x = PlanesTrialApplyJoinTeamRefusedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialApplyJoinTeamRefusedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialApplyJoinTeamRefusedReq) ProtoMessage() {}

func (x *PlanesTrialApplyJoinTeamRefusedReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialApplyJoinTeamRefusedReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialApplyJoinTeamRefusedReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{31}
}

type PlanesTrialApplyJoinTeamRefusedRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *PlanesTrialInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *PlanesTrialApplyJoinTeamRefusedRsp) Reset() {
	*x = PlanesTrialApplyJoinTeamRefusedRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialApplyJoinTeamRefusedRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialApplyJoinTeamRefusedRsp) ProtoMessage() {}

func (x *PlanesTrialApplyJoinTeamRefusedRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialApplyJoinTeamRefusedRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialApplyJoinTeamRefusedRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{32}
}

func (x *PlanesTrialApplyJoinTeamRefusedRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialApplyJoinTeamRefusedRsp) GetTeamInfo() *PlanesTrialInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type PlanesTrialQuitTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialQuitTeamReq) Reset() {
	*x = PlanesTrialQuitTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialQuitTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialQuitTeamReq) ProtoMessage() {}

func (x *PlanesTrialQuitTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialQuitTeamReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialQuitTeamReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{33}
}

type PlanesTrialQuitTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialQuitTeamRsp) Reset() {
	*x = PlanesTrialQuitTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialQuitTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialQuitTeamRsp) ProtoMessage() {}

func (x *PlanesTrialQuitTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialQuitTeamRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialQuitTeamRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{34}
}

func (x *PlanesTrialQuitTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialKickOutTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *PlanesTrialKickOutTeamReq) Reset() {
	*x = PlanesTrialKickOutTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialKickOutTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialKickOutTeamReq) ProtoMessage() {}

func (x *PlanesTrialKickOutTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialKickOutTeamReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialKickOutTeamReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{35}
}

func (x *PlanesTrialKickOutTeamReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type PlanesTrialKickOutTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CurStageId *int32 `protobuf:"varint,2,opt,name=curStageId" json:"curStageId,omitempty"`
}

func (x *PlanesTrialKickOutTeamRsp) Reset() {
	*x = PlanesTrialKickOutTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialKickOutTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialKickOutTeamRsp) ProtoMessage() {}

func (x *PlanesTrialKickOutTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialKickOutTeamRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialKickOutTeamRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{36}
}

func (x *PlanesTrialKickOutTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialKickOutTeamRsp) GetCurStageId() int32 {
	if x != nil && x.CurStageId != nil {
		return *x.CurStageId
	}
	return 0
}

type PlanesTrialChangeLeaderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *PlanesTrialChangeLeaderReq) Reset() {
	*x = PlanesTrialChangeLeaderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialChangeLeaderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialChangeLeaderReq) ProtoMessage() {}

func (x *PlanesTrialChangeLeaderReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialChangeLeaderReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialChangeLeaderReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{37}
}

func (x *PlanesTrialChangeLeaderReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type PlanesTrialChangeLeaderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialChangeLeaderRsp) Reset() {
	*x = PlanesTrialChangeLeaderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialChangeLeaderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialChangeLeaderRsp) ProtoMessage() {}

func (x *PlanesTrialChangeLeaderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialChangeLeaderRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialChangeLeaderRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{38}
}

func (x *PlanesTrialChangeLeaderRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialTeamLeaderNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *int32                      `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	UserData *PlanesTrialApplyUserEntity `protobuf:"bytes,2,opt,name=userData" json:"userData,omitempty"`
}

func (x *PlanesTrialTeamLeaderNotify) Reset() {
	*x = PlanesTrialTeamLeaderNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialTeamLeaderNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialTeamLeaderNotify) ProtoMessage() {}

func (x *PlanesTrialTeamLeaderNotify) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialTeamLeaderNotify.ProtoReflect.Descriptor instead.
func (*PlanesTrialTeamLeaderNotify) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{39}
}

func (x *PlanesTrialTeamLeaderNotify) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PlanesTrialTeamLeaderNotify) GetUserData() *PlanesTrialApplyUserEntity {
	if x != nil {
		return x.UserData
	}
	return nil
}

type PlanesTrialTeamMemberNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   *int32                             `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	TeamInfo               *PlanesTrialInnerTeamEntity        `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
	SelectBuffData         *PlanesTrialSelectSkillDataMsg     `protobuf:"bytes,3,opt,name=selectBuffData" json:"selectBuffData,omitempty"`
	ChangePosData          []*PlanesTrialChangePosData        `protobuf:"bytes,4,rep,name=changePosData" json:"changePosData,omitempty"`
	SwitchSeparationNotify *PlanesTrialSwitchSeparationNotify `protobuf:"bytes,5,opt,name=switchSeparationNotify" json:"switchSeparationNotify,omitempty"`
}

func (x *PlanesTrialTeamMemberNotify) Reset() {
	*x = PlanesTrialTeamMemberNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialTeamMemberNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialTeamMemberNotify) ProtoMessage() {}

func (x *PlanesTrialTeamMemberNotify) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialTeamMemberNotify.ProtoReflect.Descriptor instead.
func (*PlanesTrialTeamMemberNotify) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{40}
}

func (x *PlanesTrialTeamMemberNotify) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PlanesTrialTeamMemberNotify) GetTeamInfo() *PlanesTrialInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

func (x *PlanesTrialTeamMemberNotify) GetSelectBuffData() *PlanesTrialSelectSkillDataMsg {
	if x != nil {
		return x.SelectBuffData
	}
	return nil
}

func (x *PlanesTrialTeamMemberNotify) GetChangePosData() []*PlanesTrialChangePosData {
	if x != nil {
		return x.ChangePosData
	}
	return nil
}

func (x *PlanesTrialTeamMemberNotify) GetSwitchSeparationNotify() *PlanesTrialSwitchSeparationNotify {
	if x != nil {
		return x.SwitchSeparationNotify
	}
	return nil
}

type PlanesTrialSelectSkillDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanSelectBuff   []int32 `protobuf:"varint,1,rep,name=canSelectBuff" json:"canSelectBuff,omitempty"`
	Buff            *int32  `protobuf:"varint,2,opt,name=buff" json:"buff,omitempty"`
	StartSelectTime *int64  `protobuf:"varint,3,opt,name=startSelectTime" json:"startSelectTime,omitempty"`
}

func (x *PlanesTrialSelectSkillDataMsg) Reset() {
	*x = PlanesTrialSelectSkillDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSelectSkillDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSelectSkillDataMsg) ProtoMessage() {}

func (x *PlanesTrialSelectSkillDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSelectSkillDataMsg.ProtoReflect.Descriptor instead.
func (*PlanesTrialSelectSkillDataMsg) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{41}
}

func (x *PlanesTrialSelectSkillDataMsg) GetCanSelectBuff() []int32 {
	if x != nil {
		return x.CanSelectBuff
	}
	return nil
}

func (x *PlanesTrialSelectSkillDataMsg) GetBuff() int32 {
	if x != nil && x.Buff != nil {
		return *x.Buff
	}
	return 0
}

func (x *PlanesTrialSelectSkillDataMsg) GetStartSelectTime() int64 {
	if x != nil && x.StartSelectTime != nil {
		return *x.StartSelectTime
	}
	return 0
}

type PlanesTrialTeamPrepareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
}

func (x *PlanesTrialTeamPrepareReq) Reset() {
	*x = PlanesTrialTeamPrepareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialTeamPrepareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialTeamPrepareReq) ProtoMessage() {}

func (x *PlanesTrialTeamPrepareReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialTeamPrepareReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialTeamPrepareReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{42}
}

func (x *PlanesTrialTeamPrepareReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type PlanesTrialTeamPrepareRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialTeamPrepareRsp) Reset() {
	*x = PlanesTrialTeamPrepareRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialTeamPrepareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialTeamPrepareRsp) ProtoMessage() {}

func (x *PlanesTrialTeamPrepareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialTeamPrepareRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialTeamPrepareRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{43}
}

func (x *PlanesTrialTeamPrepareRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialStartMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
}

func (x *PlanesTrialStartMatchReq) Reset() {
	*x = PlanesTrialStartMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialStartMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialStartMatchReq) ProtoMessage() {}

func (x *PlanesTrialStartMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialStartMatchReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialStartMatchReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{44}
}

func (x *PlanesTrialStartMatchReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type PlanesTrialStartMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialStartMatchRsp) Reset() {
	*x = PlanesTrialStartMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialStartMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialStartMatchRsp) ProtoMessage() {}

func (x *PlanesTrialStartMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialStartMatchRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialStartMatchRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{45}
}

func (x *PlanesTrialStartMatchRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialMatchMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialMatchMemberReq) Reset() {
	*x = PlanesTrialMatchMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialMatchMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialMatchMemberReq) ProtoMessage() {}

func (x *PlanesTrialMatchMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialMatchMemberReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialMatchMemberReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{46}
}

type PlanesTrialMatchMemberRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MatchNum  *int32 `protobuf:"varint,2,opt,name=matchNum" json:"matchNum,omitempty"`
	MemberId  *int64 `protobuf:"varint,3,opt,name=memberId" json:"memberId,omitempty"`
	TrialType *int32 `protobuf:"varint,4,opt,name=trialType" json:"trialType,omitempty"`
}

func (x *PlanesTrialMatchMemberRsp) Reset() {
	*x = PlanesTrialMatchMemberRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialMatchMemberRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialMatchMemberRsp) ProtoMessage() {}

func (x *PlanesTrialMatchMemberRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialMatchMemberRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialMatchMemberRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{47}
}

func (x *PlanesTrialMatchMemberRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialMatchMemberRsp) GetMatchNum() int32 {
	if x != nil && x.MatchNum != nil {
		return *x.MatchNum
	}
	return 0
}

func (x *PlanesTrialMatchMemberRsp) GetMemberId() int64 {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return 0
}

func (x *PlanesTrialMatchMemberRsp) GetTrialType() int32 {
	if x != nil && x.TrialType != nil {
		return *x.TrialType
	}
	return 0
}

type PlanesTrialMatchResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId []int64 `protobuf:"varint,1,rep,name=playerId" json:"playerId,omitempty"`
}

func (x *PlanesTrialMatchResultMsg) Reset() {
	*x = PlanesTrialMatchResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialMatchResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialMatchResultMsg) ProtoMessage() {}

func (x *PlanesTrialMatchResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialMatchResultMsg.ProtoReflect.Descriptor instead.
func (*PlanesTrialMatchResultMsg) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{48}
}

func (x *PlanesTrialMatchResultMsg) GetPlayerId() []int64 {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

type PlanesTrialStartBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialStartBattleReq) Reset() {
	*x = PlanesTrialStartBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialStartBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialStartBattleReq) ProtoMessage() {}

func (x *PlanesTrialStartBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialStartBattleReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialStartBattleReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{49}
}

type PlanesTrialStartBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialStartBattleRsp) Reset() {
	*x = PlanesTrialStartBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialStartBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialStartBattleRsp) ProtoMessage() {}

func (x *PlanesTrialStartBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialStartBattleRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialStartBattleRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{50}
}

func (x *PlanesTrialStartBattleRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	TargetPlayerId *int64 `protobuf:"varint,2,opt,name=targetPlayerId" json:"targetPlayerId,omitempty"`
}

func (x *PlanesTrialInviteReq) Reset() {
	*x = PlanesTrialInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialInviteReq) ProtoMessage() {}

func (x *PlanesTrialInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialInviteReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialInviteReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{51}
}

func (x *PlanesTrialInviteReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PlanesTrialInviteReq) GetTargetPlayerId() int64 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

type PlanesTrialInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialInviteRsp) Reset() {
	*x = PlanesTrialInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialInviteRsp) ProtoMessage() {}

func (x *PlanesTrialInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialInviteRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialInviteRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{52}
}

func (x *PlanesTrialInviteRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialSkipBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialSkipBattleReq) Reset() {
	*x = PlanesTrialSkipBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSkipBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSkipBattleReq) ProtoMessage() {}

func (x *PlanesTrialSkipBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSkipBattleReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialSkipBattleReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{53}
}

type PlanesTrialSkipBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialSkipBattleRsp) Reset() {
	*x = PlanesTrialSkipBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSkipBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSkipBattleRsp) ProtoMessage() {}

func (x *PlanesTrialSkipBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSkipBattleRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialSkipBattleRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{54}
}

func (x *PlanesTrialSkipBattleRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialStartSelectBuffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *PlanesTrialStartSelectBuffReq) Reset() {
	*x = PlanesTrialStartSelectBuffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialStartSelectBuffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialStartSelectBuffReq) ProtoMessage() {}

func (x *PlanesTrialStartSelectBuffReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialStartSelectBuffReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialStartSelectBuffReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{55}
}

func (x *PlanesTrialStartSelectBuffReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type PlanesTrialStartSelectBuffRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialStartSelectBuffRsp) Reset() {
	*x = PlanesTrialStartSelectBuffRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialStartSelectBuffRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialStartSelectBuffRsp) ProtoMessage() {}

func (x *PlanesTrialStartSelectBuffRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialStartSelectBuffRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialStartSelectBuffRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{56}
}

func (x *PlanesTrialStartSelectBuffRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialSelectBuffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
}

func (x *PlanesTrialSelectBuffReq) Reset() {
	*x = PlanesTrialSelectBuffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSelectBuffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSelectBuffReq) ProtoMessage() {}

func (x *PlanesTrialSelectBuffReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSelectBuffReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialSelectBuffReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{57}
}

func (x *PlanesTrialSelectBuffReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type PlanesTrialSelectBuffRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialSelectBuffRsp) Reset() {
	*x = PlanesTrialSelectBuffRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSelectBuffRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSelectBuffRsp) ProtoMessage() {}

func (x *PlanesTrialSelectBuffRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSelectBuffRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialSelectBuffRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{58}
}

func (x *PlanesTrialSelectBuffRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialBuffPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority  *int32 `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	SkillType *int32 `protobuf:"varint,2,opt,name=skillType" json:"skillType,omitempty"`
}

func (x *PlanesTrialBuffPreference) Reset() {
	*x = PlanesTrialBuffPreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialBuffPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialBuffPreference) ProtoMessage() {}

func (x *PlanesTrialBuffPreference) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialBuffPreference.ProtoReflect.Descriptor instead.
func (*PlanesTrialBuffPreference) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{59}
}

func (x *PlanesTrialBuffPreference) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PlanesTrialBuffPreference) GetSkillType() int32 {
	if x != nil && x.SkillType != nil {
		return *x.SkillType
	}
	return 0
}

type PlanesTrialSetBuffPreferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkPreference []*PlanesTrialBuffPreference `protobuf:"bytes,1,rep,name=markPreference" json:"markPreference,omitempty"`
}

func (x *PlanesTrialSetBuffPreferenceReq) Reset() {
	*x = PlanesTrialSetBuffPreferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSetBuffPreferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSetBuffPreferenceReq) ProtoMessage() {}

func (x *PlanesTrialSetBuffPreferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSetBuffPreferenceReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialSetBuffPreferenceReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{60}
}

func (x *PlanesTrialSetBuffPreferenceReq) GetMarkPreference() []*PlanesTrialBuffPreference {
	if x != nil {
		return x.MarkPreference
	}
	return nil
}

type PlanesTrialSetBuffPreferenceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialSetBuffPreferenceRsp) Reset() {
	*x = PlanesTrialSetBuffPreferenceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSetBuffPreferenceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSetBuffPreferenceRsp) ProtoMessage() {}

func (x *PlanesTrialSetBuffPreferenceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSetBuffPreferenceRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialSetBuffPreferenceRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{61}
}

func (x *PlanesTrialSetBuffPreferenceRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialGetBuffPreferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialGetBuffPreferenceReq) Reset() {
	*x = PlanesTrialGetBuffPreferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBuffPreferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBuffPreferenceReq) ProtoMessage() {}

func (x *PlanesTrialGetBuffPreferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBuffPreferenceReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBuffPreferenceReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{62}
}

type PlanesTrialGetBuffPreferenceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MarkPreference []*PlanesTrialBuffPreference `protobuf:"bytes,2,rep,name=markPreference" json:"markPreference,omitempty"`
}

func (x *PlanesTrialGetBuffPreferenceRsp) Reset() {
	*x = PlanesTrialGetBuffPreferenceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBuffPreferenceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBuffPreferenceRsp) ProtoMessage() {}

func (x *PlanesTrialGetBuffPreferenceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBuffPreferenceRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBuffPreferenceRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{63}
}

func (x *PlanesTrialGetBuffPreferenceRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetBuffPreferenceRsp) GetMarkPreference() []*PlanesTrialBuffPreference {
	if x != nil {
		return x.MarkPreference
	}
	return nil
}

type PlanesTrialBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId  *int32 `protobuf:"varint,1,req,name=buffId" json:"buffId,omitempty"`
	StageId *int32 `protobuf:"varint,2,req,name=stageId" json:"stageId,omitempty"`
}

func (x *PlanesTrialBuffInfo) Reset() {
	*x = PlanesTrialBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialBuffInfo) ProtoMessage() {}

func (x *PlanesTrialBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialBuffInfo.ProtoReflect.Descriptor instead.
func (*PlanesTrialBuffInfo) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{64}
}

func (x *PlanesTrialBuffInfo) GetBuffId() int32 {
	if x != nil && x.BuffId != nil {
		return *x.BuffId
	}
	return 0
}

func (x *PlanesTrialBuffInfo) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

type PlanesTrialGetSelectedBuffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId *int64 `protobuf:"varint,1,opt,name=targetPlayerId" json:"targetPlayerId,omitempty"`
	IsRobot        *bool  `protobuf:"varint,2,opt,name=isRobot" json:"isRobot,omitempty"`
}

func (x *PlanesTrialGetSelectedBuffReq) Reset() {
	*x = PlanesTrialGetSelectedBuffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetSelectedBuffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetSelectedBuffReq) ProtoMessage() {}

func (x *PlanesTrialGetSelectedBuffReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetSelectedBuffReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetSelectedBuffReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{65}
}

func (x *PlanesTrialGetSelectedBuffReq) GetTargetPlayerId() int64 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

func (x *PlanesTrialGetSelectedBuffReq) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

type PlanesTrialGetSelectedBuffRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BuffInfo []*PlanesTrialBuffInfo `protobuf:"bytes,2,rep,name=buffInfo" json:"buffInfo,omitempty"`
}

func (x *PlanesTrialGetSelectedBuffRsp) Reset() {
	*x = PlanesTrialGetSelectedBuffRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetSelectedBuffRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetSelectedBuffRsp) ProtoMessage() {}

func (x *PlanesTrialGetSelectedBuffRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetSelectedBuffRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetSelectedBuffRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{66}
}

func (x *PlanesTrialGetSelectedBuffRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetSelectedBuffRsp) GetBuffInfo() []*PlanesTrialBuffInfo {
	if x != nil {
		return x.BuffInfo
	}
	return nil
}

type PlanesTrialRankTeamEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int64                     `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	TeamName       *string                    `protobuf:"bytes,2,opt,name=teamName" json:"teamName,omitempty"`
	LeaderServerId *int64                     `protobuf:"varint,3,opt,name=leaderServerId" json:"leaderServerId,omitempty"`
	Members        []*PlayerCharacterImageMsg `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	BattleTime     *int64                     `protobuf:"varint,5,opt,name=battleTime" json:"battleTime,omitempty"`
	FightValue     *int64                     `protobuf:"varint,6,opt,name=fightValue" json:"fightValue,omitempty"`
	StageId        *int32                     `protobuf:"varint,7,opt,name=stageId" json:"stageId,omitempty"`
	RobotPlayerId  []int64                    `protobuf:"varint,8,rep,name=robotPlayerId" json:"robotPlayerId,omitempty"`
}

func (x *PlanesTrialRankTeamEntity) Reset() {
	*x = PlanesTrialRankTeamEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialRankTeamEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialRankTeamEntity) ProtoMessage() {}

func (x *PlanesTrialRankTeamEntity) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialRankTeamEntity.ProtoReflect.Descriptor instead.
func (*PlanesTrialRankTeamEntity) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{67}
}

func (x *PlanesTrialRankTeamEntity) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PlanesTrialRankTeamEntity) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *PlanesTrialRankTeamEntity) GetLeaderServerId() int64 {
	if x != nil && x.LeaderServerId != nil {
		return *x.LeaderServerId
	}
	return 0
}

func (x *PlanesTrialRankTeamEntity) GetMembers() []*PlayerCharacterImageMsg {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *PlanesTrialRankTeamEntity) GetBattleTime() int64 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return 0
}

func (x *PlanesTrialRankTeamEntity) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *PlanesTrialRankTeamEntity) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *PlanesTrialRankTeamEntity) GetRobotPlayerId() []int64 {
	if x != nil {
		return x.RobotPlayerId
	}
	return nil
}

type PlanesTrialRankGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	NeedAll *bool  `protobuf:"varint,2,req,name=needAll" json:"needAll,omitempty"`
}

func (x *PlanesTrialRankGetReq) Reset() {
	*x = PlanesTrialRankGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialRankGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialRankGetReq) ProtoMessage() {}

func (x *PlanesTrialRankGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialRankGetReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialRankGetReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{68}
}

func (x *PlanesTrialRankGetReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PlanesTrialRankGetReq) GetNeedAll() bool {
	if x != nil && x.NeedAll != nil {
		return *x.NeedAll
	}
	return false
}

type PlanesTrialRankGetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CurTeam      []*PlanesTrialRankTeamEntity `protobuf:"bytes,2,rep,name=curTeam" json:"curTeam,omitempty"`
	MyRank       *int32                       `protobuf:"varint,3,opt,name=myRank" json:"myRank,omitempty"`
	MyMaxStageId *int32                       `protobuf:"varint,4,opt,name=myMaxStageId" json:"myMaxStageId,omitempty"`
}

func (x *PlanesTrialRankGetResp) Reset() {
	*x = PlanesTrialRankGetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialRankGetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialRankGetResp) ProtoMessage() {}

func (x *PlanesTrialRankGetResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialRankGetResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialRankGetResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{69}
}

func (x *PlanesTrialRankGetResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialRankGetResp) GetCurTeam() []*PlanesTrialRankTeamEntity {
	if x != nil {
		return x.CurTeam
	}
	return nil
}

func (x *PlanesTrialRankGetResp) GetMyRank() int32 {
	if x != nil && x.MyRank != nil {
		return *x.MyRank
	}
	return 0
}

func (x *PlanesTrialRankGetResp) GetMyMaxStageId() int32 {
	if x != nil && x.MyMaxStageId != nil {
		return *x.MyMaxStageId
	}
	return 0
}

type PlanesTrialRankTeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurTeam []*PlanesTrialRankTeamEntity `protobuf:"bytes,1,rep,name=curTeam" json:"curTeam,omitempty"`
}

func (x *PlanesTrialRankTeamList) Reset() {
	*x = PlanesTrialRankTeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialRankTeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialRankTeamList) ProtoMessage() {}

func (x *PlanesTrialRankTeamList) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialRankTeamList.ProtoReflect.Descriptor instead.
func (*PlanesTrialRankTeamList) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{70}
}

func (x *PlanesTrialRankTeamList) GetCurTeam() []*PlanesTrialRankTeamEntity {
	if x != nil {
		return x.CurTeam
	}
	return nil
}

type PlanesTrialUpdateLockDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeparationIdx *int32 `protobuf:"varint,1,req,name=separationIdx" json:"separationIdx,omitempty"`
	TrailType     *int32 `protobuf:"varint,2,req,name=trailType" json:"trailType,omitempty"`
}

func (x *PlanesTrialUpdateLockDataReq) Reset() {
	*x = PlanesTrialUpdateLockDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialUpdateLockDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialUpdateLockDataReq) ProtoMessage() {}

func (x *PlanesTrialUpdateLockDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialUpdateLockDataReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialUpdateLockDataReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{71}
}

func (x *PlanesTrialUpdateLockDataReq) GetSeparationIdx() int32 {
	if x != nil && x.SeparationIdx != nil {
		return *x.SeparationIdx
	}
	return 0
}

func (x *PlanesTrialUpdateLockDataReq) GetTrailType() int32 {
	if x != nil && x.TrailType != nil {
		return *x.TrailType
	}
	return 0
}

type PlanesTrialUpdateLockDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *GodBodyDetailDataMsg `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *PlanesTrialUpdateLockDataResp) Reset() {
	*x = PlanesTrialUpdateLockDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialUpdateLockDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialUpdateLockDataResp) ProtoMessage() {}

func (x *PlanesTrialUpdateLockDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialUpdateLockDataResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialUpdateLockDataResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{72}
}

func (x *PlanesTrialUpdateLockDataResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialUpdateLockDataResp) GetData() *GodBodyDetailDataMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlanesTrialGetGodBodyDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialGetGodBodyDataReq) Reset() {
	*x = PlanesTrialGetGodBodyDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetGodBodyDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetGodBodyDataReq) ProtoMessage() {}

func (x *PlanesTrialGetGodBodyDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetGodBodyDataReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetGodBodyDataReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{73}
}

type PlanesTrialGetGodBodyDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *GodBodyDetailDataMsg `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *PlanesTrialGetGodBodyDataResp) Reset() {
	*x = PlanesTrialGetGodBodyDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetGodBodyDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetGodBodyDataResp) ProtoMessage() {}

func (x *PlanesTrialGetGodBodyDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetGodBodyDataResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetGodBodyDataResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{74}
}

func (x *PlanesTrialGetGodBodyDataResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetGodBodyDataResp) GetData() *GodBodyDetailDataMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlanesTrialGetBattleVideoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId *int64 `protobuf:"varint,1,req,name=battleId" json:"battleId,omitempty"`
}

func (x *PlanesTrialGetBattleVideoReq) Reset() {
	*x = PlanesTrialGetBattleVideoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBattleVideoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBattleVideoReq) ProtoMessage() {}

func (x *PlanesTrialGetBattleVideoReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBattleVideoReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBattleVideoReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{75}
}

func (x *PlanesTrialGetBattleVideoReq) GetBattleId() int64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

type PlanesTrialGetBattleVideoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BattleRecordMsg *BattleRecordMsg `protobuf:"bytes,2,opt,name=battleRecordMsg" json:"battleRecordMsg,omitempty"`
}

func (x *PlanesTrialGetBattleVideoRsp) Reset() {
	*x = PlanesTrialGetBattleVideoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBattleVideoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBattleVideoRsp) ProtoMessage() {}

func (x *PlanesTrialGetBattleVideoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBattleVideoRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBattleVideoRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{76}
}

func (x *PlanesTrialGetBattleVideoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetBattleVideoRsp) GetBattleRecordMsg() *BattleRecordMsg {
	if x != nil {
		return x.BattleRecordMsg
	}
	return nil
}

type PlanesTrialGetBossInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId *int32 `protobuf:"varint,1,req,name=bossId" json:"bossId,omitempty"`
}

func (x *PlanesTrialGetBossInfoReq) Reset() {
	*x = PlanesTrialGetBossInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBossInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBossInfoReq) ProtoMessage() {}

func (x *PlanesTrialGetBossInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBossInfoReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBossInfoReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{77}
}

func (x *PlanesTrialGetBossInfoReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

type PlanesTrialGetBossInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BossInfo *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=bossInfo" json:"bossInfo,omitempty"`
}

func (x *PlanesTrialGetBossInfoRsp) Reset() {
	*x = PlanesTrialGetBossInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBossInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBossInfoRsp) ProtoMessage() {}

func (x *PlanesTrialGetBossInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBossInfoRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBossInfoRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{78}
}

func (x *PlanesTrialGetBossInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetBossInfoRsp) GetBossInfo() *PlayerDetailDataMsg {
	if x != nil {
		return x.BossInfo
	}
	return nil
}

type PlanesTrialGetBossPowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId *int32 `protobuf:"varint,1,req,name=levelId" json:"levelId,omitempty"`
}

func (x *PlanesTrialGetBossPowerReq) Reset() {
	*x = PlanesTrialGetBossPowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBossPowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBossPowerReq) ProtoMessage() {}

func (x *PlanesTrialGetBossPowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBossPowerReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBossPowerReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{79}
}

func (x *PlanesTrialGetBossPowerReq) GetLevelId() int32 {
	if x != nil && x.LevelId != nil {
		return *x.LevelId
	}
	return 0
}

type PlanesTrialGetBossPowerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Power []int64 `protobuf:"varint,2,rep,name=power" json:"power,omitempty"`
}

func (x *PlanesTrialGetBossPowerRsp) Reset() {
	*x = PlanesTrialGetBossPowerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetBossPowerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetBossPowerRsp) ProtoMessage() {}

func (x *PlanesTrialGetBossPowerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetBossPowerRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetBossPowerRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{80}
}

func (x *PlanesTrialGetBossPowerRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetBossPowerRsp) GetPower() []int64 {
	if x != nil {
		return x.Power
	}
	return nil
}

type PlanesTrialGetPlayerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	TeamId   *int64 `protobuf:"varint,2,req,name=teamId" json:"teamId,omitempty"`
	Type     *int32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	LeaderId *int64 `protobuf:"varint,4,opt,name=leaderId" json:"leaderId,omitempty"`
}

func (x *PlanesTrialGetPlayerInfoReq) Reset() {
	*x = PlanesTrialGetPlayerInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetPlayerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetPlayerInfoReq) ProtoMessage() {}

func (x *PlanesTrialGetPlayerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetPlayerInfoReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetPlayerInfoReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{81}
}

func (x *PlanesTrialGetPlayerInfoReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlanesTrialGetPlayerInfoReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *PlanesTrialGetPlayerInfoReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PlanesTrialGetPlayerInfoReq) GetLeaderId() int64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

type PlanesTrialGetPlayerInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerInfo *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *PlanesTrialGetPlayerInfoRsp) Reset() {
	*x = PlanesTrialGetPlayerInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetPlayerInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetPlayerInfoRsp) ProtoMessage() {}

func (x *PlanesTrialGetPlayerInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetPlayerInfoRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetPlayerInfoRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{82}
}

func (x *PlanesTrialGetPlayerInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetPlayerInfoRsp) GetPlayerInfo() *PlayerDetailDataMsg {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type PlanesTrialEnterBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialEnterBattleReq) Reset() {
	*x = PlanesTrialEnterBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialEnterBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialEnterBattleReq) ProtoMessage() {}

func (x *PlanesTrialEnterBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialEnterBattleReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialEnterBattleReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{83}
}

type PlanesTrialEnterBattleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data            *PlanesTrialEnterBattleData    `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	SelectBuffData  *PlanesTrialSelectSkillDataMsg `protobuf:"bytes,3,opt,name=selectBuffData" json:"selectBuffData,omitempty"`
	RobotPlayerIds  []int64                        `protobuf:"varint,4,rep,name=robotPlayerIds" json:"robotPlayerIds,omitempty"`
	CurStage        *int32                         `protobuf:"varint,5,opt,name=curStage" json:"curStage,omitempty"`
	NeedSendBuffReq *bool                          `protobuf:"varint,6,opt,name=needSendBuffReq" json:"needSendBuffReq,omitempty"`
}

func (x *PlanesTrialEnterBattleResp) Reset() {
	*x = PlanesTrialEnterBattleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialEnterBattleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialEnterBattleResp) ProtoMessage() {}

func (x *PlanesTrialEnterBattleResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialEnterBattleResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialEnterBattleResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{84}
}

func (x *PlanesTrialEnterBattleResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialEnterBattleResp) GetData() *PlanesTrialEnterBattleData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PlanesTrialEnterBattleResp) GetSelectBuffData() *PlanesTrialSelectSkillDataMsg {
	if x != nil {
		return x.SelectBuffData
	}
	return nil
}

func (x *PlanesTrialEnterBattleResp) GetRobotPlayerIds() []int64 {
	if x != nil {
		return x.RobotPlayerIds
	}
	return nil
}

func (x *PlanesTrialEnterBattleResp) GetCurStage() int32 {
	if x != nil && x.CurStage != nil {
		return *x.CurStage
	}
	return 0
}

func (x *PlanesTrialEnterBattleResp) GetNeedSendBuffReq() bool {
	if x != nil && x.NeedSendBuffReq != nil {
		return *x.NeedSendBuffReq
	}
	return false
}

type PlanesTrialEnterBattleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PlanesTrialEnterBattleData `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
}

func (x *PlanesTrialEnterBattleNotify) Reset() {
	*x = PlanesTrialEnterBattleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialEnterBattleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialEnterBattleNotify) ProtoMessage() {}

func (x *PlanesTrialEnterBattleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialEnterBattleNotify.ProtoReflect.Descriptor instead.
func (*PlanesTrialEnterBattleNotify) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{85}
}

func (x *PlanesTrialEnterBattleNotify) GetData() *PlanesTrialEnterBattleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlanesTrialEnterBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*BattleMain `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (x *PlanesTrialEnterBattleData) Reset() {
	*x = PlanesTrialEnterBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialEnterBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialEnterBattleData) ProtoMessage() {}

func (x *PlanesTrialEnterBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialEnterBattleData.ProtoReflect.Descriptor instead.
func (*PlanesTrialEnterBattleData) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{86}
}

func (x *PlanesTrialEnterBattleData) GetDatas() []*BattleMain {
	if x != nil {
		return x.Datas
	}
	return nil
}

type PlanesTrialEnterSwitchSeparationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialEnterSwitchSeparationReq) Reset() {
	*x = PlanesTrialEnterSwitchSeparationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialEnterSwitchSeparationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialEnterSwitchSeparationReq) ProtoMessage() {}

func (x *PlanesTrialEnterSwitchSeparationReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialEnterSwitchSeparationReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialEnterSwitchSeparationReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{87}
}

type PlanesTrialEnterSwitchSeparationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32                             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Datas []*PlanesTrialSeparationSimpleData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *PlanesTrialEnterSwitchSeparationRsp) Reset() {
	*x = PlanesTrialEnterSwitchSeparationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialEnterSwitchSeparationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialEnterSwitchSeparationRsp) ProtoMessage() {}

func (x *PlanesTrialEnterSwitchSeparationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialEnterSwitchSeparationRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialEnterSwitchSeparationRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{88}
}

func (x *PlanesTrialEnterSwitchSeparationRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialEnterSwitchSeparationRsp) GetDatas() []*PlanesTrialSeparationSimpleData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type PlanesTrialSeparationSimpleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *PlayerHeadAndNameMsg `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	Select  *int32                `protobuf:"varint,2,opt,name=select" json:"select,omitempty"`
	Powers  []int64               `protobuf:"varint,3,rep,name=powers" json:"powers,omitempty"`
	IsRobot *bool                 `protobuf:"varint,4,opt,name=isRobot" json:"isRobot,omitempty"`
}

func (x *PlanesTrialSeparationSimpleData) Reset() {
	*x = PlanesTrialSeparationSimpleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSeparationSimpleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSeparationSimpleData) ProtoMessage() {}

func (x *PlanesTrialSeparationSimpleData) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSeparationSimpleData.ProtoReflect.Descriptor instead.
func (*PlanesTrialSeparationSimpleData) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{89}
}

func (x *PlanesTrialSeparationSimpleData) GetData() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PlanesTrialSeparationSimpleData) GetSelect() int32 {
	if x != nil && x.Select != nil {
		return *x.Select
	}
	return 0
}

func (x *PlanesTrialSeparationSimpleData) GetPowers() []int64 {
	if x != nil {
		return x.Powers
	}
	return nil
}

func (x *PlanesTrialSeparationSimpleData) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

type PlanesTrialSwitchSeparationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId     *int64        `protobuf:"varint,1,req,name=targetId" json:"targetId,omitempty"`
	SeparationId *int32        `protobuf:"varint,2,req,name=separationId" json:"separationId,omitempty"`
	IsRobot      *bool         `protobuf:"varint,3,req,name=isRobot" json:"isRobot,omitempty"`
	TeamId       *int64        `protobuf:"varint,4,req,name=teamId" json:"teamId,omitempty"`
	BattleMain   []*BattleMain `protobuf:"bytes,5,rep,name=battleMain" json:"battleMain,omitempty"`
}

func (x *PlanesTrialSwitchSeparationReq) Reset() {
	*x = PlanesTrialSwitchSeparationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSwitchSeparationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSwitchSeparationReq) ProtoMessage() {}

func (x *PlanesTrialSwitchSeparationReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSwitchSeparationReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialSwitchSeparationReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{90}
}

func (x *PlanesTrialSwitchSeparationReq) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *PlanesTrialSwitchSeparationReq) GetSeparationId() int32 {
	if x != nil && x.SeparationId != nil {
		return *x.SeparationId
	}
	return 0
}

func (x *PlanesTrialSwitchSeparationReq) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *PlanesTrialSwitchSeparationReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *PlanesTrialSwitchSeparationReq) GetBattleMain() []*BattleMain {
	if x != nil {
		return x.BattleMain
	}
	return nil
}

type PlanesTrialSwitchSeparationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32                             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Notify *PlanesTrialSwitchSeparationNotify `protobuf:"bytes,2,opt,name=notify" json:"notify,omitempty"`
}

func (x *PlanesTrialSwitchSeparationRsp) Reset() {
	*x = PlanesTrialSwitchSeparationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSwitchSeparationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSwitchSeparationRsp) ProtoMessage() {}

func (x *PlanesTrialSwitchSeparationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSwitchSeparationRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialSwitchSeparationRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{91}
}

func (x *PlanesTrialSwitchSeparationRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialSwitchSeparationRsp) GetNotify() *PlanesTrialSwitchSeparationNotify {
	if x != nil {
		return x.Notify
	}
	return nil
}

type PlanesTrialSwitchSeparationNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleMain   []*BattleMain `protobuf:"bytes,1,rep,name=battleMain" json:"battleMain,omitempty"`
	TargetId     *int64        `protobuf:"varint,2,opt,name=targetId" json:"targetId,omitempty"`
	SeparationId *int32        `protobuf:"varint,3,opt,name=separationId" json:"separationId,omitempty"`
	TeamId       *int64        `protobuf:"varint,4,opt,name=teamId" json:"teamId,omitempty"`
}

func (x *PlanesTrialSwitchSeparationNotify) Reset() {
	*x = PlanesTrialSwitchSeparationNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSwitchSeparationNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSwitchSeparationNotify) ProtoMessage() {}

func (x *PlanesTrialSwitchSeparationNotify) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSwitchSeparationNotify.ProtoReflect.Descriptor instead.
func (*PlanesTrialSwitchSeparationNotify) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{92}
}

func (x *PlanesTrialSwitchSeparationNotify) GetBattleMain() []*BattleMain {
	if x != nil {
		return x.BattleMain
	}
	return nil
}

func (x *PlanesTrialSwitchSeparationNotify) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *PlanesTrialSwitchSeparationNotify) GetSeparationId() int32 {
	if x != nil && x.SeparationId != nil {
		return *x.SeparationId
	}
	return 0
}

func (x *PlanesTrialSwitchSeparationNotify) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type PlanesTrialSeparationDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId *int64 `protobuf:"varint,1,req,name=targetPlayerId" json:"targetPlayerId,omitempty"`
	TeamId         *int64 `protobuf:"varint,2,req,name=teamId" json:"teamId,omitempty"`
	LeaderServerId *int64 `protobuf:"varint,3,req,name=leaderServerId" json:"leaderServerId,omitempty"`
}

func (x *PlanesTrialSeparationDetailReq) Reset() {
	*x = PlanesTrialSeparationDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSeparationDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSeparationDetailReq) ProtoMessage() {}

func (x *PlanesTrialSeparationDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSeparationDetailReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialSeparationDetailReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{93}
}

func (x *PlanesTrialSeparationDetailReq) GetTargetPlayerId() int64 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

func (x *PlanesTrialSeparationDetailReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *PlanesTrialSeparationDetailReq) GetLeaderServerId() int64 {
	if x != nil && x.LeaderServerId != nil {
		return *x.LeaderServerId
	}
	return 0
}

type PlanesTrialSeparationDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Datas        *GodBodyDetailDataMsg `protobuf:"bytes,2,opt,name=datas" json:"datas,omitempty"`
	AppearanceId *int32                `protobuf:"varint,3,opt,name=appearanceId" json:"appearanceId,omitempty"`
}

func (x *PlanesTrialSeparationDetailRsp) Reset() {
	*x = PlanesTrialSeparationDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSeparationDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSeparationDetailRsp) ProtoMessage() {}

func (x *PlanesTrialSeparationDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSeparationDetailRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialSeparationDetailRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{94}
}

func (x *PlanesTrialSeparationDetailRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialSeparationDetailRsp) GetDatas() *GodBodyDetailDataMsg {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *PlanesTrialSeparationDetailRsp) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

type PlanesTrialChangePosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResPlayerId *int64 `protobuf:"varint,1,req,name=resPlayerId" json:"resPlayerId,omitempty"`
	TarPlayerId *int64 `protobuf:"varint,2,req,name=tarPlayerId" json:"tarPlayerId,omitempty"`
	TarPos      *int32 `protobuf:"varint,3,req,name=tarPos" json:"tarPos,omitempty"`
	TeamId      *int64 `protobuf:"varint,4,req,name=teamId" json:"teamId,omitempty"`
}

func (x *PlanesTrialChangePosReq) Reset() {
	*x = PlanesTrialChangePosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialChangePosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialChangePosReq) ProtoMessage() {}

func (x *PlanesTrialChangePosReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialChangePosReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialChangePosReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{95}
}

func (x *PlanesTrialChangePosReq) GetResPlayerId() int64 {
	if x != nil && x.ResPlayerId != nil {
		return *x.ResPlayerId
	}
	return 0
}

func (x *PlanesTrialChangePosReq) GetTarPlayerId() int64 {
	if x != nil && x.TarPlayerId != nil {
		return *x.TarPlayerId
	}
	return 0
}

func (x *PlanesTrialChangePosReq) GetTarPos() int32 {
	if x != nil && x.TarPos != nil {
		return *x.TarPos
	}
	return 0
}

func (x *PlanesTrialChangePosReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type PlanesTrialChangePosRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialChangePosRsp) Reset() {
	*x = PlanesTrialChangePosRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialChangePosRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialChangePosRsp) ProtoMessage() {}

func (x *PlanesTrialChangePosRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialChangePosRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialChangePosRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{96}
}

func (x *PlanesTrialChangePosRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialChangePosNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*PlanesTrialChangePosData `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (x *PlanesTrialChangePosNotify) Reset() {
	*x = PlanesTrialChangePosNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialChangePosNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialChangePosNotify) ProtoMessage() {}

func (x *PlanesTrialChangePosNotify) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialChangePosNotify.ProtoReflect.Descriptor instead.
func (*PlanesTrialChangePosNotify) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{97}
}

func (x *PlanesTrialChangePosNotify) GetDatas() []*PlanesTrialChangePosData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type PlanesTrialChangePosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	Pos      *int32 `protobuf:"varint,2,req,name=pos" json:"pos,omitempty"`
}

func (x *PlanesTrialChangePosData) Reset() {
	*x = PlanesTrialChangePosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialChangePosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialChangePosData) ProtoMessage() {}

func (x *PlanesTrialChangePosData) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialChangePosData.ProtoReflect.Descriptor instead.
func (*PlanesTrialChangePosData) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{98}
}

func (x *PlanesTrialChangePosData) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlanesTrialChangePosData) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

type PlanesTrialDoBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
	LevelId   *int32 `protobuf:"varint,2,req,name=levelId" json:"levelId,omitempty"`
	TrialType *int32 `protobuf:"varint,3,req,name=trialType" json:"trialType,omitempty"`
}

func (x *PlanesTrialDoBattleReq) Reset() {
	*x = PlanesTrialDoBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialDoBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialDoBattleReq) ProtoMessage() {}

func (x *PlanesTrialDoBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialDoBattleReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialDoBattleReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{99}
}

func (x *PlanesTrialDoBattleReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *PlanesTrialDoBattleReq) GetLevelId() int32 {
	if x != nil && x.LevelId != nil {
		return *x.LevelId
	}
	return 0
}

func (x *PlanesTrialDoBattleReq) GetTrialType() int32 {
	if x != nil && x.TrialType != nil {
		return *x.TrialType
	}
	return 0
}

type PlanesTrialDoBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	NotifyData *PlanesTrialDoBattleNotify `protobuf:"bytes,2,opt,name=notifyData" json:"notifyData,omitempty"`
}

func (x *PlanesTrialDoBattleRsp) Reset() {
	*x = PlanesTrialDoBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialDoBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialDoBattleRsp) ProtoMessage() {}

func (x *PlanesTrialDoBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialDoBattleRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialDoBattleRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{100}
}

func (x *PlanesTrialDoBattleRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialDoBattleRsp) GetNotifyData() *PlanesTrialDoBattleNotify {
	if x != nil {
		return x.NotifyData
	}
	return nil
}

type PlanesTrialDoBattleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllBattleRecord *BattleRecordMsg `protobuf:"bytes,1,req,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	Rewards         *string          `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
	BossData        []*BattleMain    `protobuf:"bytes,3,rep,name=bossData" json:"bossData,omitempty"`
	IsLastStar      *bool            `protobuf:"varint,4,opt,name=isLastStar" json:"isLastStar,omitempty"`
	TeamId          *int64           `protobuf:"varint,5,opt,name=teamId" json:"teamId,omitempty"`
	LoseTimes       *int32           `protobuf:"varint,6,opt,name=loseTimes" json:"loseTimes,omitempty"`
	CurStage        *int32           `protobuf:"varint,7,opt,name=curStage" json:"curStage,omitempty"`
}

func (x *PlanesTrialDoBattleNotify) Reset() {
	*x = PlanesTrialDoBattleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialDoBattleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialDoBattleNotify) ProtoMessage() {}

func (x *PlanesTrialDoBattleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialDoBattleNotify.ProtoReflect.Descriptor instead.
func (*PlanesTrialDoBattleNotify) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{101}
}

func (x *PlanesTrialDoBattleNotify) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *PlanesTrialDoBattleNotify) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *PlanesTrialDoBattleNotify) GetBossData() []*BattleMain {
	if x != nil {
		return x.BossData
	}
	return nil
}

func (x *PlanesTrialDoBattleNotify) GetIsLastStar() bool {
	if x != nil && x.IsLastStar != nil {
		return *x.IsLastStar
	}
	return false
}

func (x *PlanesTrialDoBattleNotify) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *PlanesTrialDoBattleNotify) GetLoseTimes() int32 {
	if x != nil && x.LoseTimes != nil {
		return *x.LoseTimes
	}
	return 0
}

func (x *PlanesTrialDoBattleNotify) GetCurStage() int32 {
	if x != nil && x.CurStage != nil {
		return *x.CurStage
	}
	return 0
}

type PlanesTrialVideoPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        *PlayerAppearanceDataMsg `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	IsRobot     *bool                    `protobuf:"varint,2,opt,name=isRobot" json:"isRobot,omitempty"`
	HeadIconId  *int32                   `protobuf:"varint,3,opt,name=headIconId" json:"headIconId,omitempty"`
	WxHeadUrl   *string                  `protobuf:"bytes,4,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	HeadFrameId *int32                   `protobuf:"varint,5,opt,name=headFrameId" json:"headFrameId,omitempty"`
	BuffList    []*PlanesTrialBuffInfo   `protobuf:"bytes,6,rep,name=buffList" json:"buffList,omitempty"`
}

func (x *PlanesTrialVideoPlayerInfo) Reset() {
	*x = PlanesTrialVideoPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialVideoPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialVideoPlayerInfo) ProtoMessage() {}

func (x *PlanesTrialVideoPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialVideoPlayerInfo.ProtoReflect.Descriptor instead.
func (*PlanesTrialVideoPlayerInfo) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{102}
}

func (x *PlanesTrialVideoPlayerInfo) GetData() *PlayerAppearanceDataMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PlanesTrialVideoPlayerInfo) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *PlanesTrialVideoPlayerInfo) GetHeadIconId() int32 {
	if x != nil && x.HeadIconId != nil {
		return *x.HeadIconId
	}
	return 0
}

func (x *PlanesTrialVideoPlayerInfo) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *PlanesTrialVideoPlayerInfo) GetHeadFrameId() int32 {
	if x != nil && x.HeadFrameId != nil {
		return *x.HeadFrameId
	}
	return 0
}

func (x *PlanesTrialVideoPlayerInfo) GetBuffList() []*PlanesTrialBuffInfo {
	if x != nil {
		return x.BuffList
	}
	return nil
}

type PlanesTrialVideoInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   *int32 `protobuf:"varint,1,req,name=levelId" json:"levelId,omitempty"`
	TrialType *int32 `protobuf:"varint,2,req,name=trialType" json:"trialType,omitempty"`
}

func (x *PlanesTrialVideoInfoReq) Reset() {
	*x = PlanesTrialVideoInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialVideoInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialVideoInfoReq) ProtoMessage() {}

func (x *PlanesTrialVideoInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialVideoInfoReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialVideoInfoReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{103}
}

func (x *PlanesTrialVideoInfoReq) GetLevelId() int32 {
	if x != nil && x.LevelId != nil {
		return *x.LevelId
	}
	return 0
}

func (x *PlanesTrialVideoInfoReq) GetTrialType() int32 {
	if x != nil && x.TrialType != nil {
		return *x.TrialType
	}
	return 0
}

type PlanesTrialVideoInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RoundData []*PlanesTrialVideoPlayerInfo `protobuf:"bytes,2,rep,name=roundData" json:"roundData,omitempty"`
	PowerData []*PlanesTrialVideoPlayerInfo `protobuf:"bytes,3,rep,name=powerData" json:"powerData,omitempty"`
}

func (x *PlanesTrialVideoInfoRsp) Reset() {
	*x = PlanesTrialVideoInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialVideoInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialVideoInfoRsp) ProtoMessage() {}

func (x *PlanesTrialVideoInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialVideoInfoRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialVideoInfoRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{104}
}

func (x *PlanesTrialVideoInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialVideoInfoRsp) GetRoundData() []*PlanesTrialVideoPlayerInfo {
	if x != nil {
		return x.RoundData
	}
	return nil
}

func (x *PlanesTrialVideoInfoRsp) GetPowerData() []*PlanesTrialVideoPlayerInfo {
	if x != nil {
		return x.PowerData
	}
	return nil
}

type PlanesTrialPlayVideoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   *int32 `protobuf:"varint,1,req,name=levelId" json:"levelId,omitempty"`
	TrialType *int32 `protobuf:"varint,2,req,name=trialType" json:"trialType,omitempty"`
	VideoType *int32 `protobuf:"varint,3,req,name=videoType" json:"videoType,omitempty"`
}

func (x *PlanesTrialPlayVideoReq) Reset() {
	*x = PlanesTrialPlayVideoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialPlayVideoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialPlayVideoReq) ProtoMessage() {}

func (x *PlanesTrialPlayVideoReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialPlayVideoReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialPlayVideoReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{105}
}

func (x *PlanesTrialPlayVideoReq) GetLevelId() int32 {
	if x != nil && x.LevelId != nil {
		return *x.LevelId
	}
	return 0
}

func (x *PlanesTrialPlayVideoReq) GetTrialType() int32 {
	if x != nil && x.TrialType != nil {
		return *x.TrialType
	}
	return 0
}

func (x *PlanesTrialPlayVideoReq) GetVideoType() int32 {
	if x != nil && x.VideoType != nil {
		return *x.VideoType
	}
	return 0
}

type PlanesTrialPlayVideoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AllBattleRecord *BattleRecordMsg `protobuf:"bytes,2,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
}

func (x *PlanesTrialPlayVideoRsp) Reset() {
	*x = PlanesTrialPlayVideoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialPlayVideoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialPlayVideoRsp) ProtoMessage() {}

func (x *PlanesTrialPlayVideoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialPlayVideoRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialPlayVideoRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{106}
}

func (x *PlanesTrialPlayVideoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialPlayVideoRsp) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

type PlanesTrialInviteListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialInviteListReq) Reset() {
	*x = PlanesTrialInviteListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialInviteListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialInviteListReq) ProtoMessage() {}

func (x *PlanesTrialInviteListReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialInviteListReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialInviteListReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{107}
}

type PlanesTrialInviteListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamList []*PlanesTrialOutterTeamEntity `protobuf:"bytes,2,rep,name=teamList" json:"teamList,omitempty"`
	IsAccept *bool                          `protobuf:"varint,3,opt,name=isAccept" json:"isAccept,omitempty"`
}

func (x *PlanesTrialInviteListResp) Reset() {
	*x = PlanesTrialInviteListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialInviteListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialInviteListResp) ProtoMessage() {}

func (x *PlanesTrialInviteListResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialInviteListResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialInviteListResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{108}
}

func (x *PlanesTrialInviteListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialInviteListResp) GetTeamList() []*PlanesTrialOutterTeamEntity {
	if x != nil {
		return x.TeamList
	}
	return nil
}

func (x *PlanesTrialInviteListResp) GetIsAccept() bool {
	if x != nil && x.IsAccept != nil {
		return *x.IsAccept
	}
	return false
}

type PlanesTrialApplyJoinTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int32 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *PlanesTrialApplyJoinTeamReq) Reset() {
	*x = PlanesTrialApplyJoinTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialApplyJoinTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialApplyJoinTeamReq) ProtoMessage() {}

func (x *PlanesTrialApplyJoinTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialApplyJoinTeamReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialApplyJoinTeamReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{109}
}

func (x *PlanesTrialApplyJoinTeamReq) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type PlanesTrialApplyJoinTeamRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TeamInfo *PlanesTrialInnerTeamEntity `protobuf:"bytes,2,opt,name=teamInfo" json:"teamInfo,omitempty"`
}

func (x *PlanesTrialApplyJoinTeamRsp) Reset() {
	*x = PlanesTrialApplyJoinTeamRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialApplyJoinTeamRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialApplyJoinTeamRsp) ProtoMessage() {}

func (x *PlanesTrialApplyJoinTeamRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialApplyJoinTeamRsp.ProtoReflect.Descriptor instead.
func (*PlanesTrialApplyJoinTeamRsp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{110}
}

func (x *PlanesTrialApplyJoinTeamRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialApplyJoinTeamRsp) GetTeamInfo() *PlanesTrialInnerTeamEntity {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

type PlanesTrialInviteRefuseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialInviteRefuseReq) Reset() {
	*x = PlanesTrialInviteRefuseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialInviteRefuseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialInviteRefuseReq) ProtoMessage() {}

func (x *PlanesTrialInviteRefuseReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialInviteRefuseReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialInviteRefuseReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{111}
}

type PlanesTrialInviteRefuseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialInviteRefuseResp) Reset() {
	*x = PlanesTrialInviteRefuseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialInviteRefuseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialInviteRefuseResp) ProtoMessage() {}

func (x *PlanesTrialInviteRefuseResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialInviteRefuseResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialInviteRefuseResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{112}
}

func (x *PlanesTrialInviteRefuseResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialSetAppointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAcceptAppoint *bool `protobuf:"varint,1,req,name=isAcceptAppoint" json:"isAcceptAppoint,omitempty"`
}

func (x *PlanesTrialSetAppointReq) Reset() {
	*x = PlanesTrialSetAppointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSetAppointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSetAppointReq) ProtoMessage() {}

func (x *PlanesTrialSetAppointReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSetAppointReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialSetAppointReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{113}
}

func (x *PlanesTrialSetAppointReq) GetIsAcceptAppoint() bool {
	if x != nil && x.IsAcceptAppoint != nil {
		return *x.IsAcceptAppoint
	}
	return false
}

type PlanesTrialSetAppointResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialSetAppointResp) Reset() {
	*x = PlanesTrialSetAppointResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSetAppointResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSetAppointResp) ProtoMessage() {}

func (x *PlanesTrialSetAppointResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSetAppointResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialSetAppointResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{114}
}

func (x *PlanesTrialSetAppointResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialRedPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteRedPoint *bool `protobuf:"varint,1,opt,name=inviteRedPoint" json:"inviteRedPoint,omitempty"`
	RewardPoint    *bool `protobuf:"varint,2,opt,name=rewardPoint" json:"rewardPoint,omitempty"`
}

func (x *PlanesTrialRedPointReq) Reset() {
	*x = PlanesTrialRedPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialRedPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialRedPointReq) ProtoMessage() {}

func (x *PlanesTrialRedPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialRedPointReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialRedPointReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{115}
}

func (x *PlanesTrialRedPointReq) GetInviteRedPoint() bool {
	if x != nil && x.InviteRedPoint != nil {
		return *x.InviteRedPoint
	}
	return false
}

func (x *PlanesTrialRedPointReq) GetRewardPoint() bool {
	if x != nil && x.RewardPoint != nil {
		return *x.RewardPoint
	}
	return false
}

type PlanesTrialUpdateGodBodyLockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeparationIdx *int32 `protobuf:"varint,1,req,name=separationIdx" json:"separationIdx,omitempty"`
	TrailType     *int32 `protobuf:"varint,2,req,name=trailType" json:"trailType,omitempty"`
}

func (x *PlanesTrialUpdateGodBodyLockReq) Reset() {
	*x = PlanesTrialUpdateGodBodyLockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialUpdateGodBodyLockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialUpdateGodBodyLockReq) ProtoMessage() {}

func (x *PlanesTrialUpdateGodBodyLockReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialUpdateGodBodyLockReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialUpdateGodBodyLockReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{116}
}

func (x *PlanesTrialUpdateGodBodyLockReq) GetSeparationIdx() int32 {
	if x != nil && x.SeparationIdx != nil {
		return *x.SeparationIdx
	}
	return 0
}

func (x *PlanesTrialUpdateGodBodyLockReq) GetTrailType() int32 {
	if x != nil && x.TrailType != nil {
		return *x.TrailType
	}
	return 0
}

type PlanesTrialUpdateGodBodyLockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialUpdateGodBodyLockResp) Reset() {
	*x = PlanesTrialUpdateGodBodyLockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialUpdateGodBodyLockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialUpdateGodBodyLockResp) ProtoMessage() {}

func (x *PlanesTrialUpdateGodBodyLockResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialUpdateGodBodyLockResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialUpdateGodBodyLockResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{117}
}

func (x *PlanesTrialUpdateGodBodyLockResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialHeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialHeartbeatReq) Reset() {
	*x = PlanesTrialHeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialHeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialHeartbeatReq) ProtoMessage() {}

func (x *PlanesTrialHeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialHeartbeatReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialHeartbeatReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{118}
}

type PlanesTrialHeartbeatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialHeartbeatResp) Reset() {
	*x = PlanesTrialHeartbeatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialHeartbeatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialHeartbeatResp) ProtoMessage() {}

func (x *PlanesTrialHeartbeatResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialHeartbeatResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialHeartbeatResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{119}
}

func (x *PlanesTrialHeartbeatResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialGetSelectRewardDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialType *int32 `protobuf:"varint,1,req,name=trialType" json:"trialType,omitempty"`
}

func (x *PlanesTrialGetSelectRewardDetailReq) Reset() {
	*x = PlanesTrialGetSelectRewardDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetSelectRewardDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetSelectRewardDetailReq) ProtoMessage() {}

func (x *PlanesTrialGetSelectRewardDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetSelectRewardDetailReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetSelectRewardDetailReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{120}
}

func (x *PlanesTrialGetSelectRewardDetailReq) GetTrialType() int32 {
	if x != nil && x.TrialType != nil {
		return *x.TrialType
	}
	return 0
}

type PlanesTrialGetSelectRewardDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnlockSystem *string                       `protobuf:"bytes,2,opt,name=unlockSystem" json:"unlockSystem,omitempty"`
	SelectReward []*PlanesTrialSelectRewardMsg `protobuf:"bytes,3,rep,name=selectReward" json:"selectReward,omitempty"`
	OpenDay      *int32                        `protobuf:"varint,4,opt,name=openDay" json:"openDay,omitempty"`
}

func (x *PlanesTrialGetSelectRewardDetailResp) Reset() {
	*x = PlanesTrialGetSelectRewardDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetSelectRewardDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetSelectRewardDetailResp) ProtoMessage() {}

func (x *PlanesTrialGetSelectRewardDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetSelectRewardDetailResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetSelectRewardDetailResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{121}
}

func (x *PlanesTrialGetSelectRewardDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetSelectRewardDetailResp) GetUnlockSystem() string {
	if x != nil && x.UnlockSystem != nil {
		return *x.UnlockSystem
	}
	return ""
}

func (x *PlanesTrialGetSelectRewardDetailResp) GetSelectReward() []*PlanesTrialSelectRewardMsg {
	if x != nil {
		return x.SelectReward
	}
	return nil
}

func (x *PlanesTrialGetSelectRewardDetailResp) GetOpenDay() int32 {
	if x != nil && x.OpenDay != nil {
		return *x.OpenDay
	}
	return 0
}

type PlanesTrialSelectRewardMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId     *int32 `protobuf:"varint,1,opt,name=stageId" json:"stageId,omitempty"`
	GridIndex   *int32 `protobuf:"varint,2,opt,name=gridIndex" json:"gridIndex,omitempty"`
	RewardIndex *int32 `protobuf:"varint,3,opt,name=rewardIndex" json:"rewardIndex,omitempty"`
}

func (x *PlanesTrialSelectRewardMsg) Reset() {
	*x = PlanesTrialSelectRewardMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSelectRewardMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSelectRewardMsg) ProtoMessage() {}

func (x *PlanesTrialSelectRewardMsg) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSelectRewardMsg.ProtoReflect.Descriptor instead.
func (*PlanesTrialSelectRewardMsg) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{122}
}

func (x *PlanesTrialSelectRewardMsg) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *PlanesTrialSelectRewardMsg) GetGridIndex() int32 {
	if x != nil && x.GridIndex != nil {
		return *x.GridIndex
	}
	return 0
}

func (x *PlanesTrialSelectRewardMsg) GetRewardIndex() int32 {
	if x != nil && x.RewardIndex != nil {
		return *x.RewardIndex
	}
	return 0
}

type PlanesTrialSelectRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectReward *PlanesTrialSelectRewardMsg `protobuf:"bytes,1,req,name=selectReward" json:"selectReward,omitempty"`
}

func (x *PlanesTrialSelectRewardReq) Reset() {
	*x = PlanesTrialSelectRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSelectRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSelectRewardReq) ProtoMessage() {}

func (x *PlanesTrialSelectRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSelectRewardReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialSelectRewardReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{123}
}

func (x *PlanesTrialSelectRewardReq) GetSelectReward() *PlanesTrialSelectRewardMsg {
	if x != nil {
		return x.SelectReward
	}
	return nil
}

type PlanesTrialSelectRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialSelectRewardResp) Reset() {
	*x = PlanesTrialSelectRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialSelectRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialSelectRewardResp) ProtoMessage() {}

func (x *PlanesTrialSelectRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialSelectRewardResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialSelectRewardResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{124}
}

func (x *PlanesTrialSelectRewardResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type PlanesTrialGetGrandPrizeInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanesTrialGetGrandPrizeInfoReq) Reset() {
	*x = PlanesTrialGetGrandPrizeInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetGrandPrizeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetGrandPrizeInfoReq) ProtoMessage() {}

func (x *PlanesTrialGetGrandPrizeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetGrandPrizeInfoReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetGrandPrizeInfoReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{125}
}

type PlanesTrialGetGrandPrizeInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RewardData []*PlanesTrialGrandPrizeData `protobuf:"bytes,2,rep,name=rewardData" json:"rewardData,omitempty"`
}

func (x *PlanesTrialGetGrandPrizeInfoResp) Reset() {
	*x = PlanesTrialGetGrandPrizeInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGetGrandPrizeInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGetGrandPrizeInfoResp) ProtoMessage() {}

func (x *PlanesTrialGetGrandPrizeInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGetGrandPrizeInfoResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialGetGrandPrizeInfoResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{126}
}

func (x *PlanesTrialGetGrandPrizeInfoResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialGetGrandPrizeInfoResp) GetRewardData() []*PlanesTrialGrandPrizeData {
	if x != nil {
		return x.RewardData
	}
	return nil
}

type PlanesTrialGrandPrizeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxIndex    *int32 `protobuf:"varint,1,opt,name=boxIndex" json:"boxIndex,omitempty"`
	RewardIndex *int32 `protobuf:"varint,2,opt,name=rewardIndex" json:"rewardIndex,omitempty"`
}

func (x *PlanesTrialGrandPrizeData) Reset() {
	*x = PlanesTrialGrandPrizeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialGrandPrizeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialGrandPrizeData) ProtoMessage() {}

func (x *PlanesTrialGrandPrizeData) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialGrandPrizeData.ProtoReflect.Descriptor instead.
func (*PlanesTrialGrandPrizeData) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{127}
}

func (x *PlanesTrialGrandPrizeData) GetBoxIndex() int32 {
	if x != nil && x.BoxIndex != nil {
		return *x.BoxIndex
	}
	return 0
}

func (x *PlanesTrialGrandPrizeData) GetRewardIndex() int32 {
	if x != nil && x.RewardIndex != nil {
		return *x.RewardIndex
	}
	return 0
}

type PlanesTrialReceiveGrandPrizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxIndex *int32 `protobuf:"varint,1,req,name=boxIndex" json:"boxIndex,omitempty"`
}

func (x *PlanesTrialReceiveGrandPrizeReq) Reset() {
	*x = PlanesTrialReceiveGrandPrizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialReceiveGrandPrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialReceiveGrandPrizeReq) ProtoMessage() {}

func (x *PlanesTrialReceiveGrandPrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialReceiveGrandPrizeReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialReceiveGrandPrizeReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{128}
}

func (x *PlanesTrialReceiveGrandPrizeReq) GetBoxIndex() int32 {
	if x != nil && x.BoxIndex != nil {
		return *x.BoxIndex
	}
	return 0
}

type PlanesTrialReceiveGrandPrizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RewardData *PlanesTrialGrandPrizeData `protobuf:"bytes,2,opt,name=rewardData" json:"rewardData,omitempty"`
}

func (x *PlanesTrialReceiveGrandPrizeResp) Reset() {
	*x = PlanesTrialReceiveGrandPrizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialReceiveGrandPrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialReceiveGrandPrizeResp) ProtoMessage() {}

func (x *PlanesTrialReceiveGrandPrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialReceiveGrandPrizeResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialReceiveGrandPrizeResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{129}
}

func (x *PlanesTrialReceiveGrandPrizeResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlanesTrialReceiveGrandPrizeResp) GetRewardData() *PlanesTrialGrandPrizeData {
	if x != nil {
		return x.RewardData
	}
	return nil
}

type PlanesTrialCloseSettleScreenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *int64 `protobuf:"varint,1,req,name=teamId" json:"teamId,omitempty"`
}

func (x *PlanesTrialCloseSettleScreenReq) Reset() {
	*x = PlanesTrialCloseSettleScreenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialCloseSettleScreenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialCloseSettleScreenReq) ProtoMessage() {}

func (x *PlanesTrialCloseSettleScreenReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialCloseSettleScreenReq.ProtoReflect.Descriptor instead.
func (*PlanesTrialCloseSettleScreenReq) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{130}
}

func (x *PlanesTrialCloseSettleScreenReq) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type PlanesTrialCloseSettleScreenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *PlanesTrialCloseSettleScreenResp) Reset() {
	*x = PlanesTrialCloseSettleScreenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlanesTrial_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanesTrialCloseSettleScreenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanesTrialCloseSettleScreenResp) ProtoMessage() {}

func (x *PlanesTrialCloseSettleScreenResp) ProtoReflect() protoreflect.Message {
	mi := &file_PlanesTrial_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanesTrialCloseSettleScreenResp.ProtoReflect.Descriptor instead.
func (*PlanesTrialCloseSettleScreenResp) Descriptor() ([]byte, []int) {
	return file_PlanesTrial_proto_rawDescGZIP(), []int{131}
}

func (x *PlanesTrialCloseSettleScreenResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

var File_PlanesTrial_proto protoreflect.FileDescriptor

var file_PlanesTrial_proto_rawDesc = []byte{
	0x0a, 0x11, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x22, 0xe0, 0x05, 0x0a, 0x13,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x5b, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x10,
	0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75,
	0x66, 0x66, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0d, 0x67, 0x6f, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x67, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x61,
	0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x23,
	0x0a, 0x21, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x10,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x18, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x53, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x7c, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a,
	0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x22, 0x27, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x24, 0x0a, 0x22,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x22, 0x74, 0x0a, 0x22, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x22, 0x77, 0x0a, 0x17, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x83, 0x01,
	0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x1d, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0xdb, 0x03, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0xaa, 0x03, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x68,
	0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xc8, 0x01,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x79, 0x4d, 0x61,
	0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x78, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4a,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x19, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x7a, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4b,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x19, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0x7a, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x4b, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x37, 0x0a, 0x1d,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x20, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x22, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x22, 0x82, 0x01, 0x0a, 0x22, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x22, 0x2a, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x51,
	0x75, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x19,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2e,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x7d,
	0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x03,
	0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x16,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x1d,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x62, 0x75, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x2f, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x2d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x22, 0x2e, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x2c, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22, 0x83, 0x01, 0x0a,
	0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x22, 0x2d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x52, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x22, 0x2c, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x6b, 0x69, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22,
	0x37, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x30, 0x0a, 0x18, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2c, 0x0a,
	0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x55, 0x0a, 0x19, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x78, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75,
	0x66, 0x66, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6d, 0x61,
	0x72, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x1f,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x22, 0x21, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x61,
	0x72, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x47, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1d, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x22, 0x76, 0x0a,
	0x1d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x43, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x75, 0x66,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb6, 0x02, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e,
	0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65,
	0x65, 0x64, 0x41, 0x6c, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x79, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x79, 0x4d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x62, 0x0a, 0x1c, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6f, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x1e, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x22, 0x6f, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3a, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x7f, 0x0a,
	0x1c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x4d, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x33,
	0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73,
	0x73, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x62,
	0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x36, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22,
	0x44, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1b, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x22, 0xbb, 0x02, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64,
	0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e,
	0x65, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x71, 0x22, 0x62,
	0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x42,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x52, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x34, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x82, 0x01,
	0x0a, 0x23, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x22, 0xd2,
	0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x21, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3e, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x96, 0x01, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x50, 0x6f,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x22, 0x68, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x44, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x16,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x02, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x02, 0x0a,
	0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x17, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc7,
	0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x09,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x17, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x4b, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x35, 0x0a, 0x1b, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0x7b, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x22, 0x2f, 0x0a, 0x1b,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x44, 0x0a,
	0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x22, 0x62, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a,
	0x20, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x22, 0x2c,
	0x0a, 0x18, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x43, 0x0a, 0x23,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xca, 0x01, 0x0a, 0x24, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x52, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x22, 0x76,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x69, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x69, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x70, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22, 0x83, 0x01, 0x0a,
	0x20, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x59, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3d, 0x0a,
	0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x83, 0x01, 0x0a,
	0x20, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x39, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x20, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71,
	0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_PlanesTrial_proto_rawDescOnce sync.Once
	file_PlanesTrial_proto_rawDescData = file_PlanesTrial_proto_rawDesc
)

func file_PlanesTrial_proto_rawDescGZIP() []byte {
	file_PlanesTrial_proto_rawDescOnce.Do(func() {
		file_PlanesTrial_proto_rawDescData = protoimpl.X.CompressGZIP(file_PlanesTrial_proto_rawDescData)
	})
	return file_PlanesTrial_proto_rawDescData
}

var file_PlanesTrial_proto_msgTypes = make([]protoimpl.MessageInfo, 132)
var file_PlanesTrial_proto_goTypes = []any{
	(*EnterPlanesTrialReq)(nil),                  // 0: com.yq.msg.CityMsg.EnterPlanesTrialReq
	(*EnterPlanesTrialRsp)(nil),                  // 1: com.yq.msg.CityMsg.EnterPlanesTrialRsp
	(*GetPlanesTrialTrialMemberCountReq)(nil),    // 2: com.yq.msg.CityMsg.getPlanesTrialTrialMemberCountReq
	(*GetPlanesTrialTrialMemberCountResp)(nil),   // 3: com.yq.msg.CityMsg.getPlanesTrialTrialMemberCountResp
	(*PlayerRestrainInfoMsgReq)(nil),             // 4: com.yq.msg.CityMsg.PlayerRestrainInfoMsgReq
	(*PlayerRestrainInfoMsgResp)(nil),            // 5: com.yq.msg.CityMsg.PlayerRestrainInfoMsgResp
	(*PlanesTrialTrialMemberCount)(nil),          // 6: com.yq.msg.CityMsg.PlanesTrialTrialMemberCount
	(*LeavePlanesTrialReq)(nil),                  // 7: com.yq.msg.CityMsg.LeavePlanesTrialReq
	(*LeavePlanesTrialRsp)(nil),                  // 8: com.yq.msg.CityMsg.LeavePlanesTrialRsp
	(*PlanesTrialGetAchievementRewardReq)(nil),   // 9: com.yq.msg.CityMsg.PlanesTrialGetAchievementRewardReq
	(*PlanesTrialGetAchievementRewardRsp)(nil),   // 10: com.yq.msg.CityMsg.PlanesTrialGetAchievementRewardRsp
	(*PlanesTrialGodBodyChangeInfo)(nil),         // 11: com.yq.msg.CityMsg.PlanesTrialGodBodyChangeInfo
	(*EnterPlanesTrialTeamReq)(nil),              // 12: com.yq.msg.CityMsg.EnterPlanesTrialTeamReq
	(*EnterPlanesTrialTeamRsp)(nil),              // 13: com.yq.msg.CityMsg.EnterPlanesTrialTeamRsp
	(*PlanesTrialTeamStartReq)(nil),              // 14: com.yq.msg.CityMsg.PlanesTrialTeamStartReq
	(*PlanesTrialTeamStartRsp)(nil),              // 15: com.yq.msg.CityMsg.PlanesTrialTeamStartRsp
	(*PlanesTrialOutterTeamEntity)(nil),          // 16: com.yq.msg.CityMsg.PlanesTrialOutterTeamEntity
	(*PlanesTrialOutterMemberEntity)(nil),        // 17: com.yq.msg.CityMsg.PlanesTrialOutterMemberEntity
	(*PlanesTrialInnerTeamEntity)(nil),           // 18: com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity
	(*PlanesTrialMemberEntity)(nil),              // 19: com.yq.msg.CityMsg.PlanesTrialMemberEntity
	(*PlanesTrialApplyUserEntity)(nil),           // 20: com.yq.msg.CityMsg.PlanesTrialApplyUserEntity
	(*PlanesTrialCreateTeamReq)(nil),             // 21: com.yq.msg.CityMsg.PlanesTrialCreateTeamReq
	(*PlanesTrialCreateTeamRsp)(nil),             // 22: com.yq.msg.CityMsg.PlanesTrialCreateTeamRsp
	(*PlanesTrialGetTeamListReq)(nil),            // 23: com.yq.msg.CityMsg.PlanesTrialGetTeamListReq
	(*PlanesTrialGetTeamListRsp)(nil),            // 24: com.yq.msg.CityMsg.PlanesTrialGetTeamListRsp
	(*PlanesTrialGetTeamInfoReq)(nil),            // 25: com.yq.msg.CityMsg.PlanesTrialGetTeamInfoReq
	(*PlanesTrialGetTeamInfoRsp)(nil),            // 26: com.yq.msg.CityMsg.PlanesTrialGetTeamInfoRsp
	(*PlanesTrialCancelTeamApplyReq)(nil),        // 27: com.yq.msg.CityMsg.PlanesTrialCancelTeamApplyReq
	(*PlanesTrialCancelTeamApplyRsp)(nil),        // 28: com.yq.msg.CityMsg.PlanesTrialCancelTeamApplyRsp
	(*PlanesTrialApplyJoinTeamAgreeReq)(nil),     // 29: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamAgreeReq
	(*PlanesTrialApplyJoinTeamAgreeRsp)(nil),     // 30: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamAgreeRsp
	(*PlanesTrialApplyJoinTeamRefusedReq)(nil),   // 31: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamRefusedReq
	(*PlanesTrialApplyJoinTeamRefusedRsp)(nil),   // 32: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamRefusedRsp
	(*PlanesTrialQuitTeamReq)(nil),               // 33: com.yq.msg.CityMsg.PlanesTrialQuitTeamReq
	(*PlanesTrialQuitTeamRsp)(nil),               // 34: com.yq.msg.CityMsg.PlanesTrialQuitTeamRsp
	(*PlanesTrialKickOutTeamReq)(nil),            // 35: com.yq.msg.CityMsg.PlanesTrialKickOutTeamReq
	(*PlanesTrialKickOutTeamRsp)(nil),            // 36: com.yq.msg.CityMsg.PlanesTrialKickOutTeamRsp
	(*PlanesTrialChangeLeaderReq)(nil),           // 37: com.yq.msg.CityMsg.PlanesTrialChangeLeaderReq
	(*PlanesTrialChangeLeaderRsp)(nil),           // 38: com.yq.msg.CityMsg.PlanesTrialChangeLeaderRsp
	(*PlanesTrialTeamLeaderNotify)(nil),          // 39: com.yq.msg.CityMsg.PlanesTrialTeamLeaderNotify
	(*PlanesTrialTeamMemberNotify)(nil),          // 40: com.yq.msg.CityMsg.PlanesTrialTeamMemberNotify
	(*PlanesTrialSelectSkillDataMsg)(nil),        // 41: com.yq.msg.CityMsg.PlanesTrialSelectSkillDataMsg
	(*PlanesTrialTeamPrepareReq)(nil),            // 42: com.yq.msg.CityMsg.PlanesTrialTeamPrepareReq
	(*PlanesTrialTeamPrepareRsp)(nil),            // 43: com.yq.msg.CityMsg.PlanesTrialTeamPrepareRsp
	(*PlanesTrialStartMatchReq)(nil),             // 44: com.yq.msg.CityMsg.PlanesTrialStartMatchReq
	(*PlanesTrialStartMatchRsp)(nil),             // 45: com.yq.msg.CityMsg.PlanesTrialStartMatchRsp
	(*PlanesTrialMatchMemberReq)(nil),            // 46: com.yq.msg.CityMsg.PlanesTrialMatchMemberReq
	(*PlanesTrialMatchMemberRsp)(nil),            // 47: com.yq.msg.CityMsg.PlanesTrialMatchMemberRsp
	(*PlanesTrialMatchResultMsg)(nil),            // 48: com.yq.msg.CityMsg.PlanesTrialMatchResultMsg
	(*PlanesTrialStartBattleReq)(nil),            // 49: com.yq.msg.CityMsg.PlanesTrialStartBattleReq
	(*PlanesTrialStartBattleRsp)(nil),            // 50: com.yq.msg.CityMsg.PlanesTrialStartBattleRsp
	(*PlanesTrialInviteReq)(nil),                 // 51: com.yq.msg.CityMsg.PlanesTrialInviteReq
	(*PlanesTrialInviteRsp)(nil),                 // 52: com.yq.msg.CityMsg.PlanesTrialInviteRsp
	(*PlanesTrialSkipBattleReq)(nil),             // 53: com.yq.msg.CityMsg.PlanesTrialSkipBattleReq
	(*PlanesTrialSkipBattleRsp)(nil),             // 54: com.yq.msg.CityMsg.PlanesTrialSkipBattleRsp
	(*PlanesTrialStartSelectBuffReq)(nil),        // 55: com.yq.msg.CityMsg.PlanesTrialStartSelectBuffReq
	(*PlanesTrialStartSelectBuffRsp)(nil),        // 56: com.yq.msg.CityMsg.PlanesTrialStartSelectBuffRsp
	(*PlanesTrialSelectBuffReq)(nil),             // 57: com.yq.msg.CityMsg.PlanesTrialSelectBuffReq
	(*PlanesTrialSelectBuffRsp)(nil),             // 58: com.yq.msg.CityMsg.PlanesTrialSelectBuffRsp
	(*PlanesTrialBuffPreference)(nil),            // 59: com.yq.msg.CityMsg.PlanesTrialBuffPreference
	(*PlanesTrialSetBuffPreferenceReq)(nil),      // 60: com.yq.msg.CityMsg.PlanesTrialSetBuffPreferenceReq
	(*PlanesTrialSetBuffPreferenceRsp)(nil),      // 61: com.yq.msg.CityMsg.PlanesTrialSetBuffPreferenceRsp
	(*PlanesTrialGetBuffPreferenceReq)(nil),      // 62: com.yq.msg.CityMsg.PlanesTrialGetBuffPreferenceReq
	(*PlanesTrialGetBuffPreferenceRsp)(nil),      // 63: com.yq.msg.CityMsg.PlanesTrialGetBuffPreferenceRsp
	(*PlanesTrialBuffInfo)(nil),                  // 64: com.yq.msg.CityMsg.PlanesTrialBuffInfo
	(*PlanesTrialGetSelectedBuffReq)(nil),        // 65: com.yq.msg.CityMsg.PlanesTrialGetSelectedBuffReq
	(*PlanesTrialGetSelectedBuffRsp)(nil),        // 66: com.yq.msg.CityMsg.PlanesTrialGetSelectedBuffRsp
	(*PlanesTrialRankTeamEntity)(nil),            // 67: com.yq.msg.CityMsg.PlanesTrialRankTeamEntity
	(*PlanesTrialRankGetReq)(nil),                // 68: com.yq.msg.CityMsg.PlanesTrialRankGetReq
	(*PlanesTrialRankGetResp)(nil),               // 69: com.yq.msg.CityMsg.PlanesTrialRankGetResp
	(*PlanesTrialRankTeamList)(nil),              // 70: com.yq.msg.CityMsg.PlanesTrialRankTeamList
	(*PlanesTrialUpdateLockDataReq)(nil),         // 71: com.yq.msg.CityMsg.PlanesTrialUpdateLockDataReq
	(*PlanesTrialUpdateLockDataResp)(nil),        // 72: com.yq.msg.CityMsg.PlanesTrialUpdateLockDataResp
	(*PlanesTrialGetGodBodyDataReq)(nil),         // 73: com.yq.msg.CityMsg.PlanesTrialGetGodBodyDataReq
	(*PlanesTrialGetGodBodyDataResp)(nil),        // 74: com.yq.msg.CityMsg.PlanesTrialGetGodBodyDataResp
	(*PlanesTrialGetBattleVideoReq)(nil),         // 75: com.yq.msg.CityMsg.PlanesTrialGetBattleVideoReq
	(*PlanesTrialGetBattleVideoRsp)(nil),         // 76: com.yq.msg.CityMsg.PlanesTrialGetBattleVideoRsp
	(*PlanesTrialGetBossInfoReq)(nil),            // 77: com.yq.msg.CityMsg.PlanesTrialGetBossInfoReq
	(*PlanesTrialGetBossInfoRsp)(nil),            // 78: com.yq.msg.CityMsg.PlanesTrialGetBossInfoRsp
	(*PlanesTrialGetBossPowerReq)(nil),           // 79: com.yq.msg.CityMsg.PlanesTrialGetBossPowerReq
	(*PlanesTrialGetBossPowerRsp)(nil),           // 80: com.yq.msg.CityMsg.PlanesTrialGetBossPowerRsp
	(*PlanesTrialGetPlayerInfoReq)(nil),          // 81: com.yq.msg.CityMsg.PlanesTrialGetPlayerInfoReq
	(*PlanesTrialGetPlayerInfoRsp)(nil),          // 82: com.yq.msg.CityMsg.PlanesTrialGetPlayerInfoRsp
	(*PlanesTrialEnterBattleReq)(nil),            // 83: com.yq.msg.CityMsg.PlanesTrialEnterBattleReq
	(*PlanesTrialEnterBattleResp)(nil),           // 84: com.yq.msg.CityMsg.PlanesTrialEnterBattleResp
	(*PlanesTrialEnterBattleNotify)(nil),         // 85: com.yq.msg.CityMsg.PlanesTrialEnterBattleNotify
	(*PlanesTrialEnterBattleData)(nil),           // 86: com.yq.msg.CityMsg.PlanesTrialEnterBattleData
	(*PlanesTrialEnterSwitchSeparationReq)(nil),  // 87: com.yq.msg.CityMsg.PlanesTrialEnterSwitchSeparationReq
	(*PlanesTrialEnterSwitchSeparationRsp)(nil),  // 88: com.yq.msg.CityMsg.PlanesTrialEnterSwitchSeparationRsp
	(*PlanesTrialSeparationSimpleData)(nil),      // 89: com.yq.msg.CityMsg.PlanesTrialSeparationSimpleData
	(*PlanesTrialSwitchSeparationReq)(nil),       // 90: com.yq.msg.CityMsg.PlanesTrialSwitchSeparationReq
	(*PlanesTrialSwitchSeparationRsp)(nil),       // 91: com.yq.msg.CityMsg.PlanesTrialSwitchSeparationRsp
	(*PlanesTrialSwitchSeparationNotify)(nil),    // 92: com.yq.msg.CityMsg.PlanesTrialSwitchSeparationNotify
	(*PlanesTrialSeparationDetailReq)(nil),       // 93: com.yq.msg.CityMsg.PlanesTrialSeparationDetailReq
	(*PlanesTrialSeparationDetailRsp)(nil),       // 94: com.yq.msg.CityMsg.PlanesTrialSeparationDetailRsp
	(*PlanesTrialChangePosReq)(nil),              // 95: com.yq.msg.CityMsg.PlanesTrialChangePosReq
	(*PlanesTrialChangePosRsp)(nil),              // 96: com.yq.msg.CityMsg.PlanesTrialChangePosRsp
	(*PlanesTrialChangePosNotify)(nil),           // 97: com.yq.msg.CityMsg.PlanesTrialChangePosNotify
	(*PlanesTrialChangePosData)(nil),             // 98: com.yq.msg.CityMsg.PlanesTrialChangePosData
	(*PlanesTrialDoBattleReq)(nil),               // 99: com.yq.msg.CityMsg.PlanesTrialDoBattleReq
	(*PlanesTrialDoBattleRsp)(nil),               // 100: com.yq.msg.CityMsg.PlanesTrialDoBattleRsp
	(*PlanesTrialDoBattleNotify)(nil),            // 101: com.yq.msg.CityMsg.PlanesTrialDoBattleNotify
	(*PlanesTrialVideoPlayerInfo)(nil),           // 102: com.yq.msg.CityMsg.PlanesTrialVideoPlayerInfo
	(*PlanesTrialVideoInfoReq)(nil),              // 103: com.yq.msg.CityMsg.PlanesTrialVideoInfoReq
	(*PlanesTrialVideoInfoRsp)(nil),              // 104: com.yq.msg.CityMsg.PlanesTrialVideoInfoRsp
	(*PlanesTrialPlayVideoReq)(nil),              // 105: com.yq.msg.CityMsg.PlanesTrialPlayVideoReq
	(*PlanesTrialPlayVideoRsp)(nil),              // 106: com.yq.msg.CityMsg.PlanesTrialPlayVideoRsp
	(*PlanesTrialInviteListReq)(nil),             // 107: com.yq.msg.CityMsg.PlanesTrialInviteListReq
	(*PlanesTrialInviteListResp)(nil),            // 108: com.yq.msg.CityMsg.PlanesTrialInviteListResp
	(*PlanesTrialApplyJoinTeamReq)(nil),          // 109: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamReq
	(*PlanesTrialApplyJoinTeamRsp)(nil),          // 110: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamRsp
	(*PlanesTrialInviteRefuseReq)(nil),           // 111: com.yq.msg.CityMsg.PlanesTrialInviteRefuseReq
	(*PlanesTrialInviteRefuseResp)(nil),          // 112: com.yq.msg.CityMsg.PlanesTrialInviteRefuseResp
	(*PlanesTrialSetAppointReq)(nil),             // 113: com.yq.msg.CityMsg.PlanesTrialSetAppointReq
	(*PlanesTrialSetAppointResp)(nil),            // 114: com.yq.msg.CityMsg.PlanesTrialSetAppointResp
	(*PlanesTrialRedPointReq)(nil),               // 115: com.yq.msg.CityMsg.PlanesTrialRedPointReq
	(*PlanesTrialUpdateGodBodyLockReq)(nil),      // 116: com.yq.msg.CityMsg.PlanesTrialUpdateGodBodyLockReq
	(*PlanesTrialUpdateGodBodyLockResp)(nil),     // 117: com.yq.msg.CityMsg.PlanesTrialUpdateGodBodyLockResp
	(*PlanesTrialHeartbeatReq)(nil),              // 118: com.yq.msg.CityMsg.PlanesTrialHeartbeatReq
	(*PlanesTrialHeartbeatResp)(nil),             // 119: com.yq.msg.CityMsg.PlanesTrialHeartbeatResp
	(*PlanesTrialGetSelectRewardDetailReq)(nil),  // 120: com.yq.msg.CityMsg.PlanesTrialGetSelectRewardDetailReq
	(*PlanesTrialGetSelectRewardDetailResp)(nil), // 121: com.yq.msg.CityMsg.PlanesTrialGetSelectRewardDetailResp
	(*PlanesTrialSelectRewardMsg)(nil),           // 122: com.yq.msg.CityMsg.PlanesTrialSelectRewardMsg
	(*PlanesTrialSelectRewardReq)(nil),           // 123: com.yq.msg.CityMsg.PlanesTrialSelectRewardReq
	(*PlanesTrialSelectRewardResp)(nil),          // 124: com.yq.msg.CityMsg.PlanesTrialSelectRewardResp
	(*PlanesTrialGetGrandPrizeInfoReq)(nil),      // 125: com.yq.msg.CityMsg.PlanesTrialGetGrandPrizeInfoReq
	(*PlanesTrialGetGrandPrizeInfoResp)(nil),     // 126: com.yq.msg.CityMsg.PlanesTrialGetGrandPrizeInfoResp
	(*PlanesTrialGrandPrizeData)(nil),            // 127: com.yq.msg.CityMsg.PlanesTrialGrandPrizeData
	(*PlanesTrialReceiveGrandPrizeReq)(nil),      // 128: com.yq.msg.CityMsg.PlanesTrialReceiveGrandPrizeReq
	(*PlanesTrialReceiveGrandPrizeResp)(nil),     // 129: com.yq.msg.CityMsg.PlanesTrialReceiveGrandPrizeResp
	(*PlanesTrialCloseSettleScreenReq)(nil),      // 130: com.yq.msg.CityMsg.PlanesTrialCloseSettleScreenReq
	(*PlanesTrialCloseSettleScreenResp)(nil),     // 131: com.yq.msg.CityMsg.PlanesTrialCloseSettleScreenResp
	(*PlayerRestrainInfoMsg)(nil),                // 132: com.yq.msg.CityMsg.PlayerRestrainInfoMsg
	(*PlayerHeadAndNameMsg)(nil),                 // 133: com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	(*PlayerAppearanceDataMsg)(nil),              // 134: com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	(*PlayerCharacterImageMsg)(nil),              // 135: com.yq.msg.CityMsg.PlayerCharacterImageMsg
	(*GodBodyDetailDataMsg)(nil),                 // 136: com.yq.msg.CityMsg.GodBodyDetailDataMsg
	(*BattleRecordMsg)(nil),                      // 137: com.yq.msg.CityMsg.BattleRecordMsg
	(*PlayerDetailDataMsg)(nil),                  // 138: com.yq.msg.CityMsg.PlayerDetailDataMsg
	(*BattleMain)(nil),                           // 139: com.yq.msg.CityMsg.BattleMain
}
var file_PlanesTrial_proto_depIdxs = []int32{
	40,  // 0: com.yq.msg.CityMsg.EnterPlanesTrialRsp.teamMemberNotify:type_name -> com.yq.msg.CityMsg.PlanesTrialTeamMemberNotify
	11,  // 1: com.yq.msg.CityMsg.EnterPlanesTrialRsp.godBodyChange:type_name -> com.yq.msg.CityMsg.PlanesTrialGodBodyChangeInfo
	6,   // 2: com.yq.msg.CityMsg.getPlanesTrialTrialMemberCountResp.trialMemberCount:type_name -> com.yq.msg.CityMsg.PlanesTrialTrialMemberCount
	132, // 3: com.yq.msg.CityMsg.PlayerRestrainInfoMsgResp.restrainData:type_name -> com.yq.msg.CityMsg.PlayerRestrainInfoMsg
	18,  // 4: com.yq.msg.CityMsg.EnterPlanesTrialTeamRsp.teamInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity
	17,  // 5: com.yq.msg.CityMsg.PlanesTrialOutterTeamEntity.members:type_name -> com.yq.msg.CityMsg.PlanesTrialOutterMemberEntity
	133, // 6: com.yq.msg.CityMsg.PlanesTrialOutterMemberEntity.memberInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	19,  // 7: com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity.members:type_name -> com.yq.msg.CityMsg.PlanesTrialMemberEntity
	20,  // 8: com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity.applyList:type_name -> com.yq.msg.CityMsg.PlanesTrialApplyUserEntity
	134, // 9: com.yq.msg.CityMsg.PlanesTrialMemberEntity.memberInfo:type_name -> com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	133, // 10: com.yq.msg.CityMsg.PlanesTrialApplyUserEntity.playerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	18,  // 11: com.yq.msg.CityMsg.PlanesTrialCreateTeamRsp.teamInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity
	16,  // 12: com.yq.msg.CityMsg.PlanesTrialGetTeamListRsp.teamList:type_name -> com.yq.msg.CityMsg.PlanesTrialOutterTeamEntity
	16,  // 13: com.yq.msg.CityMsg.PlanesTrialGetTeamInfoRsp.teamInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialOutterTeamEntity
	18,  // 14: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamAgreeRsp.teamInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity
	18,  // 15: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamRefusedRsp.teamInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity
	20,  // 16: com.yq.msg.CityMsg.PlanesTrialTeamLeaderNotify.userData:type_name -> com.yq.msg.CityMsg.PlanesTrialApplyUserEntity
	18,  // 17: com.yq.msg.CityMsg.PlanesTrialTeamMemberNotify.teamInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity
	41,  // 18: com.yq.msg.CityMsg.PlanesTrialTeamMemberNotify.selectBuffData:type_name -> com.yq.msg.CityMsg.PlanesTrialSelectSkillDataMsg
	98,  // 19: com.yq.msg.CityMsg.PlanesTrialTeamMemberNotify.changePosData:type_name -> com.yq.msg.CityMsg.PlanesTrialChangePosData
	92,  // 20: com.yq.msg.CityMsg.PlanesTrialTeamMemberNotify.switchSeparationNotify:type_name -> com.yq.msg.CityMsg.PlanesTrialSwitchSeparationNotify
	59,  // 21: com.yq.msg.CityMsg.PlanesTrialSetBuffPreferenceReq.markPreference:type_name -> com.yq.msg.CityMsg.PlanesTrialBuffPreference
	59,  // 22: com.yq.msg.CityMsg.PlanesTrialGetBuffPreferenceRsp.markPreference:type_name -> com.yq.msg.CityMsg.PlanesTrialBuffPreference
	64,  // 23: com.yq.msg.CityMsg.PlanesTrialGetSelectedBuffRsp.buffInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialBuffInfo
	135, // 24: com.yq.msg.CityMsg.PlanesTrialRankTeamEntity.members:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	67,  // 25: com.yq.msg.CityMsg.PlanesTrialRankGetResp.curTeam:type_name -> com.yq.msg.CityMsg.PlanesTrialRankTeamEntity
	67,  // 26: com.yq.msg.CityMsg.PlanesTrialRankTeamList.curTeam:type_name -> com.yq.msg.CityMsg.PlanesTrialRankTeamEntity
	136, // 27: com.yq.msg.CityMsg.PlanesTrialUpdateLockDataResp.data:type_name -> com.yq.msg.CityMsg.GodBodyDetailDataMsg
	136, // 28: com.yq.msg.CityMsg.PlanesTrialGetGodBodyDataResp.data:type_name -> com.yq.msg.CityMsg.GodBodyDetailDataMsg
	137, // 29: com.yq.msg.CityMsg.PlanesTrialGetBattleVideoRsp.battleRecordMsg:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	138, // 30: com.yq.msg.CityMsg.PlanesTrialGetBossInfoRsp.bossInfo:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	138, // 31: com.yq.msg.CityMsg.PlanesTrialGetPlayerInfoRsp.playerInfo:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	86,  // 32: com.yq.msg.CityMsg.PlanesTrialEnterBattleResp.data:type_name -> com.yq.msg.CityMsg.PlanesTrialEnterBattleData
	41,  // 33: com.yq.msg.CityMsg.PlanesTrialEnterBattleResp.selectBuffData:type_name -> com.yq.msg.CityMsg.PlanesTrialSelectSkillDataMsg
	86,  // 34: com.yq.msg.CityMsg.PlanesTrialEnterBattleNotify.data:type_name -> com.yq.msg.CityMsg.PlanesTrialEnterBattleData
	139, // 35: com.yq.msg.CityMsg.PlanesTrialEnterBattleData.datas:type_name -> com.yq.msg.CityMsg.BattleMain
	89,  // 36: com.yq.msg.CityMsg.PlanesTrialEnterSwitchSeparationRsp.datas:type_name -> com.yq.msg.CityMsg.PlanesTrialSeparationSimpleData
	133, // 37: com.yq.msg.CityMsg.PlanesTrialSeparationSimpleData.data:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	139, // 38: com.yq.msg.CityMsg.PlanesTrialSwitchSeparationReq.battleMain:type_name -> com.yq.msg.CityMsg.BattleMain
	92,  // 39: com.yq.msg.CityMsg.PlanesTrialSwitchSeparationRsp.notify:type_name -> com.yq.msg.CityMsg.PlanesTrialSwitchSeparationNotify
	139, // 40: com.yq.msg.CityMsg.PlanesTrialSwitchSeparationNotify.battleMain:type_name -> com.yq.msg.CityMsg.BattleMain
	136, // 41: com.yq.msg.CityMsg.PlanesTrialSeparationDetailRsp.datas:type_name -> com.yq.msg.CityMsg.GodBodyDetailDataMsg
	98,  // 42: com.yq.msg.CityMsg.PlanesTrialChangePosNotify.datas:type_name -> com.yq.msg.CityMsg.PlanesTrialChangePosData
	101, // 43: com.yq.msg.CityMsg.PlanesTrialDoBattleRsp.notifyData:type_name -> com.yq.msg.CityMsg.PlanesTrialDoBattleNotify
	137, // 44: com.yq.msg.CityMsg.PlanesTrialDoBattleNotify.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	139, // 45: com.yq.msg.CityMsg.PlanesTrialDoBattleNotify.bossData:type_name -> com.yq.msg.CityMsg.BattleMain
	134, // 46: com.yq.msg.CityMsg.PlanesTrialVideoPlayerInfo.data:type_name -> com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	64,  // 47: com.yq.msg.CityMsg.PlanesTrialVideoPlayerInfo.buffList:type_name -> com.yq.msg.CityMsg.PlanesTrialBuffInfo
	102, // 48: com.yq.msg.CityMsg.PlanesTrialVideoInfoRsp.roundData:type_name -> com.yq.msg.CityMsg.PlanesTrialVideoPlayerInfo
	102, // 49: com.yq.msg.CityMsg.PlanesTrialVideoInfoRsp.powerData:type_name -> com.yq.msg.CityMsg.PlanesTrialVideoPlayerInfo
	137, // 50: com.yq.msg.CityMsg.PlanesTrialPlayVideoRsp.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	16,  // 51: com.yq.msg.CityMsg.PlanesTrialInviteListResp.teamList:type_name -> com.yq.msg.CityMsg.PlanesTrialOutterTeamEntity
	18,  // 52: com.yq.msg.CityMsg.PlanesTrialApplyJoinTeamRsp.teamInfo:type_name -> com.yq.msg.CityMsg.PlanesTrialInnerTeamEntity
	122, // 53: com.yq.msg.CityMsg.PlanesTrialGetSelectRewardDetailResp.selectReward:type_name -> com.yq.msg.CityMsg.PlanesTrialSelectRewardMsg
	122, // 54: com.yq.msg.CityMsg.PlanesTrialSelectRewardReq.selectReward:type_name -> com.yq.msg.CityMsg.PlanesTrialSelectRewardMsg
	127, // 55: com.yq.msg.CityMsg.PlanesTrialGetGrandPrizeInfoResp.rewardData:type_name -> com.yq.msg.CityMsg.PlanesTrialGrandPrizeData
	127, // 56: com.yq.msg.CityMsg.PlanesTrialReceiveGrandPrizeResp.rewardData:type_name -> com.yq.msg.CityMsg.PlanesTrialGrandPrizeData
	57,  // [57:57] is the sub-list for method output_type
	57,  // [57:57] is the sub-list for method input_type
	57,  // [57:57] is the sub-list for extension type_name
	57,  // [57:57] is the sub-list for extension extendee
	0,   // [0:57] is the sub-list for field type_name
}

func init() { file_PlanesTrial_proto_init() }
func file_PlanesTrial_proto_init() {
	if File_PlanesTrial_proto != nil {
		return
	}
	file_AskWay_proto_init()
	file_Battle_proto_init()
	file_WatchPlayer_proto_init()
	file_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_PlanesTrial_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EnterPlanesTrialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EnterPlanesTrialRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlanesTrialTrialMemberCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlanesTrialTrialMemberCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerRestrainInfoMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerRestrainInfoMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialTrialMemberCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*LeavePlanesTrialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*LeavePlanesTrialRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetAchievementRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetAchievementRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGodBodyChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*EnterPlanesTrialTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EnterPlanesTrialTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialTeamStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialTeamStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialOutterTeamEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialOutterMemberEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialInnerTeamEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialMemberEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialApplyUserEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialCreateTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialCreateTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetTeamListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetTeamListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetTeamInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetTeamInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialCancelTeamApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialCancelTeamApplyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialApplyJoinTeamAgreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialApplyJoinTeamAgreeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialApplyJoinTeamRefusedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialApplyJoinTeamRefusedRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialQuitTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialQuitTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialKickOutTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialKickOutTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialChangeLeaderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialChangeLeaderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialTeamLeaderNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialTeamMemberNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSelectSkillDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialTeamPrepareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialTeamPrepareRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialStartMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialStartMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialMatchMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialMatchMemberRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialMatchResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialStartBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialStartBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSkipBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSkipBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialStartSelectBuffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialStartSelectBuffRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSelectBuffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSelectBuffRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialBuffPreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSetBuffPreferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSetBuffPreferenceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBuffPreferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBuffPreferenceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetSelectedBuffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetSelectedBuffRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialRankTeamEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialRankGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialRankGetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialRankTeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialUpdateLockDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialUpdateLockDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetGodBodyDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetGodBodyDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBattleVideoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBattleVideoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBossInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBossInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBossPowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetBossPowerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetPlayerInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetPlayerInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialEnterBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialEnterBattleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialEnterBattleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialEnterBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialEnterSwitchSeparationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialEnterSwitchSeparationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSeparationSimpleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSwitchSeparationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSwitchSeparationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSwitchSeparationNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSeparationDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSeparationDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialChangePosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialChangePosRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialChangePosNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialChangePosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialDoBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialDoBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialDoBattleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialVideoPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialVideoInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialVideoInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialPlayVideoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialPlayVideoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialInviteListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialInviteListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialApplyJoinTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialApplyJoinTeamRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialInviteRefuseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialInviteRefuseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSetAppointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSetAppointResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialRedPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialUpdateGodBodyLockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialUpdateGodBodyLockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialHeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialHeartbeatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetSelectRewardDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetSelectRewardDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSelectRewardMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSelectRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialSelectRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetGrandPrizeInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGetGrandPrizeInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialGrandPrizeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialReceiveGrandPrizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialReceiveGrandPrizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialCloseSettleScreenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PlanesTrial_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*PlanesTrialCloseSettleScreenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PlanesTrial_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   132,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_PlanesTrial_proto_goTypes,
		DependencyIndexes: file_PlanesTrial_proto_depIdxs,
		MessageInfos:      file_PlanesTrial_proto_msgTypes,
	}.Build()
	File_PlanesTrial_proto = out.File
	file_PlanesTrial_proto_rawDesc = nil
	file_PlanesTrial_proto_goTypes = nil
	file_PlanesTrial_proto_depIdxs = nil
}
