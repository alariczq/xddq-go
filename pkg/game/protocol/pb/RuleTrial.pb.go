// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: RuleTrial.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuleTrialChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *RuleTrialType `protobuf:"varint,1,req,name=type,enum=com.yq.msg.CityMsg.RuleTrialType" json:"type,omitempty"`
}

func (x *RuleTrialChallengeReq) Reset() {
	*x = RuleTrialChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RuleTrial_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleTrialChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTrialChallengeReq) ProtoMessage() {}

func (x *RuleTrialChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_RuleTrial_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTrialChallengeReq.ProtoReflect.Descriptor instead.
func (*RuleTrialChallengeReq) Descriptor() ([]byte, []int) {
	return file_RuleTrial_proto_rawDescGZIP(), []int{0}
}

func (x *RuleTrialChallengeReq) GetType() RuleTrialType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RuleTrialType_Gold
}

type RuleTrialChallengeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32           `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	AllBattleRecord  *BattleRecordMsg `protobuf:"bytes,2,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	ChallengeSuccess *bool            `protobuf:"varint,3,opt,name=challengeSuccess" json:"challengeSuccess,omitempty"`
	Rewards          *string          `protobuf:"bytes,4,opt,name=rewards" json:"rewards,omitempty"`
	ChallengeId      *int32           `protobuf:"varint,5,opt,name=challengeId" json:"challengeId,omitempty"`
}

func (x *RuleTrialChallengeResp) Reset() {
	*x = RuleTrialChallengeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RuleTrial_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleTrialChallengeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTrialChallengeResp) ProtoMessage() {}

func (x *RuleTrialChallengeResp) ProtoReflect() protoreflect.Message {
	mi := &file_RuleTrial_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTrialChallengeResp.ProtoReflect.Descriptor instead.
func (*RuleTrialChallengeResp) Descriptor() ([]byte, []int) {
	return file_RuleTrial_proto_rawDescGZIP(), []int{1}
}

func (x *RuleTrialChallengeResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RuleTrialChallengeResp) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *RuleTrialChallengeResp) GetChallengeSuccess() bool {
	if x != nil && x.ChallengeSuccess != nil {
		return *x.ChallengeSuccess
	}
	return false
}

func (x *RuleTrialChallengeResp) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *RuleTrialChallengeResp) GetChallengeId() int32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

type RuleTrialRepeatAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RuleTrialRepeatAllReq) Reset() {
	*x = RuleTrialRepeatAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RuleTrial_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleTrialRepeatAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTrialRepeatAllReq) ProtoMessage() {}

func (x *RuleTrialRepeatAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_RuleTrial_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTrialRepeatAllReq.ProtoReflect.Descriptor instead.
func (*RuleTrialRepeatAllReq) Descriptor() ([]byte, []int) {
	return file_RuleTrial_proto_rawDescGZIP(), []int{2}
}

type RuleTrialRepeatAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Rewards *string `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
}

func (x *RuleTrialRepeatAllResp) Reset() {
	*x = RuleTrialRepeatAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RuleTrial_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleTrialRepeatAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTrialRepeatAllResp) ProtoMessage() {}

func (x *RuleTrialRepeatAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_RuleTrial_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTrialRepeatAllResp.ProtoReflect.Descriptor instead.
func (*RuleTrialRepeatAllResp) Descriptor() ([]byte, []int) {
	return file_RuleTrial_proto_rawDescGZIP(), []int{3}
}

func (x *RuleTrialRepeatAllResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RuleTrialRepeatAllResp) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

type RuleTrialMonsterAttrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AttributeList []*AttributeDataMsg `protobuf:"bytes,2,rep,name=attributeList" json:"attributeList,omitempty"`
}

func (x *RuleTrialMonsterAttrResp) Reset() {
	*x = RuleTrialMonsterAttrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RuleTrial_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleTrialMonsterAttrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTrialMonsterAttrResp) ProtoMessage() {}

func (x *RuleTrialMonsterAttrResp) ProtoReflect() protoreflect.Message {
	mi := &file_RuleTrial_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTrialMonsterAttrResp.ProtoReflect.Descriptor instead.
func (*RuleTrialMonsterAttrResp) Descriptor() ([]byte, []int) {
	return file_RuleTrial_proto_rawDescGZIP(), []int{4}
}

func (x *RuleTrialMonsterAttrResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RuleTrialMonsterAttrResp) GetAttributeList() []*AttributeDataMsg {
	if x != nil {
		return x.AttributeList
	}
	return nil
}

type RuleTrialMonsterAttrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId *int32 `protobuf:"varint,1,req,name=challengeId" json:"challengeId,omitempty"`
}

func (x *RuleTrialMonsterAttrReq) Reset() {
	*x = RuleTrialMonsterAttrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RuleTrial_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleTrialMonsterAttrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTrialMonsterAttrReq) ProtoMessage() {}

func (x *RuleTrialMonsterAttrReq) ProtoReflect() protoreflect.Message {
	mi := &file_RuleTrial_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTrialMonsterAttrReq.ProtoReflect.Descriptor instead.
func (*RuleTrialMonsterAttrReq) Descriptor() ([]byte, []int) {
	return file_RuleTrial_proto_rawDescGZIP(), []int{5}
}

func (x *RuleTrialMonsterAttrReq) GetChallengeId() int32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

var File_RuleTrial_proto protoreflect.FileDescriptor

var file_RuleTrial_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x22, 0x44, 0x0a, 0x16, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x78, 0x0a, 0x18, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x3b, 0x0a, 0x17, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x42,
	0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d,
	0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_RuleTrial_proto_rawDescOnce sync.Once
	file_RuleTrial_proto_rawDescData = file_RuleTrial_proto_rawDesc
)

func file_RuleTrial_proto_rawDescGZIP() []byte {
	file_RuleTrial_proto_rawDescOnce.Do(func() {
		file_RuleTrial_proto_rawDescData = protoimpl.X.CompressGZIP(file_RuleTrial_proto_rawDescData)
	})
	return file_RuleTrial_proto_rawDescData
}

var file_RuleTrial_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_RuleTrial_proto_goTypes = []any{
	(*RuleTrialChallengeReq)(nil),    // 0: com.yq.msg.CityMsg.RuleTrialChallengeReq
	(*RuleTrialChallengeResp)(nil),   // 1: com.yq.msg.CityMsg.RuleTrialChallengeResp
	(*RuleTrialRepeatAllReq)(nil),    // 2: com.yq.msg.CityMsg.RuleTrialRepeatAllReq
	(*RuleTrialRepeatAllResp)(nil),   // 3: com.yq.msg.CityMsg.RuleTrialRepeatAllResp
	(*RuleTrialMonsterAttrResp)(nil), // 4: com.yq.msg.CityMsg.RuleTrialMonsterAttrResp
	(*RuleTrialMonsterAttrReq)(nil),  // 5: com.yq.msg.CityMsg.RuleTrialMonsterAttrReq
	(RuleTrialType)(0),               // 6: com.yq.msg.CityMsg.RuleTrialType
	(*BattleRecordMsg)(nil),          // 7: com.yq.msg.CityMsg.BattleRecordMsg
	(*AttributeDataMsg)(nil),         // 8: com.yq.msg.CityMsg.AttributeDataMsg
}
var file_RuleTrial_proto_depIdxs = []int32{
	6, // 0: com.yq.msg.CityMsg.RuleTrialChallengeReq.type:type_name -> com.yq.msg.CityMsg.RuleTrialType
	7, // 1: com.yq.msg.CityMsg.RuleTrialChallengeResp.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	8, // 2: com.yq.msg.CityMsg.RuleTrialMonsterAttrResp.attributeList:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_RuleTrial_proto_init() }
func file_RuleTrial_proto_init() {
	if File_RuleTrial_proto != nil {
		return
	}
	file_Common_proto_init()
	file_Battle_proto_init()
	file_PackagesBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RuleTrial_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RuleTrialChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RuleTrial_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RuleTrialChallengeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RuleTrial_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RuleTrialRepeatAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RuleTrial_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RuleTrialRepeatAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RuleTrial_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RuleTrialMonsterAttrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RuleTrial_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RuleTrialMonsterAttrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RuleTrial_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RuleTrial_proto_goTypes,
		DependencyIndexes: file_RuleTrial_proto_depIdxs,
		MessageInfos:      file_RuleTrial_proto_msgTypes,
	}.Build()
	File_RuleTrial_proto = out.File
	file_RuleTrial_proto_rawDesc = nil
	file_RuleTrial_proto_goTypes = nil
	file_RuleTrial_proto_depIdxs = nil
}
