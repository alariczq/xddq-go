// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: SkyTrade.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ==================== 配置相关 ========================
type SkyTradeGoodsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId *int32  `protobuf:"varint,1,opt,name=goodsId" json:"goodsId,omitempty"`
	Icon    *string `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Price   *int32  `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Num     *int32  `protobuf:"varint,4,opt,name=num" json:"num,omitempty"`
}

func (x *SkyTradeGoodsConfig) Reset() {
	*x = SkyTradeGoodsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGoodsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGoodsConfig) ProtoMessage() {}

func (x *SkyTradeGoodsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGoodsConfig.ProtoReflect.Descriptor instead.
func (*SkyTradeGoodsConfig) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{0}
}

func (x *SkyTradeGoodsConfig) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *SkyTradeGoodsConfig) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *SkyTradeGoodsConfig) GetPrice() int32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *SkyTradeGoodsConfig) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type SkyTradeLevelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level     *int32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Fund      *int64 `protobuf:"varint,2,opt,name=fund" json:"fund,omitempty"`
	Attack    *int32 `protobuf:"varint,3,opt,name=attack" json:"attack,omitempty"`
	StockRate *int32 `protobuf:"varint,4,opt,name=stockRate" json:"stockRate,omitempty"`
	Score     *int32 `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
}

func (x *SkyTradeLevelConfig) Reset() {
	*x = SkyTradeLevelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeLevelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeLevelConfig) ProtoMessage() {}

func (x *SkyTradeLevelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeLevelConfig.ProtoReflect.Descriptor instead.
func (*SkyTradeLevelConfig) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{1}
}

func (x *SkyTradeLevelConfig) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *SkyTradeLevelConfig) GetFund() int64 {
	if x != nil && x.Fund != nil {
		return *x.Fund
	}
	return 0
}

func (x *SkyTradeLevelConfig) GetAttack() int32 {
	if x != nil && x.Attack != nil {
		return *x.Attack
	}
	return 0
}

func (x *SkyTradeLevelConfig) GetStockRate() int32 {
	if x != nil && x.StockRate != nil {
		return *x.StockRate
	}
	return 0
}

func (x *SkyTradeLevelConfig) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type SkyTradeGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupLevel *int32 `protobuf:"varint,1,opt,name=groupLevel" json:"groupLevel,omitempty"`
	Exp        *int32 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	Hp         *int64 `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`
}

func (x *SkyTradeGroupConfig) Reset() {
	*x = SkyTradeGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGroupConfig) ProtoMessage() {}

func (x *SkyTradeGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGroupConfig.ProtoReflect.Descriptor instead.
func (*SkyTradeGroupConfig) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{2}
}

func (x *SkyTradeGroupConfig) GetGroupLevel() int32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

func (x *SkyTradeGroupConfig) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *SkyTradeGroupConfig) GetHp() int64 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

type SkyTradePortConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId        *int32 `protobuf:"varint,1,opt,name=portId" json:"portId,omitempty"`
	SpecialGoodId *int32 `protobuf:"varint,2,opt,name=specialGoodId" json:"specialGoodId,omitempty"`
}

func (x *SkyTradePortConfig) Reset() {
	*x = SkyTradePortConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradePortConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradePortConfig) ProtoMessage() {}

func (x *SkyTradePortConfig) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradePortConfig.ProtoReflect.Descriptor instead.
func (*SkyTradePortConfig) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{3}
}

func (x *SkyTradePortConfig) GetPortId() int32 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *SkyTradePortConfig) GetSpecialGoodId() int32 {
	if x != nil && x.SpecialGoodId != nil {
		return *x.SpecialGoodId
	}
	return 0
}

type SkyTradeScoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId *int32  `protobuf:"varint,1,opt,name=rankId" json:"rankId,omitempty"`
	Size   *int32  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Up     *int32  `protobuf:"varint,3,opt,name=up" json:"up,omitempty"`
	Down   *int32  `protobuf:"varint,4,opt,name=down" json:"down,omitempty"`
	Score  *string `protobuf:"bytes,5,opt,name=score" json:"score,omitempty"`
}

func (x *SkyTradeScoreConfig) Reset() {
	*x = SkyTradeScoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeScoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeScoreConfig) ProtoMessage() {}

func (x *SkyTradeScoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeScoreConfig.ProtoReflect.Descriptor instead.
func (*SkyTradeScoreConfig) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{4}
}

func (x *SkyTradeScoreConfig) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *SkyTradeScoreConfig) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *SkyTradeScoreConfig) GetUp() int32 {
	if x != nil && x.Up != nil {
		return *x.Up
	}
	return 0
}

func (x *SkyTradeScoreConfig) GetDown() int32 {
	if x != nil && x.Down != nil {
		return *x.Down
	}
	return 0
}

func (x *SkyTradeScoreConfig) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

type SkyTradeConfigSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId  *int32                 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	GoodsConfig []*SkyTradeGoodsConfig `protobuf:"bytes,2,rep,name=goodsConfig" json:"goodsConfig,omitempty"`
	LevelConfig []*SkyTradeLevelConfig `protobuf:"bytes,3,rep,name=levelConfig" json:"levelConfig,omitempty"`
	PortConfig  []*SkyTradePortConfig  `protobuf:"bytes,4,rep,name=portConfig" json:"portConfig,omitempty"`
	GroupConfig []*SkyTradeGroupConfig `protobuf:"bytes,5,rep,name=groupConfig" json:"groupConfig,omitempty"`
	ScoreConfig []*SkyTradeScoreConfig `protobuf:"bytes,6,rep,name=scoreConfig" json:"scoreConfig,omitempty"`
}

func (x *SkyTradeConfigSync) Reset() {
	*x = SkyTradeConfigSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeConfigSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeConfigSync) ProtoMessage() {}

func (x *SkyTradeConfigSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeConfigSync.ProtoReflect.Descriptor instead.
func (*SkyTradeConfigSync) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{5}
}

func (x *SkyTradeConfigSync) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeConfigSync) GetGoodsConfig() []*SkyTradeGoodsConfig {
	if x != nil {
		return x.GoodsConfig
	}
	return nil
}

func (x *SkyTradeConfigSync) GetLevelConfig() []*SkyTradeLevelConfig {
	if x != nil {
		return x.LevelConfig
	}
	return nil
}

func (x *SkyTradeConfigSync) GetPortConfig() []*SkyTradePortConfig {
	if x != nil {
		return x.PortConfig
	}
	return nil
}

func (x *SkyTradeConfigSync) GetGroupConfig() []*SkyTradeGroupConfig {
	if x != nil {
		return x.GroupConfig
	}
	return nil
}

func (x *SkyTradeConfigSync) GetScoreConfig() []*SkyTradeScoreConfig {
	if x != nil {
		return x.ScoreConfig
	}
	return nil
}

// ==================== 实体包装 ========================
type SkyTradePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirshipInfo     *SkyTradeAirshipInfo `protobuf:"bytes,1,opt,name=airshipInfo" json:"airshipInfo,omitempty"`
	AvailableFunds  *int64               `protobuf:"varint,2,opt,name=availableFunds" json:"availableFunds,omitempty"`
	Goods           []*SkyTradeGoods     `protobuf:"bytes,3,rep,name=goods" json:"goods,omitempty"`
	StockFundsLevel *int32               `protobuf:"varint,4,opt,name=stockFundsLevel" json:"stockFundsLevel,omitempty"`
}

func (x *SkyTradePlayerData) Reset() {
	*x = SkyTradePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradePlayerData) ProtoMessage() {}

func (x *SkyTradePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradePlayerData.ProtoReflect.Descriptor instead.
func (*SkyTradePlayerData) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{6}
}

func (x *SkyTradePlayerData) GetAirshipInfo() *SkyTradeAirshipInfo {
	if x != nil {
		return x.AirshipInfo
	}
	return nil
}

func (x *SkyTradePlayerData) GetAvailableFunds() int64 {
	if x != nil && x.AvailableFunds != nil {
		return *x.AvailableFunds
	}
	return 0
}

func (x *SkyTradePlayerData) GetGoods() []*SkyTradeGoods {
	if x != nil {
		return x.Goods
	}
	return nil
}

func (x *SkyTradePlayerData) GetStockFundsLevel() int32 {
	if x != nil && x.StockFundsLevel != nil {
		return *x.StockFundsLevel
	}
	return 0
}

// *
// 货物信息
// - 地图港口货物数据中: 单价
// - 玩家仓库货物数据中: 总价 (不同地点买入的价格可能不同，累计总价格和数量)
type SkyTradeGoods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId *int32 `protobuf:"varint,1,opt,name=goodsId" json:"goodsId,omitempty"`
	Num     *int64 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Price   *int64 `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
}

func (x *SkyTradeGoods) Reset() {
	*x = SkyTradeGoods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGoods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGoods) ProtoMessage() {}

func (x *SkyTradeGoods) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGoods.ProtoReflect.Descriptor instead.
func (*SkyTradeGoods) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{7}
}

func (x *SkyTradeGoods) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *SkyTradeGoods) GetNum() int64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *SkyTradeGoods) GetPrice() int64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

type SkyTradeAirshipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePort *int32 `protobuf:"varint,1,opt,name=sourcePort" json:"sourcePort,omitempty"`
	TargetPort *int32 `protobuf:"varint,2,opt,name=targetPort" json:"targetPort,omitempty"`
	StartTime  *int64 `protobuf:"varint,3,opt,name=startTime" json:"startTime,omitempty"`
	Funds      *int64 `protobuf:"varint,4,opt,name=funds" json:"funds,omitempty"`
	Speeds     *int32 `protobuf:"varint,5,opt,name=speeds" json:"speeds,omitempty"`
	Level      *int32 `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
}

func (x *SkyTradeAirshipInfo) Reset() {
	*x = SkyTradeAirshipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeAirshipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeAirshipInfo) ProtoMessage() {}

func (x *SkyTradeAirshipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeAirshipInfo.ProtoReflect.Descriptor instead.
func (*SkyTradeAirshipInfo) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{8}
}

func (x *SkyTradeAirshipInfo) GetSourcePort() int32 {
	if x != nil && x.SourcePort != nil {
		return *x.SourcePort
	}
	return 0
}

func (x *SkyTradeAirshipInfo) GetTargetPort() int32 {
	if x != nil && x.TargetPort != nil {
		return *x.TargetPort
	}
	return 0
}

func (x *SkyTradeAirshipInfo) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *SkyTradeAirshipInfo) GetFunds() int64 {
	if x != nil && x.Funds != nil {
		return *x.Funds
	}
	return 0
}

func (x *SkyTradeAirshipInfo) GetSpeeds() int32 {
	if x != nil && x.Speeds != nil {
		return *x.Speeds
	}
	return 0
}

func (x *SkyTradeAirshipInfo) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type SkyTradeUnionPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player      *PlayerBaseDataMsg   `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	AirshipInfo *SkyTradeAirshipInfo `protobuf:"bytes,2,opt,name=airshipInfo" json:"airshipInfo,omitempty"`
}

func (x *SkyTradeUnionPlayerData) Reset() {
	*x = SkyTradeUnionPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionPlayerData) ProtoMessage() {}

func (x *SkyTradeUnionPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionPlayerData.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionPlayerData) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{9}
}

func (x *SkyTradeUnionPlayerData) GetPlayer() *PlayerBaseDataMsg {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *SkyTradeUnionPlayerData) GetAirshipInfo() *SkyTradeAirshipInfo {
	if x != nil {
		return x.AirshipInfo
	}
	return nil
}

type SkyTradePortGoodsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId      *int32           `protobuf:"varint,1,opt,name=portId" json:"portId,omitempty"`
	RareGoodsId *int32           `protobuf:"varint,2,opt,name=rareGoodsId" json:"rareGoodsId,omitempty"`
	Goods       []*SkyTradeGoods `protobuf:"bytes,3,rep,name=goods" json:"goods,omitempty"`
}

func (x *SkyTradePortGoodsInfo) Reset() {
	*x = SkyTradePortGoodsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradePortGoodsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradePortGoodsInfo) ProtoMessage() {}

func (x *SkyTradePortGoodsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradePortGoodsInfo.ProtoReflect.Descriptor instead.
func (*SkyTradePortGoodsInfo) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{10}
}

func (x *SkyTradePortGoodsInfo) GetPortId() int32 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *SkyTradePortGoodsInfo) GetRareGoodsId() int32 {
	if x != nil && x.RareGoodsId != nil {
		return *x.RareGoodsId
	}
	return 0
}

func (x *SkyTradePortGoodsInfo) GetGoods() []*SkyTradeGoods {
	if x != nil {
		return x.Goods
	}
	return nil
}

type SkyTradeUnionChallengeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base              *SkyTradeUnionBaseMsg `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	ReduceBlood       *int64                `protobuf:"varint,2,opt,name=reduceBlood" json:"reduceBlood,omitempty"`
	LastBeAttackTime  *int64                `protobuf:"varint,3,opt,name=lastBeAttackTime" json:"lastBeAttackTime,omitempty"`
	Rank              *int32                `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	HasDefeated       *bool                 `protobuf:"varint,5,opt,name=hasDefeated" json:"hasDefeated,omitempty"`
	ShieldTriggerTime *int64                `protobuf:"varint,7,opt,name=shieldTriggerTime" json:"shieldTriggerTime,omitempty"`
	Position          *int32                `protobuf:"varint,8,opt,name=position" json:"position,omitempty"`
}

func (x *SkyTradeUnionChallengeMsg) Reset() {
	*x = SkyTradeUnionChallengeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionChallengeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionChallengeMsg) ProtoMessage() {}

func (x *SkyTradeUnionChallengeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionChallengeMsg.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionChallengeMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{11}
}

func (x *SkyTradeUnionChallengeMsg) GetBase() *SkyTradeUnionBaseMsg {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SkyTradeUnionChallengeMsg) GetReduceBlood() int64 {
	if x != nil && x.ReduceBlood != nil {
		return *x.ReduceBlood
	}
	return 0
}

func (x *SkyTradeUnionChallengeMsg) GetLastBeAttackTime() int64 {
	if x != nil && x.LastBeAttackTime != nil {
		return *x.LastBeAttackTime
	}
	return 0
}

func (x *SkyTradeUnionChallengeMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *SkyTradeUnionChallengeMsg) GetHasDefeated() bool {
	if x != nil && x.HasDefeated != nil {
		return *x.HasDefeated
	}
	return false
}

func (x *SkyTradeUnionChallengeMsg) GetShieldTriggerTime() int64 {
	if x != nil && x.ShieldTriggerTime != nil {
		return *x.ShieldTriggerTime
	}
	return 0
}

func (x *SkyTradeUnionChallengeMsg) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type SkyTradeUnionChallengeSimpleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId           *int64 `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	LeftHp            *int64 `protobuf:"varint,2,opt,name=leftHp" json:"leftHp,omitempty"`
	FinalFame         *int64 `protobuf:"varint,3,opt,name=finalFame" json:"finalFame,omitempty"`
	HasDefeated       *bool  `protobuf:"varint,4,opt,name=hasDefeated" json:"hasDefeated,omitempty"`
	ShieldTriggerTime *int64 `protobuf:"varint,5,opt,name=shieldTriggerTime" json:"shieldTriggerTime,omitempty"`
	Level             *int32 `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
}

func (x *SkyTradeUnionChallengeSimpleMsg) Reset() {
	*x = SkyTradeUnionChallengeSimpleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionChallengeSimpleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionChallengeSimpleMsg) ProtoMessage() {}

func (x *SkyTradeUnionChallengeSimpleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionChallengeSimpleMsg.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionChallengeSimpleMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{12}
}

func (x *SkyTradeUnionChallengeSimpleMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeUnionChallengeSimpleMsg) GetLeftHp() int64 {
	if x != nil && x.LeftHp != nil {
		return *x.LeftHp
	}
	return 0
}

func (x *SkyTradeUnionChallengeSimpleMsg) GetFinalFame() int64 {
	if x != nil && x.FinalFame != nil {
		return *x.FinalFame
	}
	return 0
}

func (x *SkyTradeUnionChallengeSimpleMsg) GetHasDefeated() bool {
	if x != nil && x.HasDefeated != nil {
		return *x.HasDefeated
	}
	return false
}

func (x *SkyTradeUnionChallengeSimpleMsg) GetShieldTriggerTime() int64 {
	if x != nil && x.ShieldTriggerTime != nil {
		return *x.ShieldTriggerTime
	}
	return 0
}

func (x *SkyTradeUnionChallengeSimpleMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type SkyTradeUnionGroupRankMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId *int64 `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	Rank    *int32 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
}

func (x *SkyTradeUnionGroupRankMsg) Reset() {
	*x = SkyTradeUnionGroupRankMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionGroupRankMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionGroupRankMsg) ProtoMessage() {}

func (x *SkyTradeUnionGroupRankMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionGroupRankMsg.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionGroupRankMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{13}
}

func (x *SkyTradeUnionGroupRankMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeUnionGroupRankMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type SkyTradeArrivalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePort *int32  `protobuf:"varint,1,opt,name=sourcePort" json:"sourcePort,omitempty"`
	TargetPort *int32  `protobuf:"varint,2,opt,name=targetPort" json:"targetPort,omitempty"`
	EventType  *int32  `protobuf:"varint,3,opt,name=eventType" json:"eventType,omitempty"`
	Rewards    *string `protobuf:"bytes,4,opt,name=rewards" json:"rewards,omitempty"`
	AddFame    *int32  `protobuf:"varint,5,opt,name=addFame" json:"addFame,omitempty"`
}

func (x *SkyTradeArrivalEvent) Reset() {
	*x = SkyTradeArrivalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeArrivalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeArrivalEvent) ProtoMessage() {}

func (x *SkyTradeArrivalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeArrivalEvent.ProtoReflect.Descriptor instead.
func (*SkyTradeArrivalEvent) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{14}
}

func (x *SkyTradeArrivalEvent) GetSourcePort() int32 {
	if x != nil && x.SourcePort != nil {
		return *x.SourcePort
	}
	return 0
}

func (x *SkyTradeArrivalEvent) GetTargetPort() int32 {
	if x != nil && x.TargetPort != nil {
		return *x.TargetPort
	}
	return 0
}

func (x *SkyTradeArrivalEvent) GetEventType() int32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *SkyTradeArrivalEvent) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *SkyTradeArrivalEvent) GetAddFame() int32 {
	if x != nil && x.AddFame != nil {
		return *x.AddFame
	}
	return 0
}

type SkyTradeReportMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadData   *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=headData" json:"headData,omitempty"`
	NickName   *string            `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	UnionId    *int64             `protobuf:"varint,3,opt,name=unionId" json:"unionId,omitempty"`
	UnionName  *string            `protobuf:"bytes,4,opt,name=unionName" json:"unionName,omitempty"`
	Damage     *int64             `protobuf:"varint,5,opt,name=damage" json:"damage,omitempty"`
	SubScore   *int32             `protobuf:"varint,6,opt,name=subScore" json:"subScore,omitempty"`
	TargetName *string            `protobuf:"bytes,7,opt,name=targetName" json:"targetName,omitempty"`
	ServerId   *int64             `protobuf:"varint,8,opt,name=serverId" json:"serverId,omitempty"`
	Flag       *int32             `protobuf:"varint,9,opt,name=flag" json:"flag,omitempty"`
	AtkTimes   *int32             `protobuf:"varint,10,opt,name=atkTimes" json:"atkTimes,omitempty"`
	Time       *int64             `protobuf:"varint,11,opt,name=time" json:"time,omitempty"`
}

func (x *SkyTradeReportMsg) Reset() {
	*x = SkyTradeReportMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportMsg) ProtoMessage() {}

func (x *SkyTradeReportMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportMsg.ProtoReflect.Descriptor instead.
func (*SkyTradeReportMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{15}
}

func (x *SkyTradeReportMsg) GetHeadData() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadData
	}
	return nil
}

func (x *SkyTradeReportMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *SkyTradeReportMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeReportMsg) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *SkyTradeReportMsg) GetDamage() int64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *SkyTradeReportMsg) GetSubScore() int32 {
	if x != nil && x.SubScore != nil {
		return *x.SubScore
	}
	return 0
}

func (x *SkyTradeReportMsg) GetTargetName() string {
	if x != nil && x.TargetName != nil {
		return *x.TargetName
	}
	return ""
}

func (x *SkyTradeReportMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *SkyTradeReportMsg) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *SkyTradeReportMsg) GetAtkTimes() int32 {
	if x != nil && x.AtkTimes != nil {
		return *x.AtkTimes
	}
	return 0
}

func (x *SkyTradeReportMsg) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type SkyTradeReportDetailMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName *string `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	AtkTimes *int32  `protobuf:"varint,2,opt,name=atkTimes" json:"atkTimes,omitempty"`
	Damage   *int64  `protobuf:"varint,3,opt,name=damage" json:"damage,omitempty"`
}

func (x *SkyTradeReportDetailMsg) Reset() {
	*x = SkyTradeReportDetailMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportDetailMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportDetailMsg) ProtoMessage() {}

func (x *SkyTradeReportDetailMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportDetailMsg.ProtoReflect.Descriptor instead.
func (*SkyTradeReportDetailMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{16}
}

func (x *SkyTradeReportDetailMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *SkyTradeReportDetailMsg) GetAtkTimes() int32 {
	if x != nil && x.AtkTimes != nil {
		return *x.AtkTimes
	}
	return 0
}

func (x *SkyTradeReportDetailMsg) GetDamage() int64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

type SkyTradePortLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId   *int32  `protobuf:"varint,1,opt,name=portId" json:"portId,omitempty"`
	NickName *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
}

func (x *SkyTradePortLogMsg) Reset() {
	*x = SkyTradePortLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradePortLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradePortLogMsg) ProtoMessage() {}

func (x *SkyTradePortLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradePortLogMsg.ProtoReflect.Descriptor instead.
func (*SkyTradePortLogMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{17}
}

func (x *SkyTradePortLogMsg) GetPortId() int32 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *SkyTradePortLogMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

type SkyTradeWelfareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ItemId *int32  `protobuf:"varint,2,opt,name=itemId" json:"itemId,omitempty"`
	Id     *int64  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Status *int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	Time   *int64  `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

func (x *SkyTradeWelfareInfo) Reset() {
	*x = SkyTradeWelfareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeWelfareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeWelfareInfo) ProtoMessage() {}

func (x *SkyTradeWelfareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeWelfareInfo.ProtoReflect.Descriptor instead.
func (*SkyTradeWelfareInfo) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{18}
}

func (x *SkyTradeWelfareInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SkyTradeWelfareInfo) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *SkyTradeWelfareInfo) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SkyTradeWelfareInfo) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SkyTradeWelfareInfo) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type SkyTradeWelfareRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName *string `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	Reward   *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *SkyTradeWelfareRecord) Reset() {
	*x = SkyTradeWelfareRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeWelfareRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeWelfareRecord) ProtoMessage() {}

func (x *SkyTradeWelfareRecord) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeWelfareRecord.ProtoReflect.Descriptor instead.
func (*SkyTradeWelfareRecord) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{19}
}

func (x *SkyTradeWelfareRecord) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *SkyTradeWelfareRecord) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type SkyTradeUnionBaseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId    *int64  `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	Flag       *int32  `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
	Name       *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ServerId   *int64  `protobuf:"varint,4,opt,name=serverId" json:"serverId,omitempty"`
	Score      *int64  `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	MasterName *string `protobuf:"bytes,6,opt,name=masterName" json:"masterName,omitempty"`
	Level      *int32  `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
}

func (x *SkyTradeUnionBaseMsg) Reset() {
	*x = SkyTradeUnionBaseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionBaseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionBaseMsg) ProtoMessage() {}

func (x *SkyTradeUnionBaseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionBaseMsg.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionBaseMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{20}
}

func (x *SkyTradeUnionBaseMsg) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeUnionBaseMsg) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *SkyTradeUnionBaseMsg) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SkyTradeUnionBaseMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *SkyTradeUnionBaseMsg) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *SkyTradeUnionBaseMsg) GetMasterName() string {
	if x != nil && x.MasterName != nil {
		return *x.MasterName
	}
	return ""
}

func (x *SkyTradeUnionBaseMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type SkyTradePlayerBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   *int64  `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	MemberName *string `protobuf:"bytes,2,req,name=memberName" json:"memberName,omitempty"`
	Score      *string `protobuf:"bytes,3,req,name=score" json:"score,omitempty"`
}

func (x *SkyTradePlayerBaseInfo) Reset() {
	*x = SkyTradePlayerBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradePlayerBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradePlayerBaseInfo) ProtoMessage() {}

func (x *SkyTradePlayerBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradePlayerBaseInfo.ProtoReflect.Descriptor instead.
func (*SkyTradePlayerBaseInfo) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{21}
}

func (x *SkyTradePlayerBaseInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyTradePlayerBaseInfo) GetMemberName() string {
	if x != nil && x.MemberName != nil {
		return *x.MemberName
	}
	return ""
}

func (x *SkyTradePlayerBaseInfo) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

type SkyTradeGuessPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64  `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	ServerId *int64  `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *SkyTradeGuessPlayerInfo) Reset() {
	*x = SkyTradeGuessPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessPlayerInfo) ProtoMessage() {}

func (x *SkyTradeGuessPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessPlayerInfo.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessPlayerInfo) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{22}
}

func (x *SkyTradeGuessPlayerInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyTradeGuessPlayerInfo) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *SkyTradeGuessPlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type SkyTradeGuessUnionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInfo      *UnionRankTempMsg `protobuf:"bytes,1,opt,name=rankInfo" json:"rankInfo,omitempty"`
	SelectedCount *int32            `protobuf:"varint,2,opt,name=selectedCount" json:"selectedCount,omitempty"`
	Result        *bool             `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *SkyTradeGuessUnionInfo) Reset() {
	*x = SkyTradeGuessUnionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessUnionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessUnionInfo) ProtoMessage() {}

func (x *SkyTradeGuessUnionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessUnionInfo.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessUnionInfo) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{23}
}

func (x *SkyTradeGuessUnionInfo) GetRankInfo() *UnionRankTempMsg {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

func (x *SkyTradeGuessUnionInfo) GetSelectedCount() int32 {
	if x != nil && x.SelectedCount != nil {
		return *x.SelectedCount
	}
	return 0
}

func (x *SkyTradeGuessUnionInfo) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

// *
// 前X名 显示形象和坐骑, 其他玩家使用头像
type SkyTradeAppearanceMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadIcon     *int32  `protobuf:"varint,1,opt,name=headIcon" json:"headIcon,omitempty"`
	WxHeadUrl    *string `protobuf:"bytes,2,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	AppearanceId *int32  `protobuf:"varint,3,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId *int32  `protobuf:"varint,4,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
}

func (x *SkyTradeAppearanceMsg) Reset() {
	*x = SkyTradeAppearanceMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeAppearanceMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeAppearanceMsg) ProtoMessage() {}

func (x *SkyTradeAppearanceMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeAppearanceMsg.ProtoReflect.Descriptor instead.
func (*SkyTradeAppearanceMsg) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{24}
}

func (x *SkyTradeAppearanceMsg) GetHeadIcon() int32 {
	if x != nil && x.HeadIcon != nil {
		return *x.HeadIcon
	}
	return 0
}

func (x *SkyTradeAppearanceMsg) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *SkyTradeAppearanceMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *SkyTradeAppearanceMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

// ==================== 请求协议 ========================
type SkyTradeEnterActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeEnterActivityReq) Reset() {
	*x = SkyTradeEnterActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeEnterActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeEnterActivityReq) ProtoMessage() {}

func (x *SkyTradeEnterActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeEnterActivityReq.ProtoReflect.Descriptor instead.
func (*SkyTradeEnterActivityReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{25}
}

func (x *SkyTradeEnterActivityReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeEnterActivityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	SelfRank  *int32  `protobuf:"varint,2,opt,name=selfRank" json:"selfRank,omitempty"`
	Round     *int32  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Group     *int32  `protobuf:"varint,4,opt,name=group" json:"group,omitempty"`
	RankId    *int32  `protobuf:"varint,5,opt,name=rankId" json:"rankId,omitempty"`
	UnionId   *int64  `protobuf:"varint,6,opt,name=unionId" json:"unionId,omitempty"`
	Groups    []int32 `protobuf:"varint,7,rep,name=groups" json:"groups,omitempty"`
	UnionName *string `protobuf:"bytes,8,opt,name=unionName" json:"unionName,omitempty"`
}

func (x *SkyTradeEnterActivityResp) Reset() {
	*x = SkyTradeEnterActivityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeEnterActivityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeEnterActivityResp) ProtoMessage() {}

func (x *SkyTradeEnterActivityResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeEnterActivityResp.ProtoReflect.Descriptor instead.
func (*SkyTradeEnterActivityResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{26}
}

func (x *SkyTradeEnterActivityResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeEnterActivityResp) GetSelfRank() int32 {
	if x != nil && x.SelfRank != nil {
		return *x.SelfRank
	}
	return 0
}

func (x *SkyTradeEnterActivityResp) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *SkyTradeEnterActivityResp) GetGroup() int32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

func (x *SkyTradeEnterActivityResp) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *SkyTradeEnterActivityResp) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeEnterActivityResp) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *SkyTradeEnterActivityResp) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

type SkyTradeEnterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeEnterReq) Reset() {
	*x = SkyTradeEnterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeEnterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeEnterReq) ProtoMessage() {}

func (x *SkyTradeEnterReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeEnterReq.ProtoReflect.Descriptor instead.
func (*SkyTradeEnterReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{27}
}

func (x *SkyTradeEnterReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeEnterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerData      *SkyTradePlayerData        `protobuf:"bytes,2,opt,name=playerData" json:"playerData,omitempty"`
	UnionPlayerData []*SkyTradeUnionPlayerData `protobuf:"bytes,3,rep,name=unionPlayerData" json:"unionPlayerData,omitempty"`
	PortGoods       []*SkyTradePortGoodsInfo   `protobuf:"bytes,4,rep,name=portGoods" json:"portGoods,omitempty"`
	UnionFlag       *int32                     `protobuf:"varint,5,opt,name=unionFlag" json:"unionFlag,omitempty"`
	Event           *SkyTradeArrivalEvent      `protobuf:"bytes,6,opt,name=event" json:"event,omitempty"`
	FinalFame       *int32                     `protobuf:"varint,7,opt,name=finalFame" json:"finalFame,omitempty"`
	TotalFame       *int32                     `protobuf:"varint,8,opt,name=totalFame" json:"totalFame,omitempty"`
	GroupRank       *int32                     `protobuf:"varint,9,opt,name=groupRank" json:"groupRank,omitempty"`
}

func (x *SkyTradeEnterResp) Reset() {
	*x = SkyTradeEnterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeEnterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeEnterResp) ProtoMessage() {}

func (x *SkyTradeEnterResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeEnterResp.ProtoReflect.Descriptor instead.
func (*SkyTradeEnterResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{28}
}

func (x *SkyTradeEnterResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeEnterResp) GetPlayerData() *SkyTradePlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *SkyTradeEnterResp) GetUnionPlayerData() []*SkyTradeUnionPlayerData {
	if x != nil {
		return x.UnionPlayerData
	}
	return nil
}

func (x *SkyTradeEnterResp) GetPortGoods() []*SkyTradePortGoodsInfo {
	if x != nil {
		return x.PortGoods
	}
	return nil
}

func (x *SkyTradeEnterResp) GetUnionFlag() int32 {
	if x != nil && x.UnionFlag != nil {
		return *x.UnionFlag
	}
	return 0
}

func (x *SkyTradeEnterResp) GetEvent() *SkyTradeArrivalEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SkyTradeEnterResp) GetFinalFame() int32 {
	if x != nil && x.FinalFame != nil {
		return *x.FinalFame
	}
	return 0
}

func (x *SkyTradeEnterResp) GetTotalFame() int32 {
	if x != nil && x.TotalFame != nil {
		return *x.TotalFame
	}
	return 0
}

func (x *SkyTradeEnterResp) GetGroupRank() int32 {
	if x != nil && x.GroupRank != nil {
		return *x.GroupRank
	}
	return 0
}

type SkyTradeGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	GroupId    *int32 `protobuf:"varint,2,req,name=groupId" json:"groupId,omitempty"`
}

func (x *SkyTradeGroupInfoReq) Reset() {
	*x = SkyTradeGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGroupInfoReq) ProtoMessage() {}

func (x *SkyTradeGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGroupInfoReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{29}
}

func (x *SkyTradeGroupInfoReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeGroupInfoReq) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type SkyTradeGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	GroupInfo []*SkyTradeUnionBaseMsg `protobuf:"bytes,2,rep,name=groupInfo" json:"groupInfo,omitempty"`
}

func (x *SkyTradeGroupInfoResp) Reset() {
	*x = SkyTradeGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGroupInfoResp) ProtoMessage() {}

func (x *SkyTradeGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGroupInfoResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{30}
}

func (x *SkyTradeGroupInfoResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGroupInfoResp) GetGroupInfo() []*SkyTradeUnionBaseMsg {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

type SkyTradeAddSpeedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Num        *int32 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`
}

func (x *SkyTradeAddSpeedReq) Reset() {
	*x = SkyTradeAddSpeedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeAddSpeedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeAddSpeedReq) ProtoMessage() {}

func (x *SkyTradeAddSpeedReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeAddSpeedReq.ProtoReflect.Descriptor instead.
func (*SkyTradeAddSpeedReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{31}
}

func (x *SkyTradeAddSpeedReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeAddSpeedReq) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type SkyTradeAddSpeedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AirshipInfo *SkyTradeAirshipInfo  `protobuf:"bytes,2,opt,name=airshipInfo" json:"airshipInfo,omitempty"`
	Event       *SkyTradeArrivalEvent `protobuf:"bytes,3,opt,name=event" json:"event,omitempty"`
}

func (x *SkyTradeAddSpeedResp) Reset() {
	*x = SkyTradeAddSpeedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeAddSpeedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeAddSpeedResp) ProtoMessage() {}

func (x *SkyTradeAddSpeedResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeAddSpeedResp.ProtoReflect.Descriptor instead.
func (*SkyTradeAddSpeedResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{32}
}

func (x *SkyTradeAddSpeedResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeAddSpeedResp) GetAirshipInfo() *SkyTradeAirshipInfo {
	if x != nil {
		return x.AirshipInfo
	}
	return nil
}

func (x *SkyTradeAddSpeedResp) GetEvent() *SkyTradeArrivalEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type SkyTradeGotoPortReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Port       *int32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
}

func (x *SkyTradeGotoPortReq) Reset() {
	*x = SkyTradeGotoPortReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGotoPortReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGotoPortReq) ProtoMessage() {}

func (x *SkyTradeGotoPortReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGotoPortReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGotoPortReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{33}
}

func (x *SkyTradeGotoPortReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeGotoPortReq) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type SkyTradeGotoPortResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AirshipInfo *SkyTradeAirshipInfo `protobuf:"bytes,2,opt,name=airshipInfo" json:"airshipInfo,omitempty"`
}

func (x *SkyTradeGotoPortResp) Reset() {
	*x = SkyTradeGotoPortResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGotoPortResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGotoPortResp) ProtoMessage() {}

func (x *SkyTradeGotoPortResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGotoPortResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGotoPortResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{34}
}

func (x *SkyTradeGotoPortResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGotoPortResp) GetAirshipInfo() *SkyTradeAirshipInfo {
	if x != nil {
		return x.AirshipInfo
	}
	return nil
}

type SkyTradeDealReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Port       *int32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
	GoodsId    *int32 `protobuf:"varint,3,req,name=goodsId" json:"goodsId,omitempty"`
	Num        *int32 `protobuf:"varint,4,req,name=num" json:"num,omitempty"`
	Type       *int32 `protobuf:"varint,5,req,name=type" json:"type,omitempty"`
}

func (x *SkyTradeDealReq) Reset() {
	*x = SkyTradeDealReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeDealReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeDealReq) ProtoMessage() {}

func (x *SkyTradeDealReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeDealReq.ProtoReflect.Descriptor instead.
func (*SkyTradeDealReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{35}
}

func (x *SkyTradeDealReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeDealReq) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *SkyTradeDealReq) GetGoodsId() int32 {
	if x != nil && x.GoodsId != nil {
		return *x.GoodsId
	}
	return 0
}

func (x *SkyTradeDealReq) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *SkyTradeDealReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type SkyTradeDealResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Goods          []*SkyTradeGoods `protobuf:"bytes,2,rep,name=goods" json:"goods,omitempty"`
	AvailableFunds *int64           `protobuf:"varint,3,opt,name=availableFunds" json:"availableFunds,omitempty"`
	GoodsNum       *int64           `protobuf:"varint,4,opt,name=goodsNum" json:"goodsNum,omitempty"`
	Level          *int32           `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
}

func (x *SkyTradeDealResp) Reset() {
	*x = SkyTradeDealResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeDealResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeDealResp) ProtoMessage() {}

func (x *SkyTradeDealResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeDealResp.ProtoReflect.Descriptor instead.
func (*SkyTradeDealResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{36}
}

func (x *SkyTradeDealResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeDealResp) GetGoods() []*SkyTradeGoods {
	if x != nil {
		return x.Goods
	}
	return nil
}

func (x *SkyTradeDealResp) GetAvailableFunds() int64 {
	if x != nil && x.AvailableFunds != nil {
		return *x.AvailableFunds
	}
	return 0
}

func (x *SkyTradeDealResp) GetGoodsNum() int64 {
	if x != nil && x.GoodsNum != nil {
		return *x.GoodsNum
	}
	return 0
}

func (x *SkyTradeDealResp) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type SkyTradeChallengeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeChallengeListReq) Reset() {
	*x = SkyTradeChallengeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeChallengeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeChallengeListReq) ProtoMessage() {}

func (x *SkyTradeChallengeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeChallengeListReq.ProtoReflect.Descriptor instead.
func (*SkyTradeChallengeListReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{37}
}

func (x *SkyTradeChallengeListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeChallengeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionMsg   []*SkyTradeUnionChallengeMsg `protobuf:"bytes,2,rep,name=unionMsg" json:"unionMsg,omitempty"`
	Free       *int32                       `protobuf:"varint,3,opt,name=free" json:"free,omitempty"`
	Appearance *SkyTradeAppearanceMsg       `protobuf:"bytes,4,opt,name=appearance" json:"appearance,omitempty"`
	Advanced   []int64                      `protobuf:"varint,5,rep,name=advanced" json:"advanced,omitempty"`
}

func (x *SkyTradeChallengeListResp) Reset() {
	*x = SkyTradeChallengeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeChallengeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeChallengeListResp) ProtoMessage() {}

func (x *SkyTradeChallengeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeChallengeListResp.ProtoReflect.Descriptor instead.
func (*SkyTradeChallengeListResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{38}
}

func (x *SkyTradeChallengeListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeChallengeListResp) GetUnionMsg() []*SkyTradeUnionChallengeMsg {
	if x != nil {
		return x.UnionMsg
	}
	return nil
}

func (x *SkyTradeChallengeListResp) GetFree() int32 {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return 0
}

func (x *SkyTradeChallengeListResp) GetAppearance() *SkyTradeAppearanceMsg {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *SkyTradeChallengeListResp) GetAdvanced() []int64 {
	if x != nil {
		return x.Advanced
	}
	return nil
}

type SkyTradeChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *SkyTradeChallengeReq) Reset() {
	*x = SkyTradeChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeChallengeReq) ProtoMessage() {}

func (x *SkyTradeChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeChallengeReq.ProtoReflect.Descriptor instead.
func (*SkyTradeChallengeReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{39}
}

func (x *SkyTradeChallengeReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeChallengeReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type SkyTradeChallengeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Free      *int32  `protobuf:"varint,2,opt,name=free" json:"free,omitempty"`
	FinalFame *int32  `protobuf:"varint,3,opt,name=finalFame" json:"finalFame,omitempty"`
	TotalFame *int32  `protobuf:"varint,4,opt,name=totalFame" json:"totalFame,omitempty"`
	Rewards   *string `protobuf:"bytes,5,opt,name=rewards" json:"rewards,omitempty"`
}

func (x *SkyTradeChallengeResp) Reset() {
	*x = SkyTradeChallengeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeChallengeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeChallengeResp) ProtoMessage() {}

func (x *SkyTradeChallengeResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeChallengeResp.ProtoReflect.Descriptor instead.
func (*SkyTradeChallengeResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{40}
}

func (x *SkyTradeChallengeResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeChallengeResp) GetFree() int32 {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return 0
}

func (x *SkyTradeChallengeResp) GetFinalFame() int32 {
	if x != nil && x.FinalFame != nil {
		return *x.FinalFame
	}
	return 0
}

func (x *SkyTradeChallengeResp) GetTotalFame() int32 {
	if x != nil && x.TotalFame != nil {
		return *x.TotalFame
	}
	return 0
}

func (x *SkyTradeChallengeResp) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

type SkyTradeUnionFameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *SkyTradeUnionFameReq) Reset() {
	*x = SkyTradeUnionFameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionFameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionFameReq) ProtoMessage() {}

func (x *SkyTradeUnionFameReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionFameReq.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionFameReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{41}
}

func (x *SkyTradeUnionFameReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeUnionFameReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type SkyTradeUnionFameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionId    *int64                    `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	UnionName  *string                   `protobuf:"bytes,3,opt,name=unionName" json:"unionName,omitempty"`
	PlayerInfo []*SkyTradePlayerBaseInfo `protobuf:"bytes,4,rep,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *SkyTradeUnionFameResp) Reset() {
	*x = SkyTradeUnionFameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionFameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionFameResp) ProtoMessage() {}

func (x *SkyTradeUnionFameResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionFameResp.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionFameResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{42}
}

func (x *SkyTradeUnionFameResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeUnionFameResp) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeUnionFameResp) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *SkyTradeUnionFameResp) GetPlayerInfo() []*SkyTradePlayerBaseInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type SkyTradeGetRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeGetRewardReq) Reset() {
	*x = SkyTradeGetRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGetRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGetRewardReq) ProtoMessage() {}

func (x *SkyTradeGetRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGetRewardReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGetRewardReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{43}
}

func (x *SkyTradeGetRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeGetRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Event     *SkyTradeArrivalEvent `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	FinalFame *int32                `protobuf:"varint,3,opt,name=finalFame" json:"finalFame,omitempty"`
	TotalFame *int32                `protobuf:"varint,4,opt,name=totalFame" json:"totalFame,omitempty"`
}

func (x *SkyTradeGetRewardResp) Reset() {
	*x = SkyTradeGetRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGetRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGetRewardResp) ProtoMessage() {}

func (x *SkyTradeGetRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGetRewardResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGetRewardResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{44}
}

func (x *SkyTradeGetRewardResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGetRewardResp) GetEvent() *SkyTradeArrivalEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SkyTradeGetRewardResp) GetFinalFame() int32 {
	if x != nil && x.FinalFame != nil {
		return *x.FinalFame
	}
	return 0
}

func (x *SkyTradeGetRewardResp) GetTotalFame() int32 {
	if x != nil && x.TotalFame != nil {
		return *x.TotalFame
	}
	return 0
}

type SkyTradeReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Type       *int32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
}

func (x *SkyTradeReportReq) Reset() {
	*x = SkyTradeReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportReq) ProtoMessage() {}

func (x *SkyTradeReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportReq.ProtoReflect.Descriptor instead.
func (*SkyTradeReportReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{45}
}

func (x *SkyTradeReportReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeReportReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type SkyTradeReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Datas []*SkyTradeReportMsg `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *SkyTradeReportResp) Reset() {
	*x = SkyTradeReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportResp) ProtoMessage() {}

func (x *SkyTradeReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportResp.ProtoReflect.Descriptor instead.
func (*SkyTradeReportResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{46}
}

func (x *SkyTradeReportResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeReportResp) GetDatas() []*SkyTradeReportMsg {
	if x != nil {
		return x.Datas
	}
	return nil
}

type SkyTradePortLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradePortLogReq) Reset() {
	*x = SkyTradePortLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradePortLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradePortLogReq) ProtoMessage() {}

func (x *SkyTradePortLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradePortLogReq.ProtoReflect.Descriptor instead.
func (*SkyTradePortLogReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{47}
}

func (x *SkyTradePortLogReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Datas []*SkyTradePortLogMsg `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *SkyTradeLogResp) Reset() {
	*x = SkyTradeLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeLogResp) ProtoMessage() {}

func (x *SkyTradeLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeLogResp.ProtoReflect.Descriptor instead.
func (*SkyTradeLogResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{48}
}

func (x *SkyTradeLogResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeLogResp) GetDatas() []*SkyTradePortLogMsg {
	if x != nil {
		return x.Datas
	}
	return nil
}

type SkyTradeSparInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeSparInfoReq) Reset() {
	*x = SkyTradeSparInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeSparInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeSparInfoReq) ProtoMessage() {}

func (x *SkyTradeSparInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeSparInfoReq.ProtoReflect.Descriptor instead.
func (*SkyTradeSparInfoReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{49}
}

func (x *SkyTradeSparInfoReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeSparInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Exp        *int32                 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	Info       []*SkyTradeWelfareInfo `protobuf:"bytes,3,rep,name=info" json:"info,omitempty"`
	CanReceive *int32                 `protobuf:"varint,4,opt,name=canReceive" json:"canReceive,omitempty"`
}

func (x *SkyTradeSparInfoResp) Reset() {
	*x = SkyTradeSparInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeSparInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeSparInfoResp) ProtoMessage() {}

func (x *SkyTradeSparInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeSparInfoResp.ProtoReflect.Descriptor instead.
func (*SkyTradeSparInfoResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{50}
}

func (x *SkyTradeSparInfoResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeSparInfoResp) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *SkyTradeSparInfoResp) GetInfo() []*SkyTradeWelfareInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SkyTradeSparInfoResp) GetCanReceive() int32 {
	if x != nil && x.CanReceive != nil {
		return *x.CanReceive
	}
	return 0
}

type SkyTradeGetSparPowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeGetSparPowerReq) Reset() {
	*x = SkyTradeGetSparPowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGetSparPowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGetSparPowerReq) ProtoMessage() {}

func (x *SkyTradeGetSparPowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGetSparPowerReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGetSparPowerReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{51}
}

func (x *SkyTradeGetSparPowerReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeGetSparPowerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward     *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	Exp        *int32  `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	CanReceive *int32  `protobuf:"varint,4,opt,name=canReceive" json:"canReceive,omitempty"`
}

func (x *SkyTradeGetSparPowerResp) Reset() {
	*x = SkyTradeGetSparPowerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGetSparPowerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGetSparPowerResp) ProtoMessage() {}

func (x *SkyTradeGetSparPowerResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGetSparPowerResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGetSparPowerResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{52}
}

func (x *SkyTradeGetSparPowerResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGetSparPowerResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *SkyTradeGetSparPowerResp) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *SkyTradeGetSparPowerResp) GetCanReceive() int32 {
	if x != nil && x.CanReceive != nil {
		return *x.CanReceive
	}
	return 0
}

type SkyTradeGetWelfareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id         *int64 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
}

func (x *SkyTradeGetWelfareReq) Reset() {
	*x = SkyTradeGetWelfareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGetWelfareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGetWelfareReq) ProtoMessage() {}

func (x *SkyTradeGetWelfareReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGetWelfareReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGetWelfareReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{53}
}

func (x *SkyTradeGetWelfareReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeGetWelfareReq) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SkyTradeGetWelfareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward     *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	Exp        *int32  `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	CanReceive *int32  `protobuf:"varint,4,opt,name=canReceive" json:"canReceive,omitempty"`
}

func (x *SkyTradeGetWelfareResp) Reset() {
	*x = SkyTradeGetWelfareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGetWelfareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGetWelfareResp) ProtoMessage() {}

func (x *SkyTradeGetWelfareResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGetWelfareResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGetWelfareResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{54}
}

func (x *SkyTradeGetWelfareResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGetWelfareResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *SkyTradeGetWelfareResp) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *SkyTradeGetWelfareResp) GetCanReceive() int32 {
	if x != nil && x.CanReceive != nil {
		return *x.CanReceive
	}
	return 0
}

type SkyTradeSendWelfareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	ItemId     *int32 `protobuf:"varint,2,req,name=itemId" json:"itemId,omitempty"`
	Num        *int32 `protobuf:"varint,3,req,name=num" json:"num,omitempty"`
}

func (x *SkyTradeSendWelfareReq) Reset() {
	*x = SkyTradeSendWelfareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeSendWelfareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeSendWelfareReq) ProtoMessage() {}

func (x *SkyTradeSendWelfareReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeSendWelfareReq.ProtoReflect.Descriptor instead.
func (*SkyTradeSendWelfareReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{55}
}

func (x *SkyTradeSendWelfareReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeSendWelfareReq) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *SkyTradeSendWelfareReq) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type SkyTradeSendWelfareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Info *SkyTradeWelfareInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *SkyTradeSendWelfareResp) Reset() {
	*x = SkyTradeSendWelfareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeSendWelfareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeSendWelfareResp) ProtoMessage() {}

func (x *SkyTradeSendWelfareResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeSendWelfareResp.ProtoReflect.Descriptor instead.
func (*SkyTradeSendWelfareResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{56}
}

func (x *SkyTradeSendWelfareResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeSendWelfareResp) GetInfo() *SkyTradeWelfareInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SkyTradeWelfareRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Type       *int32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
}

func (x *SkyTradeWelfareRecordReq) Reset() {
	*x = SkyTradeWelfareRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeWelfareRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeWelfareRecordReq) ProtoMessage() {}

func (x *SkyTradeWelfareRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeWelfareRecordReq.ProtoReflect.Descriptor instead.
func (*SkyTradeWelfareRecordReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{57}
}

func (x *SkyTradeWelfareRecordReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeWelfareRecordReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type SkyTradeWelfareRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32                   `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Record []*SkyTradeWelfareRecord `protobuf:"bytes,2,rep,name=record" json:"record,omitempty"`
}

func (x *SkyTradeWelfareRecordResp) Reset() {
	*x = SkyTradeWelfareRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeWelfareRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeWelfareRecordResp) ProtoMessage() {}

func (x *SkyTradeWelfareRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeWelfareRecordResp.ProtoReflect.Descriptor instead.
func (*SkyTradeWelfareRecordResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{58}
}

func (x *SkyTradeWelfareRecordResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeWelfareRecordResp) GetRecord() []*SkyTradeWelfareRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type SkyTradeChallengeHeartBeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeChallengeHeartBeatReq) Reset() {
	*x = SkyTradeChallengeHeartBeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeChallengeHeartBeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeChallengeHeartBeatReq) ProtoMessage() {}

func (x *SkyTradeChallengeHeartBeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeChallengeHeartBeatReq.ProtoReflect.Descriptor instead.
func (*SkyTradeChallengeHeartBeatReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{59}
}

func (x *SkyTradeChallengeHeartBeatReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeChallengeHeartBeatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *SkyTradeChallengeHeartBeatResp) Reset() {
	*x = SkyTradeChallengeHeartBeatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeChallengeHeartBeatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeChallengeHeartBeatResp) ProtoMessage() {}

func (x *SkyTradeChallengeHeartBeatResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeChallengeHeartBeatResp.ProtoReflect.Descriptor instead.
func (*SkyTradeChallengeHeartBeatResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{60}
}

func (x *SkyTradeChallengeHeartBeatResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type SkyTradeUseRobItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UseCount   *int32 `protobuf:"varint,2,req,name=useCount" json:"useCount,omitempty"`
}

func (x *SkyTradeUseRobItemReq) Reset() {
	*x = SkyTradeUseRobItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUseRobItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUseRobItemReq) ProtoMessage() {}

func (x *SkyTradeUseRobItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUseRobItemReq.ProtoReflect.Descriptor instead.
func (*SkyTradeUseRobItemReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{61}
}

func (x *SkyTradeUseRobItemReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeUseRobItemReq) GetUseCount() int32 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

type SkyTradeUseRobItemResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Times *int32 `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
}

func (x *SkyTradeUseRobItemResp) Reset() {
	*x = SkyTradeUseRobItemResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUseRobItemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUseRobItemResp) ProtoMessage() {}

func (x *SkyTradeUseRobItemResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUseRobItemResp.ProtoReflect.Descriptor instead.
func (*SkyTradeUseRobItemResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{62}
}

func (x *SkyTradeUseRobItemResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeUseRobItemResp) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

type SkyTradeReportDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	Type       *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (x *SkyTradeReportDetailReq) Reset() {
	*x = SkyTradeReportDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportDetailReq) ProtoMessage() {}

func (x *SkyTradeReportDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportDetailReq.ProtoReflect.Descriptor instead.
func (*SkyTradeReportDetailReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{63}
}

func (x *SkyTradeReportDetailReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeReportDetailReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeReportDetailReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type SkyTradeReportDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Infos []*SkyTradeReportDetailMsg `protobuf:"bytes,2,rep,name=infos" json:"infos,omitempty"`
}

func (x *SkyTradeReportDetailResp) Reset() {
	*x = SkyTradeReportDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportDetailResp) ProtoMessage() {}

func (x *SkyTradeReportDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportDetailResp.ProtoReflect.Descriptor instead.
func (*SkyTradeReportDetailResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{64}
}

func (x *SkyTradeReportDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeReportDetailResp) GetInfos() []*SkyTradeReportDetailMsg {
	if x != nil {
		return x.Infos
	}
	return nil
}

// ----------------------- 竞猜相关 ---------------------
type SkyTradeGuessPlayersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Param      *int32 `protobuf:"varint,2,opt,name=param" json:"param,omitempty"`
}

func (x *SkyTradeGuessPlayersReq) Reset() {
	*x = SkyTradeGuessPlayersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessPlayersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessPlayersReq) ProtoMessage() {}

func (x *SkyTradeGuessPlayersReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessPlayersReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessPlayersReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{65}
}

func (x *SkyTradeGuessPlayersReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeGuessPlayersReq) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

type SkyTradeGuessPlayersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Param      *int32                     `protobuf:"varint,2,opt,name=param" json:"param,omitempty"`
	PlayerList []*SkyTradeGuessPlayerInfo `protobuf:"bytes,3,rep,name=playerList" json:"playerList,omitempty"`
}

func (x *SkyTradeGuessPlayersResp) Reset() {
	*x = SkyTradeGuessPlayersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessPlayersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessPlayersResp) ProtoMessage() {}

func (x *SkyTradeGuessPlayersResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessPlayersResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessPlayersResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{66}
}

func (x *SkyTradeGuessPlayersResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGuessPlayersResp) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

func (x *SkyTradeGuessPlayersResp) GetPlayerList() []*SkyTradeGuessPlayerInfo {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type SkyTradeGuessDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeGuessDataReq) Reset() {
	*x = SkyTradeGuessDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessDataReq) ProtoMessage() {}

func (x *SkyTradeGuessDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessDataReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessDataReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{67}
}

func (x *SkyTradeGuessDataReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeGuessDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret               *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	InfoList          []*SkyTradeGuessUnionInfo `protobuf:"bytes,2,rep,name=infoList" json:"infoList,omitempty"`
	UnionIdArr        []int64                   `protobuf:"varint,3,rep,name=unionIdArr" json:"unionIdArr,omitempty"`
	RewardRankAchieve []int32                   `protobuf:"varint,4,rep,name=rewardRankAchieve" json:"rewardRankAchieve,omitempty"`
	IsReceive         *bool                     `protobuf:"varint,5,opt,name=isReceive" json:"isReceive,omitempty"`
	RewardParam       *int32                    `protobuf:"varint,6,opt,name=rewardParam" json:"rewardParam,omitempty"`
}

func (x *SkyTradeGuessDataResp) Reset() {
	*x = SkyTradeGuessDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessDataResp) ProtoMessage() {}

func (x *SkyTradeGuessDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessDataResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessDataResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{68}
}

func (x *SkyTradeGuessDataResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGuessDataResp) GetInfoList() []*SkyTradeGuessUnionInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

func (x *SkyTradeGuessDataResp) GetUnionIdArr() []int64 {
	if x != nil {
		return x.UnionIdArr
	}
	return nil
}

func (x *SkyTradeGuessDataResp) GetRewardRankAchieve() []int32 {
	if x != nil {
		return x.RewardRankAchieve
	}
	return nil
}

func (x *SkyTradeGuessDataResp) GetIsReceive() bool {
	if x != nil && x.IsReceive != nil {
		return *x.IsReceive
	}
	return false
}

func (x *SkyTradeGuessDataResp) GetRewardParam() int32 {
	if x != nil && x.RewardParam != nil {
		return *x.RewardParam
	}
	return 0
}

type SkyTradeGuessSelectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionIdArr []int64 `protobuf:"varint,3,rep,name=unionIdArr" json:"unionIdArr,omitempty"`
}

func (x *SkyTradeGuessSelectReq) Reset() {
	*x = SkyTradeGuessSelectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessSelectReq) ProtoMessage() {}

func (x *SkyTradeGuessSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessSelectReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessSelectReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{69}
}

func (x *SkyTradeGuessSelectReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeGuessSelectReq) GetUnionIdArr() []int64 {
	if x != nil {
		return x.UnionIdArr
	}
	return nil
}

type SkyTradeGuessSelectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *SkyTradeGuessSelectResp) Reset() {
	*x = SkyTradeGuessSelectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessSelectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessSelectResp) ProtoMessage() {}

func (x *SkyTradeGuessSelectResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessSelectResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessSelectResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{70}
}

func (x *SkyTradeGuessSelectResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type SkyTradeGuessRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeGuessRewardReq) Reset() {
	*x = SkyTradeGuessRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessRewardReq) ProtoMessage() {}

func (x *SkyTradeGuessRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessRewardReq.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessRewardReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{71}
}

func (x *SkyTradeGuessRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeGuessRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Rewards *string `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
}

func (x *SkyTradeGuessRewardResp) Reset() {
	*x = SkyTradeGuessRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGuessRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGuessRewardResp) ProtoMessage() {}

func (x *SkyTradeGuessRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGuessRewardResp.ProtoReflect.Descriptor instead.
func (*SkyTradeGuessRewardResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{72}
}

func (x *SkyTradeGuessRewardResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeGuessRewardResp) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

type SkyTradeReportGoodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeReportGoodsReq) Reset() {
	*x = SkyTradeReportGoodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportGoodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportGoodsReq) ProtoMessage() {}

func (x *SkyTradeReportGoodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportGoodsReq.ProtoReflect.Descriptor instead.
func (*SkyTradeReportGoodsReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{73}
}

func (x *SkyTradeReportGoodsReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeReportGoodsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RareGoodsId *int32 `protobuf:"varint,2,opt,name=rareGoodsId" json:"rareGoodsId,omitempty"`
	PortId      *int32 `protobuf:"varint,3,opt,name=portId" json:"portId,omitempty"`
}

func (x *SkyTradeReportGoodsResp) Reset() {
	*x = SkyTradeReportGoodsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeReportGoodsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeReportGoodsResp) ProtoMessage() {}

func (x *SkyTradeReportGoodsResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeReportGoodsResp.ProtoReflect.Descriptor instead.
func (*SkyTradeReportGoodsResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{74}
}

func (x *SkyTradeReportGoodsResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeReportGoodsResp) GetRareGoodsId() int32 {
	if x != nil && x.RareGoodsId != nil {
		return *x.RareGoodsId
	}
	return 0
}

func (x *SkyTradeReportGoodsResp) GetPortId() int32 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

type SkyTradeResetStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeResetStockReq) Reset() {
	*x = SkyTradeResetStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeResetStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeResetStockReq) ProtoMessage() {}

func (x *SkyTradeResetStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeResetStockReq.ProtoReflect.Descriptor instead.
func (*SkyTradeResetStockReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{75}
}

func (x *SkyTradeResetStockReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeResetStockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                   `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PortGoods []*SkyTradePortGoodsInfo `protobuf:"bytes,2,rep,name=portGoods" json:"portGoods,omitempty"`
}

func (x *SkyTradeResetStockResp) Reset() {
	*x = SkyTradeResetStockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeResetStockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeResetStockResp) ProtoMessage() {}

func (x *SkyTradeResetStockResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeResetStockResp.ProtoReflect.Descriptor instead.
func (*SkyTradeResetStockResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{76}
}

func (x *SkyTradeResetStockResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeResetStockResp) GetPortGoods() []*SkyTradePortGoodsInfo {
	if x != nil {
		return x.PortGoods
	}
	return nil
}

// *
// 1: 新活动开启红点
// 2: 达到指定港口时候
// 3: 个人排行奖励待领取时
// 4: 个人成就可领取
// 5: 任务奖励可领取
// 6: 可挑战次数
// 7: 晶核有可领取奖励
// 8: 礼包有可领取免费礼包
// 9: 妖盟协力有可领取奖励
// 10: 商途宝典可领取奖励
// 11: 可竞猜红点
// 12: 竞猜奖励可领取
// 13: 妖盟排行奖励待领取时
type SkyTradeRedPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *SkyTradeRedPointReq) Reset() {
	*x = SkyTradeRedPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeRedPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeRedPointReq) ProtoMessage() {}

func (x *SkyTradeRedPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeRedPointReq.ProtoReflect.Descriptor instead.
func (*SkyTradeRedPointReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{77}
}

func (x *SkyTradeRedPointReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type SkyTradeRedPointResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *SkyTradeRedPointResp) Reset() {
	*x = SkyTradeRedPointResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeRedPointResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeRedPointResp) ProtoMessage() {}

func (x *SkyTradeRedPointResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeRedPointResp.ProtoReflect.Descriptor instead.
func (*SkyTradeRedPointResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{78}
}

func (x *SkyTradeRedPointResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeRedPointResp) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type SkyTradeUnionGroupDamageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *SkyTradeUnionGroupDamageReq) Reset() {
	*x = SkyTradeUnionGroupDamageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionGroupDamageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionGroupDamageReq) ProtoMessage() {}

func (x *SkyTradeUnionGroupDamageReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionGroupDamageReq.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionGroupDamageReq) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{79}
}

func (x *SkyTradeUnionGroupDamageReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeUnionGroupDamageReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type SkyTradeUnionGroupDamageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                   `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionId   *int64                   `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	UnionName *string                  `protobuf:"bytes,3,opt,name=unionName" json:"unionName,omitempty"`
	Info      []*SkyTradeGroupBaseInfo `protobuf:"bytes,4,rep,name=info" json:"info,omitempty"`
}

func (x *SkyTradeUnionGroupDamageResp) Reset() {
	*x = SkyTradeUnionGroupDamageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionGroupDamageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionGroupDamageResp) ProtoMessage() {}

func (x *SkyTradeUnionGroupDamageResp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionGroupDamageResp.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionGroupDamageResp) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{80}
}

func (x *SkyTradeUnionGroupDamageResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyTradeUnionGroupDamageResp) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeUnionGroupDamageResp) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *SkyTradeUnionGroupDamageResp) GetInfo() []*SkyTradeGroupBaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SkyTradeGroupBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *int32  `protobuf:"varint,1,req,name=groupId" json:"groupId,omitempty"`
	Rank    *int32  `protobuf:"varint,2,req,name=rank" json:"rank,omitempty"`
	Score   *string `protobuf:"bytes,3,req,name=score" json:"score,omitempty"`
	Point   *int64  `protobuf:"varint,4,req,name=point" json:"point,omitempty"`
	DanId   *int32  `protobuf:"varint,5,req,name=danId" json:"danId,omitempty"`
}

func (x *SkyTradeGroupBaseInfo) Reset() {
	*x = SkyTradeGroupBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeGroupBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeGroupBaseInfo) ProtoMessage() {}

func (x *SkyTradeGroupBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeGroupBaseInfo.ProtoReflect.Descriptor instead.
func (*SkyTradeGroupBaseInfo) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{81}
}

func (x *SkyTradeGroupBaseInfo) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *SkyTradeGroupBaseInfo) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *SkyTradeGroupBaseInfo) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

func (x *SkyTradeGroupBaseInfo) GetPoint() int64 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

func (x *SkyTradeGroupBaseInfo) GetDanId() int32 {
	if x != nil && x.DanId != nil {
		return *x.DanId
	}
	return 0
}

// ==================== 同步协议 ========================
type SkyTradeUnionDataSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	FinalFame  *int32 `protobuf:"varint,3,opt,name=finalFame" json:"finalFame,omitempty"`
	TotalFame  *int32 `protobuf:"varint,4,opt,name=totalFame" json:"totalFame,omitempty"`
	GroupRank  *int32 `protobuf:"varint,5,opt,name=groupRank" json:"groupRank,omitempty"`
}

func (x *SkyTradeUnionDataSync) Reset() {
	*x = SkyTradeUnionDataSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeUnionDataSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeUnionDataSync) ProtoMessage() {}

func (x *SkyTradeUnionDataSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeUnionDataSync.ProtoReflect.Descriptor instead.
func (*SkyTradeUnionDataSync) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{82}
}

func (x *SkyTradeUnionDataSync) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeUnionDataSync) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeUnionDataSync) GetFinalFame() int32 {
	if x != nil && x.FinalFame != nil {
		return *x.FinalFame
	}
	return 0
}

func (x *SkyTradeUnionDataSync) GetTotalFame() int32 {
	if x != nil && x.TotalFame != nil {
		return *x.TotalFame
	}
	return 0
}

func (x *SkyTradeUnionDataSync) GetGroupRank() int32 {
	if x != nil && x.GroupRank != nil {
		return *x.GroupRank
	}
	return 0
}

type SkyTradeResetSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortGoods []*SkyTradePortGoodsInfo `protobuf:"bytes,1,rep,name=portGoods" json:"portGoods,omitempty"`
}

func (x *SkyTradeResetSync) Reset() {
	*x = SkyTradeResetSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeResetSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeResetSync) ProtoMessage() {}

func (x *SkyTradeResetSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeResetSync.ProtoReflect.Descriptor instead.
func (*SkyTradeResetSync) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{83}
}

func (x *SkyTradeResetSync) GetPortGoods() []*SkyTradePortGoodsInfo {
	if x != nil {
		return x.PortGoods
	}
	return nil
}

type SkyTradeAirshipInfoSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId  *int32               `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	AirshipInfo *SkyTradeAirshipInfo `protobuf:"bytes,2,opt,name=airshipInfo" json:"airshipInfo,omitempty"`
	PlayerId    *int64               `protobuf:"varint,3,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *SkyTradeAirshipInfoSync) Reset() {
	*x = SkyTradeAirshipInfoSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeAirshipInfoSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeAirshipInfoSync) ProtoMessage() {}

func (x *SkyTradeAirshipInfoSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeAirshipInfoSync.ProtoReflect.Descriptor instead.
func (*SkyTradeAirshipInfoSync) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{84}
}

func (x *SkyTradeAirshipInfoSync) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *SkyTradeAirshipInfoSync) GetAirshipInfo() *SkyTradeAirshipInfo {
	if x != nil {
		return x.AirshipInfo
	}
	return nil
}

func (x *SkyTradeAirshipInfoSync) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type SkyTradeChallengeInfoSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   *int64                 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	UnionName  *string                `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	Name       *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SelfLevel  *int32                 `protobuf:"varint,4,opt,name=selfLevel" json:"selfLevel,omitempty"`
	Advanced   []int64                `protobuf:"varint,5,rep,name=advanced" json:"advanced,omitempty"`
	Appearance *SkyTradeAppearanceMsg `protobuf:"bytes,6,opt,name=appearance" json:"appearance,omitempty"`
	// 被攻击的妖盟信息
	TargetUnion  *SkyTradeUnionChallengeSimpleMsg `protobuf:"bytes,7,opt,name=targetUnion" json:"targetUnion,omitempty"`
	GroupRankMsg []*SkyTradeUnionGroupRankMsg     `protobuf:"bytes,8,rep,name=groupRankMsg" json:"groupRankMsg,omitempty"`
}

func (x *SkyTradeChallengeInfoSync) Reset() {
	*x = SkyTradeChallengeInfoSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeChallengeInfoSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeChallengeInfoSync) ProtoMessage() {}

func (x *SkyTradeChallengeInfoSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeChallengeInfoSync.ProtoReflect.Descriptor instead.
func (*SkyTradeChallengeInfoSync) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{85}
}

func (x *SkyTradeChallengeInfoSync) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyTradeChallengeInfoSync) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *SkyTradeChallengeInfoSync) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SkyTradeChallengeInfoSync) GetSelfLevel() int32 {
	if x != nil && x.SelfLevel != nil {
		return *x.SelfLevel
	}
	return 0
}

func (x *SkyTradeChallengeInfoSync) GetAdvanced() []int64 {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *SkyTradeChallengeInfoSync) GetAppearance() *SkyTradeAppearanceMsg {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *SkyTradeChallengeInfoSync) GetTargetUnion() *SkyTradeUnionChallengeSimpleMsg {
	if x != nil {
		return x.TargetUnion
	}
	return nil
}

func (x *SkyTradeChallengeInfoSync) GetGroupRankMsg() []*SkyTradeUnionGroupRankMsg {
	if x != nil {
		return x.GroupRankMsg
	}
	return nil
}

type SkyTradeRareGoodsSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId      *int32 `protobuf:"varint,1,opt,name=portId" json:"portId,omitempty"`
	RareGoodsId *int32 `protobuf:"varint,2,opt,name=rareGoodsId" json:"rareGoodsId,omitempty"`
}

func (x *SkyTradeRareGoodsSync) Reset() {
	*x = SkyTradeRareGoodsSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeRareGoodsSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeRareGoodsSync) ProtoMessage() {}

func (x *SkyTradeRareGoodsSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeRareGoodsSync.ProtoReflect.Descriptor instead.
func (*SkyTradeRareGoodsSync) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{86}
}

func (x *SkyTradeRareGoodsSync) GetPortId() int32 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *SkyTradeRareGoodsSync) GetRareGoodsId() int32 {
	if x != nil && x.RareGoodsId != nil {
		return *x.RareGoodsId
	}
	return 0
}

type SkyTradeFameRankSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId      *int64                       `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	FinalFame    *int32                       `protobuf:"varint,2,opt,name=finalFame" json:"finalFame,omitempty"`
	GroupRankMsg []*SkyTradeUnionGroupRankMsg `protobuf:"bytes,3,rep,name=groupRankMsg" json:"groupRankMsg,omitempty"`
}

func (x *SkyTradeFameRankSync) Reset() {
	*x = SkyTradeFameRankSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyTrade_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyTradeFameRankSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyTradeFameRankSync) ProtoMessage() {}

func (x *SkyTradeFameRankSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyTrade_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyTradeFameRankSync.ProtoReflect.Descriptor instead.
func (*SkyTradeFameRankSync) Descriptor() ([]byte, []int) {
	return file_SkyTrade_proto_rawDescGZIP(), []int{87}
}

func (x *SkyTradeFameRankSync) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *SkyTradeFameRankSync) GetFinalFame() int32 {
	if x != nil && x.FinalFame != nil {
		return *x.FinalFame
	}
	return 0
}

func (x *SkyTradeFameRankSync) GetGroupRankMsg() []*SkyTradeUnionGroupRankMsg {
	if x != nil {
		return x.GroupRankMsg
	}
	return nil
}

var File_SkyTrade_proto protoreflect.FileDescriptor

var file_SkyTrade_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x6b, 0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x8b,
	0x01, 0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x57, 0x0a, 0x13,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x68, 0x70, 0x22, 0x52, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x13, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa8, 0x03, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x69, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x51,
	0x0a, 0x0d, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x69,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x17,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x72, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x72, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x22, 0xa7,
	0x02, 0x0a, 0x19, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x68, 0x61, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x1f, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x48, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x48, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x68, 0x61, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x49, 0x0a, 0x19, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0xa8, 0x01,
	0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x46, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x46, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x11, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x41,
	0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7d,
	0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4b, 0x0a,
	0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x53,
	0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x6a, 0x0a,
	0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x65, 0x0a, 0x17, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x08, 0x72,
	0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x4d, 0x73, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x15,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x18, 0x53, 0x6b, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x19, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x10, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xc5, 0x03, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x46, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47,
	0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x22,
	0x50, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x71, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x64, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xb3, 0x01,
	0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x69, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47,
	0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x73,
	0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x74, 0x6f, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x69, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x10,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3a, 0x0a, 0x18, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0xf3, 0x01, 0x0a, 0x19, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x49, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x12, 0x49, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x53, 0x6b,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x50, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53,
	0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x36, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x53, 0x6b,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6d,
	0x65, 0x22, 0x47, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x12, 0x53, 0x6b,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22,
	0x34, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x0f, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53,
	0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x73,
	0x67, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x35, 0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x97, 0x01, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x61, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x3b, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0x39, 0x0a, 0x17, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x18, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0x47, 0x0a, 0x15,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x65, 0x74, 0x57, 0x65, 0x6c, 0x66, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x47, 0x65, 0x74, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0x62, 0x0a, 0x16, 0x53,
	0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x6c, 0x66, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0x68, 0x0a, 0x17, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x57,
	0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x18, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x19, 0x53, 0x6b, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x3f, 0x0a, 0x1d, 0x53,
	0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x1e,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x22, 0x53, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73, 0x65, 0x52,
	0x6f, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x6f, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x17, 0x53, 0x6b, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x6f, 0x0a, 0x18, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x41,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x4f, 0x0a, 0x17, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65,
	0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65, 0x73, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x47, 0x75, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xff, 0x01, 0x0a,
	0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x72, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x58,
	0x0a, 0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x72, 0x72, 0x22, 0x2b, 0x0a, 0x17, 0x53, 0x6b, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x17, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x75, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x17, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x61, 0x72, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x72, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x73, 0x0a, 0x16, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x13, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x14,
	0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x1b, 0x53, 0x6b,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01,
	0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x5c, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61,
	0x69, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x03, 0x0a, 0x19, 0x53, 0x6b, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73,
	0x67, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x4d, 0x73, 0x67, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73,
	0x67, 0x22, 0x51, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x72,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x72, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x72, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x46, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x46, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x46, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x6b, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69,
	0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_SkyTrade_proto_rawDescOnce sync.Once
	file_SkyTrade_proto_rawDescData = file_SkyTrade_proto_rawDesc
)

func file_SkyTrade_proto_rawDescGZIP() []byte {
	file_SkyTrade_proto_rawDescOnce.Do(func() {
		file_SkyTrade_proto_rawDescData = protoimpl.X.CompressGZIP(file_SkyTrade_proto_rawDescData)
	})
	return file_SkyTrade_proto_rawDescData
}

var file_SkyTrade_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_SkyTrade_proto_goTypes = []any{
	(*SkyTradeGoodsConfig)(nil),             // 0: com.yq.msg.CityMsg.SkyTradeGoodsConfig
	(*SkyTradeLevelConfig)(nil),             // 1: com.yq.msg.CityMsg.SkyTradeLevelConfig
	(*SkyTradeGroupConfig)(nil),             // 2: com.yq.msg.CityMsg.SkyTradeGroupConfig
	(*SkyTradePortConfig)(nil),              // 3: com.yq.msg.CityMsg.SkyTradePortConfig
	(*SkyTradeScoreConfig)(nil),             // 4: com.yq.msg.CityMsg.SkyTradeScoreConfig
	(*SkyTradeConfigSync)(nil),              // 5: com.yq.msg.CityMsg.SkyTradeConfigSync
	(*SkyTradePlayerData)(nil),              // 6: com.yq.msg.CityMsg.SkyTradePlayerData
	(*SkyTradeGoods)(nil),                   // 7: com.yq.msg.CityMsg.SkyTradeGoods
	(*SkyTradeAirshipInfo)(nil),             // 8: com.yq.msg.CityMsg.SkyTradeAirshipInfo
	(*SkyTradeUnionPlayerData)(nil),         // 9: com.yq.msg.CityMsg.SkyTradeUnionPlayerData
	(*SkyTradePortGoodsInfo)(nil),           // 10: com.yq.msg.CityMsg.SkyTradePortGoodsInfo
	(*SkyTradeUnionChallengeMsg)(nil),       // 11: com.yq.msg.CityMsg.SkyTradeUnionChallengeMsg
	(*SkyTradeUnionChallengeSimpleMsg)(nil), // 12: com.yq.msg.CityMsg.SkyTradeUnionChallengeSimpleMsg
	(*SkyTradeUnionGroupRankMsg)(nil),       // 13: com.yq.msg.CityMsg.SkyTradeUnionGroupRankMsg
	(*SkyTradeArrivalEvent)(nil),            // 14: com.yq.msg.CityMsg.SkyTradeArrivalEvent
	(*SkyTradeReportMsg)(nil),               // 15: com.yq.msg.CityMsg.SkyTradeReportMsg
	(*SkyTradeReportDetailMsg)(nil),         // 16: com.yq.msg.CityMsg.SkyTradeReportDetailMsg
	(*SkyTradePortLogMsg)(nil),              // 17: com.yq.msg.CityMsg.SkyTradePortLogMsg
	(*SkyTradeWelfareInfo)(nil),             // 18: com.yq.msg.CityMsg.SkyTradeWelfareInfo
	(*SkyTradeWelfareRecord)(nil),           // 19: com.yq.msg.CityMsg.SkyTradeWelfareRecord
	(*SkyTradeUnionBaseMsg)(nil),            // 20: com.yq.msg.CityMsg.SkyTradeUnionBaseMsg
	(*SkyTradePlayerBaseInfo)(nil),          // 21: com.yq.msg.CityMsg.SkyTradePlayerBaseInfo
	(*SkyTradeGuessPlayerInfo)(nil),         // 22: com.yq.msg.CityMsg.SkyTradeGuessPlayerInfo
	(*SkyTradeGuessUnionInfo)(nil),          // 23: com.yq.msg.CityMsg.SkyTradeGuessUnionInfo
	(*SkyTradeAppearanceMsg)(nil),           // 24: com.yq.msg.CityMsg.SkyTradeAppearanceMsg
	(*SkyTradeEnterActivityReq)(nil),        // 25: com.yq.msg.CityMsg.SkyTradeEnterActivityReq
	(*SkyTradeEnterActivityResp)(nil),       // 26: com.yq.msg.CityMsg.SkyTradeEnterActivityResp
	(*SkyTradeEnterReq)(nil),                // 27: com.yq.msg.CityMsg.SkyTradeEnterReq
	(*SkyTradeEnterResp)(nil),               // 28: com.yq.msg.CityMsg.SkyTradeEnterResp
	(*SkyTradeGroupInfoReq)(nil),            // 29: com.yq.msg.CityMsg.SkyTradeGroupInfoReq
	(*SkyTradeGroupInfoResp)(nil),           // 30: com.yq.msg.CityMsg.SkyTradeGroupInfoResp
	(*SkyTradeAddSpeedReq)(nil),             // 31: com.yq.msg.CityMsg.SkyTradeAddSpeedReq
	(*SkyTradeAddSpeedResp)(nil),            // 32: com.yq.msg.CityMsg.SkyTradeAddSpeedResp
	(*SkyTradeGotoPortReq)(nil),             // 33: com.yq.msg.CityMsg.SkyTradeGotoPortReq
	(*SkyTradeGotoPortResp)(nil),            // 34: com.yq.msg.CityMsg.SkyTradeGotoPortResp
	(*SkyTradeDealReq)(nil),                 // 35: com.yq.msg.CityMsg.SkyTradeDealReq
	(*SkyTradeDealResp)(nil),                // 36: com.yq.msg.CityMsg.SkyTradeDealResp
	(*SkyTradeChallengeListReq)(nil),        // 37: com.yq.msg.CityMsg.SkyTradeChallengeListReq
	(*SkyTradeChallengeListResp)(nil),       // 38: com.yq.msg.CityMsg.SkyTradeChallengeListResp
	(*SkyTradeChallengeReq)(nil),            // 39: com.yq.msg.CityMsg.SkyTradeChallengeReq
	(*SkyTradeChallengeResp)(nil),           // 40: com.yq.msg.CityMsg.SkyTradeChallengeResp
	(*SkyTradeUnionFameReq)(nil),            // 41: com.yq.msg.CityMsg.SkyTradeUnionFameReq
	(*SkyTradeUnionFameResp)(nil),           // 42: com.yq.msg.CityMsg.SkyTradeUnionFameResp
	(*SkyTradeGetRewardReq)(nil),            // 43: com.yq.msg.CityMsg.SkyTradeGetRewardReq
	(*SkyTradeGetRewardResp)(nil),           // 44: com.yq.msg.CityMsg.SkyTradeGetRewardResp
	(*SkyTradeReportReq)(nil),               // 45: com.yq.msg.CityMsg.SkyTradeReportReq
	(*SkyTradeReportResp)(nil),              // 46: com.yq.msg.CityMsg.SkyTradeReportResp
	(*SkyTradePortLogReq)(nil),              // 47: com.yq.msg.CityMsg.SkyTradePortLogReq
	(*SkyTradeLogResp)(nil),                 // 48: com.yq.msg.CityMsg.SkyTradeLogResp
	(*SkyTradeSparInfoReq)(nil),             // 49: com.yq.msg.CityMsg.SkyTradeSparInfoReq
	(*SkyTradeSparInfoResp)(nil),            // 50: com.yq.msg.CityMsg.SkyTradeSparInfoResp
	(*SkyTradeGetSparPowerReq)(nil),         // 51: com.yq.msg.CityMsg.SkyTradeGetSparPowerReq
	(*SkyTradeGetSparPowerResp)(nil),        // 52: com.yq.msg.CityMsg.SkyTradeGetSparPowerResp
	(*SkyTradeGetWelfareReq)(nil),           // 53: com.yq.msg.CityMsg.SkyTradeGetWelfareReq
	(*SkyTradeGetWelfareResp)(nil),          // 54: com.yq.msg.CityMsg.SkyTradeGetWelfareResp
	(*SkyTradeSendWelfareReq)(nil),          // 55: com.yq.msg.CityMsg.SkyTradeSendWelfareReq
	(*SkyTradeSendWelfareResp)(nil),         // 56: com.yq.msg.CityMsg.SkyTradeSendWelfareResp
	(*SkyTradeWelfareRecordReq)(nil),        // 57: com.yq.msg.CityMsg.SkyTradeWelfareRecordReq
	(*SkyTradeWelfareRecordResp)(nil),       // 58: com.yq.msg.CityMsg.SkyTradeWelfareRecordResp
	(*SkyTradeChallengeHeartBeatReq)(nil),   // 59: com.yq.msg.CityMsg.SkyTradeChallengeHeartBeatReq
	(*SkyTradeChallengeHeartBeatResp)(nil),  // 60: com.yq.msg.CityMsg.SkyTradeChallengeHeartBeatResp
	(*SkyTradeUseRobItemReq)(nil),           // 61: com.yq.msg.CityMsg.SkyTradeUseRobItemReq
	(*SkyTradeUseRobItemResp)(nil),          // 62: com.yq.msg.CityMsg.SkyTradeUseRobItemResp
	(*SkyTradeReportDetailReq)(nil),         // 63: com.yq.msg.CityMsg.SkyTradeReportDetailReq
	(*SkyTradeReportDetailResp)(nil),        // 64: com.yq.msg.CityMsg.SkyTradeReportDetailResp
	(*SkyTradeGuessPlayersReq)(nil),         // 65: com.yq.msg.CityMsg.SkyTradeGuessPlayersReq
	(*SkyTradeGuessPlayersResp)(nil),        // 66: com.yq.msg.CityMsg.SkyTradeGuessPlayersResp
	(*SkyTradeGuessDataReq)(nil),            // 67: com.yq.msg.CityMsg.SkyTradeGuessDataReq
	(*SkyTradeGuessDataResp)(nil),           // 68: com.yq.msg.CityMsg.SkyTradeGuessDataResp
	(*SkyTradeGuessSelectReq)(nil),          // 69: com.yq.msg.CityMsg.SkyTradeGuessSelectReq
	(*SkyTradeGuessSelectResp)(nil),         // 70: com.yq.msg.CityMsg.SkyTradeGuessSelectResp
	(*SkyTradeGuessRewardReq)(nil),          // 71: com.yq.msg.CityMsg.SkyTradeGuessRewardReq
	(*SkyTradeGuessRewardResp)(nil),         // 72: com.yq.msg.CityMsg.SkyTradeGuessRewardResp
	(*SkyTradeReportGoodsReq)(nil),          // 73: com.yq.msg.CityMsg.SkyTradeReportGoodsReq
	(*SkyTradeReportGoodsResp)(nil),         // 74: com.yq.msg.CityMsg.SkyTradeReportGoodsResp
	(*SkyTradeResetStockReq)(nil),           // 75: com.yq.msg.CityMsg.SkyTradeResetStockReq
	(*SkyTradeResetStockResp)(nil),          // 76: com.yq.msg.CityMsg.SkyTradeResetStockResp
	(*SkyTradeRedPointReq)(nil),             // 77: com.yq.msg.CityMsg.SkyTradeRedPointReq
	(*SkyTradeRedPointResp)(nil),            // 78: com.yq.msg.CityMsg.SkyTradeRedPointResp
	(*SkyTradeUnionGroupDamageReq)(nil),     // 79: com.yq.msg.CityMsg.SkyTradeUnionGroupDamageReq
	(*SkyTradeUnionGroupDamageResp)(nil),    // 80: com.yq.msg.CityMsg.SkyTradeUnionGroupDamageResp
	(*SkyTradeGroupBaseInfo)(nil),           // 81: com.yq.msg.CityMsg.SkyTradeGroupBaseInfo
	(*SkyTradeUnionDataSync)(nil),           // 82: com.yq.msg.CityMsg.SkyTradeUnionDataSync
	(*SkyTradeResetSync)(nil),               // 83: com.yq.msg.CityMsg.SkyTradeResetSync
	(*SkyTradeAirshipInfoSync)(nil),         // 84: com.yq.msg.CityMsg.SkyTradeAirshipInfoSync
	(*SkyTradeChallengeInfoSync)(nil),       // 85: com.yq.msg.CityMsg.SkyTradeChallengeInfoSync
	(*SkyTradeRareGoodsSync)(nil),           // 86: com.yq.msg.CityMsg.SkyTradeRareGoodsSync
	(*SkyTradeFameRankSync)(nil),            // 87: com.yq.msg.CityMsg.SkyTradeFameRankSync
	(*PlayerBaseDataMsg)(nil),               // 88: com.yq.msg.CityMsg.PlayerBaseDataMsg
	(*PlayerHeadDataMsg)(nil),               // 89: com.yq.msg.CityMsg.PlayerHeadDataMsg
	(*UnionRankTempMsg)(nil),                // 90: com.yq.msg.CityMsg.UnionRankTempMsg
}
var file_SkyTrade_proto_depIdxs = []int32{
	0,  // 0: com.yq.msg.CityMsg.SkyTradeConfigSync.goodsConfig:type_name -> com.yq.msg.CityMsg.SkyTradeGoodsConfig
	1,  // 1: com.yq.msg.CityMsg.SkyTradeConfigSync.levelConfig:type_name -> com.yq.msg.CityMsg.SkyTradeLevelConfig
	3,  // 2: com.yq.msg.CityMsg.SkyTradeConfigSync.portConfig:type_name -> com.yq.msg.CityMsg.SkyTradePortConfig
	2,  // 3: com.yq.msg.CityMsg.SkyTradeConfigSync.groupConfig:type_name -> com.yq.msg.CityMsg.SkyTradeGroupConfig
	4,  // 4: com.yq.msg.CityMsg.SkyTradeConfigSync.scoreConfig:type_name -> com.yq.msg.CityMsg.SkyTradeScoreConfig
	8,  // 5: com.yq.msg.CityMsg.SkyTradePlayerData.airshipInfo:type_name -> com.yq.msg.CityMsg.SkyTradeAirshipInfo
	7,  // 6: com.yq.msg.CityMsg.SkyTradePlayerData.goods:type_name -> com.yq.msg.CityMsg.SkyTradeGoods
	88, // 7: com.yq.msg.CityMsg.SkyTradeUnionPlayerData.player:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	8,  // 8: com.yq.msg.CityMsg.SkyTradeUnionPlayerData.airshipInfo:type_name -> com.yq.msg.CityMsg.SkyTradeAirshipInfo
	7,  // 9: com.yq.msg.CityMsg.SkyTradePortGoodsInfo.goods:type_name -> com.yq.msg.CityMsg.SkyTradeGoods
	20, // 10: com.yq.msg.CityMsg.SkyTradeUnionChallengeMsg.base:type_name -> com.yq.msg.CityMsg.SkyTradeUnionBaseMsg
	89, // 11: com.yq.msg.CityMsg.SkyTradeReportMsg.headData:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	90, // 12: com.yq.msg.CityMsg.SkyTradeGuessUnionInfo.rankInfo:type_name -> com.yq.msg.CityMsg.UnionRankTempMsg
	6,  // 13: com.yq.msg.CityMsg.SkyTradeEnterResp.playerData:type_name -> com.yq.msg.CityMsg.SkyTradePlayerData
	9,  // 14: com.yq.msg.CityMsg.SkyTradeEnterResp.unionPlayerData:type_name -> com.yq.msg.CityMsg.SkyTradeUnionPlayerData
	10, // 15: com.yq.msg.CityMsg.SkyTradeEnterResp.portGoods:type_name -> com.yq.msg.CityMsg.SkyTradePortGoodsInfo
	14, // 16: com.yq.msg.CityMsg.SkyTradeEnterResp.event:type_name -> com.yq.msg.CityMsg.SkyTradeArrivalEvent
	20, // 17: com.yq.msg.CityMsg.SkyTradeGroupInfoResp.groupInfo:type_name -> com.yq.msg.CityMsg.SkyTradeUnionBaseMsg
	8,  // 18: com.yq.msg.CityMsg.SkyTradeAddSpeedResp.airshipInfo:type_name -> com.yq.msg.CityMsg.SkyTradeAirshipInfo
	14, // 19: com.yq.msg.CityMsg.SkyTradeAddSpeedResp.event:type_name -> com.yq.msg.CityMsg.SkyTradeArrivalEvent
	8,  // 20: com.yq.msg.CityMsg.SkyTradeGotoPortResp.airshipInfo:type_name -> com.yq.msg.CityMsg.SkyTradeAirshipInfo
	7,  // 21: com.yq.msg.CityMsg.SkyTradeDealResp.goods:type_name -> com.yq.msg.CityMsg.SkyTradeGoods
	11, // 22: com.yq.msg.CityMsg.SkyTradeChallengeListResp.unionMsg:type_name -> com.yq.msg.CityMsg.SkyTradeUnionChallengeMsg
	24, // 23: com.yq.msg.CityMsg.SkyTradeChallengeListResp.appearance:type_name -> com.yq.msg.CityMsg.SkyTradeAppearanceMsg
	21, // 24: com.yq.msg.CityMsg.SkyTradeUnionFameResp.playerInfo:type_name -> com.yq.msg.CityMsg.SkyTradePlayerBaseInfo
	14, // 25: com.yq.msg.CityMsg.SkyTradeGetRewardResp.event:type_name -> com.yq.msg.CityMsg.SkyTradeArrivalEvent
	15, // 26: com.yq.msg.CityMsg.SkyTradeReportResp.datas:type_name -> com.yq.msg.CityMsg.SkyTradeReportMsg
	17, // 27: com.yq.msg.CityMsg.SkyTradeLogResp.datas:type_name -> com.yq.msg.CityMsg.SkyTradePortLogMsg
	18, // 28: com.yq.msg.CityMsg.SkyTradeSparInfoResp.info:type_name -> com.yq.msg.CityMsg.SkyTradeWelfareInfo
	18, // 29: com.yq.msg.CityMsg.SkyTradeSendWelfareResp.info:type_name -> com.yq.msg.CityMsg.SkyTradeWelfareInfo
	19, // 30: com.yq.msg.CityMsg.SkyTradeWelfareRecordResp.record:type_name -> com.yq.msg.CityMsg.SkyTradeWelfareRecord
	16, // 31: com.yq.msg.CityMsg.SkyTradeReportDetailResp.infos:type_name -> com.yq.msg.CityMsg.SkyTradeReportDetailMsg
	22, // 32: com.yq.msg.CityMsg.SkyTradeGuessPlayersResp.playerList:type_name -> com.yq.msg.CityMsg.SkyTradeGuessPlayerInfo
	23, // 33: com.yq.msg.CityMsg.SkyTradeGuessDataResp.infoList:type_name -> com.yq.msg.CityMsg.SkyTradeGuessUnionInfo
	10, // 34: com.yq.msg.CityMsg.SkyTradeResetStockResp.portGoods:type_name -> com.yq.msg.CityMsg.SkyTradePortGoodsInfo
	81, // 35: com.yq.msg.CityMsg.SkyTradeUnionGroupDamageResp.info:type_name -> com.yq.msg.CityMsg.SkyTradeGroupBaseInfo
	10, // 36: com.yq.msg.CityMsg.SkyTradeResetSync.portGoods:type_name -> com.yq.msg.CityMsg.SkyTradePortGoodsInfo
	8,  // 37: com.yq.msg.CityMsg.SkyTradeAirshipInfoSync.airshipInfo:type_name -> com.yq.msg.CityMsg.SkyTradeAirshipInfo
	24, // 38: com.yq.msg.CityMsg.SkyTradeChallengeInfoSync.appearance:type_name -> com.yq.msg.CityMsg.SkyTradeAppearanceMsg
	12, // 39: com.yq.msg.CityMsg.SkyTradeChallengeInfoSync.targetUnion:type_name -> com.yq.msg.CityMsg.SkyTradeUnionChallengeSimpleMsg
	13, // 40: com.yq.msg.CityMsg.SkyTradeChallengeInfoSync.groupRankMsg:type_name -> com.yq.msg.CityMsg.SkyTradeUnionGroupRankMsg
	13, // 41: com.yq.msg.CityMsg.SkyTradeFameRankSync.groupRankMsg:type_name -> com.yq.msg.CityMsg.SkyTradeUnionGroupRankMsg
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_SkyTrade_proto_init() }
func file_SkyTrade_proto_init() {
	if File_SkyTrade_proto != nil {
		return
	}
	file_Common_proto_init()
	file_Rank_proto_init()
	file_WatchPlayer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SkyTrade_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGoodsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeLevelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradePortConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeScoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeConfigSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGoods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeAirshipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradePortGoodsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionChallengeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionChallengeSimpleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionGroupRankMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeArrivalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportDetailMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradePortLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeWelfareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeWelfareRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionBaseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradePlayerBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessUnionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeAppearanceMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeEnterActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeEnterActivityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeEnterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeEnterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeAddSpeedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeAddSpeedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGotoPortReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGotoPortResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeDealReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeDealResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeChallengeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeChallengeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeChallengeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionFameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionFameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGetRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGetRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradePortLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeSparInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeSparInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGetSparPowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGetSparPowerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGetWelfareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGetWelfareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeSendWelfareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeSendWelfareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeWelfareRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeWelfareRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeChallengeHeartBeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeChallengeHeartBeatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUseRobItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUseRobItemResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessPlayersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessPlayersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessSelectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessSelectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGuessRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportGoodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeReportGoodsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeResetStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeResetStockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeRedPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeRedPointResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionGroupDamageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionGroupDamageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeGroupBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeUnionDataSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeResetSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeAirshipInfoSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeChallengeInfoSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeRareGoodsSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyTrade_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*SkyTradeFameRankSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SkyTrade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SkyTrade_proto_goTypes,
		DependencyIndexes: file_SkyTrade_proto_depIdxs,
		MessageInfos:      file_SkyTrade_proto_msgTypes,
	}.Build()
	File_SkyTrade_proto = out.File
	file_SkyTrade_proto_rawDesc = nil
	file_SkyTrade_proto_goTypes = nil
	file_SkyTrade_proto_depIdxs = nil
}
