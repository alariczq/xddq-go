// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: UnionBattle.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UnionBattleReportType int32

const (
	UnionBattleReportType_UnionBattleReportType_All   UnionBattleReportType = 0
	UnionBattleReportType_UnionBattleReportType_Union UnionBattleReportType = 1
)

// Enum value maps for UnionBattleReportType.
var (
	UnionBattleReportType_name = map[int32]string{
		0: "UnionBattleReportType_All",
		1: "UnionBattleReportType_Union",
	}
	UnionBattleReportType_value = map[string]int32{
		"UnionBattleReportType_All":   0,
		"UnionBattleReportType_Union": 1,
	}
)

func (x UnionBattleReportType) Enum() *UnionBattleReportType {
	p := new(UnionBattleReportType)
	*p = x
	return p
}

func (x UnionBattleReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnionBattleReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_UnionBattle_proto_enumTypes[0].Descriptor()
}

func (UnionBattleReportType) Type() protoreflect.EnumType {
	return &file_UnionBattle_proto_enumTypes[0]
}

func (x UnionBattleReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UnionBattleReportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UnionBattleReportType(num)
	return nil
}

// Deprecated: Use UnionBattleReportType.Descriptor instead.
func (UnionBattleReportType) EnumDescriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{0}
}

type UnionBattleEnterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *UnionBattleEnterReq) Reset() {
	*x = UnionBattleEnterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleEnterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleEnterReq) ProtoMessage() {}

func (x *UnionBattleEnterReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleEnterReq.ProtoReflect.Descriptor instead.
func (*UnionBattleEnterReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{0}
}

func (x *UnionBattleEnterReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type UnionBattleEnterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo *UnionBattlePlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *UnionBattleEnterRsp) Reset() {
	*x = UnionBattleEnterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleEnterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleEnterRsp) ProtoMessage() {}

func (x *UnionBattleEnterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleEnterRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleEnterRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{1}
}

func (x *UnionBattleEnterRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleEnterRsp) GetPlayerInfo() *UnionBattlePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type UnionBattleGetJoinMemberListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *UnionBattleGetJoinMemberListReq) Reset() {
	*x = UnionBattleGetJoinMemberListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetJoinMemberListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetJoinMemberListReq) ProtoMessage() {}

func (x *UnionBattleGetJoinMemberListReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetJoinMemberListReq.ProtoReflect.Descriptor instead.
func (*UnionBattleGetJoinMemberListReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{2}
}

func (x *UnionBattleGetJoinMemberListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type UnionBattleGetJoinMemberListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                *int32   `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	JoinMemberNameList []string `protobuf:"bytes,2,rep,name=joinMemberNameList" json:"joinMemberNameList,omitempty"`
	UnionExp           *int64   `protobuf:"varint,3,opt,name=unionExp" json:"unionExp,omitempty"`
}

func (x *UnionBattleGetJoinMemberListRsp) Reset() {
	*x = UnionBattleGetJoinMemberListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetJoinMemberListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetJoinMemberListRsp) ProtoMessage() {}

func (x *UnionBattleGetJoinMemberListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetJoinMemberListRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleGetJoinMemberListRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{3}
}

func (x *UnionBattleGetJoinMemberListRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleGetJoinMemberListRsp) GetJoinMemberNameList() []string {
	if x != nil {
		return x.JoinMemberNameList
	}
	return nil
}

func (x *UnionBattleGetJoinMemberListRsp) GetUnionExp() int64 {
	if x != nil && x.UnionExp != nil {
		return *x.UnionExp
	}
	return 0
}

type UnionBattleMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId         *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	TargetId           *int64 `protobuf:"varint,2,req,name=targetId" json:"targetId,omitempty"`
	ItemChallengeTimes *int32 `protobuf:"varint,3,opt,name=itemChallengeTimes" json:"itemChallengeTimes,omitempty"`
}

func (x *UnionBattleMatchReq) Reset() {
	*x = UnionBattleMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleMatchReq) ProtoMessage() {}

func (x *UnionBattleMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleMatchReq.ProtoReflect.Descriptor instead.
func (*UnionBattleMatchReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{4}
}

func (x *UnionBattleMatchReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleMatchReq) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *UnionBattleMatchReq) GetItemChallengeTimes() int32 {
	if x != nil && x.ItemChallengeTimes != nil {
		return *x.ItemChallengeTimes
	}
	return 0
}

type UnionBattleMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo *UnionBattlePlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
	Cost       *AwardInfoList         `protobuf:"bytes,3,opt,name=cost" json:"cost,omitempty"`
	Reward     *AwardInfoList         `protobuf:"bytes,4,opt,name=reward" json:"reward,omitempty"`
}

func (x *UnionBattleMatchRsp) Reset() {
	*x = UnionBattleMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleMatchRsp) ProtoMessage() {}

func (x *UnionBattleMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleMatchRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleMatchRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{5}
}

func (x *UnionBattleMatchRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleMatchRsp) GetPlayerInfo() *UnionBattlePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *UnionBattleMatchRsp) GetCost() *AwardInfoList {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *UnionBattleMatchRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

type UnionBattleChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	PlayerId   *int64 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *UnionBattleChallengeReq) Reset() {
	*x = UnionBattleChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleChallengeReq) ProtoMessage() {}

func (x *UnionBattleChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleChallengeReq.ProtoReflect.Descriptor instead.
func (*UnionBattleChallengeReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{6}
}

func (x *UnionBattleChallengeReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleChallengeReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type UnionBattleChallengeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                      `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo   *UnionBattlePlayerInfo      `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
	BattleResult *UnionBattleBattleResultMsg `protobuf:"bytes,3,opt,name=battleResult" json:"battleResult,omitempty"`
	RoundResult  *UnionBattleRoundResultMsg  `protobuf:"bytes,4,opt,name=roundResult" json:"roundResult,omitempty"`
	Reward       *AwardInfoList              `protobuf:"bytes,5,opt,name=reward" json:"reward,omitempty"`
}

func (x *UnionBattleChallengeRsp) Reset() {
	*x = UnionBattleChallengeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleChallengeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleChallengeRsp) ProtoMessage() {}

func (x *UnionBattleChallengeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleChallengeRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleChallengeRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{7}
}

func (x *UnionBattleChallengeRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleChallengeRsp) GetPlayerInfo() *UnionBattlePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *UnionBattleChallengeRsp) GetBattleResult() *UnionBattleBattleResultMsg {
	if x != nil {
		return x.BattleResult
	}
	return nil
}

func (x *UnionBattleChallengeRsp) GetRoundResult() *UnionBattleRoundResultMsg {
	if x != nil {
		return x.RoundResult
	}
	return nil
}

func (x *UnionBattleChallengeRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

type UnionBattleGetReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Type       *int32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
}

func (x *UnionBattleGetReportReq) Reset() {
	*x = UnionBattleGetReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetReportReq) ProtoMessage() {}

func (x *UnionBattleGetReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetReportReq.ProtoReflect.Descriptor instead.
func (*UnionBattleGetReportReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{8}
}

func (x *UnionBattleGetReportReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleGetReportReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type UnionBattleGetReportRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                   `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ReportList []*UnionBattleReportInfo `protobuf:"bytes,2,rep,name=reportList" json:"reportList,omitempty"`
}

func (x *UnionBattleGetReportRsp) Reset() {
	*x = UnionBattleGetReportRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetReportRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetReportRsp) ProtoMessage() {}

func (x *UnionBattleGetReportRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetReportRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleGetReportRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{9}
}

func (x *UnionBattleGetReportRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleGetReportRsp) GetReportList() []*UnionBattleReportInfo {
	if x != nil {
		return x.ReportList
	}
	return nil
}

type UnionBattleBuyOpenBuffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Index      *int32 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
}

func (x *UnionBattleBuyOpenBuffReq) Reset() {
	*x = UnionBattleBuyOpenBuffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleBuyOpenBuffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleBuyOpenBuffReq) ProtoMessage() {}

func (x *UnionBattleBuyOpenBuffReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleBuyOpenBuffReq.ProtoReflect.Descriptor instead.
func (*UnionBattleBuyOpenBuffReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{10}
}

func (x *UnionBattleBuyOpenBuffReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleBuyOpenBuffReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type UnionBattleBuyOpenBuffRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo *UnionBattlePlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *UnionBattleBuyOpenBuffRsp) Reset() {
	*x = UnionBattleBuyOpenBuffRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleBuyOpenBuffRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleBuyOpenBuffRsp) ProtoMessage() {}

func (x *UnionBattleBuyOpenBuffRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleBuyOpenBuffRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleBuyOpenBuffRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{11}
}

func (x *UnionBattleBuyOpenBuffRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleBuyOpenBuffRsp) GetPlayerInfo() *UnionBattlePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type UnionBattleSelectBuffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Index      *int32 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
}

func (x *UnionBattleSelectBuffReq) Reset() {
	*x = UnionBattleSelectBuffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleSelectBuffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleSelectBuffReq) ProtoMessage() {}

func (x *UnionBattleSelectBuffReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleSelectBuffReq.ProtoReflect.Descriptor instead.
func (*UnionBattleSelectBuffReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{12}
}

func (x *UnionBattleSelectBuffReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleSelectBuffReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type UnionBattleSelectBuffRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo *UnionBattlePlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *UnionBattleSelectBuffRsp) Reset() {
	*x = UnionBattleSelectBuffRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleSelectBuffRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleSelectBuffRsp) ProtoMessage() {}

func (x *UnionBattleSelectBuffRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleSelectBuffRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleSelectBuffRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{13}
}

func (x *UnionBattleSelectBuffRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleSelectBuffRsp) GetPlayerInfo() *UnionBattlePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type UnionBattleGetPlayBackListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RecordId   *int32 `protobuf:"varint,2,req,name=recordId" json:"recordId,omitempty"`
}

func (x *UnionBattleGetPlayBackListReq) Reset() {
	*x = UnionBattleGetPlayBackListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetPlayBackListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetPlayBackListReq) ProtoMessage() {}

func (x *UnionBattleGetPlayBackListReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetPlayBackListReq.ProtoReflect.Descriptor instead.
func (*UnionBattleGetPlayBackListReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{14}
}

func (x *UnionBattleGetPlayBackListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleGetPlayBackListReq) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type UnionBattleGetPlayBackListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                        `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayBackList []*UnionBattlePlayBackInfoMsg `protobuf:"bytes,2,rep,name=playBackList" json:"playBackList,omitempty"`
}

func (x *UnionBattleGetPlayBackListRsp) Reset() {
	*x = UnionBattleGetPlayBackListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetPlayBackListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetPlayBackListRsp) ProtoMessage() {}

func (x *UnionBattleGetPlayBackListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetPlayBackListRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleGetPlayBackListRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{15}
}

func (x *UnionBattleGetPlayBackListRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleGetPlayBackListRsp) GetPlayBackList() []*UnionBattlePlayBackInfoMsg {
	if x != nil {
		return x.PlayBackList
	}
	return nil
}

type UnionBattleGetUnionMemberScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *UnionBattleGetUnionMemberScoreReq) Reset() {
	*x = UnionBattleGetUnionMemberScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetUnionMemberScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetUnionMemberScoreReq) ProtoMessage() {}

func (x *UnionBattleGetUnionMemberScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetUnionMemberScoreReq.ProtoReflect.Descriptor instead.
func (*UnionBattleGetUnionMemberScoreReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{16}
}

func (x *UnionBattleGetUnionMemberScoreReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleGetUnionMemberScoreReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type UnionBattleGetUnionMemberScoreRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                  *int32              `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	UnionMemberScoreList []*UnionMemberScore `protobuf:"bytes,2,rep,name=unionMemberScoreList" json:"unionMemberScoreList,omitempty"`
}

func (x *UnionBattleGetUnionMemberScoreRsp) Reset() {
	*x = UnionBattleGetUnionMemberScoreRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleGetUnionMemberScoreRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleGetUnionMemberScoreRsp) ProtoMessage() {}

func (x *UnionBattleGetUnionMemberScoreRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleGetUnionMemberScoreRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleGetUnionMemberScoreRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{17}
}

func (x *UnionBattleGetUnionMemberScoreRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleGetUnionMemberScoreRsp) GetUnionMemberScoreList() []*UnionMemberScore {
	if x != nil {
		return x.UnionMemberScoreList
	}
	return nil
}

type UnionBattlePlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score                 *int32                          `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	Rank                  *int32                          `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	Energy                *int32                          `protobuf:"varint,3,opt,name=energy" json:"energy,omitempty"`
	LastRefreshTime       *int64                          `protobuf:"varint,4,opt,name=lastRefreshTime" json:"lastRefreshTime,omitempty"`
	ChallengeInfo         *UnionBattlePlayerChallengeInfo `protobuf:"bytes,5,opt,name=challengeInfo" json:"challengeInfo,omitempty"`
	ItemChallengeTimes    *int32                          `protobuf:"varint,6,opt,name=itemChallengeTimes" json:"itemChallengeTimes,omitempty"`
	UnionId               *int64                          `protobuf:"varint,7,opt,name=unionId" json:"unionId,omitempty"`
	ReceivedConditionList []int32                         `protobuf:"varint,8,rep,name=receivedConditionList" json:"receivedConditionList,omitempty"`
	UnionMatchTimes       *int32                          `protobuf:"varint,9,opt,name=unionMatchTimes" json:"unionMatchTimes,omitempty"`
	HistoryScore          *int32                          `protobuf:"varint,10,opt,name=historyScore" json:"historyScore,omitempty"`
	KillNum               *int32                          `protobuf:"varint,11,opt,name=killNum" json:"killNum,omitempty"`
	Position              *int32                          `protobuf:"varint,12,opt,name=position" json:"position,omitempty"`
}

func (x *UnionBattlePlayerInfo) Reset() {
	*x = UnionBattlePlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattlePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattlePlayerInfo) ProtoMessage() {}

func (x *UnionBattlePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattlePlayerInfo.ProtoReflect.Descriptor instead.
func (*UnionBattlePlayerInfo) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{18}
}

func (x *UnionBattlePlayerInfo) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetEnergy() int32 {
	if x != nil && x.Energy != nil {
		return *x.Energy
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetLastRefreshTime() int64 {
	if x != nil && x.LastRefreshTime != nil {
		return *x.LastRefreshTime
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetChallengeInfo() *UnionBattlePlayerChallengeInfo {
	if x != nil {
		return x.ChallengeInfo
	}
	return nil
}

func (x *UnionBattlePlayerInfo) GetItemChallengeTimes() int32 {
	if x != nil && x.ItemChallengeTimes != nil {
		return *x.ItemChallengeTimes
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetReceivedConditionList() []int32 {
	if x != nil {
		return x.ReceivedConditionList
	}
	return nil
}

func (x *UnionBattlePlayerInfo) GetUnionMatchTimes() int32 {
	if x != nil && x.UnionMatchTimes != nil {
		return *x.UnionMatchTimes
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetHistoryScore() int32 {
	if x != nil && x.HistoryScore != nil {
		return *x.HistoryScore
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetKillNum() int32 {
	if x != nil && x.KillNum != nil {
		return *x.KillNum
	}
	return 0
}

func (x *UnionBattlePlayerInfo) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type UnionBattlePlayerChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blood              *int64                               `protobuf:"varint,1,opt,name=blood" json:"blood,omitempty"`
	Tired              *int32                               `protobuf:"varint,2,opt,name=tired" json:"tired,omitempty"`
	KillNum            *int32                               `protobuf:"varint,3,opt,name=killNum" json:"killNum,omitempty"`
	TargetUnionInfo    *UnionBattleChallengeTargetUnionInfo `protobuf:"bytes,4,opt,name=targetUnionInfo" json:"targetUnionInfo,omitempty"`
	Power              *int64                               `protobuf:"varint,5,opt,name=power" json:"power,omitempty"`
	BuffList           []*SkillMsg                          `protobuf:"bytes,6,rep,name=buffList" json:"buffList,omitempty"`
	AttributeData      []*AttributeDataMsg                  `protobuf:"bytes,7,rep,name=attributeData" json:"attributeData,omitempty"`
	OpenBuyBuffIndex   *int32                               `protobuf:"varint,8,opt,name=openBuyBuffIndex" json:"openBuyBuffIndex,omitempty"`
	UnSelectBuffList   []*SkillMsg                          `protobuf:"bytes,9,rep,name=unSelectBuffList" json:"unSelectBuffList,omitempty"`
	TotalKillScore     *int32                               `protobuf:"varint,10,opt,name=totalKillScore" json:"totalKillScore,omitempty"`
	LockAppearanceId   *int32                               `protobuf:"varint,11,opt,name=lockAppearanceId" json:"lockAppearanceId,omitempty"`
	LockEquipCloudId   *int32                               `protobuf:"varint,12,opt,name=lockEquipCloudId" json:"lockEquipCloudId,omitempty"`
	LockEquipPetId     *int32                               `protobuf:"varint,13,opt,name=lockEquipPetId" json:"lockEquipPetId,omitempty"`
	LockPetSoulShapeLv *int32                               `protobuf:"varint,14,opt,name=lockPetSoulShapeLv" json:"lockPetSoulShapeLv,omitempty"`
}

func (x *UnionBattlePlayerChallengeInfo) Reset() {
	*x = UnionBattlePlayerChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattlePlayerChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattlePlayerChallengeInfo) ProtoMessage() {}

func (x *UnionBattlePlayerChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattlePlayerChallengeInfo.ProtoReflect.Descriptor instead.
func (*UnionBattlePlayerChallengeInfo) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{19}
}

func (x *UnionBattlePlayerChallengeInfo) GetBlood() int64 {
	if x != nil && x.Blood != nil {
		return *x.Blood
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetTired() int32 {
	if x != nil && x.Tired != nil {
		return *x.Tired
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetKillNum() int32 {
	if x != nil && x.KillNum != nil {
		return *x.KillNum
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetTargetUnionInfo() *UnionBattleChallengeTargetUnionInfo {
	if x != nil {
		return x.TargetUnionInfo
	}
	return nil
}

func (x *UnionBattlePlayerChallengeInfo) GetPower() int64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetBuffList() []*SkillMsg {
	if x != nil {
		return x.BuffList
	}
	return nil
}

func (x *UnionBattlePlayerChallengeInfo) GetAttributeData() []*AttributeDataMsg {
	if x != nil {
		return x.AttributeData
	}
	return nil
}

func (x *UnionBattlePlayerChallengeInfo) GetOpenBuyBuffIndex() int32 {
	if x != nil && x.OpenBuyBuffIndex != nil {
		return *x.OpenBuyBuffIndex
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetUnSelectBuffList() []*SkillMsg {
	if x != nil {
		return x.UnSelectBuffList
	}
	return nil
}

func (x *UnionBattlePlayerChallengeInfo) GetTotalKillScore() int32 {
	if x != nil && x.TotalKillScore != nil {
		return *x.TotalKillScore
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetLockAppearanceId() int32 {
	if x != nil && x.LockAppearanceId != nil {
		return *x.LockAppearanceId
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetLockEquipCloudId() int32 {
	if x != nil && x.LockEquipCloudId != nil {
		return *x.LockEquipCloudId
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetLockEquipPetId() int32 {
	if x != nil && x.LockEquipPetId != nil {
		return *x.LockEquipPetId
	}
	return 0
}

func (x *UnionBattlePlayerChallengeInfo) GetLockPetSoulShapeLv() int32 {
	if x != nil && x.LockPetSoulShapeLv != nil {
		return *x.LockPetSoulShapeLv
	}
	return 0
}

type UnionBattleChallengeTargetUnionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionMemberNum  *int32                     `protobuf:"varint,1,opt,name=unionMemberNum" json:"unionMemberNum,omitempty"`
	UnionSimpleData *UnionSimpleData           `protobuf:"bytes,2,opt,name=unionSimpleData" json:"unionSimpleData,omitempty"`
	TargetInfoList  []*PlayerAppearanceDataMsg `protobuf:"bytes,3,rep,name=targetInfoList" json:"targetInfoList,omitempty"`
}

func (x *UnionBattleChallengeTargetUnionInfo) Reset() {
	*x = UnionBattleChallengeTargetUnionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleChallengeTargetUnionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleChallengeTargetUnionInfo) ProtoMessage() {}

func (x *UnionBattleChallengeTargetUnionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleChallengeTargetUnionInfo.ProtoReflect.Descriptor instead.
func (*UnionBattleChallengeTargetUnionInfo) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{20}
}

func (x *UnionBattleChallengeTargetUnionInfo) GetUnionMemberNum() int32 {
	if x != nil && x.UnionMemberNum != nil {
		return *x.UnionMemberNum
	}
	return 0
}

func (x *UnionBattleChallengeTargetUnionInfo) GetUnionSimpleData() *UnionSimpleData {
	if x != nil {
		return x.UnionSimpleData
	}
	return nil
}

func (x *UnionBattleChallengeTargetUnionInfo) GetTargetInfoList() []*PlayerAppearanceDataMsg {
	if x != nil {
		return x.TargetInfoList
	}
	return nil
}

type UnionBattleReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId               *int32                `protobuf:"varint,1,opt,name=recordId" json:"recordId,omitempty"`
	Type                   *int32                `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	AttackedHeadAndNameMsg *PlayerHeadAndNameMsg `protobuf:"bytes,3,opt,name=attackedHeadAndNameMsg" json:"attackedHeadAndNameMsg,omitempty"`
	AttackUnionId          *int64                `protobuf:"varint,4,opt,name=attackUnionId" json:"attackUnionId,omitempty"`
	AttackUnionName        *string               `protobuf:"bytes,5,opt,name=attackUnionName" json:"attackUnionName,omitempty"`
	TargetUnionName        *string               `protobuf:"bytes,6,opt,name=targetUnionName" json:"targetUnionName,omitempty"`
	SrcPlayerName          *string               `protobuf:"bytes,7,opt,name=srcPlayerName" json:"srcPlayerName,omitempty"`
	MemberNum              *int32                `protobuf:"varint,8,opt,name=memberNum" json:"memberNum,omitempty"`
	KillNum                *int32                `protobuf:"varint,9,opt,name=killNum" json:"killNum,omitempty"`
	ScoreChange            *int32                `protobuf:"varint,10,opt,name=scoreChange" json:"scoreChange,omitempty"`
	Time                   *int64                `protobuf:"varint,11,opt,name=time" json:"time,omitempty"`
	TitleId                *int32                `protobuf:"varint,12,opt,name=titleId" json:"titleId,omitempty"`
}

func (x *UnionBattleReportInfo) Reset() {
	*x = UnionBattleReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleReportInfo) ProtoMessage() {}

func (x *UnionBattleReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleReportInfo.ProtoReflect.Descriptor instead.
func (*UnionBattleReportInfo) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{21}
}

func (x *UnionBattleReportInfo) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

func (x *UnionBattleReportInfo) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *UnionBattleReportInfo) GetAttackedHeadAndNameMsg() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.AttackedHeadAndNameMsg
	}
	return nil
}

func (x *UnionBattleReportInfo) GetAttackUnionId() int64 {
	if x != nil && x.AttackUnionId != nil {
		return *x.AttackUnionId
	}
	return 0
}

func (x *UnionBattleReportInfo) GetAttackUnionName() string {
	if x != nil && x.AttackUnionName != nil {
		return *x.AttackUnionName
	}
	return ""
}

func (x *UnionBattleReportInfo) GetTargetUnionName() string {
	if x != nil && x.TargetUnionName != nil {
		return *x.TargetUnionName
	}
	return ""
}

func (x *UnionBattleReportInfo) GetSrcPlayerName() string {
	if x != nil && x.SrcPlayerName != nil {
		return *x.SrcPlayerName
	}
	return ""
}

func (x *UnionBattleReportInfo) GetMemberNum() int32 {
	if x != nil && x.MemberNum != nil {
		return *x.MemberNum
	}
	return 0
}

func (x *UnionBattleReportInfo) GetKillNum() int32 {
	if x != nil && x.KillNum != nil {
		return *x.KillNum
	}
	return 0
}

func (x *UnionBattleReportInfo) GetScoreChange() int32 {
	if x != nil && x.ScoreChange != nil {
		return *x.ScoreChange
	}
	return 0
}

func (x *UnionBattleReportInfo) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *UnionBattleReportInfo) GetTitleId() int32 {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return 0
}

type UnionBattleBattleResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllBattleRecord  *BattleRecordMsg      `protobuf:"bytes,1,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	ChallengeSuccess *bool                 `protobuf:"varint,2,opt,name=challengeSuccess" json:"challengeSuccess,omitempty"`
	TargetPlayerInfo *PlayerHeadAndNameMsg `protobuf:"bytes,3,opt,name=targetPlayerInfo" json:"targetPlayerInfo,omitempty"`
	AddKillScore     *int32                `protobuf:"varint,4,opt,name=addKillScore" json:"addKillScore,omitempty"`
}

func (x *UnionBattleBattleResultMsg) Reset() {
	*x = UnionBattleBattleResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleBattleResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleBattleResultMsg) ProtoMessage() {}

func (x *UnionBattleBattleResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleBattleResultMsg.ProtoReflect.Descriptor instead.
func (*UnionBattleBattleResultMsg) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{22}
}

func (x *UnionBattleBattleResultMsg) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *UnionBattleBattleResultMsg) GetChallengeSuccess() bool {
	if x != nil && x.ChallengeSuccess != nil {
		return *x.ChallengeSuccess
	}
	return false
}

func (x *UnionBattleBattleResultMsg) GetTargetPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.TargetPlayerInfo
	}
	return nil
}

func (x *UnionBattleBattleResultMsg) GetAddKillScore() int32 {
	if x != nil && x.AddKillScore != nil {
		return *x.AddKillScore
	}
	return 0
}

type UnionBattleRoundResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillNum          *int32         `protobuf:"varint,1,opt,name=killNum" json:"killNum,omitempty"`
	Reward           *AwardInfoList `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	MyScoreChange    *int32         `protobuf:"varint,3,opt,name=myScoreChange" json:"myScoreChange,omitempty"`
	RivalScoreChange *int32         `protobuf:"varint,4,opt,name=rivalScoreChange" json:"rivalScoreChange,omitempty"`
	ChallengeSuccess *bool          `protobuf:"varint,5,opt,name=challengeSuccess" json:"challengeSuccess,omitempty"`
	RecordId         *int32         `protobuf:"varint,6,opt,name=recordId" json:"recordId,omitempty"`
}

func (x *UnionBattleRoundResultMsg) Reset() {
	*x = UnionBattleRoundResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleRoundResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleRoundResultMsg) ProtoMessage() {}

func (x *UnionBattleRoundResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleRoundResultMsg.ProtoReflect.Descriptor instead.
func (*UnionBattleRoundResultMsg) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{23}
}

func (x *UnionBattleRoundResultMsg) GetKillNum() int32 {
	if x != nil && x.KillNum != nil {
		return *x.KillNum
	}
	return 0
}

func (x *UnionBattleRoundResultMsg) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *UnionBattleRoundResultMsg) GetMyScoreChange() int32 {
	if x != nil && x.MyScoreChange != nil {
		return *x.MyScoreChange
	}
	return 0
}

func (x *UnionBattleRoundResultMsg) GetRivalScoreChange() int32 {
	if x != nil && x.RivalScoreChange != nil {
		return *x.RivalScoreChange
	}
	return 0
}

func (x *UnionBattleRoundResultMsg) GetChallengeSuccess() bool {
	if x != nil && x.ChallengeSuccess != nil {
		return *x.ChallengeSuccess
	}
	return false
}

func (x *UnionBattleRoundResultMsg) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type UnionBattlePlayBackInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleHpChangeMsg []*UnionBattleHpChangeMsg `protobuf:"bytes,1,rep,name=battleHpChangeMsg" json:"battleHpChangeMsg,omitempty"`
	Score             *int32                    `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
}

func (x *UnionBattlePlayBackInfoMsg) Reset() {
	*x = UnionBattlePlayBackInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattlePlayBackInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattlePlayBackInfoMsg) ProtoMessage() {}

func (x *UnionBattlePlayBackInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattlePlayBackInfoMsg.ProtoReflect.Descriptor instead.
func (*UnionBattlePlayBackInfoMsg) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{24}
}

func (x *UnionBattlePlayBackInfoMsg) GetBattleHpChangeMsg() []*UnionBattleHpChangeMsg {
	if x != nil {
		return x.BattleHpChangeMsg
	}
	return nil
}

func (x *UnionBattlePlayBackInfoMsg) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type UnionBattleHpChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadAndNameMsg *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=headAndNameMsg" json:"headAndNameMsg,omitempty"`
	TotalHp        *int64                `protobuf:"varint,2,opt,name=totalHp" json:"totalHp,omitempty"`
	CurHp          *int64                `protobuf:"varint,3,opt,name=curHp" json:"curHp,omitempty"`
}

func (x *UnionBattleHpChangeMsg) Reset() {
	*x = UnionBattleHpChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleHpChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleHpChangeMsg) ProtoMessage() {}

func (x *UnionBattleHpChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleHpChangeMsg.ProtoReflect.Descriptor instead.
func (*UnionBattleHpChangeMsg) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{25}
}

func (x *UnionBattleHpChangeMsg) GetHeadAndNameMsg() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.HeadAndNameMsg
	}
	return nil
}

func (x *UnionBattleHpChangeMsg) GetTotalHp() int64 {
	if x != nil && x.TotalHp != nil {
		return *x.TotalHp
	}
	return 0
}

func (x *UnionBattleHpChangeMsg) GetCurHp() int64 {
	if x != nil && x.CurHp != nil {
		return *x.CurHp
	}
	return 0
}

type UnionBattleReceiveUnionAchieveRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId  *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	ConditionId *int32 `protobuf:"varint,2,opt,name=conditionId" json:"conditionId,omitempty"`
}

func (x *UnionBattleReceiveUnionAchieveRewardReq) Reset() {
	*x = UnionBattleReceiveUnionAchieveRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleReceiveUnionAchieveRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleReceiveUnionAchieveRewardReq) ProtoMessage() {}

func (x *UnionBattleReceiveUnionAchieveRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleReceiveUnionAchieveRewardReq.ProtoReflect.Descriptor instead.
func (*UnionBattleReceiveUnionAchieveRewardReq) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{26}
}

func (x *UnionBattleReceiveUnionAchieveRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *UnionBattleReceiveUnionAchieveRewardReq) GetConditionId() int32 {
	if x != nil && x.ConditionId != nil {
		return *x.ConditionId
	}
	return 0
}

type UnionBattleReceiveUnionAchieveRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo *UnionBattlePlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
	Reward     *AwardInfoList         `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
}

func (x *UnionBattleReceiveUnionAchieveRewardRsp) Reset() {
	*x = UnionBattleReceiveUnionAchieveRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleReceiveUnionAchieveRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleReceiveUnionAchieveRewardRsp) ProtoMessage() {}

func (x *UnionBattleReceiveUnionAchieveRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleReceiveUnionAchieveRewardRsp.ProtoReflect.Descriptor instead.
func (*UnionBattleReceiveUnionAchieveRewardRsp) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{27}
}

func (x *UnionBattleReceiveUnionAchieveRewardRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleReceiveUnionAchieveRewardRsp) GetPlayerInfo() *UnionBattlePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *UnionBattleReceiveUnionAchieveRewardRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

type SynPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *UnionBattlePlayerInfo `protobuf:"bytes,1,opt,name=playerInfo" json:"playerInfo,omitempty"`
	Challenged *bool                  `protobuf:"varint,2,opt,name=challenged" json:"challenged,omitempty"`
}

func (x *SynPlayerInfo) Reset() {
	*x = SynPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynPlayerInfo) ProtoMessage() {}

func (x *SynPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynPlayerInfo.ProtoReflect.Descriptor instead.
func (*SynPlayerInfo) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{28}
}

func (x *SynPlayerInfo) GetPlayerInfo() *UnionBattlePlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *SynPlayerInfo) GetChallenged() bool {
	if x != nil && x.Challenged != nil {
		return *x.Challenged
	}
	return false
}

type UnionMemberScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   *int64  `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	MemberName *string `protobuf:"bytes,2,opt,name=memberName" json:"memberName,omitempty"`
	Score      *int32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (x *UnionMemberScore) Reset() {
	*x = UnionMemberScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionMemberScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionMemberScore) ProtoMessage() {}

func (x *UnionMemberScore) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionMemberScore.ProtoReflect.Descriptor instead.
func (*UnionMemberScore) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{29}
}

func (x *UnionMemberScore) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *UnionMemberScore) GetMemberName() string {
	if x != nil && x.MemberName != nil {
		return *x.MemberName
	}
	return ""
}

func (x *UnionMemberScore) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type UnionBattleRedDotReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *UnionBattleRedDotReqMsg) Reset() {
	*x = UnionBattleRedDotReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleRedDotReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleRedDotReqMsg) ProtoMessage() {}

func (x *UnionBattleRedDotReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleRedDotReqMsg.ProtoReflect.Descriptor instead.
func (*UnionBattleRedDotReqMsg) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{30}
}

func (x *UnionBattleRedDotReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type UnionBattleRedDotRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *UnionBattleRedDotRespMsg) Reset() {
	*x = UnionBattleRedDotRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UnionBattle_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBattleRedDotRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBattleRedDotRespMsg) ProtoMessage() {}

func (x *UnionBattleRedDotRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UnionBattle_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBattleRedDotRespMsg.ProtoReflect.Descriptor instead.
func (*UnionBattleRedDotRespMsg) Descriptor() ([]byte, []int) {
	return file_UnionBattle_proto_rawDescGZIP(), []int{31}
}

func (x *UnionBattleRedDotRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnionBattleRedDotRespMsg) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

var File_UnionBattle_proto protoreflect.FileDescriptor

var file_UnionBattle_proto_rawDesc = []byte{
	0x0a, 0x11, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x13, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x41,
	0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x7f, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x55, 0x0a,
	0x17, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x4d, 0x0a,
	0x17, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x17,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x19, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x42, 0x75, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x78, 0x0a, 0x19, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x75, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x50, 0x0a, 0x18, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x77, 0x0a, 0x18, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x1d,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x52, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x5d, 0x0a, 0x21, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x8f, 0x01, 0x0a, 0x21, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x14, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x69, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x05, 0x0a, 0x1e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12,
	0x61, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75,
	0x79, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x10, 0x75, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d,
	0x73, 0x67, 0x52, 0x10, 0x75, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x6b,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x50, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x4c, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65,
	0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x22, 0xf1, 0x01, 0x0a,
	0x23, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x0f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xd1, 0x03, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x16, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x72, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69,
	0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x69, 0x6c,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x54,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x4b,
	0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x19, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x12, 0x58, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x48, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x48, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x48, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x50, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73,
	0x67, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x75, 0x72, 0x48, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x75, 0x72, 0x48,
	0x70, 0x22, 0x6b, 0x0a, 0x27, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc1,
	0x01, 0x0a, 0x27, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0x7a, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x64,
	0x0a, 0x10, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x39, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x40, 0x0a, 0x18, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x64, 0x44, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x2a, 0x57, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67,
	0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b,
	0x70, 0x62,
}

var (
	file_UnionBattle_proto_rawDescOnce sync.Once
	file_UnionBattle_proto_rawDescData = file_UnionBattle_proto_rawDesc
)

func file_UnionBattle_proto_rawDescGZIP() []byte {
	file_UnionBattle_proto_rawDescOnce.Do(func() {
		file_UnionBattle_proto_rawDescData = protoimpl.X.CompressGZIP(file_UnionBattle_proto_rawDescData)
	})
	return file_UnionBattle_proto_rawDescData
}

var file_UnionBattle_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_UnionBattle_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_UnionBattle_proto_goTypes = []any{
	(UnionBattleReportType)(0),                      // 0: com.yq.msg.CityMsg.UnionBattleReportType
	(*UnionBattleEnterReq)(nil),                     // 1: com.yq.msg.CityMsg.UnionBattleEnterReq
	(*UnionBattleEnterRsp)(nil),                     // 2: com.yq.msg.CityMsg.UnionBattleEnterRsp
	(*UnionBattleGetJoinMemberListReq)(nil),         // 3: com.yq.msg.CityMsg.UnionBattleGetJoinMemberListReq
	(*UnionBattleGetJoinMemberListRsp)(nil),         // 4: com.yq.msg.CityMsg.UnionBattleGetJoinMemberListRsp
	(*UnionBattleMatchReq)(nil),                     // 5: com.yq.msg.CityMsg.UnionBattleMatchReq
	(*UnionBattleMatchRsp)(nil),                     // 6: com.yq.msg.CityMsg.UnionBattleMatchRsp
	(*UnionBattleChallengeReq)(nil),                 // 7: com.yq.msg.CityMsg.UnionBattleChallengeReq
	(*UnionBattleChallengeRsp)(nil),                 // 8: com.yq.msg.CityMsg.UnionBattleChallengeRsp
	(*UnionBattleGetReportReq)(nil),                 // 9: com.yq.msg.CityMsg.UnionBattleGetReportReq
	(*UnionBattleGetReportRsp)(nil),                 // 10: com.yq.msg.CityMsg.UnionBattleGetReportRsp
	(*UnionBattleBuyOpenBuffReq)(nil),               // 11: com.yq.msg.CityMsg.UnionBattleBuyOpenBuffReq
	(*UnionBattleBuyOpenBuffRsp)(nil),               // 12: com.yq.msg.CityMsg.UnionBattleBuyOpenBuffRsp
	(*UnionBattleSelectBuffReq)(nil),                // 13: com.yq.msg.CityMsg.UnionBattleSelectBuffReq
	(*UnionBattleSelectBuffRsp)(nil),                // 14: com.yq.msg.CityMsg.UnionBattleSelectBuffRsp
	(*UnionBattleGetPlayBackListReq)(nil),           // 15: com.yq.msg.CityMsg.UnionBattleGetPlayBackListReq
	(*UnionBattleGetPlayBackListRsp)(nil),           // 16: com.yq.msg.CityMsg.UnionBattleGetPlayBackListRsp
	(*UnionBattleGetUnionMemberScoreReq)(nil),       // 17: com.yq.msg.CityMsg.UnionBattleGetUnionMemberScoreReq
	(*UnionBattleGetUnionMemberScoreRsp)(nil),       // 18: com.yq.msg.CityMsg.UnionBattleGetUnionMemberScoreRsp
	(*UnionBattlePlayerInfo)(nil),                   // 19: com.yq.msg.CityMsg.UnionBattlePlayerInfo
	(*UnionBattlePlayerChallengeInfo)(nil),          // 20: com.yq.msg.CityMsg.UnionBattlePlayerChallengeInfo
	(*UnionBattleChallengeTargetUnionInfo)(nil),     // 21: com.yq.msg.CityMsg.UnionBattleChallengeTargetUnionInfo
	(*UnionBattleReportInfo)(nil),                   // 22: com.yq.msg.CityMsg.UnionBattleReportInfo
	(*UnionBattleBattleResultMsg)(nil),              // 23: com.yq.msg.CityMsg.UnionBattleBattleResultMsg
	(*UnionBattleRoundResultMsg)(nil),               // 24: com.yq.msg.CityMsg.UnionBattleRoundResultMsg
	(*UnionBattlePlayBackInfoMsg)(nil),              // 25: com.yq.msg.CityMsg.UnionBattlePlayBackInfoMsg
	(*UnionBattleHpChangeMsg)(nil),                  // 26: com.yq.msg.CityMsg.UnionBattleHpChangeMsg
	(*UnionBattleReceiveUnionAchieveRewardReq)(nil), // 27: com.yq.msg.CityMsg.UnionBattleReceiveUnionAchieveRewardReq
	(*UnionBattleReceiveUnionAchieveRewardRsp)(nil), // 28: com.yq.msg.CityMsg.UnionBattleReceiveUnionAchieveRewardRsp
	(*SynPlayerInfo)(nil),                           // 29: com.yq.msg.CityMsg.SynPlayerInfo
	(*UnionMemberScore)(nil),                        // 30: com.yq.msg.CityMsg.UnionMemberScore
	(*UnionBattleRedDotReqMsg)(nil),                 // 31: com.yq.msg.CityMsg.UnionBattleRedDotReqMsg
	(*UnionBattleRedDotRespMsg)(nil),                // 32: com.yq.msg.CityMsg.UnionBattleRedDotRespMsg
	(*AwardInfoList)(nil),                           // 33: com.yq.msg.CityMsg.AwardInfoList
	(*SkillMsg)(nil),                                // 34: com.yq.msg.CityMsg.SkillMsg
	(*AttributeDataMsg)(nil),                        // 35: com.yq.msg.CityMsg.AttributeDataMsg
	(*UnionSimpleData)(nil),                         // 36: com.yq.msg.CityMsg.UnionSimpleData
	(*PlayerAppearanceDataMsg)(nil),                 // 37: com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	(*PlayerHeadAndNameMsg)(nil),                    // 38: com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	(*BattleRecordMsg)(nil),                         // 39: com.yq.msg.CityMsg.BattleRecordMsg
}
var file_UnionBattle_proto_depIdxs = []int32{
	19, // 0: com.yq.msg.CityMsg.UnionBattleEnterRsp.playerInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerInfo
	19, // 1: com.yq.msg.CityMsg.UnionBattleMatchRsp.playerInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerInfo
	33, // 2: com.yq.msg.CityMsg.UnionBattleMatchRsp.cost:type_name -> com.yq.msg.CityMsg.AwardInfoList
	33, // 3: com.yq.msg.CityMsg.UnionBattleMatchRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	19, // 4: com.yq.msg.CityMsg.UnionBattleChallengeRsp.playerInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerInfo
	23, // 5: com.yq.msg.CityMsg.UnionBattleChallengeRsp.battleResult:type_name -> com.yq.msg.CityMsg.UnionBattleBattleResultMsg
	24, // 6: com.yq.msg.CityMsg.UnionBattleChallengeRsp.roundResult:type_name -> com.yq.msg.CityMsg.UnionBattleRoundResultMsg
	33, // 7: com.yq.msg.CityMsg.UnionBattleChallengeRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	22, // 8: com.yq.msg.CityMsg.UnionBattleGetReportRsp.reportList:type_name -> com.yq.msg.CityMsg.UnionBattleReportInfo
	19, // 9: com.yq.msg.CityMsg.UnionBattleBuyOpenBuffRsp.playerInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerInfo
	19, // 10: com.yq.msg.CityMsg.UnionBattleSelectBuffRsp.playerInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerInfo
	25, // 11: com.yq.msg.CityMsg.UnionBattleGetPlayBackListRsp.playBackList:type_name -> com.yq.msg.CityMsg.UnionBattlePlayBackInfoMsg
	30, // 12: com.yq.msg.CityMsg.UnionBattleGetUnionMemberScoreRsp.unionMemberScoreList:type_name -> com.yq.msg.CityMsg.UnionMemberScore
	20, // 13: com.yq.msg.CityMsg.UnionBattlePlayerInfo.challengeInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerChallengeInfo
	21, // 14: com.yq.msg.CityMsg.UnionBattlePlayerChallengeInfo.targetUnionInfo:type_name -> com.yq.msg.CityMsg.UnionBattleChallengeTargetUnionInfo
	34, // 15: com.yq.msg.CityMsg.UnionBattlePlayerChallengeInfo.buffList:type_name -> com.yq.msg.CityMsg.SkillMsg
	35, // 16: com.yq.msg.CityMsg.UnionBattlePlayerChallengeInfo.attributeData:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	34, // 17: com.yq.msg.CityMsg.UnionBattlePlayerChallengeInfo.unSelectBuffList:type_name -> com.yq.msg.CityMsg.SkillMsg
	36, // 18: com.yq.msg.CityMsg.UnionBattleChallengeTargetUnionInfo.unionSimpleData:type_name -> com.yq.msg.CityMsg.UnionSimpleData
	37, // 19: com.yq.msg.CityMsg.UnionBattleChallengeTargetUnionInfo.targetInfoList:type_name -> com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	38, // 20: com.yq.msg.CityMsg.UnionBattleReportInfo.attackedHeadAndNameMsg:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	39, // 21: com.yq.msg.CityMsg.UnionBattleBattleResultMsg.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	38, // 22: com.yq.msg.CityMsg.UnionBattleBattleResultMsg.targetPlayerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	33, // 23: com.yq.msg.CityMsg.UnionBattleRoundResultMsg.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	26, // 24: com.yq.msg.CityMsg.UnionBattlePlayBackInfoMsg.battleHpChangeMsg:type_name -> com.yq.msg.CityMsg.UnionBattleHpChangeMsg
	38, // 25: com.yq.msg.CityMsg.UnionBattleHpChangeMsg.headAndNameMsg:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	19, // 26: com.yq.msg.CityMsg.UnionBattleReceiveUnionAchieveRewardRsp.playerInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerInfo
	33, // 27: com.yq.msg.CityMsg.UnionBattleReceiveUnionAchieveRewardRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	19, // 28: com.yq.msg.CityMsg.SynPlayerInfo.playerInfo:type_name -> com.yq.msg.CityMsg.UnionBattlePlayerInfo
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_UnionBattle_proto_init() }
func file_UnionBattle_proto_init() {
	if File_UnionBattle_proto != nil {
		return
	}
	file_Battle_proto_init()
	file_Common_proto_init()
	file_Union_proto_init()
	file_WatchPlayer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_UnionBattle_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleEnterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleEnterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetJoinMemberListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetJoinMemberListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleChallengeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetReportRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleBuyOpenBuffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleBuyOpenBuffRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleSelectBuffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleSelectBuffRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetPlayBackListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetPlayBackListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetUnionMemberScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleGetUnionMemberScoreRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattlePlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattlePlayerChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleChallengeTargetUnionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleBattleResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleRoundResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattlePlayBackInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleHpChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleReceiveUnionAchieveRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleReceiveUnionAchieveRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*SynPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*UnionMemberScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleRedDotReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UnionBattle_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBattleRedDotRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_UnionBattle_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_UnionBattle_proto_goTypes,
		DependencyIndexes: file_UnionBattle_proto_depIdxs,
		EnumInfos:         file_UnionBattle_proto_enumTypes,
		MessageInfos:      file_UnionBattle_proto_msgTypes,
	}.Build()
	File_UnionBattle_proto = out.File
	file_UnionBattle_proto_rawDesc = nil
	file_UnionBattle_proto_goTypes = nil
	file_UnionBattle_proto_depIdxs = nil
}
