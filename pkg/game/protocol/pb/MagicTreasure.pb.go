// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: MagicTreasure.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncMagicTreasureDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureData []*MagicTreasureDataMsg `protobuf:"bytes,1,rep,name=magicTreasureData" json:"magicTreasureData,omitempty"`
	IsComplete        *bool                   `protobuf:"varint,2,opt,name=isComplete" json:"isComplete,omitempty"`
}

func (x *SyncMagicTreasureDataMsg) Reset() {
	*x = SyncMagicTreasureDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMagicTreasureDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMagicTreasureDataMsg) ProtoMessage() {}

func (x *SyncMagicTreasureDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMagicTreasureDataMsg.ProtoReflect.Descriptor instead.
func (*SyncMagicTreasureDataMsg) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{0}
}

func (x *SyncMagicTreasureDataMsg) GetMagicTreasureData() []*MagicTreasureDataMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

func (x *SyncMagicTreasureDataMsg) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return false
}

type MagicTreasurePlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureData []*MagicTreasureDataMsg          `protobuf:"bytes,1,rep,name=magicTreasureData" json:"magicTreasureData,omitempty"`
	JackpotData       []*MagicTreasureJackpotMsg       `protobuf:"bytes,2,rep,name=jackpotData" json:"jackpotData,omitempty"`
	JackpotConfig     []*MagicTreasureJackpotConfigMsg `protobuf:"bytes,3,rep,name=jackpotConfig" json:"jackpotConfig,omitempty"`
	LinkageDataMsg    []*MagicTreasureLinkageDataMsg   `protobuf:"bytes,4,rep,name=linkageDataMsg" json:"linkageDataMsg,omitempty"`
}

func (x *MagicTreasurePlayerDataMsg) Reset() {
	*x = MagicTreasurePlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasurePlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasurePlayerDataMsg) ProtoMessage() {}

func (x *MagicTreasurePlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasurePlayerDataMsg.ProtoReflect.Descriptor instead.
func (*MagicTreasurePlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{1}
}

func (x *MagicTreasurePlayerDataMsg) GetMagicTreasureData() []*MagicTreasureDataMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

func (x *MagicTreasurePlayerDataMsg) GetJackpotData() []*MagicTreasureJackpotMsg {
	if x != nil {
		return x.JackpotData
	}
	return nil
}

func (x *MagicTreasurePlayerDataMsg) GetJackpotConfig() []*MagicTreasureJackpotConfigMsg {
	if x != nil {
		return x.JackpotConfig
	}
	return nil
}

func (x *MagicTreasurePlayerDataMsg) GetLinkageDataMsg() []*MagicTreasureLinkageDataMsg {
	if x != nil {
		return x.LinkageDataMsg
	}
	return nil
}

type MagicTreasureJackpotMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId        *int32 `protobuf:"varint,1,opt,name=poolId" json:"poolId,omitempty"`
	DrawTimes     *int32 `protobuf:"varint,2,opt,name=drawTimes" json:"drawTimes,omitempty"`
	FreeDrawTimes *int32 `protobuf:"varint,3,opt,name=freeDrawTimes" json:"freeDrawTimes,omitempty"`
	AdFreeTimes   *int32 `protobuf:"varint,4,opt,name=adFreeTimes" json:"adFreeTimes,omitempty"`
	LastAdTime    *int64 `protobuf:"varint,5,opt,name=lastAdTime" json:"lastAdTime,omitempty"`
}

func (x *MagicTreasureJackpotMsg) Reset() {
	*x = MagicTreasureJackpotMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureJackpotMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureJackpotMsg) ProtoMessage() {}

func (x *MagicTreasureJackpotMsg) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureJackpotMsg.ProtoReflect.Descriptor instead.
func (*MagicTreasureJackpotMsg) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{2}
}

func (x *MagicTreasureJackpotMsg) GetPoolId() int32 {
	if x != nil && x.PoolId != nil {
		return *x.PoolId
	}
	return 0
}

func (x *MagicTreasureJackpotMsg) GetDrawTimes() int32 {
	if x != nil && x.DrawTimes != nil {
		return *x.DrawTimes
	}
	return 0
}

func (x *MagicTreasureJackpotMsg) GetFreeDrawTimes() int32 {
	if x != nil && x.FreeDrawTimes != nil {
		return *x.FreeDrawTimes
	}
	return 0
}

func (x *MagicTreasureJackpotMsg) GetAdFreeTimes() int32 {
	if x != nil && x.AdFreeTimes != nil {
		return *x.AdFreeTimes
	}
	return 0
}

func (x *MagicTreasureJackpotMsg) GetLastAdTime() int64 {
	if x != nil && x.LastAdTime != nil {
		return *x.LastAdTime
	}
	return 0
}

type MagicTreasureJackpotConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                   *int32  `protobuf:"varint,1,opt,name=poolId" json:"poolId,omitempty"`
	StartTime                *int64  `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	EndTime                  *int64  `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`
	Title                    *string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	ProtectParam             *string `protobuf:"bytes,5,opt,name=protectParam" json:"protectParam,omitempty"`
	DrawItemCostParam        *string `protobuf:"bytes,6,opt,name=drawItemCostParam" json:"drawItemCostParam,omitempty"`
	WeightParam              *string `protobuf:"bytes,7,opt,name=weightParam" json:"weightParam,omitempty"`
	FreeTimes                *int32  `protobuf:"varint,8,opt,name=freeTimes" json:"freeTimes,omitempty"`
	AdParam                  *string `protobuf:"bytes,9,opt,name=adParam" json:"adParam,omitempty"`
	BgIndex                  *int32  `protobuf:"varint,10,opt,name=bgIndex" json:"bgIndex,omitempty"`
	ImmortalDemonWeightParam *string `protobuf:"bytes,11,opt,name=immortalDemonWeightParam" json:"immortalDemonWeightParam,omitempty"`
}

func (x *MagicTreasureJackpotConfigMsg) Reset() {
	*x = MagicTreasureJackpotConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureJackpotConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureJackpotConfigMsg) ProtoMessage() {}

func (x *MagicTreasureJackpotConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureJackpotConfigMsg.ProtoReflect.Descriptor instead.
func (*MagicTreasureJackpotConfigMsg) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{3}
}

func (x *MagicTreasureJackpotConfigMsg) GetPoolId() int32 {
	if x != nil && x.PoolId != nil {
		return *x.PoolId
	}
	return 0
}

func (x *MagicTreasureJackpotConfigMsg) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *MagicTreasureJackpotConfigMsg) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *MagicTreasureJackpotConfigMsg) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MagicTreasureJackpotConfigMsg) GetProtectParam() string {
	if x != nil && x.ProtectParam != nil {
		return *x.ProtectParam
	}
	return ""
}

func (x *MagicTreasureJackpotConfigMsg) GetDrawItemCostParam() string {
	if x != nil && x.DrawItemCostParam != nil {
		return *x.DrawItemCostParam
	}
	return ""
}

func (x *MagicTreasureJackpotConfigMsg) GetWeightParam() string {
	if x != nil && x.WeightParam != nil {
		return *x.WeightParam
	}
	return ""
}

func (x *MagicTreasureJackpotConfigMsg) GetFreeTimes() int32 {
	if x != nil && x.FreeTimes != nil {
		return *x.FreeTimes
	}
	return 0
}

func (x *MagicTreasureJackpotConfigMsg) GetAdParam() string {
	if x != nil && x.AdParam != nil {
		return *x.AdParam
	}
	return ""
}

func (x *MagicTreasureJackpotConfigMsg) GetBgIndex() int32 {
	if x != nil && x.BgIndex != nil {
		return *x.BgIndex
	}
	return 0
}

func (x *MagicTreasureJackpotConfigMsg) GetImmortalDemonWeightParam() string {
	if x != nil && x.ImmortalDemonWeightParam != nil {
		return *x.ImmortalDemonWeightParam
	}
	return ""
}

type MagicTreasureResultItemMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *string `protobuf:"bytes,1,req,name=reward" json:"reward,omitempty"`
	Item   *string `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (x *MagicTreasureResultItemMsg) Reset() {
	*x = MagicTreasureResultItemMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureResultItemMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureResultItemMsg) ProtoMessage() {}

func (x *MagicTreasureResultItemMsg) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureResultItemMsg.ProtoReflect.Descriptor instead.
func (*MagicTreasureResultItemMsg) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{4}
}

func (x *MagicTreasureResultItemMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MagicTreasureResultItemMsg) GetItem() string {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return ""
}

type MagicTreasureDrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawTimes   *int32 `protobuf:"varint,1,req,name=drawTimes" json:"drawTimes,omitempty"`
	IsAd        *bool  `protobuf:"varint,2,opt,name=isAd" json:"isAd,omitempty"`
	PoolId      *int32 `protobuf:"varint,3,req,name=poolId" json:"poolId,omitempty"`
	IsUseADTime *bool  `protobuf:"varint,4,opt,name=isUseADTime" json:"isUseADTime,omitempty"`
	ItemId      *int32 `protobuf:"varint,5,opt,name=itemId" json:"itemId,omitempty"`
}

func (x *MagicTreasureDrawReq) Reset() {
	*x = MagicTreasureDrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureDrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureDrawReq) ProtoMessage() {}

func (x *MagicTreasureDrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureDrawReq.ProtoReflect.Descriptor instead.
func (*MagicTreasureDrawReq) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{5}
}

func (x *MagicTreasureDrawReq) GetDrawTimes() int32 {
	if x != nil && x.DrawTimes != nil {
		return *x.DrawTimes
	}
	return 0
}

func (x *MagicTreasureDrawReq) GetIsAd() bool {
	if x != nil && x.IsAd != nil {
		return *x.IsAd
	}
	return false
}

func (x *MagicTreasureDrawReq) GetPoolId() int32 {
	if x != nil && x.PoolId != nil {
		return *x.PoolId
	}
	return 0
}

func (x *MagicTreasureDrawReq) GetIsUseADTime() bool {
	if x != nil && x.IsUseADTime != nil {
		return *x.IsUseADTime
	}
	return false
}

func (x *MagicTreasureDrawReq) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type MagicTreasureDrawRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32                        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Rewards []*MagicTreasureResultItemMsg `protobuf:"bytes,2,rep,name=rewards" json:"rewards,omitempty"`
	SyncMsg *MagicTreasurePlayerDataMsg   `protobuf:"bytes,3,opt,name=syncMsg" json:"syncMsg,omitempty"`
}

func (x *MagicTreasureDrawRsp) Reset() {
	*x = MagicTreasureDrawRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureDrawRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureDrawRsp) ProtoMessage() {}

func (x *MagicTreasureDrawRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureDrawRsp.ProtoReflect.Descriptor instead.
func (*MagicTreasureDrawRsp) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{6}
}

func (x *MagicTreasureDrawRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicTreasureDrawRsp) GetRewards() []*MagicTreasureResultItemMsg {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *MagicTreasureDrawRsp) GetSyncMsg() *MagicTreasurePlayerDataMsg {
	if x != nil {
		return x.SyncMsg
	}
	return nil
}

type MagicTreasureLvUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureId *int32 `protobuf:"varint,1,req,name=magicTreasureId" json:"magicTreasureId,omitempty"`
	IsQuick         *bool  `protobuf:"varint,2,opt,name=isQuick" json:"isQuick,omitempty"`
}

func (x *MagicTreasureLvUpReq) Reset() {
	*x = MagicTreasureLvUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureLvUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureLvUpReq) ProtoMessage() {}

func (x *MagicTreasureLvUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureLvUpReq.ProtoReflect.Descriptor instead.
func (*MagicTreasureLvUpReq) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{7}
}

func (x *MagicTreasureLvUpReq) GetMagicTreasureId() int32 {
	if x != nil && x.MagicTreasureId != nil {
		return *x.MagicTreasureId
	}
	return 0
}

func (x *MagicTreasureLvUpReq) GetIsQuick() bool {
	if x != nil && x.IsQuick != nil {
		return *x.IsQuick
	}
	return false
}

type MagicTreasureLvUpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret               *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MagicTreasureData *MagicTreasureDataMsg `protobuf:"bytes,2,opt,name=magicTreasureData" json:"magicTreasureData,omitempty"`
}

func (x *MagicTreasureLvUpRsp) Reset() {
	*x = MagicTreasureLvUpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureLvUpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureLvUpRsp) ProtoMessage() {}

func (x *MagicTreasureLvUpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureLvUpRsp.ProtoReflect.Descriptor instead.
func (*MagicTreasureLvUpRsp) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{8}
}

func (x *MagicTreasureLvUpRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicTreasureLvUpRsp) GetMagicTreasureData() *MagicTreasureDataMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

type MagicTreasureActiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureId *int32 `protobuf:"varint,1,req,name=magicTreasureId" json:"magicTreasureId,omitempty"`
}

func (x *MagicTreasureActiveReq) Reset() {
	*x = MagicTreasureActiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureActiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureActiveReq) ProtoMessage() {}

func (x *MagicTreasureActiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureActiveReq.ProtoReflect.Descriptor instead.
func (*MagicTreasureActiveReq) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{9}
}

func (x *MagicTreasureActiveReq) GetMagicTreasureId() int32 {
	if x != nil && x.MagicTreasureId != nil {
		return *x.MagicTreasureId
	}
	return 0
}

type MagicTreasureActiveRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret               *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MagicTreasureData *MagicTreasureDataMsg `protobuf:"bytes,2,opt,name=magicTreasureData" json:"magicTreasureData,omitempty"`
}

func (x *MagicTreasureActiveRsp) Reset() {
	*x = MagicTreasureActiveRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureActiveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureActiveRsp) ProtoMessage() {}

func (x *MagicTreasureActiveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureActiveRsp.ProtoReflect.Descriptor instead.
func (*MagicTreasureActiveRsp) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{10}
}

func (x *MagicTreasureActiveRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicTreasureActiveRsp) GetMagicTreasureData() *MagicTreasureDataMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

type MagicTreasureStarUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureId *int32 `protobuf:"varint,1,req,name=magicTreasureId" json:"magicTreasureId,omitempty"`
}

func (x *MagicTreasureStarUpReq) Reset() {
	*x = MagicTreasureStarUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureStarUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureStarUpReq) ProtoMessage() {}

func (x *MagicTreasureStarUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureStarUpReq.ProtoReflect.Descriptor instead.
func (*MagicTreasureStarUpReq) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{11}
}

func (x *MagicTreasureStarUpReq) GetMagicTreasureId() int32 {
	if x != nil && x.MagicTreasureId != nil {
		return *x.MagicTreasureId
	}
	return 0
}

type MagicTreasureStarUpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret               *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MagicTreasureData *MagicTreasureDataMsg `protobuf:"bytes,2,opt,name=magicTreasureData" json:"magicTreasureData,omitempty"`
}

func (x *MagicTreasureStarUpRsp) Reset() {
	*x = MagicTreasureStarUpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureStarUpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureStarUpRsp) ProtoMessage() {}

func (x *MagicTreasureStarUpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureStarUpRsp.ProtoReflect.Descriptor instead.
func (*MagicTreasureStarUpRsp) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{12}
}

func (x *MagicTreasureStarUpRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicTreasureStarUpRsp) GetMagicTreasureData() *MagicTreasureDataMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

type MagicTreasureLinkageDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureConfigId *int32 `protobuf:"varint,1,req,name=magicTreasureConfigId" json:"magicTreasureConfigId,omitempty"`
	LinkageId             *int32 `protobuf:"varint,2,req,name=linkageId" json:"linkageId,omitempty"`
}

func (x *MagicTreasureLinkageDataMsg) Reset() {
	*x = MagicTreasureLinkageDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureLinkageDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureLinkageDataMsg) ProtoMessage() {}

func (x *MagicTreasureLinkageDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureLinkageDataMsg.ProtoReflect.Descriptor instead.
func (*MagicTreasureLinkageDataMsg) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{13}
}

func (x *MagicTreasureLinkageDataMsg) GetMagicTreasureConfigId() int32 {
	if x != nil && x.MagicTreasureConfigId != nil {
		return *x.MagicTreasureConfigId
	}
	return 0
}

func (x *MagicTreasureLinkageDataMsg) GetLinkageId() int32 {
	if x != nil && x.LinkageId != nil {
		return *x.LinkageId
	}
	return 0
}

type MagicTreasureSwitchLinkageSkinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureId *int32 `protobuf:"varint,1,req,name=magicTreasureId" json:"magicTreasureId,omitempty"`
	LinkageId       *int32 `protobuf:"varint,2,req,name=linkageId" json:"linkageId,omitempty"`
}

func (x *MagicTreasureSwitchLinkageSkinReq) Reset() {
	*x = MagicTreasureSwitchLinkageSkinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureSwitchLinkageSkinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureSwitchLinkageSkinReq) ProtoMessage() {}

func (x *MagicTreasureSwitchLinkageSkinReq) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureSwitchLinkageSkinReq.ProtoReflect.Descriptor instead.
func (*MagicTreasureSwitchLinkageSkinReq) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{14}
}

func (x *MagicTreasureSwitchLinkageSkinReq) GetMagicTreasureId() int32 {
	if x != nil && x.MagicTreasureId != nil {
		return *x.MagicTreasureId
	}
	return 0
}

func (x *MagicTreasureSwitchLinkageSkinReq) GetLinkageId() int32 {
	if x != nil && x.LinkageId != nil {
		return *x.LinkageId
	}
	return 0
}

type MagicTreasureSwitchLinkageSkinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *MagicTreasureDataMsg `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *MagicTreasureSwitchLinkageSkinResp) Reset() {
	*x = MagicTreasureSwitchLinkageSkinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MagicTreasure_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureSwitchLinkageSkinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureSwitchLinkageSkinResp) ProtoMessage() {}

func (x *MagicTreasureSwitchLinkageSkinResp) ProtoReflect() protoreflect.Message {
	mi := &file_MagicTreasure_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureSwitchLinkageSkinResp.ProtoReflect.Descriptor instead.
func (*MagicTreasureSwitchLinkageSkinResp) Descriptor() ([]byte, []int) {
	return file_MagicTreasure_proto_rawDescGZIP(), []int{15}
}

func (x *MagicTreasureSwitchLinkageSkinResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicTreasureSwitchLinkageSkinResp) GetData() *MagicTreasureDataMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_MagicTreasure_proto protoreflect.FileDescriptor

var file_MagicTreasure_proto_rawDesc = []byte{
	0x0a, 0x13, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xf5, 0x02, 0x0a,
	0x1a, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x56, 0x0a, 0x11, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0b, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x57, 0x0a, 0x0d, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0e, 0x6c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x72, 0x61,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x44, 0x72,
	0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66,
	0x72, 0x65, 0x65, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x64, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x64, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x87,
	0x03, 0x0a, 0x1d, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72,
	0x61, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x72, 0x61, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x18,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x48, 0x0a, 0x1a, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x41,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x41, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x41, 0x44,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x41, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0xbc, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x22, 0x5a,
	0x0a, 0x14, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4c,
	0x76, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x76, 0x55, 0x70,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a,
	0x16, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x56,
	0x0a, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x16, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x55, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x55, 0x70, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x71, 0x0a, 0x1b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x34,
	0x0a, 0x15, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x21, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x53, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x74, 0x0a, 0x22, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6b, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64,
	0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_MagicTreasure_proto_rawDescOnce sync.Once
	file_MagicTreasure_proto_rawDescData = file_MagicTreasure_proto_rawDesc
)

func file_MagicTreasure_proto_rawDescGZIP() []byte {
	file_MagicTreasure_proto_rawDescOnce.Do(func() {
		file_MagicTreasure_proto_rawDescData = protoimpl.X.CompressGZIP(file_MagicTreasure_proto_rawDescData)
	})
	return file_MagicTreasure_proto_rawDescData
}

var file_MagicTreasure_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_MagicTreasure_proto_goTypes = []any{
	(*SyncMagicTreasureDataMsg)(nil),           // 0: com.yq.msg.CityMsg.SyncMagicTreasureDataMsg
	(*MagicTreasurePlayerDataMsg)(nil),         // 1: com.yq.msg.CityMsg.MagicTreasurePlayerDataMsg
	(*MagicTreasureJackpotMsg)(nil),            // 2: com.yq.msg.CityMsg.MagicTreasureJackpotMsg
	(*MagicTreasureJackpotConfigMsg)(nil),      // 3: com.yq.msg.CityMsg.MagicTreasureJackpotConfigMsg
	(*MagicTreasureResultItemMsg)(nil),         // 4: com.yq.msg.CityMsg.MagicTreasureResultItemMsg
	(*MagicTreasureDrawReq)(nil),               // 5: com.yq.msg.CityMsg.MagicTreasureDrawReq
	(*MagicTreasureDrawRsp)(nil),               // 6: com.yq.msg.CityMsg.MagicTreasureDrawRsp
	(*MagicTreasureLvUpReq)(nil),               // 7: com.yq.msg.CityMsg.MagicTreasureLvUpReq
	(*MagicTreasureLvUpRsp)(nil),               // 8: com.yq.msg.CityMsg.MagicTreasureLvUpRsp
	(*MagicTreasureActiveReq)(nil),             // 9: com.yq.msg.CityMsg.MagicTreasureActiveReq
	(*MagicTreasureActiveRsp)(nil),             // 10: com.yq.msg.CityMsg.MagicTreasureActiveRsp
	(*MagicTreasureStarUpReq)(nil),             // 11: com.yq.msg.CityMsg.MagicTreasureStarUpReq
	(*MagicTreasureStarUpRsp)(nil),             // 12: com.yq.msg.CityMsg.MagicTreasureStarUpRsp
	(*MagicTreasureLinkageDataMsg)(nil),        // 13: com.yq.msg.CityMsg.MagicTreasureLinkageDataMsg
	(*MagicTreasureSwitchLinkageSkinReq)(nil),  // 14: com.yq.msg.CityMsg.MagicTreasureSwitchLinkageSkinReq
	(*MagicTreasureSwitchLinkageSkinResp)(nil), // 15: com.yq.msg.CityMsg.MagicTreasureSwitchLinkageSkinResp
	(*MagicTreasureDataMsg)(nil),               // 16: com.yq.msg.CityMsg.MagicTreasureDataMsg
}
var file_MagicTreasure_proto_depIdxs = []int32{
	16, // 0: com.yq.msg.CityMsg.SyncMagicTreasureDataMsg.magicTreasureData:type_name -> com.yq.msg.CityMsg.MagicTreasureDataMsg
	16, // 1: com.yq.msg.CityMsg.MagicTreasurePlayerDataMsg.magicTreasureData:type_name -> com.yq.msg.CityMsg.MagicTreasureDataMsg
	2,  // 2: com.yq.msg.CityMsg.MagicTreasurePlayerDataMsg.jackpotData:type_name -> com.yq.msg.CityMsg.MagicTreasureJackpotMsg
	3,  // 3: com.yq.msg.CityMsg.MagicTreasurePlayerDataMsg.jackpotConfig:type_name -> com.yq.msg.CityMsg.MagicTreasureJackpotConfigMsg
	13, // 4: com.yq.msg.CityMsg.MagicTreasurePlayerDataMsg.linkageDataMsg:type_name -> com.yq.msg.CityMsg.MagicTreasureLinkageDataMsg
	4,  // 5: com.yq.msg.CityMsg.MagicTreasureDrawRsp.rewards:type_name -> com.yq.msg.CityMsg.MagicTreasureResultItemMsg
	1,  // 6: com.yq.msg.CityMsg.MagicTreasureDrawRsp.syncMsg:type_name -> com.yq.msg.CityMsg.MagicTreasurePlayerDataMsg
	16, // 7: com.yq.msg.CityMsg.MagicTreasureLvUpRsp.magicTreasureData:type_name -> com.yq.msg.CityMsg.MagicTreasureDataMsg
	16, // 8: com.yq.msg.CityMsg.MagicTreasureActiveRsp.magicTreasureData:type_name -> com.yq.msg.CityMsg.MagicTreasureDataMsg
	16, // 9: com.yq.msg.CityMsg.MagicTreasureStarUpRsp.magicTreasureData:type_name -> com.yq.msg.CityMsg.MagicTreasureDataMsg
	16, // 10: com.yq.msg.CityMsg.MagicTreasureSwitchLinkageSkinResp.data:type_name -> com.yq.msg.CityMsg.MagicTreasureDataMsg
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_MagicTreasure_proto_init() }
func file_MagicTreasure_proto_init() {
	if File_MagicTreasure_proto != nil {
		return
	}
	file_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MagicTreasure_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMagicTreasureDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasurePlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureJackpotMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureJackpotConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureResultItemMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureDrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureDrawRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureLvUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureLvUpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureActiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureActiveRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureStarUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureStarUpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureLinkageDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureSwitchLinkageSkinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MagicTreasure_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureSwitchLinkageSkinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MagicTreasure_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MagicTreasure_proto_goTypes,
		DependencyIndexes: file_MagicTreasure_proto_depIdxs,
		MessageInfos:      file_MagicTreasure_proto_msgTypes,
	}.Build()
	File_MagicTreasure_proto = out.File
	file_MagicTreasure_proto_rawDesc = nil
	file_MagicTreasure_proto_goTypes = nil
	file_MagicTreasure_proto_depIdxs = nil
}
