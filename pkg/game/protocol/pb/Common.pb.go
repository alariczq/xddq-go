// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: Common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EquipmentDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int64              `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	EquipmentId   *int32              `protobuf:"varint,2,req,name=equipmentId" json:"equipmentId,omitempty"`
	Level         *int32              `protobuf:"varint,3,req,name=level" json:"level,omitempty"`
	Quality       *int32              `protobuf:"varint,4,req,name=quality" json:"quality,omitempty"`
	AttributeList []*AttributeDataMsg `protobuf:"bytes,5,rep,name=attributeList" json:"attributeList,omitempty"`
	Src           *int32              `protobuf:"varint,6,req,name=src" json:"src,omitempty"`
}

func (x *EquipmentDataMsg) Reset() {
	*x = EquipmentDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentDataMsg) ProtoMessage() {}

func (x *EquipmentDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentDataMsg.ProtoReflect.Descriptor instead.
func (*EquipmentDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{0}
}

func (x *EquipmentDataMsg) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EquipmentDataMsg) GetEquipmentId() int32 {
	if x != nil && x.EquipmentId != nil {
		return *x.EquipmentId
	}
	return 0
}

func (x *EquipmentDataMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *EquipmentDataMsg) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *EquipmentDataMsg) GetAttributeList() []*AttributeDataMsg {
	if x != nil {
		return x.AttributeList
	}
	return nil
}

func (x *EquipmentDataMsg) GetSrc() int32 {
	if x != nil && x.Src != nil {
		return *x.Src
	}
	return 0
}

type AttributeDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Value *int64 `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *AttributeDataMsg) Reset() {
	*x = AttributeDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDataMsg) ProtoMessage() {}

func (x *AttributeDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDataMsg.ProtoReflect.Descriptor instead.
func (*AttributeDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{1}
}

func (x *AttributeDataMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *AttributeDataMsg) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type PlayerEquipCloudDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipCloudId *int32 `protobuf:"varint,1,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	Stage        *int32 `protobuf:"varint,2,opt,name=stage" json:"stage,omitempty"`
	Lv           *int32 `protobuf:"varint,3,opt,name=lv" json:"lv,omitempty"`
	CloudSkinId  *int32 `protobuf:"varint,4,opt,name=cloudSkinId" json:"cloudSkinId,omitempty"`
}

func (x *PlayerEquipCloudDataMsg) Reset() {
	*x = PlayerEquipCloudDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerEquipCloudDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerEquipCloudDataMsg) ProtoMessage() {}

func (x *PlayerEquipCloudDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerEquipCloudDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerEquipCloudDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerEquipCloudDataMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *PlayerEquipCloudDataMsg) GetStage() int32 {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return 0
}

func (x *PlayerEquipCloudDataMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *PlayerEquipCloudDataMsg) GetCloudSkinId() int32 {
	if x != nil && x.CloudSkinId != nil {
		return *x.CloudSkinId
	}
	return 0
}

// * 奖励数据
type AwardInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwardInfoList []*AwardInfo `protobuf:"bytes,1,rep,name=awardInfoList" json:"awardInfoList,omitempty"`
}

func (x *AwardInfoList) Reset() {
	*x = AwardInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardInfoList) ProtoMessage() {}

func (x *AwardInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardInfoList.ProtoReflect.Descriptor instead.
func (*AwardInfoList) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{3}
}

func (x *AwardInfoList) GetAwardInfoList() []*AwardInfo {
	if x != nil {
		return x.AwardInfoList
	}
	return nil
}

type AwardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropId *int32  `protobuf:"varint,1,opt,name=propId" json:"propId,omitempty"`
	Num    *string `protobuf:"bytes,2,opt,name=num" json:"num,omitempty"`
	Extra  *string `protobuf:"bytes,3,opt,name=extra" json:"extra,omitempty"`
}

func (x *AwardInfo) Reset() {
	*x = AwardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardInfo) ProtoMessage() {}

func (x *AwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardInfo.ProtoReflect.Descriptor instead.
func (*AwardInfo) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{4}
}

func (x *AwardInfo) GetPropId() int32 {
	if x != nil && x.PropId != nil {
		return *x.PropId
	}
	return 0
}

func (x *AwardInfo) GetNum() string {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return ""
}

func (x *AwardInfo) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type SkillMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId *int32 `protobuf:"varint,1,req,name=skillId" json:"skillId,omitempty"`
	Lv      *int32 `protobuf:"varint,2,req,name=lv" json:"lv,omitempty"`
}

func (x *SkillMsg) Reset() {
	*x = SkillMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillMsg) ProtoMessage() {}

func (x *SkillMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillMsg.ProtoReflect.Descriptor instead.
func (*SkillMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{5}
}

func (x *SkillMsg) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *SkillMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

type EquipUniverseSkillMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	SkillId *int32 `protobuf:"varint,2,req,name=skillId" json:"skillId,omitempty"`
	SkillLv *int32 `protobuf:"varint,3,opt,name=skillLv" json:"skillLv,omitempty"`
}

func (x *EquipUniverseSkillMsg) Reset() {
	*x = EquipUniverseSkillMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipUniverseSkillMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipUniverseSkillMsg) ProtoMessage() {}

func (x *EquipUniverseSkillMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipUniverseSkillMsg.ProtoReflect.Descriptor instead.
func (*EquipUniverseSkillMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{6}
}

func (x *EquipUniverseSkillMsg) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EquipUniverseSkillMsg) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *EquipUniverseSkillMsg) GetSkillLv() int32 {
	if x != nil && x.SkillLv != nil {
		return *x.SkillLv
	}
	return 0
}

type UnionServerIdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId  *int64 `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	ServerId *int64 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
}

func (x *UnionServerIdData) Reset() {
	*x = UnionServerIdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionServerIdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionServerIdData) ProtoMessage() {}

func (x *UnionServerIdData) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionServerIdData.ProtoReflect.Descriptor instead.
func (*UnionServerIdData) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{7}
}

func (x *UnionServerIdData) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *UnionServerIdData) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type UnionNameServerIdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionName *string `protobuf:"bytes,1,opt,name=unionName" json:"unionName,omitempty"`
	ServerId  *int64  `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
}

func (x *UnionNameServerIdData) Reset() {
	*x = UnionNameServerIdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionNameServerIdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionNameServerIdData) ProtoMessage() {}

func (x *UnionNameServerIdData) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionNameServerIdData.ProtoReflect.Descriptor instead.
func (*UnionNameServerIdData) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{8}
}

func (x *UnionNameServerIdData) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *UnionNameServerIdData) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type PlayerSuppressAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipList      []*EquipmentDataMsg `protobuf:"bytes,1,rep,name=equipList" json:"equipList,omitempty"`
	PreRealms      *int32              `protobuf:"varint,2,opt,name=preRealms" json:"preRealms,omitempty"`
	AfterRealms    *int32              `protobuf:"varint,3,opt,name=afterRealms" json:"afterRealms,omitempty"`
	PreAttribute   []*AttributeDataMsg `protobuf:"bytes,4,rep,name=preAttribute" json:"preAttribute,omitempty"`
	AfterAttribute []*AttributeDataMsg `protobuf:"bytes,5,rep,name=afterAttribute" json:"afterAttribute,omitempty"`
}

func (x *PlayerSuppressAttribute) Reset() {
	*x = PlayerSuppressAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSuppressAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSuppressAttribute) ProtoMessage() {}

func (x *PlayerSuppressAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSuppressAttribute.ProtoReflect.Descriptor instead.
func (*PlayerSuppressAttribute) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerSuppressAttribute) GetEquipList() []*EquipmentDataMsg {
	if x != nil {
		return x.EquipList
	}
	return nil
}

func (x *PlayerSuppressAttribute) GetPreRealms() int32 {
	if x != nil && x.PreRealms != nil {
		return *x.PreRealms
	}
	return 0
}

func (x *PlayerSuppressAttribute) GetAfterRealms() int32 {
	if x != nil && x.AfterRealms != nil {
		return *x.AfterRealms
	}
	return 0
}

func (x *PlayerSuppressAttribute) GetPreAttribute() []*AttributeDataMsg {
	if x != nil {
		return x.PreAttribute
	}
	return nil
}

func (x *PlayerSuppressAttribute) GetAfterAttribute() []*AttributeDataMsg {
	if x != nil {
		return x.AfterAttribute
	}
	return nil
}

type PlayerDetailDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBaseDataMsg       *PlayerBaseDataMsg                `protobuf:"bytes,1,opt,name=playerBaseDataMsg" json:"playerBaseDataMsg,omitempty"`
	PlayerAttributeDataList []*AttributeDataMsg               `protobuf:"bytes,2,rep,name=playerAttributeDataList" json:"playerAttributeDataList,omitempty"`
	EquipmentList           []*EquipmentDataMsg               `protobuf:"bytes,3,rep,name=equipmentList" json:"equipmentList,omitempty"`
	CloudDataMsg            *PlayerEquipCloudDataMsg          `protobuf:"bytes,4,opt,name=cloudDataMsg" json:"cloudDataMsg,omitempty"`
	PetDataMsg              *PetDataMsg                       `protobuf:"bytes,5,opt,name=petDataMsg" json:"petDataMsg,omitempty"`
	TalentPlayerDataMsg     *TalentPlayerDataMsg              `protobuf:"bytes,6,opt,name=talentPlayerDataMsg" json:"talentPlayerDataMsg,omitempty"`
	SpiritDataMsg           []*SpiritDataMsg                  `protobuf:"bytes,7,rep,name=spiritDataMsg" json:"spiritDataMsg,omitempty"`
	EquipMagicData          []*MagicDataMsg                   `protobuf:"bytes,8,rep,name=equipMagicData" json:"equipMagicData,omitempty"`
	RefineLvList            []int32                           `protobuf:"varint,9,rep,name=refineLvList" json:"refineLvList,omitempty"`
	EquipmentAdvanceLv      *int32                            `protobuf:"varint,10,opt,name=equipmentAdvanceLv" json:"equipmentAdvanceLv,omitempty"`
	MagicTreasureData       *PlayerDetailDataMagicTreasureMsg `protobuf:"bytes,11,opt,name=magicTreasureData" json:"magicTreasureData,omitempty"`
	AssistantPet            *PetDataMsg                       `protobuf:"bytes,12,opt,name=assistantPet" json:"assistantPet,omitempty"`
	WorldRuleDataMsg        *WorldRulePlayerDataMsg           `protobuf:"bytes,13,opt,name=worldRuleDataMsg" json:"worldRuleDataMsg,omitempty"`
	Race                    *int32                            `protobuf:"varint,14,opt,name=race" json:"race,omitempty"`
	PetKernelList           []*PetKernelDataMsg               `protobuf:"bytes,15,rep,name=petKernelList" json:"petKernelList,omitempty"`
	ChaoticPet              []*PlayerChaoticPetMsg            `protobuf:"bytes,16,rep,name=chaoticPet" json:"chaoticPet,omitempty"`
	CloudRefinePlayerData   *CloudRefinePlayerDataMsg         `protobuf:"bytes,17,opt,name=cloudRefinePlayerData" json:"cloudRefinePlayerData,omitempty"`
	PupilDetailData         *PupilDetailDataMsg               `protobuf:"bytes,18,opt,name=pupilDetailData" json:"pupilDetailData,omitempty"`
	EquipUniverseSkillData  []*EquipUniverseSkillMsg          `protobuf:"bytes,19,rep,name=equipUniverseSkillData" json:"equipUniverseSkillData,omitempty"`
	UniverseLevel           *int32                            `protobuf:"varint,20,opt,name=universeLevel" json:"universeLevel,omitempty"`
}

func (x *PlayerDetailDataMsg) Reset() {
	*x = PlayerDetailDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDetailDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDetailDataMsg) ProtoMessage() {}

func (x *PlayerDetailDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDetailDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerDetailDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerDetailDataMsg) GetPlayerBaseDataMsg() *PlayerBaseDataMsg {
	if x != nil {
		return x.PlayerBaseDataMsg
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetPlayerAttributeDataList() []*AttributeDataMsg {
	if x != nil {
		return x.PlayerAttributeDataList
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetEquipmentList() []*EquipmentDataMsg {
	if x != nil {
		return x.EquipmentList
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetCloudDataMsg() *PlayerEquipCloudDataMsg {
	if x != nil {
		return x.CloudDataMsg
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetPetDataMsg() *PetDataMsg {
	if x != nil {
		return x.PetDataMsg
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetTalentPlayerDataMsg() *TalentPlayerDataMsg {
	if x != nil {
		return x.TalentPlayerDataMsg
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetSpiritDataMsg() []*SpiritDataMsg {
	if x != nil {
		return x.SpiritDataMsg
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetEquipMagicData() []*MagicDataMsg {
	if x != nil {
		return x.EquipMagicData
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetRefineLvList() []int32 {
	if x != nil {
		return x.RefineLvList
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetEquipmentAdvanceLv() int32 {
	if x != nil && x.EquipmentAdvanceLv != nil {
		return *x.EquipmentAdvanceLv
	}
	return 0
}

func (x *PlayerDetailDataMsg) GetMagicTreasureData() *PlayerDetailDataMagicTreasureMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetAssistantPet() *PetDataMsg {
	if x != nil {
		return x.AssistantPet
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetWorldRuleDataMsg() *WorldRulePlayerDataMsg {
	if x != nil {
		return x.WorldRuleDataMsg
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetRace() int32 {
	if x != nil && x.Race != nil {
		return *x.Race
	}
	return 0
}

func (x *PlayerDetailDataMsg) GetPetKernelList() []*PetKernelDataMsg {
	if x != nil {
		return x.PetKernelList
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetChaoticPet() []*PlayerChaoticPetMsg {
	if x != nil {
		return x.ChaoticPet
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetCloudRefinePlayerData() *CloudRefinePlayerDataMsg {
	if x != nil {
		return x.CloudRefinePlayerData
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetPupilDetailData() *PupilDetailDataMsg {
	if x != nil {
		return x.PupilDetailData
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetEquipUniverseSkillData() []*EquipUniverseSkillMsg {
	if x != nil {
		return x.EquipUniverseSkillData
	}
	return nil
}

func (x *PlayerDetailDataMsg) GetUniverseLevel() int32 {
	if x != nil && x.UniverseLevel != nil {
		return *x.UniverseLevel
	}
	return 0
}

type PlayerDetailDataMagicTreasureMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureData []*MagicTreasureDataMsg `protobuf:"bytes,1,rep,name=magicTreasureData" json:"magicTreasureData,omitempty"`
}

func (x *PlayerDetailDataMagicTreasureMsg) Reset() {
	*x = PlayerDetailDataMagicTreasureMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDetailDataMagicTreasureMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDetailDataMagicTreasureMsg) ProtoMessage() {}

func (x *PlayerDetailDataMagicTreasureMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDetailDataMagicTreasureMsg.ProtoReflect.Descriptor instead.
func (*PlayerDetailDataMagicTreasureMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerDetailDataMagicTreasureMsg) GetMagicTreasureData() []*MagicTreasureDataMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

type PlayerBaseDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId           *int64         `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	HeadIcon           *int32         `protobuf:"varint,2,opt,name=headIcon" json:"headIcon,omitempty"`
	NickName           *string        `protobuf:"bytes,3,opt,name=nickName" json:"nickName,omitempty"`
	RealmsId           *int32         `protobuf:"varint,4,opt,name=realmsId" json:"realmsId,omitempty"`
	FightValue         *int64         `protobuf:"varint,5,opt,name=fightValue" json:"fightValue,omitempty"`
	UnionData          *UnionBaseData `protobuf:"bytes,6,opt,name=unionData" json:"unionData,omitempty"`
	AppearanceId       *int32         `protobuf:"varint,7,opt,name=appearanceId" json:"appearanceId,omitempty"`
	ServerId           *int64         `protobuf:"varint,8,opt,name=serverId" json:"serverId,omitempty"`
	WxHeadUrl          *string        `protobuf:"bytes,9,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	TitleId            *int32         `protobuf:"varint,10,opt,name=titleId" json:"titleId,omitempty"`
	PlayerBelong       *string        `protobuf:"bytes,11,opt,name=playerBelong" json:"playerBelong,omitempty"`
	EquipHeadIconFrame *int32         `protobuf:"varint,12,opt,name=equipHeadIconFrame" json:"equipHeadIconFrame,omitempty"`
	EquipChatBubble    *int32         `protobuf:"varint,13,opt,name=equipChatBubble" json:"equipChatBubble,omitempty"`
	MedalId            *int32         `protobuf:"varint,14,opt,name=medalId" json:"medalId,omitempty"`
	CloudId            *int32         `protobuf:"varint,15,opt,name=cloudId" json:"cloudId,omitempty"`
}

func (x *PlayerBaseDataMsg) Reset() {
	*x = PlayerBaseDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBaseDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBaseDataMsg) ProtoMessage() {}

func (x *PlayerBaseDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBaseDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerBaseDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerBaseDataMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetHeadIcon() int32 {
	if x != nil && x.HeadIcon != nil {
		return *x.HeadIcon
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *PlayerBaseDataMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetUnionData() *UnionBaseData {
	if x != nil {
		return x.UnionData
	}
	return nil
}

func (x *PlayerBaseDataMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *PlayerBaseDataMsg) GetTitleId() int32 {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetPlayerBelong() string {
	if x != nil && x.PlayerBelong != nil {
		return *x.PlayerBelong
	}
	return ""
}

func (x *PlayerBaseDataMsg) GetEquipHeadIconFrame() int32 {
	if x != nil && x.EquipHeadIconFrame != nil {
		return *x.EquipHeadIconFrame
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetEquipChatBubble() int32 {
	if x != nil && x.EquipChatBubble != nil {
		return *x.EquipChatBubble
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetMedalId() int32 {
	if x != nil && x.MedalId != nil {
		return *x.MedalId
	}
	return 0
}

func (x *PlayerBaseDataMsg) GetCloudId() int32 {
	if x != nil && x.CloudId != nil {
		return *x.CloudId
	}
	return 0
}

type PlayerChaoticPetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId *int32 `protobuf:"varint,1,opt,name=configId" json:"configId,omitempty"`
	RootLv   *int32 `protobuf:"varint,2,opt,name=rootLv" json:"rootLv,omitempty"`
	AwakeLv  *int32 `protobuf:"varint,3,opt,name=awakeLv" json:"awakeLv,omitempty"`
}

func (x *PlayerChaoticPetMsg) Reset() {
	*x = PlayerChaoticPetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerChaoticPetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerChaoticPetMsg) ProtoMessage() {}

func (x *PlayerChaoticPetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerChaoticPetMsg.ProtoReflect.Descriptor instead.
func (*PlayerChaoticPetMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerChaoticPetMsg) GetConfigId() int32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *PlayerChaoticPetMsg) GetRootLv() int32 {
	if x != nil && x.RootLv != nil {
		return *x.RootLv
	}
	return 0
}

func (x *PlayerChaoticPetMsg) GetAwakeLv() int32 {
	if x != nil && x.AwakeLv != nil {
		return *x.AwakeLv
	}
	return 0
}

type MagicTreasureDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicTreasureId *int32 `protobuf:"varint,1,req,name=magicTreasureId" json:"magicTreasureId,omitempty"`
	StarLv          *int32 `protobuf:"varint,2,req,name=starLv" json:"starLv,omitempty"`
	Lv              *int32 `protobuf:"varint,3,req,name=lv" json:"lv,omitempty"`
	CumulativeNum   *int32 `protobuf:"varint,4,opt,name=cumulativeNum" json:"cumulativeNum,omitempty"`
	EquipLinkageId  *int32 `protobuf:"varint,5,opt,name=equipLinkageId" json:"equipLinkageId,omitempty"`
}

func (x *MagicTreasureDataMsg) Reset() {
	*x = MagicTreasureDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicTreasureDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicTreasureDataMsg) ProtoMessage() {}

func (x *MagicTreasureDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicTreasureDataMsg.ProtoReflect.Descriptor instead.
func (*MagicTreasureDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{14}
}

func (x *MagicTreasureDataMsg) GetMagicTreasureId() int32 {
	if x != nil && x.MagicTreasureId != nil {
		return *x.MagicTreasureId
	}
	return 0
}

func (x *MagicTreasureDataMsg) GetStarLv() int32 {
	if x != nil && x.StarLv != nil {
		return *x.StarLv
	}
	return 0
}

func (x *MagicTreasureDataMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *MagicTreasureDataMsg) GetCumulativeNum() int32 {
	if x != nil && x.CumulativeNum != nil {
		return *x.CumulativeNum
	}
	return 0
}

func (x *MagicTreasureDataMsg) GetEquipLinkageId() int32 {
	if x != nil && x.EquipLinkageId != nil {
		return *x.EquipLinkageId
	}
	return 0
}

type UnionBaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId       *int64  `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	Exp           *int64  `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	Flag          *int32  `protobuf:"varint,3,opt,name=flag" json:"flag,omitempty"`
	Name          *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	IsFreedom     *bool   `protobuf:"varint,5,opt,name=isFreedom" json:"isFreedom,omitempty"`
	LimitRealmsId *int32  `protobuf:"varint,6,opt,name=limitRealmsId" json:"limitRealmsId,omitempty"`
	ServerId      *int64  `protobuf:"varint,7,opt,name=serverId" json:"serverId,omitempty"`
	MemberNum     *int32  `protobuf:"varint,8,opt,name=memberNum" json:"memberNum,omitempty"`
	Dan           *int32  `protobuf:"varint,9,opt,name=dan" json:"dan,omitempty"`
	DanStar       *int32  `protobuf:"varint,10,opt,name=danStar" json:"danStar,omitempty"`
	Cross         *bool   `protobuf:"varint,11,opt,name=cross" json:"cross,omitempty"`
}

func (x *UnionBaseData) Reset() {
	*x = UnionBaseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionBaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionBaseData) ProtoMessage() {}

func (x *UnionBaseData) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionBaseData.ProtoReflect.Descriptor instead.
func (*UnionBaseData) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{15}
}

func (x *UnionBaseData) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *UnionBaseData) GetExp() int64 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *UnionBaseData) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *UnionBaseData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UnionBaseData) GetIsFreedom() bool {
	if x != nil && x.IsFreedom != nil {
		return *x.IsFreedom
	}
	return false
}

func (x *UnionBaseData) GetLimitRealmsId() int32 {
	if x != nil && x.LimitRealmsId != nil {
		return *x.LimitRealmsId
	}
	return 0
}

func (x *UnionBaseData) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *UnionBaseData) GetMemberNum() int32 {
	if x != nil && x.MemberNum != nil {
		return *x.MemberNum
	}
	return 0
}

func (x *UnionBaseData) GetDan() int32 {
	if x != nil && x.Dan != nil {
		return *x.Dan
	}
	return 0
}

func (x *UnionBaseData) GetDanStar() int32 {
	if x != nil && x.DanStar != nil {
		return *x.DanStar
	}
	return 0
}

func (x *UnionBaseData) GetCross() bool {
	if x != nil && x.Cross != nil {
		return *x.Cross
	}
	return false
}

type CloudRefinePlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigType                 *int32              `protobuf:"varint,1,opt,name=bigType" json:"bigType,omitempty"`
	StarLv                  *int32              `protobuf:"varint,2,opt,name=starLv" json:"starLv,omitempty"`
	RefineLv                *int32              `protobuf:"varint,3,opt,name=refineLv" json:"refineLv,omitempty"`
	RefineHoleSkills        []*CloudRefineSkill `protobuf:"bytes,4,rep,name=refineHoleSkills" json:"refineHoleSkills,omitempty"`
	CloudRefineAttrDataList []*AttributeDataMsg `protobuf:"bytes,5,rep,name=cloudRefineAttrDataList" json:"cloudRefineAttrDataList,omitempty"`
	Exp                     *int32              `protobuf:"varint,6,opt,name=exp" json:"exp,omitempty"`
}

func (x *CloudRefinePlayerDataMsg) Reset() {
	*x = CloudRefinePlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudRefinePlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudRefinePlayerDataMsg) ProtoMessage() {}

func (x *CloudRefinePlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudRefinePlayerDataMsg.ProtoReflect.Descriptor instead.
func (*CloudRefinePlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{16}
}

func (x *CloudRefinePlayerDataMsg) GetBigType() int32 {
	if x != nil && x.BigType != nil {
		return *x.BigType
	}
	return 0
}

func (x *CloudRefinePlayerDataMsg) GetStarLv() int32 {
	if x != nil && x.StarLv != nil {
		return *x.StarLv
	}
	return 0
}

func (x *CloudRefinePlayerDataMsg) GetRefineLv() int32 {
	if x != nil && x.RefineLv != nil {
		return *x.RefineLv
	}
	return 0
}

func (x *CloudRefinePlayerDataMsg) GetRefineHoleSkills() []*CloudRefineSkill {
	if x != nil {
		return x.RefineHoleSkills
	}
	return nil
}

func (x *CloudRefinePlayerDataMsg) GetCloudRefineAttrDataList() []*AttributeDataMsg {
	if x != nil {
		return x.CloudRefineAttrDataList
	}
	return nil
}

func (x *CloudRefinePlayerDataMsg) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

type CloudRefineSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId *int32 `protobuf:"varint,1,opt,name=skillId" json:"skillId,omitempty"`
	SkillLv *int32 `protobuf:"varint,2,opt,name=skillLv" json:"skillLv,omitempty"`
}

func (x *CloudRefineSkill) Reset() {
	*x = CloudRefineSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudRefineSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudRefineSkill) ProtoMessage() {}

func (x *CloudRefineSkill) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudRefineSkill.ProtoReflect.Descriptor instead.
func (*CloudRefineSkill) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{17}
}

func (x *CloudRefineSkill) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *CloudRefineSkill) GetSkillLv() int32 {
	if x != nil && x.SkillLv != nil {
		return *x.SkillLv
	}
	return 0
}

type PlayerPetDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetPoolData         []*PetPoolDataMsg        `protobuf:"bytes,1,rep,name=petPoolData" json:"petPoolData,omitempty"`
	PetBagCount         *int32                   `protobuf:"varint,2,req,name=petBagCount" json:"petBagCount,omitempty"`
	PetData             []*PetDataMsg            `protobuf:"bytes,3,rep,name=petData" json:"petData,omitempty"`
	EquipPetId          *int32                   `protobuf:"varint,4,opt,name=equipPetId" json:"equipPetId,omitempty"`
	RefreshTimes        *int32                   `protobuf:"varint,5,req,name=refreshTimes" json:"refreshTimes,omitempty"`
	CollectPetId        []int32                  `protobuf:"varint,6,rep,name=collectPetId" json:"collectPetId,omitempty"`
	FreeRefreshTimes    *int32                   `protobuf:"varint,7,req,name=freeRefreshTimes" json:"freeRefreshTimes,omitempty"`
	PrivilegeTimes      *int32                   `protobuf:"varint,8,req,name=privilegeTimes" json:"privilegeTimes,omitempty"`
	WishPetId           *int32                   `protobuf:"varint,9,req,name=wishPetId" json:"wishPetId,omitempty"`
	WishPetProgress     *int32                   `protobuf:"varint,10,req,name=wishPetProgress" json:"wishPetProgress,omitempty"`
	SoulShapeResetTimes *int32                   `protobuf:"varint,11,opt,name=soulShapeResetTimes" json:"soulShapeResetTimes,omitempty"`
	PetLinkageDataMsg   []*PetLinkageDataMsg     `protobuf:"bytes,12,rep,name=petLinkageDataMsg" json:"petLinkageDataMsg,omitempty"`
	KernelData          *PetKernelPlayerDataMsg  `protobuf:"bytes,13,opt,name=kernelData" json:"kernelData,omitempty"`
	PetFateList         []*PetFateMsg            `protobuf:"bytes,14,rep,name=petFateList" json:"petFateList,omitempty"`
	ForceUnlockTime     *int64                   `protobuf:"varint,15,opt,name=forceUnlockTime" json:"forceUnlockTime,omitempty"`
	SkinData            []*PetSkinDataMsg        `protobuf:"bytes,16,rep,name=skinData" json:"skinData,omitempty"`
	SkinCombineData     []*PetSkinCombineDataMsg `protobuf:"bytes,17,rep,name=skinCombineData" json:"skinCombineData,omitempty"`
}

func (x *PlayerPetDataMsg) Reset() {
	*x = PlayerPetDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPetDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPetDataMsg) ProtoMessage() {}

func (x *PlayerPetDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPetDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerPetDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{18}
}

func (x *PlayerPetDataMsg) GetPetPoolData() []*PetPoolDataMsg {
	if x != nil {
		return x.PetPoolData
	}
	return nil
}

func (x *PlayerPetDataMsg) GetPetBagCount() int32 {
	if x != nil && x.PetBagCount != nil {
		return *x.PetBagCount
	}
	return 0
}

func (x *PlayerPetDataMsg) GetPetData() []*PetDataMsg {
	if x != nil {
		return x.PetData
	}
	return nil
}

func (x *PlayerPetDataMsg) GetEquipPetId() int32 {
	if x != nil && x.EquipPetId != nil {
		return *x.EquipPetId
	}
	return 0
}

func (x *PlayerPetDataMsg) GetRefreshTimes() int32 {
	if x != nil && x.RefreshTimes != nil {
		return *x.RefreshTimes
	}
	return 0
}

func (x *PlayerPetDataMsg) GetCollectPetId() []int32 {
	if x != nil {
		return x.CollectPetId
	}
	return nil
}

func (x *PlayerPetDataMsg) GetFreeRefreshTimes() int32 {
	if x != nil && x.FreeRefreshTimes != nil {
		return *x.FreeRefreshTimes
	}
	return 0
}

func (x *PlayerPetDataMsg) GetPrivilegeTimes() int32 {
	if x != nil && x.PrivilegeTimes != nil {
		return *x.PrivilegeTimes
	}
	return 0
}

func (x *PlayerPetDataMsg) GetWishPetId() int32 {
	if x != nil && x.WishPetId != nil {
		return *x.WishPetId
	}
	return 0
}

func (x *PlayerPetDataMsg) GetWishPetProgress() int32 {
	if x != nil && x.WishPetProgress != nil {
		return *x.WishPetProgress
	}
	return 0
}

func (x *PlayerPetDataMsg) GetSoulShapeResetTimes() int32 {
	if x != nil && x.SoulShapeResetTimes != nil {
		return *x.SoulShapeResetTimes
	}
	return 0
}

func (x *PlayerPetDataMsg) GetPetLinkageDataMsg() []*PetLinkageDataMsg {
	if x != nil {
		return x.PetLinkageDataMsg
	}
	return nil
}

func (x *PlayerPetDataMsg) GetKernelData() *PetKernelPlayerDataMsg {
	if x != nil {
		return x.KernelData
	}
	return nil
}

func (x *PlayerPetDataMsg) GetPetFateList() []*PetFateMsg {
	if x != nil {
		return x.PetFateList
	}
	return nil
}

func (x *PlayerPetDataMsg) GetForceUnlockTime() int64 {
	if x != nil && x.ForceUnlockTime != nil {
		return *x.ForceUnlockTime
	}
	return 0
}

func (x *PlayerPetDataMsg) GetSkinData() []*PetSkinDataMsg {
	if x != nil {
		return x.SkinData
	}
	return nil
}

func (x *PlayerPetDataMsg) GetSkinCombineData() []*PetSkinCombineDataMsg {
	if x != nil {
		return x.SkinCombineData
	}
	return nil
}

type PetLinkageDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetConfigId *int32 `protobuf:"varint,1,req,name=petConfigId" json:"petConfigId,omitempty"`
	LinkageId   *int32 `protobuf:"varint,2,req,name=linkageId" json:"linkageId,omitempty"`
}

func (x *PetLinkageDataMsg) Reset() {
	*x = PetLinkageDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetLinkageDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetLinkageDataMsg) ProtoMessage() {}

func (x *PetLinkageDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetLinkageDataMsg.ProtoReflect.Descriptor instead.
func (*PetLinkageDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{19}
}

func (x *PetLinkageDataMsg) GetPetConfigId() int32 {
	if x != nil && x.PetConfigId != nil {
		return *x.PetConfigId
	}
	return 0
}

func (x *PetLinkageDataMsg) GetLinkageId() int32 {
	if x != nil && x.LinkageId != nil {
		return *x.LinkageId
	}
	return 0
}

type PetPoolDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId *int32 `protobuf:"varint,1,req,name=petId" json:"petId,omitempty"`
	IsGet *bool  `protobuf:"varint,2,req,name=isGet" json:"isGet,omitempty"`
}

func (x *PetPoolDataMsg) Reset() {
	*x = PetPoolDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetPoolDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetPoolDataMsg) ProtoMessage() {}

func (x *PetPoolDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetPoolDataMsg.ProtoReflect.Descriptor instead.
func (*PetPoolDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{20}
}

func (x *PetPoolDataMsg) GetPetId() int32 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *PetPoolDataMsg) GetIsGet() bool {
	if x != nil && x.IsGet != nil {
		return *x.IsGet
	}
	return false
}

type PetFateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FateId *int32 `protobuf:"varint,1,req,name=fateId" json:"fateId,omitempty"`
	Lv     *int32 `protobuf:"varint,2,req,name=lv" json:"lv,omitempty"`
}

func (x *PetFateMsg) Reset() {
	*x = PetFateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetFateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetFateMsg) ProtoMessage() {}

func (x *PetFateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetFateMsg.ProtoReflect.Descriptor instead.
func (*PetFateMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{21}
}

func (x *PetFateMsg) GetFateId() int32 {
	if x != nil && x.FateId != nil {
		return *x.FateId
	}
	return 0
}

func (x *PetFateMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

type PetSkinDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetSkinId *int32 `protobuf:"varint,1,opt,name=petSkinId" json:"petSkinId,omitempty"`
	Level     *int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *PetSkinDataMsg) Reset() {
	*x = PetSkinDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetSkinDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetSkinDataMsg) ProtoMessage() {}

func (x *PetSkinDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetSkinDataMsg.ProtoReflect.Descriptor instead.
func (*PetSkinDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{22}
}

func (x *PetSkinDataMsg) GetPetSkinId() int32 {
	if x != nil && x.PetSkinId != nil {
		return *x.PetSkinId
	}
	return 0
}

func (x *PetSkinDataMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type PetSkinCombineDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombineId *int32 `protobuf:"varint,1,req,name=combineId" json:"combineId,omitempty"`
	Level     *int32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
}

func (x *PetSkinCombineDataMsg) Reset() {
	*x = PetSkinCombineDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetSkinCombineDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetSkinCombineDataMsg) ProtoMessage() {}

func (x *PetSkinCombineDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetSkinCombineDataMsg.ProtoReflect.Descriptor instead.
func (*PetSkinCombineDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{23}
}

func (x *PetSkinCombineDataMsg) GetCombineId() int32 {
	if x != nil && x.CombineId != nil {
		return *x.CombineId
	}
	return 0
}

func (x *PetSkinCombineDataMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type PetDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       *int32                `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ConfigId                 *int32                `protobuf:"varint,2,req,name=configId" json:"configId,omitempty"`
	Lv                       *int32                `protobuf:"varint,3,req,name=lv" json:"lv,omitempty"`
	Star                     *int32                `protobuf:"varint,4,req,name=star" json:"star,omitempty"`
	PetPassiveSkill          []*PetPassiveSkillMsg `protobuf:"bytes,5,rep,name=petPassiveSkill" json:"petPassiveSkill,omitempty"`
	AssistantPetId           *int32                `protobuf:"varint,6,opt,name=assistantPetId" json:"assistantPetId,omitempty"`
	AssistantConfigId        *int32                `protobuf:"varint,7,opt,name=assistantConfigId" json:"assistantConfigId,omitempty"`
	PetSoulShapePassiveSkill []*PetPassiveSkillMsg `protobuf:"bytes,8,rep,name=petSoulShapePassiveSkill" json:"petSoulShapePassiveSkill,omitempty"`
	WaitSelectSkill          []int32               `protobuf:"varint,9,rep,name=waitSelectSkill" json:"waitSelectSkill,omitempty"`
	SoulShapeLv              *int32                `protobuf:"varint,10,opt,name=soulShapeLv" json:"soulShapeLv,omitempty"`
	AssistantPetSoulShapeLv  *int32                `protobuf:"varint,11,opt,name=assistantPetSoulShapeLv" json:"assistantPetSoulShapeLv,omitempty"`
	HaveWaitRefreshSkill     *int32                `protobuf:"varint,12,opt,name=haveWaitRefreshSkill" json:"haveWaitRefreshSkill,omitempty"`
	LockState                *int32                `protobuf:"varint,13,opt,name=lockState" json:"lockState,omitempty"`
	EquipLinkageId           *int32                `protobuf:"varint,14,opt,name=equipLinkageId" json:"equipLinkageId,omitempty"`
	SynergyLinkageId         *int32                `protobuf:"varint,15,opt,name=synergyLinkageId" json:"synergyLinkageId,omitempty"`
	KernelLv                 *int32                `protobuf:"varint,16,opt,name=kernelLv" json:"kernelLv,omitempty"`
	EquipKernelId            []int32               `protobuf:"varint,17,rep,name=equipKernelId" json:"equipKernelId,omitempty"`
	RootLv                   *int32                `protobuf:"varint,18,opt,name=rootLv" json:"rootLv,omitempty"`
	AwakeLv                  *int32                `protobuf:"varint,19,opt,name=awakeLv" json:"awakeLv,omitempty"`
}

func (x *PetDataMsg) Reset() {
	*x = PetDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetDataMsg) ProtoMessage() {}

func (x *PetDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetDataMsg.ProtoReflect.Descriptor instead.
func (*PetDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{24}
}

func (x *PetDataMsg) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PetDataMsg) GetConfigId() int32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *PetDataMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *PetDataMsg) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *PetDataMsg) GetPetPassiveSkill() []*PetPassiveSkillMsg {
	if x != nil {
		return x.PetPassiveSkill
	}
	return nil
}

func (x *PetDataMsg) GetAssistantPetId() int32 {
	if x != nil && x.AssistantPetId != nil {
		return *x.AssistantPetId
	}
	return 0
}

func (x *PetDataMsg) GetAssistantConfigId() int32 {
	if x != nil && x.AssistantConfigId != nil {
		return *x.AssistantConfigId
	}
	return 0
}

func (x *PetDataMsg) GetPetSoulShapePassiveSkill() []*PetPassiveSkillMsg {
	if x != nil {
		return x.PetSoulShapePassiveSkill
	}
	return nil
}

func (x *PetDataMsg) GetWaitSelectSkill() []int32 {
	if x != nil {
		return x.WaitSelectSkill
	}
	return nil
}

func (x *PetDataMsg) GetSoulShapeLv() int32 {
	if x != nil && x.SoulShapeLv != nil {
		return *x.SoulShapeLv
	}
	return 0
}

func (x *PetDataMsg) GetAssistantPetSoulShapeLv() int32 {
	if x != nil && x.AssistantPetSoulShapeLv != nil {
		return *x.AssistantPetSoulShapeLv
	}
	return 0
}

func (x *PetDataMsg) GetHaveWaitRefreshSkill() int32 {
	if x != nil && x.HaveWaitRefreshSkill != nil {
		return *x.HaveWaitRefreshSkill
	}
	return 0
}

func (x *PetDataMsg) GetLockState() int32 {
	if x != nil && x.LockState != nil {
		return *x.LockState
	}
	return 0
}

func (x *PetDataMsg) GetEquipLinkageId() int32 {
	if x != nil && x.EquipLinkageId != nil {
		return *x.EquipLinkageId
	}
	return 0
}

func (x *PetDataMsg) GetSynergyLinkageId() int32 {
	if x != nil && x.SynergyLinkageId != nil {
		return *x.SynergyLinkageId
	}
	return 0
}

func (x *PetDataMsg) GetKernelLv() int32 {
	if x != nil && x.KernelLv != nil {
		return *x.KernelLv
	}
	return 0
}

func (x *PetDataMsg) GetEquipKernelId() []int32 {
	if x != nil {
		return x.EquipKernelId
	}
	return nil
}

func (x *PetDataMsg) GetRootLv() int32 {
	if x != nil && x.RootLv != nil {
		return *x.RootLv
	}
	return 0
}

func (x *PetDataMsg) GetAwakeLv() int32 {
	if x != nil && x.AwakeLv != nil {
		return *x.AwakeLv
	}
	return 0
}

type PetPassiveSkillMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId *int32 `protobuf:"varint,1,req,name=skillId" json:"skillId,omitempty"`
	Lv      *int32 `protobuf:"varint,2,req,name=lv" json:"lv,omitempty"`
	Status  *int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (x *PetPassiveSkillMsg) Reset() {
	*x = PetPassiveSkillMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetPassiveSkillMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetPassiveSkillMsg) ProtoMessage() {}

func (x *PetPassiveSkillMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetPassiveSkillMsg.ProtoReflect.Descriptor instead.
func (*PetPassiveSkillMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{25}
}

func (x *PetPassiveSkillMsg) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *PetPassiveSkillMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *PetPassiveSkillMsg) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

// / 宠物内核
type PetKernelPlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetKernelData    []*PetKernelDataMsg    `protobuf:"bytes,1,rep,name=petKernelData" json:"petKernelData,omitempty"`
	PetKernelCombine []*PetKernelCombineMsg `protobuf:"bytes,2,rep,name=petKernelCombine" json:"petKernelCombine,omitempty"`
	FreeDrawTimes    *int32                 `protobuf:"varint,3,req,name=freeDrawTimes" json:"freeDrawTimes,omitempty"`
	DrawCount        *int32                 `protobuf:"varint,4,req,name=drawCount" json:"drawCount,omitempty"`
	EnsureCount      *int32                 `protobuf:"varint,5,req,name=ensureCount" json:"ensureCount,omitempty"`
	PieceShopOpen    *bool                  `protobuf:"varint,6,opt,name=pieceShopOpen" json:"pieceShopOpen,omitempty"`
}

func (x *PetKernelPlayerDataMsg) Reset() {
	*x = PetKernelPlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetKernelPlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetKernelPlayerDataMsg) ProtoMessage() {}

func (x *PetKernelPlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetKernelPlayerDataMsg.ProtoReflect.Descriptor instead.
func (*PetKernelPlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{26}
}

func (x *PetKernelPlayerDataMsg) GetPetKernelData() []*PetKernelDataMsg {
	if x != nil {
		return x.PetKernelData
	}
	return nil
}

func (x *PetKernelPlayerDataMsg) GetPetKernelCombine() []*PetKernelCombineMsg {
	if x != nil {
		return x.PetKernelCombine
	}
	return nil
}

func (x *PetKernelPlayerDataMsg) GetFreeDrawTimes() int32 {
	if x != nil && x.FreeDrawTimes != nil {
		return *x.FreeDrawTimes
	}
	return 0
}

func (x *PetKernelPlayerDataMsg) GetDrawCount() int32 {
	if x != nil && x.DrawCount != nil {
		return *x.DrawCount
	}
	return 0
}

func (x *PetKernelPlayerDataMsg) GetEnsureCount() int32 {
	if x != nil && x.EnsureCount != nil {
		return *x.EnsureCount
	}
	return 0
}

func (x *PetKernelPlayerDataMsg) GetPieceShopOpen() bool {
	if x != nil && x.PieceShopOpen != nil {
		return *x.PieceShopOpen
	}
	return false
}

type PetKernelDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelId  *int32 `protobuf:"varint,1,req,name=kernelId" json:"kernelId,omitempty"`
	AttachPet *int32 `protobuf:"varint,2,req,name=attachPet" json:"attachPet,omitempty"`
	Star      *int32 `protobuf:"varint,3,req,name=star" json:"star,omitempty"`
}

func (x *PetKernelDataMsg) Reset() {
	*x = PetKernelDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetKernelDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetKernelDataMsg) ProtoMessage() {}

func (x *PetKernelDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetKernelDataMsg.ProtoReflect.Descriptor instead.
func (*PetKernelDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{27}
}

func (x *PetKernelDataMsg) GetKernelId() int32 {
	if x != nil && x.KernelId != nil {
		return *x.KernelId
	}
	return 0
}

func (x *PetKernelDataMsg) GetAttachPet() int32 {
	if x != nil && x.AttachPet != nil {
		return *x.AttachPet
	}
	return 0
}

func (x *PetKernelDataMsg) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

type PetKernelCombineMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombineId *int32 `protobuf:"varint,1,req,name=combineId" json:"combineId,omitempty"`
	Level     *int32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
}

func (x *PetKernelCombineMsg) Reset() {
	*x = PetKernelCombineMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetKernelCombineMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetKernelCombineMsg) ProtoMessage() {}

func (x *PetKernelCombineMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetKernelCombineMsg.ProtoReflect.Descriptor instead.
func (*PetKernelCombineMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{28}
}

func (x *PetKernelCombineMsg) GetCombineId() int32 {
	if x != nil && x.CombineId != nil {
		return *x.CombineId
	}
	return 0
}

func (x *PetKernelCombineMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// / 世界规则
type WorldRulePlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleListMsg         []*WorldRuleDetailsMsg `protobuf:"bytes,1,rep,name=ruleListMsg" json:"ruleListMsg,omitempty"`
	CurRuleProgrammeIdx *int32                 `protobuf:"varint,2,opt,name=curRuleProgrammeIdx" json:"curRuleProgrammeIdx,omitempty"`
	AdTimes             *int32                 `protobuf:"varint,3,opt,name=adTimes" json:"adTimes,omitempty"`
	BaseAtt             *SkillMsg              `protobuf:"bytes,4,opt,name=baseAtt" json:"baseAtt,omitempty"`
}

func (x *WorldRulePlayerDataMsg) Reset() {
	*x = WorldRulePlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldRulePlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldRulePlayerDataMsg) ProtoMessage() {}

func (x *WorldRulePlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldRulePlayerDataMsg.ProtoReflect.Descriptor instead.
func (*WorldRulePlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{29}
}

func (x *WorldRulePlayerDataMsg) GetRuleListMsg() []*WorldRuleDetailsMsg {
	if x != nil {
		return x.RuleListMsg
	}
	return nil
}

func (x *WorldRulePlayerDataMsg) GetCurRuleProgrammeIdx() int32 {
	if x != nil && x.CurRuleProgrammeIdx != nil {
		return *x.CurRuleProgrammeIdx
	}
	return 0
}

func (x *WorldRulePlayerDataMsg) GetAdTimes() int32 {
	if x != nil && x.AdTimes != nil {
		return *x.AdTimes
	}
	return 0
}

func (x *WorldRulePlayerDataMsg) GetBaseAtt() *SkillMsg {
	if x != nil {
		return x.BaseAtt
	}
	return nil
}

type WorldRuleDetailsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *int32                          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PerceptionTimes         *int32                          `protobuf:"varint,2,opt,name=perceptionTimes" json:"perceptionTimes,omitempty"`
	ProgrammeDetailsListMsg []*WorldRuleProgrammeDetailsMsg `protobuf:"bytes,3,rep,name=programmeDetailsListMsg" json:"programmeDetailsListMsg,omitempty"`
}

func (x *WorldRuleDetailsMsg) Reset() {
	*x = WorldRuleDetailsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldRuleDetailsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldRuleDetailsMsg) ProtoMessage() {}

func (x *WorldRuleDetailsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldRuleDetailsMsg.ProtoReflect.Descriptor instead.
func (*WorldRuleDetailsMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{30}
}

func (x *WorldRuleDetailsMsg) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WorldRuleDetailsMsg) GetPerceptionTimes() int32 {
	if x != nil && x.PerceptionTimes != nil {
		return *x.PerceptionTimes
	}
	return 0
}

func (x *WorldRuleDetailsMsg) GetProgrammeDetailsListMsg() []*WorldRuleProgrammeDetailsMsg {
	if x != nil {
		return x.ProgrammeDetailsListMsg
	}
	return nil
}

type WorldRuleProgrammeDetailsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgrammeIndex *int32                     `protobuf:"varint,1,opt,name=programmeIndex" json:"programmeIndex,omitempty"`
	HoleListMsg    []*WorldRuleHoleDetailsMsg `protobuf:"bytes,2,rep,name=holeListMsg" json:"holeListMsg,omitempty"`
}

func (x *WorldRuleProgrammeDetailsMsg) Reset() {
	*x = WorldRuleProgrammeDetailsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldRuleProgrammeDetailsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldRuleProgrammeDetailsMsg) ProtoMessage() {}

func (x *WorldRuleProgrammeDetailsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldRuleProgrammeDetailsMsg.ProtoReflect.Descriptor instead.
func (*WorldRuleProgrammeDetailsMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{31}
}

func (x *WorldRuleProgrammeDetailsMsg) GetProgrammeIndex() int32 {
	if x != nil && x.ProgrammeIndex != nil {
		return *x.ProgrammeIndex
	}
	return 0
}

func (x *WorldRuleProgrammeDetailsMsg) GetHoleListMsg() []*WorldRuleHoleDetailsMsg {
	if x != nil {
		return x.HoleListMsg
	}
	return nil
}

type WorldRuleHoleDetailsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             *int32                     `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	CurHoldMsg        *WorldRuleHoldAttributeMsg `protobuf:"bytes,2,opt,name=curHoldMsg" json:"curHoldMsg,omitempty"`
	PerceptionHoldMsg *WorldRuleHoldAttributeMsg `protobuf:"bytes,3,opt,name=perceptionHoldMsg" json:"perceptionHoldMsg,omitempty"`
}

func (x *WorldRuleHoleDetailsMsg) Reset() {
	*x = WorldRuleHoleDetailsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldRuleHoleDetailsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldRuleHoleDetailsMsg) ProtoMessage() {}

func (x *WorldRuleHoleDetailsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldRuleHoleDetailsMsg.ProtoReflect.Descriptor instead.
func (*WorldRuleHoleDetailsMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{32}
}

func (x *WorldRuleHoleDetailsMsg) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *WorldRuleHoleDetailsMsg) GetCurHoldMsg() *WorldRuleHoldAttributeMsg {
	if x != nil {
		return x.CurHoldMsg
	}
	return nil
}

func (x *WorldRuleHoleDetailsMsg) GetPerceptionHoldMsg() *WorldRuleHoldAttributeMsg {
	if x != nil {
		return x.PerceptionHoldMsg
	}
	return nil
}

type WorldRuleHoldAttributeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality       *int32            `protobuf:"varint,1,opt,name=quality" json:"quality,omitempty"`
	AttributeData *AttributeDataMsg `protobuf:"bytes,2,opt,name=attributeData" json:"attributeData,omitempty"`
}

func (x *WorldRuleHoldAttributeMsg) Reset() {
	*x = WorldRuleHoldAttributeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldRuleHoldAttributeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldRuleHoldAttributeMsg) ProtoMessage() {}

func (x *WorldRuleHoldAttributeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldRuleHoldAttributeMsg.ProtoReflect.Descriptor instead.
func (*WorldRuleHoldAttributeMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{33}
}

func (x *WorldRuleHoldAttributeMsg) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *WorldRuleHoldAttributeMsg) GetAttributeData() *AttributeDataMsg {
	if x != nil {
		return x.AttributeData
	}
	return nil
}

type TalentPlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalentData        []*TalentDataMsg       `protobuf:"bytes,1,rep,name=talentData" json:"talentData,omitempty"`
	TalentCreateLevel *int32                 `protobuf:"varint,2,req,name=talentCreateLevel" json:"talentCreateLevel,omitempty"`
	Exp               *int32                 `protobuf:"varint,3,req,name=exp" json:"exp,omitempty"`
	UnDealTalentData  []*UnDealTalentDataMsg `protobuf:"bytes,4,rep,name=unDealTalentData" json:"unDealTalentData,omitempty"`
	ReadBookTimes     *int32                 `protobuf:"varint,5,req,name=readBookTimes" json:"readBookTimes,omitempty"`
}

func (x *TalentPlayerDataMsg) Reset() {
	*x = TalentPlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentPlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentPlayerDataMsg) ProtoMessage() {}

func (x *TalentPlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentPlayerDataMsg.ProtoReflect.Descriptor instead.
func (*TalentPlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{34}
}

func (x *TalentPlayerDataMsg) GetTalentData() []*TalentDataMsg {
	if x != nil {
		return x.TalentData
	}
	return nil
}

func (x *TalentPlayerDataMsg) GetTalentCreateLevel() int32 {
	if x != nil && x.TalentCreateLevel != nil {
		return *x.TalentCreateLevel
	}
	return 0
}

func (x *TalentPlayerDataMsg) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *TalentPlayerDataMsg) GetUnDealTalentData() []*UnDealTalentDataMsg {
	if x != nil {
		return x.UnDealTalentData
	}
	return nil
}

func (x *TalentPlayerDataMsg) GetReadBookTimes() int32 {
	if x != nil && x.ReadBookTimes != nil {
		return *x.ReadBookTimes
	}
	return 0
}

type TalentDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *int32              `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	TalentId      *int32              `protobuf:"varint,2,req,name=talentId" json:"talentId,omitempty"`
	Level         *int32              `protobuf:"varint,3,req,name=level" json:"level,omitempty"`
	Quality       *int32              `protobuf:"varint,4,req,name=quality" json:"quality,omitempty"`
	AttributeData []*AttributeDataMsg `protobuf:"bytes,5,rep,name=attributeData" json:"attributeData,omitempty"`
	SkillId       *int32              `protobuf:"varint,6,opt,name=skillId" json:"skillId,omitempty"`
}

func (x *TalentDataMsg) Reset() {
	*x = TalentDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentDataMsg) ProtoMessage() {}

func (x *TalentDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentDataMsg.ProtoReflect.Descriptor instead.
func (*TalentDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{35}
}

func (x *TalentDataMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TalentDataMsg) GetTalentId() int32 {
	if x != nil && x.TalentId != nil {
		return *x.TalentId
	}
	return 0
}

func (x *TalentDataMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *TalentDataMsg) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *TalentDataMsg) GetAttributeData() []*AttributeDataMsg {
	if x != nil {
		return x.AttributeData
	}
	return nil
}

func (x *TalentDataMsg) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

type UnDealTalentDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalentData          *TalentDataMsg      `protobuf:"bytes,1,req,name=talentData" json:"talentData,omitempty"`
	PlayerAttributeData []*AttributeDataMsg `protobuf:"bytes,2,rep,name=playerAttributeData" json:"playerAttributeData,omitempty"`
	FightValue          *int64              `protobuf:"varint,3,req,name=fightValue" json:"fightValue,omitempty"`
}

func (x *UnDealTalentDataMsg) Reset() {
	*x = UnDealTalentDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnDealTalentDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnDealTalentDataMsg) ProtoMessage() {}

func (x *UnDealTalentDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnDealTalentDataMsg.ProtoReflect.Descriptor instead.
func (*UnDealTalentDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{36}
}

func (x *UnDealTalentDataMsg) GetTalentData() *TalentDataMsg {
	if x != nil {
		return x.TalentData
	}
	return nil
}

func (x *UnDealTalentDataMsg) GetPlayerAttributeData() []*AttributeDataMsg {
	if x != nil {
		return x.PlayerAttributeData
	}
	return nil
}

func (x *UnDealTalentDataMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

// / 灵体
type SpiritDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiritId       *int32 `protobuf:"varint,1,req,name=spiritId" json:"spiritId,omitempty"`
	Lv             *int32 `protobuf:"varint,2,req,name=lv" json:"lv,omitempty"`
	EquipLinkageId *int32 `protobuf:"varint,3,opt,name=equipLinkageId" json:"equipLinkageId,omitempty"`
}

func (x *SpiritDataMsg) Reset() {
	*x = SpiritDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiritDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiritDataMsg) ProtoMessage() {}

func (x *SpiritDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiritDataMsg.ProtoReflect.Descriptor instead.
func (*SpiritDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{37}
}

func (x *SpiritDataMsg) GetSpiritId() int32 {
	if x != nil && x.SpiritId != nil {
		return *x.SpiritId
	}
	return 0
}

func (x *SpiritDataMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

func (x *SpiritDataMsg) GetEquipLinkageId() int32 {
	if x != nil && x.EquipLinkageId != nil {
		return *x.EquipLinkageId
	}
	return 0
}

type MagicDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicId  *int32  `protobuf:"varint,1,opt,name=magicId" json:"magicId,omitempty"`
	Level    *int32  `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Stage    *int32  `protobuf:"varint,3,opt,name=stage" json:"stage,omitempty"`
	MarkList []int32 `protobuf:"varint,4,rep,name=markList" json:"markList,omitempty"`
}

func (x *MagicDataMsg) Reset() {
	*x = MagicDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicDataMsg) ProtoMessage() {}

func (x *MagicDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicDataMsg.ProtoReflect.Descriptor instead.
func (*MagicDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{38}
}

func (x *MagicDataMsg) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

func (x *MagicDataMsg) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MagicDataMsg) GetStage() int32 {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return 0
}

func (x *MagicDataMsg) GetMarkList() []int32 {
	if x != nil {
		return x.MarkList
	}
	return nil
}

type PupilDetailDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAttr           []*AttributeDataMsg  `protobuf:"bytes,1,rep,name=baseAttr" json:"baseAttr,omitempty"`
	FigthAttr          []*AttributeDataMsg  `protobuf:"bytes,2,rep,name=figthAttr" json:"figthAttr,omitempty"`
	PupilFightDataList []*PupilFightDataMsg `protobuf:"bytes,3,rep,name=pupilFightDataList" json:"pupilFightDataList,omitempty"`
}

func (x *PupilDetailDataMsg) Reset() {
	*x = PupilDetailDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PupilDetailDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PupilDetailDataMsg) ProtoMessage() {}

func (x *PupilDetailDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PupilDetailDataMsg.ProtoReflect.Descriptor instead.
func (*PupilDetailDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{39}
}

func (x *PupilDetailDataMsg) GetBaseAttr() []*AttributeDataMsg {
	if x != nil {
		return x.BaseAttr
	}
	return nil
}

func (x *PupilDetailDataMsg) GetFigthAttr() []*AttributeDataMsg {
	if x != nil {
		return x.FigthAttr
	}
	return nil
}

func (x *PupilDetailDataMsg) GetPupilFightDataList() []*PupilFightDataMsg {
	if x != nil {
		return x.PupilFightDataList
	}
	return nil
}

type PupilFightDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosIndex   *int32           `protobuf:"varint,1,opt,name=posIndex" json:"posIndex,omitempty"`
	PupilData  *PupilCommonData `protobuf:"bytes,2,opt,name=pupilData" json:"pupilData,omitempty"`
	CoupleData *PupilCommonData `protobuf:"bytes,3,opt,name=coupleData" json:"coupleData,omitempty"`
}

func (x *PupilFightDataMsg) Reset() {
	*x = PupilFightDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PupilFightDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PupilFightDataMsg) ProtoMessage() {}

func (x *PupilFightDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PupilFightDataMsg.ProtoReflect.Descriptor instead.
func (*PupilFightDataMsg) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{40}
}

func (x *PupilFightDataMsg) GetPosIndex() int32 {
	if x != nil && x.PosIndex != nil {
		return *x.PosIndex
	}
	return 0
}

func (x *PupilFightDataMsg) GetPupilData() *PupilCommonData {
	if x != nil {
		return x.PupilData
	}
	return nil
}

func (x *PupilFightDataMsg) GetCoupleData() *PupilCommonData {
	if x != nil {
		return x.CoupleData
	}
	return nil
}

type PupilCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        *int32            `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Quality    *int32            `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	FateIdList []int32           `protobuf:"varint,3,rep,name=fateIdList" json:"fateIdList,omitempty"`
	Level      *int32            `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
	Name       *string           `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	TeacherId  *int32            `protobuf:"varint,6,opt,name=teacherId" json:"teacherId,omitempty"`
	Job        *int32            `protobuf:"varint,7,opt,name=job" json:"job,omitempty"`
	BattleAttr *AttributeDataMsg `protobuf:"bytes,8,opt,name=battleAttr" json:"battleAttr,omitempty"`
}

func (x *PupilCommonData) Reset() {
	*x = PupilCommonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PupilCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PupilCommonData) ProtoMessage() {}

func (x *PupilCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PupilCommonData.ProtoReflect.Descriptor instead.
func (*PupilCommonData) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{41}
}

func (x *PupilCommonData) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PupilCommonData) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *PupilCommonData) GetFateIdList() []int32 {
	if x != nil {
		return x.FateIdList
	}
	return nil
}

func (x *PupilCommonData) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PupilCommonData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PupilCommonData) GetTeacherId() int32 {
	if x != nil && x.TeacherId != nil {
		return *x.TeacherId
	}
	return 0
}

func (x *PupilCommonData) GetJob() int32 {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return 0
}

func (x *PupilCommonData) GetBattleAttr() *AttributeDataMsg {
	if x != nil {
		return x.BattleAttr
	}
	return nil
}

var File_Common_proto protoreflect.FileDescriptor

var file_Common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x3c, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x0d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0x34, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x22, 0x61, 0x0a, 0x15, 0x45, 0x71, 0x75, 0x69, 0x70, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x76, 0x22, 0x49, 0x0a, 0x11, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22,
	0xd1, 0x0b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x5e, 0x0a, 0x17,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x59, 0x0a, 0x13, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x13, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d,
	0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a,
	0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x4c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x4c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x76, 0x12, 0x62, 0x0a, 0x11, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x50, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x4a, 0x0a, 0x0d, 0x70, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x70, 0x65,
	0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6f, 0x74, 0x69, 0x63, 0x50, 0x65, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6f, 0x74,
	0x69, 0x63, 0x50, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6f, 0x74, 0x69,
	0x63, 0x50, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x75, 0x70, 0x69,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x70, 0x75, 0x70, 0x69, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x16, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x16, 0x65, 0x71, 0x75, 0x69, 0x70, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x7a, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x8e, 0x04, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x63, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x68, 0x61, 0x74, 0x42,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x64, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64,
	0x22, 0x63, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6f, 0x74, 0x69,
	0x63, 0x50, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x4c, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x4c, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x77, 0x61, 0x6b, 0x65, 0x4c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x77,
	0x61, 0x6b, 0x65, 0x4c, 0x76, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72,
	0x4c, 0x76, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x76,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa3,
	0x02, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x64, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x64,
	0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d,
	0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x64, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x72, 0x4c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x72, 0x4c, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4c, 0x76, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4c, 0x76, 0x12,
	0x50, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x5e, 0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x65, 0x78, 0x70, 0x22, 0x46, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x76, 0x22, 0x8c, 0x07, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x12, 0x44, 0x0a, 0x0b, 0x70, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x74, 0x42, 0x61, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x74,
	0x42, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x70, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x69, 0x73, 0x68, 0x50, 0x65, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x77, 0x69, 0x73, 0x68, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x77, 0x69, 0x73, 0x68, 0x50, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x50, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x6c, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x4a, 0x0a,
	0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x65, 0x74,
	0x46, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x46, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0b,
	0x70, 0x65, 0x74, 0x46, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74,
	0x53, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x73, 0x6b, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x11, 0x50, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x3c, 0x0a, 0x0e, 0x50, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x47, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x47, 0x65, 0x74, 0x22, 0x34, 0x0a,
	0x0a, 0x50, 0x65, 0x74, 0x46, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x6c, 0x76, 0x22, 0x44, 0x0a, 0x0e, 0x50, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x65, 0x74, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4b, 0x0a, 0x15, 0x50, 0x65, 0x74,
	0x53, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x88, 0x06, 0x0a, 0x0a, 0x50, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x6c,
	0x76, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x70, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x62, 0x0a,
	0x18, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x18, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x12, 0x38, 0x0a,
	0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x53, 0x6f, 0x75,
	0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x61, 0x76, 0x65, 0x57,
	0x61, 0x69, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x68, 0x61, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x79, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x76, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x4c, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x74, 0x4c, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x77, 0x61, 0x6b, 0x65,
	0x4c, 0x76, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x4c,
	0x76, 0x22, 0x56, 0x0a, 0x12, 0x50, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x6c,
	0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x16, 0x50, 0x65,
	0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x50, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x52, 0x0d, 0x70, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x53, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x52, 0x10, 0x70, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x44, 0x72, 0x61,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x72,
	0x65, 0x65, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b,
	0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x69, 0x65, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x70, 0x69, 0x65, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x65,
	0x6e, 0x22, 0x60, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x22, 0x49, 0x0a, 0x13, 0x50, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xe7,
	0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x49, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x63, 0x75, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x49, 0x64, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x17, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x4d, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73,
	0x67, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x22, 0xdb,
	0x01, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x5b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c,
	0x64, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x81, 0x01, 0x0a,
	0x19, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x93, 0x02, 0x0a, 0x13, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x0a, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x11, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x75,
	0x6e, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x44, 0x65, 0x61,
	0x6c, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x10,
	0x75, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x6f,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xd0,
	0x01, 0x0a, 0x13, 0x55, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x74,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x63, 0x0a, 0x0d, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x0c, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12,
	0x40, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x42, 0x0a, 0x09, 0x66, 0x69, 0x67, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x66, 0x69, 0x67, 0x74,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x12, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a,
	0x11, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41,
	0x0a, 0x09, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x12, 0x44, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78,
	0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_Common_proto_rawDescOnce sync.Once
	file_Common_proto_rawDescData = file_Common_proto_rawDesc
)

func file_Common_proto_rawDescGZIP() []byte {
	file_Common_proto_rawDescOnce.Do(func() {
		file_Common_proto_rawDescData = protoimpl.X.CompressGZIP(file_Common_proto_rawDescData)
	})
	return file_Common_proto_rawDescData
}

var file_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_Common_proto_goTypes = []any{
	(*EquipmentDataMsg)(nil),                 // 0: com.yq.msg.CityMsg.EquipmentDataMsg
	(*AttributeDataMsg)(nil),                 // 1: com.yq.msg.CityMsg.AttributeDataMsg
	(*PlayerEquipCloudDataMsg)(nil),          // 2: com.yq.msg.CityMsg.PlayerEquipCloudDataMsg
	(*AwardInfoList)(nil),                    // 3: com.yq.msg.CityMsg.AwardInfoList
	(*AwardInfo)(nil),                        // 4: com.yq.msg.CityMsg.AwardInfo
	(*SkillMsg)(nil),                         // 5: com.yq.msg.CityMsg.SkillMsg
	(*EquipUniverseSkillMsg)(nil),            // 6: com.yq.msg.CityMsg.EquipUniverseSkillMsg
	(*UnionServerIdData)(nil),                // 7: com.yq.msg.CityMsg.UnionServerIdData
	(*UnionNameServerIdData)(nil),            // 8: com.yq.msg.CityMsg.UnionNameServerIdData
	(*PlayerSuppressAttribute)(nil),          // 9: com.yq.msg.CityMsg.PlayerSuppressAttribute
	(*PlayerDetailDataMsg)(nil),              // 10: com.yq.msg.CityMsg.PlayerDetailDataMsg
	(*PlayerDetailDataMagicTreasureMsg)(nil), // 11: com.yq.msg.CityMsg.PlayerDetailDataMagicTreasureMsg
	(*PlayerBaseDataMsg)(nil),                // 12: com.yq.msg.CityMsg.PlayerBaseDataMsg
	(*PlayerChaoticPetMsg)(nil),              // 13: com.yq.msg.CityMsg.PlayerChaoticPetMsg
	(*MagicTreasureDataMsg)(nil),             // 14: com.yq.msg.CityMsg.MagicTreasureDataMsg
	(*UnionBaseData)(nil),                    // 15: com.yq.msg.CityMsg.UnionBaseData
	(*CloudRefinePlayerDataMsg)(nil),         // 16: com.yq.msg.CityMsg.CloudRefinePlayerDataMsg
	(*CloudRefineSkill)(nil),                 // 17: com.yq.msg.CityMsg.CloudRefineSkill
	(*PlayerPetDataMsg)(nil),                 // 18: com.yq.msg.CityMsg.PlayerPetDataMsg
	(*PetLinkageDataMsg)(nil),                // 19: com.yq.msg.CityMsg.PetLinkageDataMsg
	(*PetPoolDataMsg)(nil),                   // 20: com.yq.msg.CityMsg.PetPoolDataMsg
	(*PetFateMsg)(nil),                       // 21: com.yq.msg.CityMsg.PetFateMsg
	(*PetSkinDataMsg)(nil),                   // 22: com.yq.msg.CityMsg.PetSkinDataMsg
	(*PetSkinCombineDataMsg)(nil),            // 23: com.yq.msg.CityMsg.PetSkinCombineDataMsg
	(*PetDataMsg)(nil),                       // 24: com.yq.msg.CityMsg.PetDataMsg
	(*PetPassiveSkillMsg)(nil),               // 25: com.yq.msg.CityMsg.PetPassiveSkillMsg
	(*PetKernelPlayerDataMsg)(nil),           // 26: com.yq.msg.CityMsg.PetKernelPlayerDataMsg
	(*PetKernelDataMsg)(nil),                 // 27: com.yq.msg.CityMsg.PetKernelDataMsg
	(*PetKernelCombineMsg)(nil),              // 28: com.yq.msg.CityMsg.PetKernelCombineMsg
	(*WorldRulePlayerDataMsg)(nil),           // 29: com.yq.msg.CityMsg.WorldRulePlayerDataMsg
	(*WorldRuleDetailsMsg)(nil),              // 30: com.yq.msg.CityMsg.WorldRuleDetailsMsg
	(*WorldRuleProgrammeDetailsMsg)(nil),     // 31: com.yq.msg.CityMsg.WorldRuleProgrammeDetailsMsg
	(*WorldRuleHoleDetailsMsg)(nil),          // 32: com.yq.msg.CityMsg.WorldRuleHoleDetailsMsg
	(*WorldRuleHoldAttributeMsg)(nil),        // 33: com.yq.msg.CityMsg.WorldRuleHoldAttributeMsg
	(*TalentPlayerDataMsg)(nil),              // 34: com.yq.msg.CityMsg.TalentPlayerDataMsg
	(*TalentDataMsg)(nil),                    // 35: com.yq.msg.CityMsg.TalentDataMsg
	(*UnDealTalentDataMsg)(nil),              // 36: com.yq.msg.CityMsg.UnDealTalentDataMsg
	(*SpiritDataMsg)(nil),                    // 37: com.yq.msg.CityMsg.SpiritDataMsg
	(*MagicDataMsg)(nil),                     // 38: com.yq.msg.CityMsg.MagicDataMsg
	(*PupilDetailDataMsg)(nil),               // 39: com.yq.msg.CityMsg.PupilDetailDataMsg
	(*PupilFightDataMsg)(nil),                // 40: com.yq.msg.CityMsg.PupilFightDataMsg
	(*PupilCommonData)(nil),                  // 41: com.yq.msg.CityMsg.PupilCommonData
}
var file_Common_proto_depIdxs = []int32{
	1,  // 0: com.yq.msg.CityMsg.EquipmentDataMsg.attributeList:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	4,  // 1: com.yq.msg.CityMsg.AwardInfoList.awardInfoList:type_name -> com.yq.msg.CityMsg.AwardInfo
	0,  // 2: com.yq.msg.CityMsg.PlayerSuppressAttribute.equipList:type_name -> com.yq.msg.CityMsg.EquipmentDataMsg
	1,  // 3: com.yq.msg.CityMsg.PlayerSuppressAttribute.preAttribute:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	1,  // 4: com.yq.msg.CityMsg.PlayerSuppressAttribute.afterAttribute:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	12, // 5: com.yq.msg.CityMsg.PlayerDetailDataMsg.playerBaseDataMsg:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	1,  // 6: com.yq.msg.CityMsg.PlayerDetailDataMsg.playerAttributeDataList:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	0,  // 7: com.yq.msg.CityMsg.PlayerDetailDataMsg.equipmentList:type_name -> com.yq.msg.CityMsg.EquipmentDataMsg
	2,  // 8: com.yq.msg.CityMsg.PlayerDetailDataMsg.cloudDataMsg:type_name -> com.yq.msg.CityMsg.PlayerEquipCloudDataMsg
	24, // 9: com.yq.msg.CityMsg.PlayerDetailDataMsg.petDataMsg:type_name -> com.yq.msg.CityMsg.PetDataMsg
	34, // 10: com.yq.msg.CityMsg.PlayerDetailDataMsg.talentPlayerDataMsg:type_name -> com.yq.msg.CityMsg.TalentPlayerDataMsg
	37, // 11: com.yq.msg.CityMsg.PlayerDetailDataMsg.spiritDataMsg:type_name -> com.yq.msg.CityMsg.SpiritDataMsg
	38, // 12: com.yq.msg.CityMsg.PlayerDetailDataMsg.equipMagicData:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	11, // 13: com.yq.msg.CityMsg.PlayerDetailDataMsg.magicTreasureData:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMagicTreasureMsg
	24, // 14: com.yq.msg.CityMsg.PlayerDetailDataMsg.assistantPet:type_name -> com.yq.msg.CityMsg.PetDataMsg
	29, // 15: com.yq.msg.CityMsg.PlayerDetailDataMsg.worldRuleDataMsg:type_name -> com.yq.msg.CityMsg.WorldRulePlayerDataMsg
	27, // 16: com.yq.msg.CityMsg.PlayerDetailDataMsg.petKernelList:type_name -> com.yq.msg.CityMsg.PetKernelDataMsg
	13, // 17: com.yq.msg.CityMsg.PlayerDetailDataMsg.chaoticPet:type_name -> com.yq.msg.CityMsg.PlayerChaoticPetMsg
	16, // 18: com.yq.msg.CityMsg.PlayerDetailDataMsg.cloudRefinePlayerData:type_name -> com.yq.msg.CityMsg.CloudRefinePlayerDataMsg
	39, // 19: com.yq.msg.CityMsg.PlayerDetailDataMsg.pupilDetailData:type_name -> com.yq.msg.CityMsg.PupilDetailDataMsg
	6,  // 20: com.yq.msg.CityMsg.PlayerDetailDataMsg.equipUniverseSkillData:type_name -> com.yq.msg.CityMsg.EquipUniverseSkillMsg
	14, // 21: com.yq.msg.CityMsg.PlayerDetailDataMagicTreasureMsg.magicTreasureData:type_name -> com.yq.msg.CityMsg.MagicTreasureDataMsg
	15, // 22: com.yq.msg.CityMsg.PlayerBaseDataMsg.unionData:type_name -> com.yq.msg.CityMsg.UnionBaseData
	17, // 23: com.yq.msg.CityMsg.CloudRefinePlayerDataMsg.refineHoleSkills:type_name -> com.yq.msg.CityMsg.CloudRefineSkill
	1,  // 24: com.yq.msg.CityMsg.CloudRefinePlayerDataMsg.cloudRefineAttrDataList:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	20, // 25: com.yq.msg.CityMsg.PlayerPetDataMsg.petPoolData:type_name -> com.yq.msg.CityMsg.PetPoolDataMsg
	24, // 26: com.yq.msg.CityMsg.PlayerPetDataMsg.petData:type_name -> com.yq.msg.CityMsg.PetDataMsg
	19, // 27: com.yq.msg.CityMsg.PlayerPetDataMsg.petLinkageDataMsg:type_name -> com.yq.msg.CityMsg.PetLinkageDataMsg
	26, // 28: com.yq.msg.CityMsg.PlayerPetDataMsg.kernelData:type_name -> com.yq.msg.CityMsg.PetKernelPlayerDataMsg
	21, // 29: com.yq.msg.CityMsg.PlayerPetDataMsg.petFateList:type_name -> com.yq.msg.CityMsg.PetFateMsg
	22, // 30: com.yq.msg.CityMsg.PlayerPetDataMsg.skinData:type_name -> com.yq.msg.CityMsg.PetSkinDataMsg
	23, // 31: com.yq.msg.CityMsg.PlayerPetDataMsg.skinCombineData:type_name -> com.yq.msg.CityMsg.PetSkinCombineDataMsg
	25, // 32: com.yq.msg.CityMsg.PetDataMsg.petPassiveSkill:type_name -> com.yq.msg.CityMsg.PetPassiveSkillMsg
	25, // 33: com.yq.msg.CityMsg.PetDataMsg.petSoulShapePassiveSkill:type_name -> com.yq.msg.CityMsg.PetPassiveSkillMsg
	27, // 34: com.yq.msg.CityMsg.PetKernelPlayerDataMsg.petKernelData:type_name -> com.yq.msg.CityMsg.PetKernelDataMsg
	28, // 35: com.yq.msg.CityMsg.PetKernelPlayerDataMsg.petKernelCombine:type_name -> com.yq.msg.CityMsg.PetKernelCombineMsg
	30, // 36: com.yq.msg.CityMsg.WorldRulePlayerDataMsg.ruleListMsg:type_name -> com.yq.msg.CityMsg.WorldRuleDetailsMsg
	5,  // 37: com.yq.msg.CityMsg.WorldRulePlayerDataMsg.baseAtt:type_name -> com.yq.msg.CityMsg.SkillMsg
	31, // 38: com.yq.msg.CityMsg.WorldRuleDetailsMsg.programmeDetailsListMsg:type_name -> com.yq.msg.CityMsg.WorldRuleProgrammeDetailsMsg
	32, // 39: com.yq.msg.CityMsg.WorldRuleProgrammeDetailsMsg.holeListMsg:type_name -> com.yq.msg.CityMsg.WorldRuleHoleDetailsMsg
	33, // 40: com.yq.msg.CityMsg.WorldRuleHoleDetailsMsg.curHoldMsg:type_name -> com.yq.msg.CityMsg.WorldRuleHoldAttributeMsg
	33, // 41: com.yq.msg.CityMsg.WorldRuleHoleDetailsMsg.perceptionHoldMsg:type_name -> com.yq.msg.CityMsg.WorldRuleHoldAttributeMsg
	1,  // 42: com.yq.msg.CityMsg.WorldRuleHoldAttributeMsg.attributeData:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	35, // 43: com.yq.msg.CityMsg.TalentPlayerDataMsg.talentData:type_name -> com.yq.msg.CityMsg.TalentDataMsg
	36, // 44: com.yq.msg.CityMsg.TalentPlayerDataMsg.unDealTalentData:type_name -> com.yq.msg.CityMsg.UnDealTalentDataMsg
	1,  // 45: com.yq.msg.CityMsg.TalentDataMsg.attributeData:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	35, // 46: com.yq.msg.CityMsg.UnDealTalentDataMsg.talentData:type_name -> com.yq.msg.CityMsg.TalentDataMsg
	1,  // 47: com.yq.msg.CityMsg.UnDealTalentDataMsg.playerAttributeData:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	1,  // 48: com.yq.msg.CityMsg.PupilDetailDataMsg.baseAttr:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	1,  // 49: com.yq.msg.CityMsg.PupilDetailDataMsg.figthAttr:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	40, // 50: com.yq.msg.CityMsg.PupilDetailDataMsg.pupilFightDataList:type_name -> com.yq.msg.CityMsg.PupilFightDataMsg
	41, // 51: com.yq.msg.CityMsg.PupilFightDataMsg.pupilData:type_name -> com.yq.msg.CityMsg.PupilCommonData
	41, // 52: com.yq.msg.CityMsg.PupilFightDataMsg.coupleData:type_name -> com.yq.msg.CityMsg.PupilCommonData
	1,  // 53: com.yq.msg.CityMsg.PupilCommonData.battleAttr:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_Common_proto_init() }
func file_Common_proto_init() {
	if File_Common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EquipmentDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AttributeDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerEquipCloudDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AwardInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AwardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SkillMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*EquipUniverseSkillMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UnionServerIdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UnionNameServerIdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerSuppressAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerDetailDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerDetailDataMagicTreasureMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerBaseDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerChaoticPetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MagicTreasureDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UnionBaseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CloudRefinePlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CloudRefineSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerPetDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PetLinkageDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PetPoolDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PetFateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PetSkinDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PetSkinCombineDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PetDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PetPassiveSkillMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PetKernelPlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PetKernelDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*PetKernelCombineMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*WorldRulePlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*WorldRuleDetailsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*WorldRuleProgrammeDetailsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*WorldRuleHoleDetailsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*WorldRuleHoldAttributeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*TalentPlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*TalentDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*UnDealTalentDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*SpiritDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*MagicDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*PupilDetailDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*PupilFightDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*PupilCommonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_proto_goTypes,
		DependencyIndexes: file_Common_proto_depIdxs,
		MessageInfos:      file_Common_proto_msgTypes,
	}.Build()
	File_Common_proto = out.File
	file_Common_proto_rawDesc = nil
	file_Common_proto_goTypes = nil
	file_Common_proto_depIdxs = nil
}
