// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: AskWay.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AskWayPosterState int32

const (
	AskWayPosterState_AskWayPosterState_1 AskWayPosterState = 0
	AskWayPosterState_AskWayPosterState_2 AskWayPosterState = 1
	AskWayPosterState_AskWayPosterState_3 AskWayPosterState = 2
	AskWayPosterState_AskWayPosterState_4 AskWayPosterState = 3
)

// Enum value maps for AskWayPosterState.
var (
	AskWayPosterState_name = map[int32]string{
		0: "AskWayPosterState_1",
		1: "AskWayPosterState_2",
		2: "AskWayPosterState_3",
		3: "AskWayPosterState_4",
	}
	AskWayPosterState_value = map[string]int32{
		"AskWayPosterState_1": 0,
		"AskWayPosterState_2": 1,
		"AskWayPosterState_3": 2,
		"AskWayPosterState_4": 3,
	}
)

func (x AskWayPosterState) Enum() *AskWayPosterState {
	p := new(AskWayPosterState)
	*p = x
	return p
}

func (x AskWayPosterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AskWayPosterState) Descriptor() protoreflect.EnumDescriptor {
	return file_AskWay_proto_enumTypes[0].Descriptor()
}

func (AskWayPosterState) Type() protoreflect.EnumType {
	return &file_AskWay_proto_enumTypes[0]
}

func (x AskWayPosterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AskWayPosterState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AskWayPosterState(num)
	return nil
}

// Deprecated: Use AskWayPosterState.Descriptor instead.
func (AskWayPosterState) EnumDescriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{0}
}

type AskWayEnterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *AskWayEnterReq) Reset() {
	*x = AskWayEnterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayEnterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayEnterReq) ProtoMessage() {}

func (x *AskWayEnterReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayEnterReq.ProtoReflect.Descriptor instead.
func (*AskWayEnterReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{0}
}

func (x *AskWayEnterReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type AskWayEnterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                *int32                  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	ActivityId         *int32                  `protobuf:"varint,2,opt,name=activityId" json:"activityId,omitempty"`
	PlayerData         *AskWayPlayerInfo       `protobuf:"bytes,3,opt,name=playerData" json:"playerData,omitempty"`
	ToSkyInfo          *AskWayToSkyInfo        `protobuf:"bytes,4,opt,name=toSkyInfo" json:"toSkyInfo,omitempty"`
	CompetitionGroup   []*CompetitionGroupInfo `protobuf:"bytes,5,rep,name=competitionGroup" json:"competitionGroup,omitempty"`
	RankMsgTop3        *RankMsg                `protobuf:"bytes,6,opt,name=rankMsgTop3" json:"rankMsgTop3,omitempty"`
	ToSkyBattleResult  *ToSkyBattleResult      `protobuf:"bytes,7,opt,name=toSkyBattleResult" json:"toSkyBattleResult,omitempty"`
	ToSkyRankMsgTop1   *RankMsg                `protobuf:"bytes,8,opt,name=toSkyRankMsgTop1" json:"toSkyRankMsgTop1,omitempty"`
	FightQualification *bool                   `protobuf:"varint,9,opt,name=fightQualification" json:"fightQualification,omitempty"`
	ToSkyQualification *bool                   `protobuf:"varint,10,opt,name=toSkyQualification" json:"toSkyQualification,omitempty"`
	SessionNum         *int32                  `protobuf:"varint,11,opt,name=sessionNum" json:"sessionNum,omitempty"`
	PlayerGuessInfoArr []*PlayerGuessInfoMsg   `protobuf:"bytes,12,rep,name=playerGuessInfoArr" json:"playerGuessInfoArr,omitempty"`
	RestrainData       *PlayerRestrainInfoMsg  `protobuf:"bytes,13,opt,name=restrainData" json:"restrainData,omitempty"`
	ReportRedPoint     *bool                   `protobuf:"varint,14,opt,name=ReportRedPoint" json:"ReportRedPoint,omitempty"`
}

func (x *AskWayEnterRsp) Reset() {
	*x = AskWayEnterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayEnterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayEnterRsp) ProtoMessage() {}

func (x *AskWayEnterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayEnterRsp.ProtoReflect.Descriptor instead.
func (*AskWayEnterRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{1}
}

func (x *AskWayEnterRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayEnterRsp) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayEnterRsp) GetPlayerData() *AskWayPlayerInfo {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *AskWayEnterRsp) GetToSkyInfo() *AskWayToSkyInfo {
	if x != nil {
		return x.ToSkyInfo
	}
	return nil
}

func (x *AskWayEnterRsp) GetCompetitionGroup() []*CompetitionGroupInfo {
	if x != nil {
		return x.CompetitionGroup
	}
	return nil
}

func (x *AskWayEnterRsp) GetRankMsgTop3() *RankMsg {
	if x != nil {
		return x.RankMsgTop3
	}
	return nil
}

func (x *AskWayEnterRsp) GetToSkyBattleResult() *ToSkyBattleResult {
	if x != nil {
		return x.ToSkyBattleResult
	}
	return nil
}

func (x *AskWayEnterRsp) GetToSkyRankMsgTop1() *RankMsg {
	if x != nil {
		return x.ToSkyRankMsgTop1
	}
	return nil
}

func (x *AskWayEnterRsp) GetFightQualification() bool {
	if x != nil && x.FightQualification != nil {
		return *x.FightQualification
	}
	return false
}

func (x *AskWayEnterRsp) GetToSkyQualification() bool {
	if x != nil && x.ToSkyQualification != nil {
		return *x.ToSkyQualification
	}
	return false
}

func (x *AskWayEnterRsp) GetSessionNum() int32 {
	if x != nil && x.SessionNum != nil {
		return *x.SessionNum
	}
	return 0
}

func (x *AskWayEnterRsp) GetPlayerGuessInfoArr() []*PlayerGuessInfoMsg {
	if x != nil {
		return x.PlayerGuessInfoArr
	}
	return nil
}

func (x *AskWayEnterRsp) GetRestrainData() *PlayerRestrainInfoMsg {
	if x != nil {
		return x.RestrainData
	}
	return nil
}

func (x *AskWayEnterRsp) GetReportRedPoint() bool {
	if x != nil && x.ReportRedPoint != nil {
		return *x.ReportRedPoint
	}
	return false
}

type AskWayMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RefreshTimes *int32 `protobuf:"varint,2,req,name=RefreshTimes" json:"RefreshTimes,omitempty"`
}

func (x *AskWayMatchReq) Reset() {
	*x = AskWayMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayMatchReq) ProtoMessage() {}

func (x *AskWayMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayMatchReq.ProtoReflect.Descriptor instead.
func (*AskWayMatchReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{2}
}

func (x *AskWayMatchReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayMatchReq) GetRefreshTimes() int32 {
	if x != nil && x.RefreshTimes != nil {
		return *x.RefreshTimes
	}
	return 0
}

type AskWayMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32            `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerInfo *AskWayPlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
	Cost       *AwardInfoList    `protobuf:"bytes,3,opt,name=cost" json:"cost,omitempty"`
}

func (x *AskWayMatchRsp) Reset() {
	*x = AskWayMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayMatchRsp) ProtoMessage() {}

func (x *AskWayMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayMatchRsp.ProtoReflect.Descriptor instead.
func (*AskWayMatchRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{3}
}

func (x *AskWayMatchRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayMatchRsp) GetPlayerInfo() *AskWayPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *AskWayMatchRsp) GetCost() *AwardInfoList {
	if x != nil {
		return x.Cost
	}
	return nil
}

type AskWayBattleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId    *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	PlayerId      *int64 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
	CompetitionId *int32 `protobuf:"varint,3,opt,name=competitionId" json:"competitionId,omitempty"`
}

func (x *AskWayBattleReq) Reset() {
	*x = AskWayBattleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBattleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBattleReq) ProtoMessage() {}

func (x *AskWayBattleReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBattleReq.ProtoReflect.Descriptor instead.
func (*AskWayBattleReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{4}
}

func (x *AskWayBattleReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayBattleReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *AskWayBattleReq) GetCompetitionId() int32 {
	if x != nil && x.CompetitionId != nil {
		return *x.CompetitionId
	}
	return 0
}

type AskWayBattleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward       *AwardInfoList         `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	PlayerInfo   *AskWayPlayerInfo      `protobuf:"bytes,3,opt,name=playerInfo" json:"playerInfo,omitempty"`
	BattleResult *AskWayBattleResultMsg `protobuf:"bytes,4,opt,name=battleResult" json:"battleResult,omitempty"`
}

func (x *AskWayBattleRsp) Reset() {
	*x = AskWayBattleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBattleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBattleRsp) ProtoMessage() {}

func (x *AskWayBattleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBattleRsp.ProtoReflect.Descriptor instead.
func (*AskWayBattleRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{5}
}

func (x *AskWayBattleRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayBattleRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *AskWayBattleRsp) GetPlayerInfo() *AskWayPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *AskWayBattleRsp) GetBattleResult() *AskWayBattleResultMsg {
	if x != nil {
		return x.BattleResult
	}
	return nil
}

type AskWayBuyFightTicketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId  *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	BuyCount    *int32 `protobuf:"varint,2,opt,name=buyCount" json:"buyCount,omitempty"`
	HadBuyCount *int32 `protobuf:"varint,3,opt,name=hadBuyCount" json:"hadBuyCount,omitempty"`
}

func (x *AskWayBuyFightTicketReq) Reset() {
	*x = AskWayBuyFightTicketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBuyFightTicketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBuyFightTicketReq) ProtoMessage() {}

func (x *AskWayBuyFightTicketReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBuyFightTicketReq.ProtoReflect.Descriptor instead.
func (*AskWayBuyFightTicketReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{6}
}

func (x *AskWayBuyFightTicketReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayBuyFightTicketReq) GetBuyCount() int32 {
	if x != nil && x.BuyCount != nil {
		return *x.BuyCount
	}
	return 0
}

func (x *AskWayBuyFightTicketReq) GetHadBuyCount() int32 {
	if x != nil && x.HadBuyCount != nil {
		return *x.HadBuyCount
	}
	return 0
}

type AskWayBuyFightTicketRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32            `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerInfo *AskWayPlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
	Cost       *AwardInfoList    `protobuf:"bytes,3,opt,name=cost" json:"cost,omitempty"`
}

func (x *AskWayBuyFightTicketRsp) Reset() {
	*x = AskWayBuyFightTicketRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBuyFightTicketRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBuyFightTicketRsp) ProtoMessage() {}

func (x *AskWayBuyFightTicketRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBuyFightTicketRsp.ProtoReflect.Descriptor instead.
func (*AskWayBuyFightTicketRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{7}
}

func (x *AskWayBuyFightTicketRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayBuyFightTicketRsp) GetPlayerInfo() *AskWayPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *AskWayBuyFightTicketRsp) GetCost() *AwardInfoList {
	if x != nil {
		return x.Cost
	}
	return nil
}

type AskWayGetReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *AskWayGetReportReq) Reset() {
	*x = AskWayGetReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetReportReq) ProtoMessage() {}

func (x *AskWayGetReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetReportReq.ProtoReflect.Descriptor instead.
func (*AskWayGetReportReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{8}
}

func (x *AskWayGetReportReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type AskWayGetReportRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                    `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ReportList []*AskWayBattleReportInfo `protobuf:"bytes,2,rep,name=reportList" json:"reportList,omitempty"`
}

func (x *AskWayGetReportRsp) Reset() {
	*x = AskWayGetReportRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetReportRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetReportRsp) ProtoMessage() {}

func (x *AskWayGetReportRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetReportRsp.ProtoReflect.Descriptor instead.
func (*AskWayGetReportRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{9}
}

func (x *AskWayGetReportRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayGetReportRsp) GetReportList() []*AskWayBattleReportInfo {
	if x != nil {
		return x.ReportList
	}
	return nil
}

type AskWayBattleReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RecordId   *int32 `protobuf:"varint,2,req,name=recordId" json:"recordId,omitempty"`
}

func (x *AskWayBattleReplyReq) Reset() {
	*x = AskWayBattleReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBattleReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBattleReplyReq) ProtoMessage() {}

func (x *AskWayBattleReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBattleReplyReq.ProtoReflect.Descriptor instead.
func (*AskWayBattleReplyReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{10}
}

func (x *AskWayBattleReplyReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayBattleReplyReq) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type AskWayBattleReplyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AllBattleRecord *BattleRecordMsg `protobuf:"bytes,2,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
}

func (x *AskWayBattleReplyRsp) Reset() {
	*x = AskWayBattleReplyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBattleReplyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBattleReplyRsp) ProtoMessage() {}

func (x *AskWayBattleReplyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBattleReplyRsp.ProtoReflect.Descriptor instead.
func (*AskWayBattleReplyRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{11}
}

func (x *AskWayBattleReplyRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayBattleReplyRsp) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

type AskWayReceiveTierRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Tier       *int32 `protobuf:"varint,2,req,name=tier" json:"tier,omitempty"`
}

func (x *AskWayReceiveTierRewardReq) Reset() {
	*x = AskWayReceiveTierRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayReceiveTierRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayReceiveTierRewardReq) ProtoMessage() {}

func (x *AskWayReceiveTierRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayReceiveTierRewardReq.ProtoReflect.Descriptor instead.
func (*AskWayReceiveTierRewardReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{12}
}

func (x *AskWayReceiveTierRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayReceiveTierRewardReq) GetTier() int32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

type AskWayReceiveTierRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32            `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward     *AwardInfoList    `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	PlayerInfo *AskWayPlayerInfo `protobuf:"bytes,3,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *AskWayReceiveTierRewardRsp) Reset() {
	*x = AskWayReceiveTierRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayReceiveTierRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayReceiveTierRewardRsp) ProtoMessage() {}

func (x *AskWayReceiveTierRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayReceiveTierRewardRsp.ProtoReflect.Descriptor instead.
func (*AskWayReceiveTierRewardRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{13}
}

func (x *AskWayReceiveTierRewardRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayReceiveTierRewardRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *AskWayReceiveTierRewardRsp) GetPlayerInfo() *AskWayPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type AskWayReceiveScoreRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	ScoreId    *int32 `protobuf:"varint,2,req,name=scoreId" json:"scoreId,omitempty"`
}

func (x *AskWayReceiveScoreRewardReq) Reset() {
	*x = AskWayReceiveScoreRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayReceiveScoreRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayReceiveScoreRewardReq) ProtoMessage() {}

func (x *AskWayReceiveScoreRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayReceiveScoreRewardReq.ProtoReflect.Descriptor instead.
func (*AskWayReceiveScoreRewardReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{14}
}

func (x *AskWayReceiveScoreRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayReceiveScoreRewardReq) GetScoreId() int32 {
	if x != nil && x.ScoreId != nil {
		return *x.ScoreId
	}
	return 0
}

type AskWayReceiveScoreRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward *AwardInfoList `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *AskWayReceiveScoreRewardRsp) Reset() {
	*x = AskWayReceiveScoreRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayReceiveScoreRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayReceiveScoreRewardRsp) ProtoMessage() {}

func (x *AskWayReceiveScoreRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayReceiveScoreRewardRsp.ProtoReflect.Descriptor instead.
func (*AskWayReceiveScoreRewardRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{15}
}

func (x *AskWayReceiveScoreRewardRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayReceiveScoreRewardRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

type AskWayGetGuessInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId    *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RoundId       *int32 `protobuf:"varint,2,opt,name=roundId" json:"roundId,omitempty"`
	CompetitionId *int32 `protobuf:"varint,3,opt,name=competitionId" json:"competitionId,omitempty"`
	GroupId       *int32 `protobuf:"varint,4,opt,name=groupId" json:"groupId,omitempty"`
}

func (x *AskWayGetGuessInfoReq) Reset() {
	*x = AskWayGetGuessInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetGuessInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetGuessInfoReq) ProtoMessage() {}

func (x *AskWayGetGuessInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetGuessInfoReq.ProtoReflect.Descriptor instead.
func (*AskWayGetGuessInfoReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{16}
}

func (x *AskWayGetGuessInfoReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayGetGuessInfoReq) GetRoundId() int32 {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return 0
}

func (x *AskWayGetGuessInfoReq) GetCompetitionId() int32 {
	if x != nil && x.CompetitionId != nil {
		return *x.CompetitionId
	}
	return 0
}

func (x *AskWayGetGuessInfoReq) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type AskWayGetGuessInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	GuessCoin          *int32                `protobuf:"varint,2,opt,name=guessCoin" json:"guessCoin,omitempty"`
	PlayerGuessInfoArr []*PlayerGuessInfoMsg `protobuf:"bytes,3,rep,name=playerGuessInfoArr" json:"playerGuessInfoArr,omitempty"`
	CurGroup           *int32                `protobuf:"varint,4,opt,name=curGroup" json:"curGroup,omitempty"`
	MaxGroup           *int32                `protobuf:"varint,5,opt,name=maxGroup" json:"maxGroup,omitempty"`
}

func (x *AskWayGetGuessInfoRsp) Reset() {
	*x = AskWayGetGuessInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetGuessInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetGuessInfoRsp) ProtoMessage() {}

func (x *AskWayGetGuessInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetGuessInfoRsp.ProtoReflect.Descriptor instead.
func (*AskWayGetGuessInfoRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{17}
}

func (x *AskWayGetGuessInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayGetGuessInfoRsp) GetGuessCoin() int32 {
	if x != nil && x.GuessCoin != nil {
		return *x.GuessCoin
	}
	return 0
}

func (x *AskWayGetGuessInfoRsp) GetPlayerGuessInfoArr() []*PlayerGuessInfoMsg {
	if x != nil {
		return x.PlayerGuessInfoArr
	}
	return nil
}

func (x *AskWayGetGuessInfoRsp) GetCurGroup() int32 {
	if x != nil && x.CurGroup != nil {
		return *x.CurGroup
	}
	return 0
}

func (x *AskWayGetGuessInfoRsp) GetMaxGroup() int32 {
	if x != nil && x.MaxGroup != nil {
		return *x.MaxGroup
	}
	return 0
}

type AskWayGetGuessCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *AskWayGetGuessCoinReq) Reset() {
	*x = AskWayGetGuessCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetGuessCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetGuessCoinReq) ProtoMessage() {}

func (x *AskWayGetGuessCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetGuessCoinReq.ProtoReflect.Descriptor instead.
func (*AskWayGetGuessCoinReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{18}
}

func (x *AskWayGetGuessCoinReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type AskWayGetGuessCoinRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	GuessCoin *int32 `protobuf:"varint,2,opt,name=guessCoin" json:"guessCoin,omitempty"`
}

func (x *AskWayGetGuessCoinRsp) Reset() {
	*x = AskWayGetGuessCoinRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetGuessCoinRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetGuessCoinRsp) ProtoMessage() {}

func (x *AskWayGetGuessCoinRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetGuessCoinRsp.ProtoReflect.Descriptor instead.
func (*AskWayGetGuessCoinRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{19}
}

func (x *AskWayGetGuessCoinRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayGetGuessCoinRsp) GetGuessCoin() int32 {
	if x != nil && x.GuessCoin != nil {
		return *x.GuessCoin
	}
	return 0
}

type AskWayToSkyGuessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId    *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	PlayerId      *int64 `protobuf:"varint,2,req,name=playerId" json:"playerId,omitempty"`
	GuessCoinCost *int32 `protobuf:"varint,3,req,name=guessCoinCost" json:"guessCoinCost,omitempty"`
	RoundId       *int32 `protobuf:"varint,4,req,name=roundId" json:"roundId,omitempty"`
}

func (x *AskWayToSkyGuessReq) Reset() {
	*x = AskWayToSkyGuessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyGuessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyGuessReq) ProtoMessage() {}

func (x *AskWayToSkyGuessReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyGuessReq.ProtoReflect.Descriptor instead.
func (*AskWayToSkyGuessReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{20}
}

func (x *AskWayToSkyGuessReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayToSkyGuessReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *AskWayToSkyGuessReq) GetGuessCoinCost() int32 {
	if x != nil && x.GuessCoinCost != nil {
		return *x.GuessCoinCost
	}
	return 0
}

func (x *AskWayToSkyGuessReq) GetRoundId() int32 {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return 0
}

type AskWayToSkyGuessRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	GuessCoin          *int32              `protobuf:"varint,2,opt,name=guessCoin" json:"guessCoin,omitempty"`
	PlayerGuessInfoArr *PlayerGuessInfoMsg `protobuf:"bytes,3,opt,name=playerGuessInfoArr" json:"playerGuessInfoArr,omitempty"`
}

func (x *AskWayToSkyGuessRsp) Reset() {
	*x = AskWayToSkyGuessRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyGuessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyGuessRsp) ProtoMessage() {}

func (x *AskWayToSkyGuessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyGuessRsp.ProtoReflect.Descriptor instead.
func (*AskWayToSkyGuessRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{21}
}

func (x *AskWayToSkyGuessRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayToSkyGuessRsp) GetGuessCoin() int32 {
	if x != nil && x.GuessCoin != nil {
		return *x.GuessCoin
	}
	return 0
}

func (x *AskWayToSkyGuessRsp) GetPlayerGuessInfoArr() *PlayerGuessInfoMsg {
	if x != nil {
		return x.PlayerGuessInfoArr
	}
	return nil
}

type AskWaySyncGuessReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Num *int32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *AskWaySyncGuessReward) Reset() {
	*x = AskWaySyncGuessReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWaySyncGuessReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWaySyncGuessReward) ProtoMessage() {}

func (x *AskWaySyncGuessReward) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWaySyncGuessReward.ProtoReflect.Descriptor instead.
func (*AskWaySyncGuessReward) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{22}
}

func (x *AskWaySyncGuessReward) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWaySyncGuessReward) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type AskWayToSkyBattleReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	BattleId   *int32 `protobuf:"varint,2,req,name=battleId" json:"battleId,omitempty"`
}

func (x *AskWayToSkyBattleReplyReq) Reset() {
	*x = AskWayToSkyBattleReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyBattleReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyBattleReplyReq) ProtoMessage() {}

func (x *AskWayToSkyBattleReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyBattleReplyReq.ProtoReflect.Descriptor instead.
func (*AskWayToSkyBattleReplyReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{23}
}

func (x *AskWayToSkyBattleReplyReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayToSkyBattleReplyReq) GetBattleId() int32 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

type AskWayToSkyBattleReplyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AllBattleRecord *BattleRecordMsg      `protobuf:"bytes,2,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	LeftPlayerInfo  *PlayerHeadAndNameMsg `protobuf:"bytes,3,opt,name=leftPlayerInfo" json:"leftPlayerInfo,omitempty"`
	RightPlayerInfo *PlayerHeadAndNameMsg `protobuf:"bytes,4,opt,name=rightPlayerInfo" json:"rightPlayerInfo,omitempty"`
}

func (x *AskWayToSkyBattleReplyRsp) Reset() {
	*x = AskWayToSkyBattleReplyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyBattleReplyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyBattleReplyRsp) ProtoMessage() {}

func (x *AskWayToSkyBattleReplyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyBattleReplyRsp.ProtoReflect.Descriptor instead.
func (*AskWayToSkyBattleReplyRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{24}
}

func (x *AskWayToSkyBattleReplyRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayToSkyBattleReplyRsp) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *AskWayToSkyBattleReplyRsp) GetLeftPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.LeftPlayerInfo
	}
	return nil
}

func (x *AskWayToSkyBattleReplyRsp) GetRightPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.RightPlayerInfo
	}
	return nil
}

type AskWayReceiveToSkyRankRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Rank       *int32 `protobuf:"varint,2,req,name=rank" json:"rank,omitempty"`
}

func (x *AskWayReceiveToSkyRankRewardReq) Reset() {
	*x = AskWayReceiveToSkyRankRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayReceiveToSkyRankRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayReceiveToSkyRankRewardReq) ProtoMessage() {}

func (x *AskWayReceiveToSkyRankRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayReceiveToSkyRankRewardReq.ProtoReflect.Descriptor instead.
func (*AskWayReceiveToSkyRankRewardReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{25}
}

func (x *AskWayReceiveToSkyRankRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayReceiveToSkyRankRewardReq) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type AskWayReceiveToSkyRankRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward *AwardInfoList `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *AskWayReceiveToSkyRankRewardRsp) Reset() {
	*x = AskWayReceiveToSkyRankRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayReceiveToSkyRankRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayReceiveToSkyRankRewardRsp) ProtoMessage() {}

func (x *AskWayReceiveToSkyRankRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayReceiveToSkyRankRewardRsp.ProtoReflect.Descriptor instead.
func (*AskWayReceiveToSkyRankRewardRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{26}
}

func (x *AskWayReceiveToSkyRankRewardRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayReceiveToSkyRankRewardRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

type AskWayWorshipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *AskWayWorshipReq) Reset() {
	*x = AskWayWorshipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayWorshipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayWorshipReq) ProtoMessage() {}

func (x *AskWayWorshipReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayWorshipReq.ProtoReflect.Descriptor instead.
func (*AskWayWorshipReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{27}
}

func (x *AskWayWorshipReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type AskWayWorshipRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward *AwardInfoList `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *AskWayWorshipRsp) Reset() {
	*x = AskWayWorshipRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayWorshipRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayWorshipRsp) ProtoMessage() {}

func (x *AskWayWorshipRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayWorshipRsp.ProtoReflect.Descriptor instead.
func (*AskWayWorshipRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{28}
}

func (x *AskWayWorshipRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayWorshipRsp) GetReward() *AwardInfoList {
	if x != nil {
		return x.Reward
	}
	return nil
}

type AskWayToSkyRosterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,opt,name=activityId" json:"activityId,omitempty"`
	SessionNum *int32 `protobuf:"varint,2,opt,name=sessionNum" json:"sessionNum,omitempty"`
}

func (x *AskWayToSkyRosterReq) Reset() {
	*x = AskWayToSkyRosterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyRosterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyRosterReq) ProtoMessage() {}

func (x *AskWayToSkyRosterReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyRosterReq.ProtoReflect.Descriptor instead.
func (*AskWayToSkyRosterReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{29}
}

func (x *AskWayToSkyRosterReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayToSkyRosterReq) GetSessionNum() int32 {
	if x != nil && x.SessionNum != nil {
		return *x.SessionNum
	}
	return 0
}

type AskWayToSkyRosterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	SessionNum     *int32        `protobuf:"varint,2,opt,name=sessionNum" json:"sessionNum,omitempty"`
	ToSkyPlayerNo1 []*LockRoster `protobuf:"bytes,3,rep,name=toSkyPlayerNo1" json:"toSkyPlayerNo1,omitempty"`
}

func (x *AskWayToSkyRosterRsp) Reset() {
	*x = AskWayToSkyRosterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyRosterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyRosterRsp) ProtoMessage() {}

func (x *AskWayToSkyRosterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyRosterRsp.ProtoReflect.Descriptor instead.
func (*AskWayToSkyRosterRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{30}
}

func (x *AskWayToSkyRosterRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayToSkyRosterRsp) GetSessionNum() int32 {
	if x != nil && x.SessionNum != nil {
		return *x.SessionNum
	}
	return 0
}

func (x *AskWayToSkyRosterRsp) GetToSkyPlayerNo1() []*LockRoster {
	if x != nil {
		return x.ToSkyPlayerNo1
	}
	return nil
}

type AskWayGetPlayerDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	PlayerId   *int64 `protobuf:"varint,2,req,name=playerId" json:"playerId,omitempty"`
	ServerId   *int64 `protobuf:"varint,3,req,name=serverId" json:"serverId,omitempty"`
}

func (x *AskWayGetPlayerDetailReq) Reset() {
	*x = AskWayGetPlayerDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetPlayerDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetPlayerDetailReq) ProtoMessage() {}

func (x *AskWayGetPlayerDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetPlayerDetailReq.ProtoReflect.Descriptor instead.
func (*AskWayGetPlayerDetailReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{31}
}

func (x *AskWayGetPlayerDetailReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayGetPlayerDetailReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *AskWayGetPlayerDetailReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type AskWayGetPlayerDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32               `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerDetailDataMsg *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=playerDetailDataMsg" json:"playerDetailDataMsg,omitempty"`
}

func (x *AskWayGetPlayerDetailRsp) Reset() {
	*x = AskWayGetPlayerDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetPlayerDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetPlayerDetailRsp) ProtoMessage() {}

func (x *AskWayGetPlayerDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetPlayerDetailRsp.ProtoReflect.Descriptor instead.
func (*AskWayGetPlayerDetailRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{32}
}

func (x *AskWayGetPlayerDetailRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayGetPlayerDetailRsp) GetPlayerDetailDataMsg() *PlayerDetailDataMsg {
	if x != nil {
		return x.PlayerDetailDataMsg
	}
	return nil
}

type AskWayToSkyGetBattleResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId    *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CompetitionId *int32 `protobuf:"varint,2,req,name=competitionId" json:"competitionId,omitempty"`
	RoundId       *int32 `protobuf:"varint,3,req,name=roundId" json:"roundId,omitempty"`
	GroupId       *int32 `protobuf:"varint,4,req,name=groupId" json:"groupId,omitempty"`
}

func (x *AskWayToSkyGetBattleResultReq) Reset() {
	*x = AskWayToSkyGetBattleResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyGetBattleResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyGetBattleResultReq) ProtoMessage() {}

func (x *AskWayToSkyGetBattleResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyGetBattleResultReq.ProtoReflect.Descriptor instead.
func (*AskWayToSkyGetBattleResultReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{33}
}

func (x *AskWayToSkyGetBattleResultReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayToSkyGetBattleResultReq) GetCompetitionId() int32 {
	if x != nil && x.CompetitionId != nil {
		return *x.CompetitionId
	}
	return 0
}

func (x *AskWayToSkyGetBattleResultReq) GetRoundId() int32 {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return 0
}

func (x *AskWayToSkyGetBattleResultReq) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type AskWayToSkyGetBattleResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BattleResult *ToSkyBattleResult `protobuf:"bytes,2,opt,name=battleResult" json:"battleResult,omitempty"`
}

func (x *AskWayToSkyGetBattleResultRsp) Reset() {
	*x = AskWayToSkyGetBattleResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyGetBattleResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyGetBattleResultRsp) ProtoMessage() {}

func (x *AskWayToSkyGetBattleResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyGetBattleResultRsp.ProtoReflect.Descriptor instead.
func (*AskWayToSkyGetBattleResultRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{34}
}

func (x *AskWayToSkyGetBattleResultRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayToSkyGetBattleResultRsp) GetBattleResult() *ToSkyBattleResult {
	if x != nil {
		return x.BattleResult
	}
	return nil
}

type AskWayToSkyGetReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	BattleId   *int32 `protobuf:"varint,2,req,name=battleId" json:"battleId,omitempty"`
}

func (x *AskWayToSkyGetReportReq) Reset() {
	*x = AskWayToSkyGetReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyGetReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyGetReportReq) ProtoMessage() {}

func (x *AskWayToSkyGetReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyGetReportReq.ProtoReflect.Descriptor instead.
func (*AskWayToSkyGetReportReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{35}
}

func (x *AskWayToSkyGetReportReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayToSkyGetReportReq) GetBattleId() int32 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

type AskWayToSkyGetReportRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	BattleResult []*BattleResult `protobuf:"bytes,2,rep,name=battleResult" json:"battleResult,omitempty"`
}

func (x *AskWayToSkyGetReportRsp) Reset() {
	*x = AskWayToSkyGetReportRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyGetReportRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyGetReportRsp) ProtoMessage() {}

func (x *AskWayToSkyGetReportRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyGetReportRsp.ProtoReflect.Descriptor instead.
func (*AskWayToSkyGetReportRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{36}
}

func (x *AskWayToSkyGetReportRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayToSkyGetReportRsp) GetBattleResult() []*BattleResult {
	if x != nil {
		return x.BattleResult
	}
	return nil
}

type AskWayGetPlayerRestrainDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId    *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	CompetitionId *int32 `protobuf:"varint,2,opt,name=competitionId" json:"competitionId,omitempty"`
	RealmsId      *int32 `protobuf:"varint,3,opt,name=realmsId" json:"realmsId,omitempty"`
}

func (x *AskWayGetPlayerRestrainDataReq) Reset() {
	*x = AskWayGetPlayerRestrainDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetPlayerRestrainDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetPlayerRestrainDataReq) ProtoMessage() {}

func (x *AskWayGetPlayerRestrainDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetPlayerRestrainDataReq.ProtoReflect.Descriptor instead.
func (*AskWayGetPlayerRestrainDataReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{37}
}

func (x *AskWayGetPlayerRestrainDataReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayGetPlayerRestrainDataReq) GetCompetitionId() int32 {
	if x != nil && x.CompetitionId != nil {
		return *x.CompetitionId
	}
	return 0
}

func (x *AskWayGetPlayerRestrainDataReq) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

type AskWayGetGetCurStateInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *AskWayGetGetCurStateInfoReq) Reset() {
	*x = AskWayGetGetCurStateInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetGetCurStateInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetGetCurStateInfoReq) ProtoMessage() {}

func (x *AskWayGetGetCurStateInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetGetCurStateInfoReq.ProtoReflect.Descriptor instead.
func (*AskWayGetGetCurStateInfoReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{38}
}

func (x *AskWayGetGetCurStateInfoReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type AskWayGetGetCurStateInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32             `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	State        *AskWayPosterState `protobuf:"varint,2,opt,name=state,enum=com.yq.msg.CityMsg.AskWayPosterState" json:"state,omitempty"`
	StateEndTime *int64             `protobuf:"varint,3,opt,name=stateEndTime" json:"stateEndTime,omitempty"`
}

func (x *AskWayGetGetCurStateInfoRsp) Reset() {
	*x = AskWayGetGetCurStateInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayGetGetCurStateInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayGetGetCurStateInfoRsp) ProtoMessage() {}

func (x *AskWayGetGetCurStateInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayGetGetCurStateInfoRsp.ProtoReflect.Descriptor instead.
func (*AskWayGetGetCurStateInfoRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{39}
}

func (x *AskWayGetGetCurStateInfoRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayGetGetCurStateInfoRsp) GetState() AskWayPosterState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return AskWayPosterState_AskWayPosterState_1
}

func (x *AskWayGetGetCurStateInfoRsp) GetStateEndTime() int64 {
	if x != nil && x.StateEndTime != nil {
		return *x.StateEndTime
	}
	return 0
}

type AskWayCancelReportRedPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RecordId   *int32 `protobuf:"varint,2,req,name=recordId" json:"recordId,omitempty"`
}

func (x *AskWayCancelReportRedPointReq) Reset() {
	*x = AskWayCancelReportRedPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayCancelReportRedPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayCancelReportRedPointReq) ProtoMessage() {}

func (x *AskWayCancelReportRedPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayCancelReportRedPointReq.ProtoReflect.Descriptor instead.
func (*AskWayCancelReportRedPointReq) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{40}
}

func (x *AskWayCancelReportRedPointReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayCancelReportRedPointReq) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type AskWayCancelReportRedPointRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	ReportInfo *AskWayBattleReportInfo `protobuf:"bytes,2,opt,name=reportInfo" json:"reportInfo,omitempty"`
}

func (x *AskWayCancelReportRedPointRsp) Reset() {
	*x = AskWayCancelReportRedPointRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayCancelReportRedPointRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayCancelReportRedPointRsp) ProtoMessage() {}

func (x *AskWayCancelReportRedPointRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayCancelReportRedPointRsp.ProtoReflect.Descriptor instead.
func (*AskWayCancelReportRedPointRsp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{41}
}

func (x *AskWayCancelReportRedPointRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *AskWayCancelReportRedPointRsp) GetReportInfo() *AskWayBattleReportInfo {
	if x != nil {
		return x.ReportInfo
	}
	return nil
}

type AskWayPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score             *int32                     `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	ChallengeTimes    *int32                     `protobuf:"varint,2,opt,name=challengeTimes" json:"challengeTimes,omitempty"`
	BuyChallengeTimes *int32                     `protobuf:"varint,3,opt,name=buyChallengeTimes" json:"buyChallengeTimes,omitempty"`
	RefreshTimes      *int32                     `protobuf:"varint,4,opt,name=RefreshTimes" json:"RefreshTimes,omitempty"`
	ChallengeInfo     *AskWayPlayerChallengeInfo `protobuf:"bytes,5,opt,name=challengeInfo" json:"challengeInfo,omitempty"`
	TierAwardInfoList []int32                    `protobuf:"varint,6,rep,name=tierAwardInfoList" json:"tierAwardInfoList,omitempty"`
	TierAchievedMax   *int32                     `protobuf:"varint,7,opt,name=tierAchievedMax" json:"tierAchievedMax,omitempty"`
	CompetitionArea   *int32                     `protobuf:"varint,8,opt,name=competitionArea" json:"competitionArea,omitempty"`
	FightValue        *int64                     `protobuf:"varint,9,opt,name=fightValue" json:"fightValue,omitempty"`
}

func (x *AskWayPlayerInfo) Reset() {
	*x = AskWayPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayPlayerInfo) ProtoMessage() {}

func (x *AskWayPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayPlayerInfo.ProtoReflect.Descriptor instead.
func (*AskWayPlayerInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{42}
}

func (x *AskWayPlayerInfo) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *AskWayPlayerInfo) GetChallengeTimes() int32 {
	if x != nil && x.ChallengeTimes != nil {
		return *x.ChallengeTimes
	}
	return 0
}

func (x *AskWayPlayerInfo) GetBuyChallengeTimes() int32 {
	if x != nil && x.BuyChallengeTimes != nil {
		return *x.BuyChallengeTimes
	}
	return 0
}

func (x *AskWayPlayerInfo) GetRefreshTimes() int32 {
	if x != nil && x.RefreshTimes != nil {
		return *x.RefreshTimes
	}
	return 0
}

func (x *AskWayPlayerInfo) GetChallengeInfo() *AskWayPlayerChallengeInfo {
	if x != nil {
		return x.ChallengeInfo
	}
	return nil
}

func (x *AskWayPlayerInfo) GetTierAwardInfoList() []int32 {
	if x != nil {
		return x.TierAwardInfoList
	}
	return nil
}

func (x *AskWayPlayerInfo) GetTierAchievedMax() int32 {
	if x != nil && x.TierAchievedMax != nil {
		return *x.TierAchievedMax
	}
	return 0
}

func (x *AskWayPlayerInfo) GetCompetitionArea() int32 {
	if x != nil && x.CompetitionArea != nil {
		return *x.CompetitionArea
	}
	return 0
}

func (x *AskWayPlayerInfo) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

type AskWayPlayerChallengeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerList []*AskWayPlayerChallengePlayerInfo `protobuf:"bytes,1,rep,name=playerList" json:"playerList,omitempty"`
}

func (x *AskWayPlayerChallengeInfo) Reset() {
	*x = AskWayPlayerChallengeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayPlayerChallengeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayPlayerChallengeInfo) ProtoMessage() {}

func (x *AskWayPlayerChallengeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayPlayerChallengeInfo.ProtoReflect.Descriptor instead.
func (*AskWayPlayerChallengeInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{43}
}

func (x *AskWayPlayerChallengeInfo) GetPlayerList() []*AskWayPlayerChallengePlayerInfo {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type AskWayPlayerChallengePlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeData []*AttributeDataMsg      `protobuf:"bytes,1,rep,name=attributeData" json:"attributeData,omitempty"`
	TargetInfo    *PlayerAppearanceDataMsg `protobuf:"bytes,2,opt,name=targetInfo" json:"targetInfo,omitempty"`
	WinScore      *int64                   `protobuf:"varint,3,opt,name=winScore" json:"winScore,omitempty"`
}

func (x *AskWayPlayerChallengePlayerInfo) Reset() {
	*x = AskWayPlayerChallengePlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayPlayerChallengePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayPlayerChallengePlayerInfo) ProtoMessage() {}

func (x *AskWayPlayerChallengePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayPlayerChallengePlayerInfo.ProtoReflect.Descriptor instead.
func (*AskWayPlayerChallengePlayerInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{44}
}

func (x *AskWayPlayerChallengePlayerInfo) GetAttributeData() []*AttributeDataMsg {
	if x != nil {
		return x.AttributeData
	}
	return nil
}

func (x *AskWayPlayerChallengePlayerInfo) GetTargetInfo() *PlayerAppearanceDataMsg {
	if x != nil {
		return x.TargetInfo
	}
	return nil
}

func (x *AskWayPlayerChallengePlayerInfo) GetWinScore() int64 {
	if x != nil && x.WinScore != nil {
		return *x.WinScore
	}
	return 0
}

type CompetitionGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionId *int32  `protobuf:"varint,1,opt,name=competitionId" json:"competitionId,omitempty"`
	MinLevel      *int32  `protobuf:"varint,2,opt,name=minLevel" json:"minLevel,omitempty"`
	MaxLevel      *int32  `protobuf:"varint,3,opt,name=maxLevel" json:"maxLevel,omitempty"`
	StandardLevel *int32  `protobuf:"varint,4,opt,name=standardLevel" json:"standardLevel,omitempty"`
	GroupNum      []int32 `protobuf:"varint,5,rep,name=groupNum" json:"groupNum,omitempty"`
}

func (x *CompetitionGroupInfo) Reset() {
	*x = CompetitionGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionGroupInfo) ProtoMessage() {}

func (x *CompetitionGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionGroupInfo.ProtoReflect.Descriptor instead.
func (*CompetitionGroupInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{45}
}

func (x *CompetitionGroupInfo) GetCompetitionId() int32 {
	if x != nil && x.CompetitionId != nil {
		return *x.CompetitionId
	}
	return 0
}

func (x *CompetitionGroupInfo) GetMinLevel() int32 {
	if x != nil && x.MinLevel != nil {
		return *x.MinLevel
	}
	return 0
}

func (x *CompetitionGroupInfo) GetMaxLevel() int32 {
	if x != nil && x.MaxLevel != nil {
		return *x.MaxLevel
	}
	return 0
}

func (x *CompetitionGroupInfo) GetStandardLevel() int32 {
	if x != nil && x.StandardLevel != nil {
		return *x.StandardLevel
	}
	return 0
}

func (x *CompetitionGroupInfo) GetGroupNum() []int32 {
	if x != nil {
		return x.GroupNum
	}
	return nil
}

type AskWayToSkyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuessScore         *int32                  `protobuf:"varint,1,opt,name=GuessScore" json:"GuessScore,omitempty"`
	HasGetGuessCoin    *bool                   `protobuf:"varint,2,opt,name=HasGetGuessCoin" json:"HasGetGuessCoin,omitempty"`
	IsWorship          *bool                   `protobuf:"varint,3,opt,name=IsWorship" json:"IsWorship,omitempty"`
	RefreshTime        *int64                  `protobuf:"varint,4,opt,name=RefreshTime" json:"RefreshTime,omitempty"`
	HeatValue          *int64                  `protobuf:"varint,5,opt,name=heatValue" json:"heatValue,omitempty"`
	RoundGroupInfoList []*AskWayRoundGroupInfo `protobuf:"bytes,6,rep,name=roundGroupInfoList" json:"roundGroupInfoList,omitempty"`
}

func (x *AskWayToSkyInfo) Reset() {
	*x = AskWayToSkyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayToSkyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayToSkyInfo) ProtoMessage() {}

func (x *AskWayToSkyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayToSkyInfo.ProtoReflect.Descriptor instead.
func (*AskWayToSkyInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{46}
}

func (x *AskWayToSkyInfo) GetGuessScore() int32 {
	if x != nil && x.GuessScore != nil {
		return *x.GuessScore
	}
	return 0
}

func (x *AskWayToSkyInfo) GetHasGetGuessCoin() bool {
	if x != nil && x.HasGetGuessCoin != nil {
		return *x.HasGetGuessCoin
	}
	return false
}

func (x *AskWayToSkyInfo) GetIsWorship() bool {
	if x != nil && x.IsWorship != nil {
		return *x.IsWorship
	}
	return false
}

func (x *AskWayToSkyInfo) GetRefreshTime() int64 {
	if x != nil && x.RefreshTime != nil {
		return *x.RefreshTime
	}
	return 0
}

func (x *AskWayToSkyInfo) GetHeatValue() int64 {
	if x != nil && x.HeatValue != nil {
		return *x.HeatValue
	}
	return 0
}

func (x *AskWayToSkyInfo) GetRoundGroupInfoList() []*AskWayRoundGroupInfo {
	if x != nil {
		return x.RoundGroupInfoList
	}
	return nil
}

type AskWayBattleResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllBattleRecord   *BattleRecordMsg      `protobuf:"bytes,1,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	ChallengeSuccess  *bool                 `protobuf:"varint,2,opt,name=challengeSuccess" json:"challengeSuccess,omitempty"`
	TargetPlayerInfo  *PlayerHeadAndNameMsg `protobuf:"bytes,3,opt,name=targetPlayerInfo" json:"targetPlayerInfo,omitempty"`
	AskWayScore       *int32                `protobuf:"varint,4,opt,name=askWayScore" json:"askWayScore,omitempty"`
	TargetScore       *int32                `protobuf:"varint,5,opt,name=targetScore" json:"targetScore,omitempty"`
	TargetScoreChange *int32                `protobuf:"varint,6,opt,name=targetScoreChange" json:"targetScoreChange,omitempty"`
}

func (x *AskWayBattleResultMsg) Reset() {
	*x = AskWayBattleResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBattleResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBattleResultMsg) ProtoMessage() {}

func (x *AskWayBattleResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBattleResultMsg.ProtoReflect.Descriptor instead.
func (*AskWayBattleResultMsg) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{47}
}

func (x *AskWayBattleResultMsg) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *AskWayBattleResultMsg) GetChallengeSuccess() bool {
	if x != nil && x.ChallengeSuccess != nil {
		return *x.ChallengeSuccess
	}
	return false
}

func (x *AskWayBattleResultMsg) GetTargetPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.TargetPlayerInfo
	}
	return nil
}

func (x *AskWayBattleResultMsg) GetAskWayScore() int32 {
	if x != nil && x.AskWayScore != nil {
		return *x.AskWayScore
	}
	return 0
}

func (x *AskWayBattleResultMsg) GetTargetScore() int32 {
	if x != nil && x.TargetScore != nil {
		return *x.TargetScore
	}
	return 0
}

func (x *AskWayBattleResultMsg) GetTargetScoreChange() int32 {
	if x != nil && x.TargetScoreChange != nil {
		return *x.TargetScoreChange
	}
	return 0
}

type AskWayBattleReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId    *int32            `protobuf:"varint,1,opt,name=recordId" json:"recordId,omitempty"`
	Attacker    *PlayerLogInfoMsg `protobuf:"bytes,2,opt,name=attacker" json:"attacker,omitempty"`
	Defender    *PlayerLogInfoMsg `protobuf:"bytes,3,opt,name=defender" json:"defender,omitempty"`
	ScoreChange *int32            `protobuf:"varint,4,opt,name=scoreChange" json:"scoreChange,omitempty"`
	Time        *int64            `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	IsWin       *bool             `protobuf:"varint,6,opt,name=isWin" json:"isWin,omitempty"`
	IsRead      *bool             `protobuf:"varint,7,opt,name=isRead" json:"isRead,omitempty"`
}

func (x *AskWayBattleReportInfo) Reset() {
	*x = AskWayBattleReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayBattleReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayBattleReportInfo) ProtoMessage() {}

func (x *AskWayBattleReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayBattleReportInfo.ProtoReflect.Descriptor instead.
func (*AskWayBattleReportInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{48}
}

func (x *AskWayBattleReportInfo) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

func (x *AskWayBattleReportInfo) GetAttacker() *PlayerLogInfoMsg {
	if x != nil {
		return x.Attacker
	}
	return nil
}

func (x *AskWayBattleReportInfo) GetDefender() *PlayerLogInfoMsg {
	if x != nil {
		return x.Defender
	}
	return nil
}

func (x *AskWayBattleReportInfo) GetScoreChange() int32 {
	if x != nil && x.ScoreChange != nil {
		return *x.ScoreChange
	}
	return 0
}

func (x *AskWayBattleReportInfo) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *AskWayBattleReportInfo) GetIsWin() bool {
	if x != nil && x.IsWin != nil {
		return *x.IsWin
	}
	return false
}

func (x *AskWayBattleReportInfo) GetIsRead() bool {
	if x != nil && x.IsRead != nil {
		return *x.IsRead
	}
	return false
}

type PlayerLogInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadInfo    *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=headInfo" json:"headInfo,omitempty"`
	RealmsId    *int32                `protobuf:"varint,2,opt,name=realmsId" json:"realmsId,omitempty"`
	CurScore    *int32                `protobuf:"varint,3,opt,name=curScore" json:"curScore,omitempty"`
	ScoreChange *int32                `protobuf:"varint,4,opt,name=scoreChange" json:"scoreChange,omitempty"`
	IsWin       *bool                 `protobuf:"varint,5,opt,name=isWin" json:"isWin,omitempty"`
}

func (x *PlayerLogInfoMsg) Reset() {
	*x = PlayerLogInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLogInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLogInfoMsg) ProtoMessage() {}

func (x *PlayerLogInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLogInfoMsg.ProtoReflect.Descriptor instead.
func (*PlayerLogInfoMsg) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{49}
}

func (x *PlayerLogInfoMsg) GetHeadInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *PlayerLogInfoMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *PlayerLogInfoMsg) GetCurScore() int32 {
	if x != nil && x.CurScore != nil {
		return *x.CurScore
	}
	return 0
}

func (x *PlayerLogInfoMsg) GetScoreChange() int32 {
	if x != nil && x.ScoreChange != nil {
		return *x.ScoreChange
	}
	return 0
}

func (x *PlayerLogInfoMsg) GetIsWin() bool {
	if x != nil && x.IsWin != nil {
		return *x.IsWin
	}
	return false
}

type ToSkyBattleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupNum      *int32         `protobuf:"varint,1,opt,name=groupNum" json:"groupNum,omitempty"`
	RoundResult   []*RoundResult `protobuf:"bytes,2,rep,name=roundResult" json:"roundResult,omitempty"`
	TotalGroupNum *int32         `protobuf:"varint,3,opt,name=totalGroupNum" json:"totalGroupNum,omitempty"`
}

func (x *ToSkyBattleResult) Reset() {
	*x = ToSkyBattleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToSkyBattleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToSkyBattleResult) ProtoMessage() {}

func (x *ToSkyBattleResult) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToSkyBattleResult.ProtoReflect.Descriptor instead.
func (*ToSkyBattleResult) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{50}
}

func (x *ToSkyBattleResult) GetGroupNum() int32 {
	if x != nil && x.GroupNum != nil {
		return *x.GroupNum
	}
	return 0
}

func (x *ToSkyBattleResult) GetRoundResult() []*RoundResult {
	if x != nil {
		return x.RoundResult
	}
	return nil
}

func (x *ToSkyBattleResult) GetTotalGroupNum() int32 {
	if x != nil && x.TotalGroupNum != nil {
		return *x.TotalGroupNum
	}
	return 0
}

type RoundResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round            *int32          `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
	BattleResultList []*BattleResult `protobuf:"bytes,2,rep,name=battleResultList" json:"battleResultList,omitempty"`
}

func (x *RoundResult) Reset() {
	*x = RoundResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundResult) ProtoMessage() {}

func (x *RoundResult) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundResult.ProtoReflect.Descriptor instead.
func (*RoundResult) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{51}
}

func (x *RoundResult) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *RoundResult) GetBattleResultList() []*BattleResult {
	if x != nil {
		return x.BattleResultList
	}
	return nil
}

type BattleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId        *int32           `protobuf:"varint,1,opt,name=battleId" json:"battleId,omitempty"`
	LeftPlayerInfo  *ToSkyPlayerInfo `protobuf:"bytes,2,opt,name=leftPlayerInfo" json:"leftPlayerInfo,omitempty"`
	RightPlayerInfo *ToSkyPlayerInfo `protobuf:"bytes,3,opt,name=rightPlayerInfo" json:"rightPlayerInfo,omitempty"`
	IsWin           *bool            `protobuf:"varint,4,opt,name=isWin" json:"isWin,omitempty"`
	IsFinished      *bool            `protobuf:"varint,5,opt,name=isFinished" json:"isFinished,omitempty"`
}

func (x *BattleResult) Reset() {
	*x = BattleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleResult) ProtoMessage() {}

func (x *BattleResult) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleResult.ProtoReflect.Descriptor instead.
func (*BattleResult) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{52}
}

func (x *BattleResult) GetBattleId() int32 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *BattleResult) GetLeftPlayerInfo() *ToSkyPlayerInfo {
	if x != nil {
		return x.LeftPlayerInfo
	}
	return nil
}

func (x *BattleResult) GetRightPlayerInfo() *ToSkyPlayerInfo {
	if x != nil {
		return x.RightPlayerInfo
	}
	return nil
}

func (x *BattleResult) GetIsWin() bool {
	if x != nil && x.IsWin != nil {
		return *x.IsWin
	}
	return false
}

func (x *BattleResult) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

type ToSkyPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=playerInfo" json:"playerInfo,omitempty"`
	HeatValue  *int64                `protobuf:"varint,2,opt,name=heatValue" json:"heatValue,omitempty"`
	FightValue *int64                `protobuf:"varint,3,opt,name=fightValue" json:"fightValue,omitempty"`
}

func (x *ToSkyPlayerInfo) Reset() {
	*x = ToSkyPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToSkyPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToSkyPlayerInfo) ProtoMessage() {}

func (x *ToSkyPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToSkyPlayerInfo.ProtoReflect.Descriptor instead.
func (*ToSkyPlayerInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{53}
}

func (x *ToSkyPlayerInfo) GetPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *ToSkyPlayerInfo) GetHeatValue() int64 {
	if x != nil && x.HeatValue != nil {
		return *x.HeatValue
	}
	return 0
}

func (x *ToSkyPlayerInfo) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

type LockRoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionId  *int32         `protobuf:"varint,1,opt,name=competitionId" json:"competitionId,omitempty"`
	ToSkyPlayerNo1 *RosterShowMsg `protobuf:"bytes,2,opt,name=toSkyPlayerNo1" json:"toSkyPlayerNo1,omitempty"`
}

func (x *LockRoster) Reset() {
	*x = LockRoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRoster) ProtoMessage() {}

func (x *LockRoster) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRoster.ProtoReflect.Descriptor instead.
func (*LockRoster) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{54}
}

func (x *LockRoster) GetCompetitionId() int32 {
	if x != nil && x.CompetitionId != nil {
		return *x.CompetitionId
	}
	return 0
}

func (x *LockRoster) GetToSkyPlayerNo1() *RosterShowMsg {
	if x != nil {
		return x.ToSkyPlayerNo1
	}
	return nil
}

type RosterShowMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId         *int64             `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId         *int64             `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
	NickName         *string            `protobuf:"bytes,3,req,name=nickName" json:"nickName,omitempty"`
	Pet              []int32            `protobuf:"varint,4,rep,name=pet" json:"pet,omitempty"`
	Spirit           []int32            `protobuf:"varint,5,rep,name=spirit" json:"spirit,omitempty"`
	AppearanceId     *int32             `protobuf:"varint,6,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId     *int32             `protobuf:"varint,7,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	RealmsId         *int32             `protobuf:"varint,8,opt,name=realmsId" json:"realmsId,omitempty"`
	HeadIcon         *int32             `protobuf:"varint,11,opt,name=headIcon" json:"headIcon,omitempty"`
	WxHeadUrl        *string            `protobuf:"bytes,12,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	HeadInfo         *PlayerHeadDataMsg `protobuf:"bytes,13,opt,name=headInfo" json:"headInfo,omitempty"`
	PetSoulShapeList []int32            `protobuf:"varint,14,rep,name=petSoulShapeList" json:"petSoulShapeList,omitempty"`
}

func (x *RosterShowMsg) Reset() {
	*x = RosterShowMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterShowMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterShowMsg) ProtoMessage() {}

func (x *RosterShowMsg) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterShowMsg.ProtoReflect.Descriptor instead.
func (*RosterShowMsg) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{55}
}

func (x *RosterShowMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *RosterShowMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *RosterShowMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *RosterShowMsg) GetPet() []int32 {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *RosterShowMsg) GetSpirit() []int32 {
	if x != nil {
		return x.Spirit
	}
	return nil
}

func (x *RosterShowMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *RosterShowMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *RosterShowMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *RosterShowMsg) GetHeadIcon() int32 {
	if x != nil && x.HeadIcon != nil {
		return *x.HeadIcon
	}
	return 0
}

func (x *RosterShowMsg) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *RosterShowMsg) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *RosterShowMsg) GetPetSoulShapeList() []int32 {
	if x != nil {
		return x.PetSoulShapeList
	}
	return nil
}

type PlayerGuessInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo   *ToSkyPlayerInfo `protobuf:"bytes,1,opt,name=playerInfo" json:"playerInfo,omitempty"`
	GuessCoin    *int32           `protobuf:"varint,2,opt,name=guessCoin" json:"guessCoin,omitempty"`
	Odds         *int32           `protobuf:"varint,3,opt,name=odds" json:"odds,omitempty"`
	BattleResult *int32           `protobuf:"varint,4,opt,name=battleResult" json:"battleResult,omitempty"`
	GroupId      *int32           `protobuf:"varint,5,opt,name=groupId" json:"groupId,omitempty"`
	RoundId      *int32           `protobuf:"varint,6,opt,name=roundId" json:"roundId,omitempty"`
}

func (x *PlayerGuessInfoMsg) Reset() {
	*x = PlayerGuessInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGuessInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGuessInfoMsg) ProtoMessage() {}

func (x *PlayerGuessInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGuessInfoMsg.ProtoReflect.Descriptor instead.
func (*PlayerGuessInfoMsg) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{56}
}

func (x *PlayerGuessInfoMsg) GetPlayerInfo() *ToSkyPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *PlayerGuessInfoMsg) GetGuessCoin() int32 {
	if x != nil && x.GuessCoin != nil {
		return *x.GuessCoin
	}
	return 0
}

func (x *PlayerGuessInfoMsg) GetOdds() int32 {
	if x != nil && x.Odds != nil {
		return *x.Odds
	}
	return 0
}

func (x *PlayerGuessInfoMsg) GetBattleResult() int32 {
	if x != nil && x.BattleResult != nil {
		return *x.BattleResult
	}
	return 0
}

func (x *PlayerGuessInfoMsg) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *PlayerGuessInfoMsg) GetRoundId() int32 {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return 0
}

type PlayerRestrainInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipList      []*EquipmentDataMsg `protobuf:"bytes,1,rep,name=equipList" json:"equipList,omitempty"`
	PreRealms      *int32              `protobuf:"varint,2,opt,name=preRealms" json:"preRealms,omitempty"`
	AfterRealms    *int32              `protobuf:"varint,3,opt,name=afterRealms" json:"afterRealms,omitempty"`
	PreAttribute   []*AttributeDataMsg `protobuf:"bytes,4,rep,name=preAttribute" json:"preAttribute,omitempty"`
	AfterAttribute []*AttributeDataMsg `protobuf:"bytes,5,rep,name=afterAttribute" json:"afterAttribute,omitempty"`
}

func (x *PlayerRestrainInfoMsg) Reset() {
	*x = PlayerRestrainInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRestrainInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRestrainInfoMsg) ProtoMessage() {}

func (x *PlayerRestrainInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRestrainInfoMsg.ProtoReflect.Descriptor instead.
func (*PlayerRestrainInfoMsg) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{57}
}

func (x *PlayerRestrainInfoMsg) GetEquipList() []*EquipmentDataMsg {
	if x != nil {
		return x.EquipList
	}
	return nil
}

func (x *PlayerRestrainInfoMsg) GetPreRealms() int32 {
	if x != nil && x.PreRealms != nil {
		return *x.PreRealms
	}
	return 0
}

func (x *PlayerRestrainInfoMsg) GetAfterRealms() int32 {
	if x != nil && x.AfterRealms != nil {
		return *x.AfterRealms
	}
	return 0
}

func (x *PlayerRestrainInfoMsg) GetPreAttribute() []*AttributeDataMsg {
	if x != nil {
		return x.PreAttribute
	}
	return nil
}

func (x *PlayerRestrainInfoMsg) GetAfterAttribute() []*AttributeDataMsg {
	if x != nil {
		return x.AfterAttribute
	}
	return nil
}

type AskWayConfigSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeConfig       []*AskWayTimeConfigTemp       `protobuf:"bytes,1,rep,name=timeConfig" json:"timeConfig,omitempty"`
	MatchConfig      []*AskWayMatchConfigTemp      `protobuf:"bytes,2,rep,name=matchConfig" json:"matchConfig,omitempty"`
	DivisionConfig   []*AskWayDivisionConfigTemp   `protobuf:"bytes,3,rep,name=divisionConfig" json:"divisionConfig,omitempty"`
	SettlementConfig []*AskWaySettlementConfigTemp `protobuf:"bytes,4,rep,name=settlementConfig" json:"settlementConfig,omitempty"`
}

func (x *AskWayConfigSyncMsg) Reset() {
	*x = AskWayConfigSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayConfigSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayConfigSyncMsg) ProtoMessage() {}

func (x *AskWayConfigSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayConfigSyncMsg.ProtoReflect.Descriptor instead.
func (*AskWayConfigSyncMsg) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{58}
}

func (x *AskWayConfigSyncMsg) GetTimeConfig() []*AskWayTimeConfigTemp {
	if x != nil {
		return x.TimeConfig
	}
	return nil
}

func (x *AskWayConfigSyncMsg) GetMatchConfig() []*AskWayMatchConfigTemp {
	if x != nil {
		return x.MatchConfig
	}
	return nil
}

func (x *AskWayConfigSyncMsg) GetDivisionConfig() []*AskWayDivisionConfigTemp {
	if x != nil {
		return x.DivisionConfig
	}
	return nil
}

func (x *AskWayConfigSyncMsg) GetSettlementConfig() []*AskWaySettlementConfigTemp {
	if x != nil {
		return x.SettlementConfig
	}
	return nil
}

type AskWayTimeConfigTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	TimeId     *int32 `protobuf:"varint,2,req,name=timeId" json:"timeId,omitempty"`
	Type       *int32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Session    *int32 `protobuf:"varint,4,req,name=session" json:"session,omitempty"`
	BeginDay   *int32 `protobuf:"varint,5,req,name=beginDay" json:"beginDay,omitempty"`
	BeginTime  *int32 `protobuf:"varint,6,req,name=beginTime" json:"beginTime,omitempty"`
	DurTime    *int32 `protobuf:"varint,7,req,name=durTime" json:"durTime,omitempty"`
}

func (x *AskWayTimeConfigTemp) Reset() {
	*x = AskWayTimeConfigTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayTimeConfigTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayTimeConfigTemp) ProtoMessage() {}

func (x *AskWayTimeConfigTemp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayTimeConfigTemp.ProtoReflect.Descriptor instead.
func (*AskWayTimeConfigTemp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{59}
}

func (x *AskWayTimeConfigTemp) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayTimeConfigTemp) GetTimeId() int32 {
	if x != nil && x.TimeId != nil {
		return *x.TimeId
	}
	return 0
}

func (x *AskWayTimeConfigTemp) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *AskWayTimeConfigTemp) GetSession() int32 {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return 0
}

func (x *AskWayTimeConfigTemp) GetBeginDay() int32 {
	if x != nil && x.BeginDay != nil {
		return *x.BeginDay
	}
	return 0
}

func (x *AskWayTimeConfigTemp) GetBeginTime() int32 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *AskWayTimeConfigTemp) GetDurTime() int32 {
	if x != nil && x.DurTime != nil {
		return *x.DurTime
	}
	return 0
}

type AskWayMatchConfigTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId    *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id            *int32  `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Name          *string `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	MinLevel      *int32  `protobuf:"varint,4,req,name=minLevel" json:"minLevel,omitempty"`
	MaxLevel      *int32  `protobuf:"varint,5,req,name=maxLevel" json:"maxLevel,omitempty"`
	StandardLevel *int32  `protobuf:"varint,6,req,name=standardLevel" json:"standardLevel,omitempty"`
	MinNum        *int32  `protobuf:"varint,7,req,name=minNum" json:"minNum,omitempty"`
	GroupNum      *string `protobuf:"bytes,8,req,name=groupNum" json:"groupNum,omitempty"`
}

func (x *AskWayMatchConfigTemp) Reset() {
	*x = AskWayMatchConfigTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayMatchConfigTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayMatchConfigTemp) ProtoMessage() {}

func (x *AskWayMatchConfigTemp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayMatchConfigTemp.ProtoReflect.Descriptor instead.
func (*AskWayMatchConfigTemp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{60}
}

func (x *AskWayMatchConfigTemp) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayMatchConfigTemp) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AskWayMatchConfigTemp) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AskWayMatchConfigTemp) GetMinLevel() int32 {
	if x != nil && x.MinLevel != nil {
		return *x.MinLevel
	}
	return 0
}

func (x *AskWayMatchConfigTemp) GetMaxLevel() int32 {
	if x != nil && x.MaxLevel != nil {
		return *x.MaxLevel
	}
	return 0
}

func (x *AskWayMatchConfigTemp) GetStandardLevel() int32 {
	if x != nil && x.StandardLevel != nil {
		return *x.StandardLevel
	}
	return 0
}

func (x *AskWayMatchConfigTemp) GetMinNum() int32 {
	if x != nil && x.MinNum != nil {
		return *x.MinNum
	}
	return 0
}

func (x *AskWayMatchConfigTemp) GetGroupNum() string {
	if x != nil && x.GroupNum != nil {
		return *x.GroupNum
	}
	return ""
}

type AskWayDivisionConfigTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	DivisionId   *int32  `protobuf:"varint,2,req,name=divisionId" json:"divisionId,omitempty"`
	DivisionName *string `protobuf:"bytes,3,req,name=divisionName" json:"divisionName,omitempty"`
	MinScore     *int32  `protobuf:"varint,4,req,name=minScore" json:"minScore,omitempty"`
	Reward       *string `protobuf:"bytes,5,req,name=reward" json:"reward,omitempty"`
}

func (x *AskWayDivisionConfigTemp) Reset() {
	*x = AskWayDivisionConfigTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayDivisionConfigTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayDivisionConfigTemp) ProtoMessage() {}

func (x *AskWayDivisionConfigTemp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayDivisionConfigTemp.ProtoReflect.Descriptor instead.
func (*AskWayDivisionConfigTemp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{61}
}

func (x *AskWayDivisionConfigTemp) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWayDivisionConfigTemp) GetDivisionId() int32 {
	if x != nil && x.DivisionId != nil {
		return *x.DivisionId
	}
	return 0
}

func (x *AskWayDivisionConfigTemp) GetDivisionName() string {
	if x != nil && x.DivisionName != nil {
		return *x.DivisionName
	}
	return ""
}

func (x *AskWayDivisionConfigTemp) GetMinScore() int32 {
	if x != nil && x.MinScore != nil {
		return *x.MinScore
	}
	return 0
}

func (x *AskWayDivisionConfigTemp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type AskWaySettlementConfigTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id         *int32  `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	MinScore   *int32  `protobuf:"varint,3,req,name=minScore" json:"minScore,omitempty"`
	Reward     *string `protobuf:"bytes,4,req,name=reward" json:"reward,omitempty"`
}

func (x *AskWaySettlementConfigTemp) Reset() {
	*x = AskWaySettlementConfigTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWaySettlementConfigTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWaySettlementConfigTemp) ProtoMessage() {}

func (x *AskWaySettlementConfigTemp) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWaySettlementConfigTemp.ProtoReflect.Descriptor instead.
func (*AskWaySettlementConfigTemp) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{62}
}

func (x *AskWaySettlementConfigTemp) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *AskWaySettlementConfigTemp) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AskWaySettlementConfigTemp) GetMinScore() int32 {
	if x != nil && x.MinScore != nil {
		return *x.MinScore
	}
	return 0
}

func (x *AskWaySettlementConfigTemp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type AskWayRoundGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId *int32 `protobuf:"varint,1,opt,name=roundId" json:"roundId,omitempty"`
	GroupId *int32 `protobuf:"varint,2,opt,name=groupId" json:"groupId,omitempty"`
}

func (x *AskWayRoundGroupInfo) Reset() {
	*x = AskWayRoundGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AskWay_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskWayRoundGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskWayRoundGroupInfo) ProtoMessage() {}

func (x *AskWayRoundGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AskWay_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskWayRoundGroupInfo.ProtoReflect.Descriptor instead.
func (*AskWayRoundGroupInfo) Descriptor() ([]byte, []int) {
	return file_AskWay_proto_rawDescGZIP(), []int{63}
}

func (x *AskWayRoundGroupInfo) GetRoundId() int32 {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return 0
}

func (x *AskWayRoundGroupInfo) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

var File_AskWay_proto protoreflect.FileDescriptor

var file_AskWay_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a,
	0x0e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0xcd, 0x06, 0x0a, 0x0e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73,
	0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x6f,
	0x53, 0x6b, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x74, 0x6f, 0x53, 0x6b, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x54, 0x6f,
	0x70, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x54, 0x6f,
	0x70, 0x33, 0x12, 0x53, 0x0a, 0x11, 0x74, 0x6f, 0x53, 0x6b, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x74, 0x6f, 0x53, 0x6b, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x6f, 0x53, 0x6b, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x70, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x10,
	0x74, 0x6f, 0x53, 0x6b, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x70, 0x31,
	0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x67, 0x68, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x53, 0x6b, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x6f,
	0x53, 0x6b, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x56, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x54, 0x0a, 0x0e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x0f, 0x41, 0x73, 0x6b, 0x57, 0x61,
	0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a,
	0x0f, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x77, 0x0a, 0x17, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x42, 0x75, 0x79, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x64,
	0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x68, 0x61, 0x64, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x17,
	0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x42, 0x75, 0x79, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x35, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x12, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x12,
	0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73,
	0x6b, 0x57, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x52, 0x0a, 0x14, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x14, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61, 0x6c,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x50, 0x0a,
	0x1a, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x22,
	0xaf, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x57, 0x0a, 0x1b, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1b, 0x41, 0x73,
	0x6b, 0x57, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x6b, 0x57, 0x61,
	0x79, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x75, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x37, 0x0a, 0x15, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65,
	0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x15, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x41, 0x73, 0x6b, 0x57, 0x61,
	0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x75,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x22, 0x3b, 0x0a, 0x15, 0x41, 0x73,
	0x6b, 0x57, 0x61, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x57, 0x0a, 0x19, 0x41, 0x73, 0x6b, 0x57, 0x61,
	0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xa2, 0x02, 0x0a, 0x19, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x50, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73,
	0x67, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x52, 0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x1f, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x6e, 0x0a, 0x1f,
	0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x53,
	0x6b, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x32, 0x0a, 0x10,
	0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x5f, 0x0a, 0x10, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0x56, 0x0a, 0x14, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x41, 0x73,
	0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x0e, 0x74, 0x6f, 0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x6f, 0x31, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x6f,
	0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x31, 0x22, 0x72, 0x0a, 0x18,
	0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x87, 0x01, 0x0a, 0x18, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x59, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1d, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79,
	0x54, 0x6f, 0x53, 0x6b, 0x79, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x17, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f,
	0x53, 0x6b, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x17, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82,
	0x01, 0x0a, 0x1e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x73, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1b, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x1d, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1d, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x99, 0x03, 0x0a, 0x10, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x62, 0x75, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x69, 0x65, 0x72, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x74, 0x69, 0x65, 0x72, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x65,
	0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x70, 0x0a,
	0x19, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xd6, 0x01, 0x0a, 0x1f, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4b, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75,
	0x6d, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x6b,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x75, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x75, 0x65, 0x73, 0x73,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x47, 0x65, 0x74, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x48, 0x61, 0x73, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x68, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a,
	0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x15, 0x41, 0x73, 0x6b, 0x57,
	0x61, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x16, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x08, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0x98,
	0x01, 0x0a, 0x11, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d,
	0x12, 0x41, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x22, 0x71, 0x0a, 0x0b, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4c,
	0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfc, 0x01, 0x0a,
	0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0f,
	0x54, 0x6f, 0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x48, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x74,
	0x6f, 0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x74, 0x6f, 0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x6f, 0x31, 0x22, 0x9a, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x10, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x64, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22,
	0xde, 0x02, 0x0a, 0x13, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4b, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57,
	0x61, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54,
	0x0a, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57,
	0x61, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0xd0, 0x01, 0x0a, 0x14, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x64, 0x75, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x75, 0x6d, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x6b,
	0x57, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x41,
	0x73, 0x6b, 0x57, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x2a, 0x77, 0x0a, 0x11, 0x41, 0x73, 0x6b, 0x57, 0x61,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x32, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x73, 0x6b, 0x57, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x33, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x73, 0x6b, 0x57, 0x61,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x34, 0x10, 0x03,
	0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_AskWay_proto_rawDescOnce sync.Once
	file_AskWay_proto_rawDescData = file_AskWay_proto_rawDesc
)

func file_AskWay_proto_rawDescGZIP() []byte {
	file_AskWay_proto_rawDescOnce.Do(func() {
		file_AskWay_proto_rawDescData = protoimpl.X.CompressGZIP(file_AskWay_proto_rawDescData)
	})
	return file_AskWay_proto_rawDescData
}

var file_AskWay_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_AskWay_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_AskWay_proto_goTypes = []any{
	(AskWayPosterState)(0),                  // 0: com.yq.msg.CityMsg.AskWayPosterState
	(*AskWayEnterReq)(nil),                  // 1: com.yq.msg.CityMsg.AskWayEnterReq
	(*AskWayEnterRsp)(nil),                  // 2: com.yq.msg.CityMsg.AskWayEnterRsp
	(*AskWayMatchReq)(nil),                  // 3: com.yq.msg.CityMsg.AskWayMatchReq
	(*AskWayMatchRsp)(nil),                  // 4: com.yq.msg.CityMsg.AskWayMatchRsp
	(*AskWayBattleReq)(nil),                 // 5: com.yq.msg.CityMsg.AskWayBattleReq
	(*AskWayBattleRsp)(nil),                 // 6: com.yq.msg.CityMsg.AskWayBattleRsp
	(*AskWayBuyFightTicketReq)(nil),         // 7: com.yq.msg.CityMsg.AskWayBuyFightTicketReq
	(*AskWayBuyFightTicketRsp)(nil),         // 8: com.yq.msg.CityMsg.AskWayBuyFightTicketRsp
	(*AskWayGetReportReq)(nil),              // 9: com.yq.msg.CityMsg.AskWayGetReportReq
	(*AskWayGetReportRsp)(nil),              // 10: com.yq.msg.CityMsg.AskWayGetReportRsp
	(*AskWayBattleReplyReq)(nil),            // 11: com.yq.msg.CityMsg.AskWayBattleReplyReq
	(*AskWayBattleReplyRsp)(nil),            // 12: com.yq.msg.CityMsg.AskWayBattleReplyRsp
	(*AskWayReceiveTierRewardReq)(nil),      // 13: com.yq.msg.CityMsg.AskWayReceiveTierRewardReq
	(*AskWayReceiveTierRewardRsp)(nil),      // 14: com.yq.msg.CityMsg.AskWayReceiveTierRewardRsp
	(*AskWayReceiveScoreRewardReq)(nil),     // 15: com.yq.msg.CityMsg.AskWayReceiveScoreRewardReq
	(*AskWayReceiveScoreRewardRsp)(nil),     // 16: com.yq.msg.CityMsg.AskWayReceiveScoreRewardRsp
	(*AskWayGetGuessInfoReq)(nil),           // 17: com.yq.msg.CityMsg.AskWayGetGuessInfoReq
	(*AskWayGetGuessInfoRsp)(nil),           // 18: com.yq.msg.CityMsg.AskWayGetGuessInfoRsp
	(*AskWayGetGuessCoinReq)(nil),           // 19: com.yq.msg.CityMsg.AskWayGetGuessCoinReq
	(*AskWayGetGuessCoinRsp)(nil),           // 20: com.yq.msg.CityMsg.AskWayGetGuessCoinRsp
	(*AskWayToSkyGuessReq)(nil),             // 21: com.yq.msg.CityMsg.AskWayToSkyGuessReq
	(*AskWayToSkyGuessRsp)(nil),             // 22: com.yq.msg.CityMsg.AskWayToSkyGuessRsp
	(*AskWaySyncGuessReward)(nil),           // 23: com.yq.msg.CityMsg.AskWaySyncGuessReward
	(*AskWayToSkyBattleReplyReq)(nil),       // 24: com.yq.msg.CityMsg.AskWayToSkyBattleReplyReq
	(*AskWayToSkyBattleReplyRsp)(nil),       // 25: com.yq.msg.CityMsg.AskWayToSkyBattleReplyRsp
	(*AskWayReceiveToSkyRankRewardReq)(nil), // 26: com.yq.msg.CityMsg.AskWayReceiveToSkyRankRewardReq
	(*AskWayReceiveToSkyRankRewardRsp)(nil), // 27: com.yq.msg.CityMsg.AskWayReceiveToSkyRankRewardRsp
	(*AskWayWorshipReq)(nil),                // 28: com.yq.msg.CityMsg.AskWayWorshipReq
	(*AskWayWorshipRsp)(nil),                // 29: com.yq.msg.CityMsg.AskWayWorshipRsp
	(*AskWayToSkyRosterReq)(nil),            // 30: com.yq.msg.CityMsg.AskWayToSkyRosterReq
	(*AskWayToSkyRosterRsp)(nil),            // 31: com.yq.msg.CityMsg.AskWayToSkyRosterRsp
	(*AskWayGetPlayerDetailReq)(nil),        // 32: com.yq.msg.CityMsg.AskWayGetPlayerDetailReq
	(*AskWayGetPlayerDetailRsp)(nil),        // 33: com.yq.msg.CityMsg.AskWayGetPlayerDetailRsp
	(*AskWayToSkyGetBattleResultReq)(nil),   // 34: com.yq.msg.CityMsg.AskWayToSkyGetBattleResultReq
	(*AskWayToSkyGetBattleResultRsp)(nil),   // 35: com.yq.msg.CityMsg.AskWayToSkyGetBattleResultRsp
	(*AskWayToSkyGetReportReq)(nil),         // 36: com.yq.msg.CityMsg.AskWayToSkyGetReportReq
	(*AskWayToSkyGetReportRsp)(nil),         // 37: com.yq.msg.CityMsg.AskWayToSkyGetReportRsp
	(*AskWayGetPlayerRestrainDataReq)(nil),  // 38: com.yq.msg.CityMsg.AskWayGetPlayerRestrainDataReq
	(*AskWayGetGetCurStateInfoReq)(nil),     // 39: com.yq.msg.CityMsg.AskWayGetGetCurStateInfoReq
	(*AskWayGetGetCurStateInfoRsp)(nil),     // 40: com.yq.msg.CityMsg.AskWayGetGetCurStateInfoRsp
	(*AskWayCancelReportRedPointReq)(nil),   // 41: com.yq.msg.CityMsg.AskWayCancelReportRedPointReq
	(*AskWayCancelReportRedPointRsp)(nil),   // 42: com.yq.msg.CityMsg.AskWayCancelReportRedPointRsp
	(*AskWayPlayerInfo)(nil),                // 43: com.yq.msg.CityMsg.AskWayPlayerInfo
	(*AskWayPlayerChallengeInfo)(nil),       // 44: com.yq.msg.CityMsg.AskWayPlayerChallengeInfo
	(*AskWayPlayerChallengePlayerInfo)(nil), // 45: com.yq.msg.CityMsg.AskWayPlayerChallengePlayerInfo
	(*CompetitionGroupInfo)(nil),            // 46: com.yq.msg.CityMsg.competitionGroupInfo
	(*AskWayToSkyInfo)(nil),                 // 47: com.yq.msg.CityMsg.AskWayToSkyInfo
	(*AskWayBattleResultMsg)(nil),           // 48: com.yq.msg.CityMsg.AskWayBattleResultMsg
	(*AskWayBattleReportInfo)(nil),          // 49: com.yq.msg.CityMsg.AskWayBattleReportInfo
	(*PlayerLogInfoMsg)(nil),                // 50: com.yq.msg.CityMsg.PlayerLogInfoMsg
	(*ToSkyBattleResult)(nil),               // 51: com.yq.msg.CityMsg.ToSkyBattleResult
	(*RoundResult)(nil),                     // 52: com.yq.msg.CityMsg.RoundResult
	(*BattleResult)(nil),                    // 53: com.yq.msg.CityMsg.BattleResult
	(*ToSkyPlayerInfo)(nil),                 // 54: com.yq.msg.CityMsg.ToSkyPlayerInfo
	(*LockRoster)(nil),                      // 55: com.yq.msg.CityMsg.LockRoster
	(*RosterShowMsg)(nil),                   // 56: com.yq.msg.CityMsg.RosterShowMsg
	(*PlayerGuessInfoMsg)(nil),              // 57: com.yq.msg.CityMsg.PlayerGuessInfoMsg
	(*PlayerRestrainInfoMsg)(nil),           // 58: com.yq.msg.CityMsg.PlayerRestrainInfoMsg
	(*AskWayConfigSyncMsg)(nil),             // 59: com.yq.msg.CityMsg.AskWayConfigSyncMsg
	(*AskWayTimeConfigTemp)(nil),            // 60: com.yq.msg.CityMsg.AskWayTimeConfigTemp
	(*AskWayMatchConfigTemp)(nil),           // 61: com.yq.msg.CityMsg.AskWayMatchConfigTemp
	(*AskWayDivisionConfigTemp)(nil),        // 62: com.yq.msg.CityMsg.AskWayDivisionConfigTemp
	(*AskWaySettlementConfigTemp)(nil),      // 63: com.yq.msg.CityMsg.AskWaySettlementConfigTemp
	(*AskWayRoundGroupInfo)(nil),            // 64: com.yq.msg.CityMsg.AskWayRoundGroupInfo
	(*RankMsg)(nil),                         // 65: com.yq.msg.CityMsg.RankMsg
	(*AwardInfoList)(nil),                   // 66: com.yq.msg.CityMsg.AwardInfoList
	(*BattleRecordMsg)(nil),                 // 67: com.yq.msg.CityMsg.BattleRecordMsg
	(*PlayerHeadAndNameMsg)(nil),            // 68: com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	(*PlayerDetailDataMsg)(nil),             // 69: com.yq.msg.CityMsg.PlayerDetailDataMsg
	(*AttributeDataMsg)(nil),                // 70: com.yq.msg.CityMsg.AttributeDataMsg
	(*PlayerAppearanceDataMsg)(nil),         // 71: com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	(*PlayerHeadDataMsg)(nil),               // 72: com.yq.msg.CityMsg.PlayerHeadDataMsg
	(*EquipmentDataMsg)(nil),                // 73: com.yq.msg.CityMsg.EquipmentDataMsg
}
var file_AskWay_proto_depIdxs = []int32{
	43, // 0: com.yq.msg.CityMsg.AskWayEnterRsp.playerData:type_name -> com.yq.msg.CityMsg.AskWayPlayerInfo
	47, // 1: com.yq.msg.CityMsg.AskWayEnterRsp.toSkyInfo:type_name -> com.yq.msg.CityMsg.AskWayToSkyInfo
	46, // 2: com.yq.msg.CityMsg.AskWayEnterRsp.competitionGroup:type_name -> com.yq.msg.CityMsg.competitionGroupInfo
	65, // 3: com.yq.msg.CityMsg.AskWayEnterRsp.rankMsgTop3:type_name -> com.yq.msg.CityMsg.RankMsg
	51, // 4: com.yq.msg.CityMsg.AskWayEnterRsp.toSkyBattleResult:type_name -> com.yq.msg.CityMsg.ToSkyBattleResult
	65, // 5: com.yq.msg.CityMsg.AskWayEnterRsp.toSkyRankMsgTop1:type_name -> com.yq.msg.CityMsg.RankMsg
	57, // 6: com.yq.msg.CityMsg.AskWayEnterRsp.playerGuessInfoArr:type_name -> com.yq.msg.CityMsg.PlayerGuessInfoMsg
	58, // 7: com.yq.msg.CityMsg.AskWayEnterRsp.restrainData:type_name -> com.yq.msg.CityMsg.PlayerRestrainInfoMsg
	43, // 8: com.yq.msg.CityMsg.AskWayMatchRsp.playerInfo:type_name -> com.yq.msg.CityMsg.AskWayPlayerInfo
	66, // 9: com.yq.msg.CityMsg.AskWayMatchRsp.cost:type_name -> com.yq.msg.CityMsg.AwardInfoList
	66, // 10: com.yq.msg.CityMsg.AskWayBattleRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	43, // 11: com.yq.msg.CityMsg.AskWayBattleRsp.playerInfo:type_name -> com.yq.msg.CityMsg.AskWayPlayerInfo
	48, // 12: com.yq.msg.CityMsg.AskWayBattleRsp.battleResult:type_name -> com.yq.msg.CityMsg.AskWayBattleResultMsg
	43, // 13: com.yq.msg.CityMsg.AskWayBuyFightTicketRsp.playerInfo:type_name -> com.yq.msg.CityMsg.AskWayPlayerInfo
	66, // 14: com.yq.msg.CityMsg.AskWayBuyFightTicketRsp.cost:type_name -> com.yq.msg.CityMsg.AwardInfoList
	49, // 15: com.yq.msg.CityMsg.AskWayGetReportRsp.reportList:type_name -> com.yq.msg.CityMsg.AskWayBattleReportInfo
	67, // 16: com.yq.msg.CityMsg.AskWayBattleReplyRsp.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	66, // 17: com.yq.msg.CityMsg.AskWayReceiveTierRewardRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	43, // 18: com.yq.msg.CityMsg.AskWayReceiveTierRewardRsp.playerInfo:type_name -> com.yq.msg.CityMsg.AskWayPlayerInfo
	66, // 19: com.yq.msg.CityMsg.AskWayReceiveScoreRewardRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	57, // 20: com.yq.msg.CityMsg.AskWayGetGuessInfoRsp.playerGuessInfoArr:type_name -> com.yq.msg.CityMsg.PlayerGuessInfoMsg
	57, // 21: com.yq.msg.CityMsg.AskWayToSkyGuessRsp.playerGuessInfoArr:type_name -> com.yq.msg.CityMsg.PlayerGuessInfoMsg
	67, // 22: com.yq.msg.CityMsg.AskWayToSkyBattleReplyRsp.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	68, // 23: com.yq.msg.CityMsg.AskWayToSkyBattleReplyRsp.leftPlayerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	68, // 24: com.yq.msg.CityMsg.AskWayToSkyBattleReplyRsp.rightPlayerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	66, // 25: com.yq.msg.CityMsg.AskWayReceiveToSkyRankRewardRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	66, // 26: com.yq.msg.CityMsg.AskWayWorshipRsp.reward:type_name -> com.yq.msg.CityMsg.AwardInfoList
	55, // 27: com.yq.msg.CityMsg.AskWayToSkyRosterRsp.toSkyPlayerNo1:type_name -> com.yq.msg.CityMsg.LockRoster
	69, // 28: com.yq.msg.CityMsg.AskWayGetPlayerDetailRsp.playerDetailDataMsg:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	51, // 29: com.yq.msg.CityMsg.AskWayToSkyGetBattleResultRsp.battleResult:type_name -> com.yq.msg.CityMsg.ToSkyBattleResult
	53, // 30: com.yq.msg.CityMsg.AskWayToSkyGetReportRsp.battleResult:type_name -> com.yq.msg.CityMsg.BattleResult
	0,  // 31: com.yq.msg.CityMsg.AskWayGetGetCurStateInfoRsp.state:type_name -> com.yq.msg.CityMsg.AskWayPosterState
	49, // 32: com.yq.msg.CityMsg.AskWayCancelReportRedPointRsp.reportInfo:type_name -> com.yq.msg.CityMsg.AskWayBattleReportInfo
	44, // 33: com.yq.msg.CityMsg.AskWayPlayerInfo.challengeInfo:type_name -> com.yq.msg.CityMsg.AskWayPlayerChallengeInfo
	45, // 34: com.yq.msg.CityMsg.AskWayPlayerChallengeInfo.playerList:type_name -> com.yq.msg.CityMsg.AskWayPlayerChallengePlayerInfo
	70, // 35: com.yq.msg.CityMsg.AskWayPlayerChallengePlayerInfo.attributeData:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	71, // 36: com.yq.msg.CityMsg.AskWayPlayerChallengePlayerInfo.targetInfo:type_name -> com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	64, // 37: com.yq.msg.CityMsg.AskWayToSkyInfo.roundGroupInfoList:type_name -> com.yq.msg.CityMsg.AskWayRoundGroupInfo
	67, // 38: com.yq.msg.CityMsg.AskWayBattleResultMsg.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	68, // 39: com.yq.msg.CityMsg.AskWayBattleResultMsg.targetPlayerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	50, // 40: com.yq.msg.CityMsg.AskWayBattleReportInfo.attacker:type_name -> com.yq.msg.CityMsg.PlayerLogInfoMsg
	50, // 41: com.yq.msg.CityMsg.AskWayBattleReportInfo.defender:type_name -> com.yq.msg.CityMsg.PlayerLogInfoMsg
	68, // 42: com.yq.msg.CityMsg.PlayerLogInfoMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	52, // 43: com.yq.msg.CityMsg.ToSkyBattleResult.roundResult:type_name -> com.yq.msg.CityMsg.RoundResult
	53, // 44: com.yq.msg.CityMsg.RoundResult.battleResultList:type_name -> com.yq.msg.CityMsg.BattleResult
	54, // 45: com.yq.msg.CityMsg.BattleResult.leftPlayerInfo:type_name -> com.yq.msg.CityMsg.ToSkyPlayerInfo
	54, // 46: com.yq.msg.CityMsg.BattleResult.rightPlayerInfo:type_name -> com.yq.msg.CityMsg.ToSkyPlayerInfo
	68, // 47: com.yq.msg.CityMsg.ToSkyPlayerInfo.playerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	56, // 48: com.yq.msg.CityMsg.LockRoster.toSkyPlayerNo1:type_name -> com.yq.msg.CityMsg.RosterShowMsg
	72, // 49: com.yq.msg.CityMsg.RosterShowMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	54, // 50: com.yq.msg.CityMsg.PlayerGuessInfoMsg.playerInfo:type_name -> com.yq.msg.CityMsg.ToSkyPlayerInfo
	73, // 51: com.yq.msg.CityMsg.PlayerRestrainInfoMsg.equipList:type_name -> com.yq.msg.CityMsg.EquipmentDataMsg
	70, // 52: com.yq.msg.CityMsg.PlayerRestrainInfoMsg.preAttribute:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	70, // 53: com.yq.msg.CityMsg.PlayerRestrainInfoMsg.afterAttribute:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	60, // 54: com.yq.msg.CityMsg.AskWayConfigSyncMsg.timeConfig:type_name -> com.yq.msg.CityMsg.AskWayTimeConfigTemp
	61, // 55: com.yq.msg.CityMsg.AskWayConfigSyncMsg.matchConfig:type_name -> com.yq.msg.CityMsg.AskWayMatchConfigTemp
	62, // 56: com.yq.msg.CityMsg.AskWayConfigSyncMsg.divisionConfig:type_name -> com.yq.msg.CityMsg.AskWayDivisionConfigTemp
	63, // 57: com.yq.msg.CityMsg.AskWayConfigSyncMsg.settlementConfig:type_name -> com.yq.msg.CityMsg.AskWaySettlementConfigTemp
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_AskWay_proto_init() }
func file_AskWay_proto_init() {
	if File_AskWay_proto != nil {
		return
	}
	file_Battle_proto_init()
	file_Common_proto_init()
	file_Rank_proto_init()
	file_WatchPlayer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_AskWay_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayEnterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayEnterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBattleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBattleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBuyFightTicketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBuyFightTicketRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetReportRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBattleReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBattleReplyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayReceiveTierRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayReceiveTierRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayReceiveScoreRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayReceiveScoreRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetGuessInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetGuessInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetGuessCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetGuessCoinRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyGuessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyGuessRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AskWaySyncGuessReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyBattleReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyBattleReplyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayReceiveToSkyRankRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayReceiveToSkyRankRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayWorshipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayWorshipRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyRosterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyRosterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetPlayerDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetPlayerDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyGetBattleResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyGetBattleResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyGetReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyGetReportRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetPlayerRestrainDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetGetCurStateInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayGetGetCurStateInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayCancelReportRedPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayCancelReportRedPointRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayPlayerChallengeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayPlayerChallengePlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CompetitionGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayToSkyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBattleResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayBattleReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerLogInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ToSkyBattleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*RoundResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*BattleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*ToSkyPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*LockRoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*RosterShowMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerGuessInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerRestrainInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayConfigSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayTimeConfigTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayMatchConfigTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayDivisionConfigTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*AskWaySettlementConfigTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AskWay_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*AskWayRoundGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AskWay_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_AskWay_proto_goTypes,
		DependencyIndexes: file_AskWay_proto_depIdxs,
		EnumInfos:         file_AskWay_proto_enumTypes,
		MessageInfos:      file_AskWay_proto_msgTypes,
	}.Build()
	File_AskWay_proto = out.File
	file_AskWay_proto_rawDesc = nil
	file_AskWay_proto_goTypes = nil
	file_AskWay_proto_depIdxs = nil
}
