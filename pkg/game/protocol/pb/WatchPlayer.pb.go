// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: WatchPlayer.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerCharacterImageMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBaseDataMsg       *PlayerBaseDataMsg `protobuf:"bytes,1,opt,name=playerBaseDataMsg" json:"playerBaseDataMsg,omitempty"`
	EquipCloudId            *int32             `protobuf:"varint,2,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	EquipPetConfigId        *int32             `protobuf:"varint,3,opt,name=equipPetConfigId" json:"equipPetConfigId,omitempty"`
	PetSoulShapeLv          *int32             `protobuf:"varint,4,opt,name=petSoulShapeLv" json:"petSoulShapeLv,omitempty"`
	AssistantPetConfigId    *int32             `protobuf:"varint,5,opt,name=assistantPetConfigId" json:"assistantPetConfigId,omitempty"`
	AssistantPetSoulShapeLv *int32             `protobuf:"varint,6,opt,name=assistantPetSoulShapeLv" json:"assistantPetSoulShapeLv,omitempty"`
	PetLinkageId            *int32             `protobuf:"varint,7,opt,name=petLinkageId" json:"petLinkageId,omitempty"`
}

func (x *PlayerCharacterImageMsg) Reset() {
	*x = PlayerCharacterImageMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCharacterImageMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCharacterImageMsg) ProtoMessage() {}

func (x *PlayerCharacterImageMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCharacterImageMsg.ProtoReflect.Descriptor instead.
func (*PlayerCharacterImageMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerCharacterImageMsg) GetPlayerBaseDataMsg() *PlayerBaseDataMsg {
	if x != nil {
		return x.PlayerBaseDataMsg
	}
	return nil
}

func (x *PlayerCharacterImageMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *PlayerCharacterImageMsg) GetEquipPetConfigId() int32 {
	if x != nil && x.EquipPetConfigId != nil {
		return *x.EquipPetConfigId
	}
	return 0
}

func (x *PlayerCharacterImageMsg) GetPetSoulShapeLv() int32 {
	if x != nil && x.PetSoulShapeLv != nil {
		return *x.PetSoulShapeLv
	}
	return 0
}

func (x *PlayerCharacterImageMsg) GetAssistantPetConfigId() int32 {
	if x != nil && x.AssistantPetConfigId != nil {
		return *x.AssistantPetConfigId
	}
	return 0
}

func (x *PlayerCharacterImageMsg) GetAssistantPetSoulShapeLv() int32 {
	if x != nil && x.AssistantPetSoulShapeLv != nil {
		return *x.AssistantPetSoulShapeLv
	}
	return 0
}

func (x *PlayerCharacterImageMsg) GetPetLinkageId() int32 {
	if x != nil && x.PetLinkageId != nil {
		return *x.PetLinkageId
	}
	return 0
}

type GetPlayerDetailDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId *int64 `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
}

func (x *GetPlayerDetailDataReq) Reset() {
	*x = GetPlayerDetailDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerDetailDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerDetailDataReq) ProtoMessage() {}

func (x *GetPlayerDetailDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerDetailDataReq.ProtoReflect.Descriptor instead.
func (*GetPlayerDetailDataReq) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{1}
}

func (x *GetPlayerDetailDataReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GetPlayerDetailDataReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type GetPlayerDetailDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32               `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerDetailDataMsg *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=playerDetailDataMsg" json:"playerDetailDataMsg,omitempty"`
}

func (x *GetPlayerDetailDataResp) Reset() {
	*x = GetPlayerDetailDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerDetailDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerDetailDataResp) ProtoMessage() {}

func (x *GetPlayerDetailDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerDetailDataResp.ProtoReflect.Descriptor instead.
func (*GetPlayerDetailDataResp) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{2}
}

func (x *GetPlayerDetailDataResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetPlayerDetailDataResp) GetPlayerDetailDataMsg() *PlayerDetailDataMsg {
	if x != nil {
		return x.PlayerDetailDataMsg
	}
	return nil
}

type PlayerShowInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadInfo     *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=headInfo" json:"headInfo,omitempty"`
	NickName     *string               `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	RealmsId     *int32                `protobuf:"varint,3,opt,name=realmsId" json:"realmsId,omitempty"`
	FightValue   *int64                `protobuf:"varint,4,opt,name=fightValue" json:"fightValue,omitempty"`
	EquipCloudId *int32                `protobuf:"varint,5,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
}

func (x *PlayerShowInfoMsg) Reset() {
	*x = PlayerShowInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerShowInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerShowInfoMsg) ProtoMessage() {}

func (x *PlayerShowInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerShowInfoMsg.ProtoReflect.Descriptor instead.
func (*PlayerShowInfoMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerShowInfoMsg) GetHeadInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *PlayerShowInfoMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *PlayerShowInfoMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *PlayerShowInfoMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *PlayerShowInfoMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

type PlayerHeadDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId           *int64  `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	ServerId           *int32  `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
	HeadIcon           *int32  `protobuf:"varint,3,opt,name=headIcon" json:"headIcon,omitempty"`
	WxHeadUrl          *string `protobuf:"bytes,4,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	EquipHeadIconFrame *int32  `protobuf:"varint,5,opt,name=equipHeadIconFrame" json:"equipHeadIconFrame,omitempty"`
}

func (x *PlayerHeadDataMsg) Reset() {
	*x = PlayerHeadDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHeadDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHeadDataMsg) ProtoMessage() {}

func (x *PlayerHeadDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHeadDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerHeadDataMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerHeadDataMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerHeadDataMsg) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *PlayerHeadDataMsg) GetHeadIcon() int32 {
	if x != nil && x.HeadIcon != nil {
		return *x.HeadIcon
	}
	return 0
}

func (x *PlayerHeadDataMsg) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *PlayerHeadDataMsg) GetEquipHeadIconFrame() int32 {
	if x != nil && x.EquipHeadIconFrame != nil {
		return *x.EquipHeadIconFrame
	}
	return 0
}

type PlayerHeadAndNameMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadInfo *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=headInfo" json:"headInfo,omitempty"`
	NickName *string            `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
}

func (x *PlayerHeadAndNameMsg) Reset() {
	*x = PlayerHeadAndNameMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHeadAndNameMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHeadAndNameMsg) ProtoMessage() {}

func (x *PlayerHeadAndNameMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHeadAndNameMsg.ProtoReflect.Descriptor instead.
func (*PlayerHeadAndNameMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerHeadAndNameMsg) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *PlayerHeadAndNameMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

type PlayerHeadAndFightMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadInfo   *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=headInfo" json:"headInfo,omitempty"`
	FightValue *int64                `protobuf:"varint,2,opt,name=fightValue" json:"fightValue,omitempty"`
}

func (x *PlayerHeadAndFightMsg) Reset() {
	*x = PlayerHeadAndFightMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHeadAndFightMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHeadAndFightMsg) ProtoMessage() {}

func (x *PlayerHeadAndFightMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHeadAndFightMsg.ProtoReflect.Descriptor instead.
func (*PlayerHeadAndFightMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerHeadAndFightMsg) GetHeadInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *PlayerHeadAndFightMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

type PlayerAppearanceDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       *int64  `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	NickName       *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	RealmsId       *int32  `protobuf:"varint,3,opt,name=realmsId" json:"realmsId,omitempty"`
	FightValue     *string `protobuf:"bytes,4,opt,name=fightValue" json:"fightValue,omitempty"`
	AppearanceId   *int32  `protobuf:"varint,5,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId   *int32  `protobuf:"varint,6,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	ServerId       *int64  `protobuf:"varint,7,opt,name=serverId" json:"serverId,omitempty"`
	EquipPetId     *int32  `protobuf:"varint,8,opt,name=equipPetId" json:"equipPetId,omitempty"`
	PetSoulShapeLv *int32  `protobuf:"varint,9,opt,name=petSoulShapeLv" json:"petSoulShapeLv,omitempty"`
	PetLinkageId   *int32  `protobuf:"varint,10,opt,name=petLinkageId" json:"petLinkageId,omitempty"`
}

func (x *PlayerAppearanceDataMsg) Reset() {
	*x = PlayerAppearanceDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAppearanceDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAppearanceDataMsg) ProtoMessage() {}

func (x *PlayerAppearanceDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAppearanceDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerAppearanceDataMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{7}
}

func (x *PlayerAppearanceDataMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerAppearanceDataMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *PlayerAppearanceDataMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *PlayerAppearanceDataMsg) GetFightValue() string {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return ""
}

func (x *PlayerAppearanceDataMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *PlayerAppearanceDataMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *PlayerAppearanceDataMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *PlayerAppearanceDataMsg) GetEquipPetId() int32 {
	if x != nil && x.EquipPetId != nil {
		return *x.EquipPetId
	}
	return 0
}

func (x *PlayerAppearanceDataMsg) GetPetSoulShapeLv() int32 {
	if x != nil && x.PetSoulShapeLv != nil {
		return *x.PetSoulShapeLv
	}
	return 0
}

func (x *PlayerAppearanceDataMsg) GetPetLinkageId() int32 {
	if x != nil && x.PetLinkageId != nil {
		return *x.PetLinkageId
	}
	return 0
}

type GetTopPlayerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTopPlayerInfoReq) Reset() {
	*x = GetTopPlayerInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopPlayerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopPlayerInfoReq) ProtoMessage() {}

func (x *GetTopPlayerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopPlayerInfoReq.ProtoReflect.Descriptor instead.
func (*GetTopPlayerInfoReq) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{8}
}

type GetTopPlayerInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerList []*PlayerCharacterImageMsg `protobuf:"bytes,2,rep,name=playerList" json:"playerList,omitempty"`
}

func (x *GetTopPlayerInfoResp) Reset() {
	*x = GetTopPlayerInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopPlayerInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopPlayerInfoResp) ProtoMessage() {}

func (x *GetTopPlayerInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopPlayerInfoResp.ProtoReflect.Descriptor instead.
func (*GetTopPlayerInfoResp) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{9}
}

func (x *GetTopPlayerInfoResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetTopPlayerInfoResp) GetPlayerList() []*PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type PlayerRankDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *int64  `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	NickName     *string `protobuf:"bytes,2,req,name=nickName" json:"nickName,omitempty"`
	RealmsId     *int32  `protobuf:"varint,3,req,name=realmsId" json:"realmsId,omitempty"`
	FightValue   *string `protobuf:"bytes,4,opt,name=fightValue" json:"fightValue,omitempty"`
	AppearanceId *int32  `protobuf:"varint,5,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId *int32  `protobuf:"varint,6,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	ServerId     *int64  `protobuf:"varint,7,opt,name=serverId" json:"serverId,omitempty"`
	EquipPetId   *int32  `protobuf:"varint,8,opt,name=equipPetId" json:"equipPetId,omitempty"`
	HeadIcon     *int32  `protobuf:"varint,9,opt,name=headIcon" json:"headIcon,omitempty"`
}

func (x *PlayerRankDataMsg) Reset() {
	*x = PlayerRankDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRankDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRankDataMsg) ProtoMessage() {}

func (x *PlayerRankDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRankDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerRankDataMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerRankDataMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerRankDataMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *PlayerRankDataMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *PlayerRankDataMsg) GetFightValue() string {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return ""
}

func (x *PlayerRankDataMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *PlayerRankDataMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *PlayerRankDataMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *PlayerRankDataMsg) GetEquipPetId() int32 {
	if x != nil && x.EquipPetId != nil {
		return *x.EquipPetId
	}
	return 0
}

func (x *PlayerRankDataMsg) GetHeadIcon() int32 {
	if x != nil && x.HeadIcon != nil {
		return *x.HeadIcon
	}
	return 0
}

type GetPlayerDetailDataWithGodBodyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId *int64 `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
}

func (x *GetPlayerDetailDataWithGodBodyReq) Reset() {
	*x = GetPlayerDetailDataWithGodBodyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerDetailDataWithGodBodyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerDetailDataWithGodBodyReq) ProtoMessage() {}

func (x *GetPlayerDetailDataWithGodBodyReq) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerDetailDataWithGodBodyReq.ProtoReflect.Descriptor instead.
func (*GetPlayerDetailDataWithGodBodyReq) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{11}
}

func (x *GetPlayerDetailDataWithGodBodyReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GetPlayerDetailDataWithGodBodyReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type GetPlayerDetailDataWithGodBodyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                            *int32                          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerDetailDataWithGodBodyMsg *PlayerDetailDataWithGodBodyMsg `protobuf:"bytes,2,opt,name=playerDetailDataWithGodBodyMsg" json:"playerDetailDataWithGodBodyMsg,omitempty"`
}

func (x *GetPlayerDetailDataWithGodBodyResp) Reset() {
	*x = GetPlayerDetailDataWithGodBodyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerDetailDataWithGodBodyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerDetailDataWithGodBodyResp) ProtoMessage() {}

func (x *GetPlayerDetailDataWithGodBodyResp) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerDetailDataWithGodBodyResp.ProtoReflect.Descriptor instead.
func (*GetPlayerDetailDataWithGodBodyResp) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{12}
}

func (x *GetPlayerDetailDataWithGodBodyResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetPlayerDetailDataWithGodBodyResp) GetPlayerDetailDataWithGodBodyMsg() *PlayerDetailDataWithGodBodyMsg {
	if x != nil {
		return x.PlayerDetailDataWithGodBodyMsg
	}
	return nil
}

type PlayerDetailDataWithGodBodyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurUsed                    *int32                        `protobuf:"varint,1,opt,name=curUsed" json:"curUsed,omitempty"`
	Embattle                   []int32                       `protobuf:"varint,2,rep,name=embattle" json:"embattle,omitempty"`
	BattleMainArr              []*PlayerGodBodyBattleMainMsg `protobuf:"bytes,3,rep,name=battleMainArr" json:"battleMainArr,omitempty"`
	PlayerGodBodyDetailDataMsg *PlayerGodBodyDetailDataMsg   `protobuf:"bytes,4,opt,name=playerGodBodyDetailDataMsg" json:"playerGodBodyDetailDataMsg,omitempty"`
}

func (x *PlayerDetailDataWithGodBodyMsg) Reset() {
	*x = PlayerDetailDataWithGodBodyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDetailDataWithGodBodyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDetailDataWithGodBodyMsg) ProtoMessage() {}

func (x *PlayerDetailDataWithGodBodyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDetailDataWithGodBodyMsg.ProtoReflect.Descriptor instead.
func (*PlayerDetailDataWithGodBodyMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerDetailDataWithGodBodyMsg) GetCurUsed() int32 {
	if x != nil && x.CurUsed != nil {
		return *x.CurUsed
	}
	return 0
}

func (x *PlayerDetailDataWithGodBodyMsg) GetEmbattle() []int32 {
	if x != nil {
		return x.Embattle
	}
	return nil
}

func (x *PlayerDetailDataWithGodBodyMsg) GetBattleMainArr() []*PlayerGodBodyBattleMainMsg {
	if x != nil {
		return x.BattleMainArr
	}
	return nil
}

func (x *PlayerDetailDataWithGodBodyMsg) GetPlayerGodBodyDetailDataMsg() *PlayerGodBodyDetailDataMsg {
	if x != nil {
		return x.PlayerGodBodyDetailDataMsg
	}
	return nil
}

type PlayerGodBodyBattleMainMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleMainStr *string `protobuf:"bytes,1,opt,name=battleMainStr" json:"battleMainStr,omitempty"`
	Index         *int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (x *PlayerGodBodyBattleMainMsg) Reset() {
	*x = PlayerGodBodyBattleMainMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGodBodyBattleMainMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGodBodyBattleMainMsg) ProtoMessage() {}

func (x *PlayerGodBodyBattleMainMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGodBodyBattleMainMsg.ProtoReflect.Descriptor instead.
func (*PlayerGodBodyBattleMainMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{14}
}

func (x *PlayerGodBodyBattleMainMsg) GetBattleMainStr() string {
	if x != nil && x.BattleMainStr != nil {
		return *x.BattleMainStr
	}
	return ""
}

func (x *PlayerGodBodyBattleMainMsg) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type PlayerGodBodyDetailDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                  *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	OtherSeparationData  []*SeparationDataMsg       `protobuf:"bytes,2,rep,name=otherSeparationData" json:"otherSeparationData,omitempty"`
	MagicDataList        []*MagicDataMsg            `protobuf:"bytes,3,rep,name=MagicDataList" json:"MagicDataList,omitempty"`
	PetDataList          []*PetDataMsg              `protobuf:"bytes,4,rep,name=petDataList" json:"petDataList,omitempty"`
	SpiritDataList       []*SpiritDataMsg           `protobuf:"bytes,5,rep,name=spiritDataList" json:"spiritDataList,omitempty"`
	EquipmentAdvanceData *EquipmentAdvanceDataMsg   `protobuf:"bytes,6,opt,name=equipmentAdvanceData" json:"equipmentAdvanceData,omitempty"`
	CloudDataList        []*PlayerEquipCloudDataMsg `protobuf:"bytes,7,rep,name=cloudDataList" json:"cloudDataList,omitempty"`
}

func (x *PlayerGodBodyDetailDataMsg) Reset() {
	*x = PlayerGodBodyDetailDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGodBodyDetailDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGodBodyDetailDataMsg) ProtoMessage() {}

func (x *PlayerGodBodyDetailDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGodBodyDetailDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerGodBodyDetailDataMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerGodBodyDetailDataMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *PlayerGodBodyDetailDataMsg) GetOtherSeparationData() []*SeparationDataMsg {
	if x != nil {
		return x.OtherSeparationData
	}
	return nil
}

func (x *PlayerGodBodyDetailDataMsg) GetMagicDataList() []*MagicDataMsg {
	if x != nil {
		return x.MagicDataList
	}
	return nil
}

func (x *PlayerGodBodyDetailDataMsg) GetPetDataList() []*PetDataMsg {
	if x != nil {
		return x.PetDataList
	}
	return nil
}

func (x *PlayerGodBodyDetailDataMsg) GetSpiritDataList() []*SpiritDataMsg {
	if x != nil {
		return x.SpiritDataList
	}
	return nil
}

func (x *PlayerGodBodyDetailDataMsg) GetEquipmentAdvanceData() *EquipmentAdvanceDataMsg {
	if x != nil {
		return x.EquipmentAdvanceData
	}
	return nil
}

func (x *PlayerGodBodyDetailDataMsg) GetCloudDataList() []*PlayerEquipCloudDataMsg {
	if x != nil {
		return x.CloudDataList
	}
	return nil
}

type GodBodyDetailDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                  *int32                            `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	SeparationData       []*SeparationDataMsg              `protobuf:"bytes,2,rep,name=separationData" json:"separationData,omitempty"`
	MagicDataList        []*MagicDataMsg                   `protobuf:"bytes,3,rep,name=MagicDataList" json:"MagicDataList,omitempty"`
	PetDataList          []*PetDataMsg                     `protobuf:"bytes,4,rep,name=petDataList" json:"petDataList,omitempty"`
	SpiritDataList       []*SpiritDataMsg                  `protobuf:"bytes,5,rep,name=spiritDataList" json:"spiritDataList,omitempty"`
	EquipmentAdvanceData *EquipmentAdvanceDataMsg          `protobuf:"bytes,6,opt,name=equipmentAdvanceData" json:"equipmentAdvanceData,omitempty"`
	CloudDataList        []*PlayerEquipCloudDataMsg        `protobuf:"bytes,7,rep,name=cloudDataList" json:"cloudDataList,omitempty"`
	WorldRuleDataMsg     *WorldRulePlayerDataMsg           `protobuf:"bytes,8,opt,name=worldRuleDataMsg" json:"worldRuleDataMsg,omitempty"`
	MagicTreasureData    *PlayerDetailDataMagicTreasureMsg `protobuf:"bytes,9,opt,name=magicTreasureData" json:"magicTreasureData,omitempty"`
	TalentCreateLevel    *int32                            `protobuf:"varint,12,req,name=talentCreateLevel" json:"talentCreateLevel,omitempty"`
	SoaringState         *int32                            `protobuf:"varint,13,req,name=soaringState" json:"soaringState,omitempty"`
	PlayerId             *int64                            `protobuf:"varint,14,opt,name=playerId" json:"playerId,omitempty"`
	ServerId             *int64                            `protobuf:"varint,15,opt,name=serverId" json:"serverId,omitempty"`
	SeparationIdx        *int32                            `protobuf:"varint,16,opt,name=separationIdx" json:"separationIdx,omitempty"`
	RealmsId             *int32                            `protobuf:"varint,17,opt,name=realmsId" json:"realmsId,omitempty"`
	PetKernelList        []*PetKernelDataMsg               `protobuf:"bytes,18,rep,name=petKernelList" json:"petKernelList,omitempty"`
}

func (x *GodBodyDetailDataMsg) Reset() {
	*x = GodBodyDetailDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodBodyDetailDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodBodyDetailDataMsg) ProtoMessage() {}

func (x *GodBodyDetailDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodBodyDetailDataMsg.ProtoReflect.Descriptor instead.
func (*GodBodyDetailDataMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{16}
}

func (x *GodBodyDetailDataMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GodBodyDetailDataMsg) GetSeparationData() []*SeparationDataMsg {
	if x != nil {
		return x.SeparationData
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetMagicDataList() []*MagicDataMsg {
	if x != nil {
		return x.MagicDataList
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetPetDataList() []*PetDataMsg {
	if x != nil {
		return x.PetDataList
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetSpiritDataList() []*SpiritDataMsg {
	if x != nil {
		return x.SpiritDataList
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetEquipmentAdvanceData() *EquipmentAdvanceDataMsg {
	if x != nil {
		return x.EquipmentAdvanceData
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetCloudDataList() []*PlayerEquipCloudDataMsg {
	if x != nil {
		return x.CloudDataList
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetWorldRuleDataMsg() *WorldRulePlayerDataMsg {
	if x != nil {
		return x.WorldRuleDataMsg
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetMagicTreasureData() *PlayerDetailDataMagicTreasureMsg {
	if x != nil {
		return x.MagicTreasureData
	}
	return nil
}

func (x *GodBodyDetailDataMsg) GetTalentCreateLevel() int32 {
	if x != nil && x.TalentCreateLevel != nil {
		return *x.TalentCreateLevel
	}
	return 0
}

func (x *GodBodyDetailDataMsg) GetSoaringState() int32 {
	if x != nil && x.SoaringState != nil {
		return *x.SoaringState
	}
	return 0
}

func (x *GodBodyDetailDataMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GodBodyDetailDataMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *GodBodyDetailDataMsg) GetSeparationIdx() int32 {
	if x != nil && x.SeparationIdx != nil {
		return *x.SeparationIdx
	}
	return 0
}

func (x *GodBodyDetailDataMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *GodBodyDetailDataMsg) GetPetKernelList() []*PetKernelDataMsg {
	if x != nil {
		return x.PetKernelList
	}
	return nil
}

type GetLockedPlayerDetailDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId *int64 `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
	SystemId *int32 `protobuf:"varint,3,req,name=systemId" json:"systemId,omitempty"`
}

func (x *GetLockedPlayerDetailDataReq) Reset() {
	*x = GetLockedPlayerDetailDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLockedPlayerDetailDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockedPlayerDetailDataReq) ProtoMessage() {}

func (x *GetLockedPlayerDetailDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockedPlayerDetailDataReq.ProtoReflect.Descriptor instead.
func (*GetLockedPlayerDetailDataReq) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{17}
}

func (x *GetLockedPlayerDetailDataReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GetLockedPlayerDetailDataReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *GetLockedPlayerDetailDataReq) GetSystemId() int32 {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return 0
}

type GetLockedPlayerDetailDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32               `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerDetailDataMsg *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=playerDetailDataMsg" json:"playerDetailDataMsg,omitempty"`
}

func (x *GetLockedPlayerDetailDataResp) Reset() {
	*x = GetLockedPlayerDetailDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLockedPlayerDetailDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockedPlayerDetailDataResp) ProtoMessage() {}

func (x *GetLockedPlayerDetailDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockedPlayerDetailDataResp.ProtoReflect.Descriptor instead.
func (*GetLockedPlayerDetailDataResp) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{18}
}

func (x *GetLockedPlayerDetailDataResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetLockedPlayerDetailDataResp) GetPlayerDetailDataMsg() *PlayerDetailDataMsg {
	if x != nil {
		return x.PlayerDetailDataMsg
	}
	return nil
}

type SearchPlayerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online        *int32             `protobuf:"varint,1,opt,name=online" json:"online,omitempty"`
	LastLoginTime *int64             `protobuf:"varint,2,opt,name=lastLoginTime" json:"lastLoginTime,omitempty"`
	Data          *PlayerBaseDataMsg `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Extra         *string            `protobuf:"bytes,4,opt,name=extra" json:"extra,omitempty"`
}

func (x *SearchPlayerMsg) Reset() {
	*x = SearchPlayerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlayerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlayerMsg) ProtoMessage() {}

func (x *SearchPlayerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlayerMsg.ProtoReflect.Descriptor instead.
func (*SearchPlayerMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{19}
}

func (x *SearchPlayerMsg) GetOnline() int32 {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return 0
}

func (x *SearchPlayerMsg) GetLastLoginTime() int64 {
	if x != nil && x.LastLoginTime != nil {
		return *x.LastLoginTime
	}
	return 0
}

func (x *SearchPlayerMsg) GetData() *PlayerBaseDataMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchPlayerMsg) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type SearchPlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey *string `protobuf:"bytes,1,req,name=searchKey" json:"searchKey,omitempty"`
	ServerId  *int64  `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
}

func (x *SearchPlayerReq) Reset() {
	*x = SearchPlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlayerReq) ProtoMessage() {}

func (x *SearchPlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlayerReq.ProtoReflect.Descriptor instead.
func (*SearchPlayerReq) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{20}
}

func (x *SearchPlayerReq) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *SearchPlayerReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type SearchPlayerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerData *SearchPlayerMsg `protobuf:"bytes,2,opt,name=playerData" json:"playerData,omitempty"`
}

func (x *SearchPlayerResp) Reset() {
	*x = SearchPlayerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlayerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlayerResp) ProtoMessage() {}

func (x *SearchPlayerResp) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlayerResp.ProtoReflect.Descriptor instead.
func (*SearchPlayerResp) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{21}
}

func (x *SearchPlayerResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SearchPlayerResp) GetPlayerData() *SearchPlayerMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

type CommonSearchPlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey  *string `protobuf:"bytes,1,req,name=searchKey" json:"searchKey,omitempty"`
	ServerId   *int64  `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
	SystemId   *int32  `protobuf:"varint,3,opt,name=systemId" json:"systemId,omitempty"`
	ActivityId *int32  `protobuf:"varint,4,opt,name=activityId" json:"activityId,omitempty"`
}

func (x *CommonSearchPlayerReq) Reset() {
	*x = CommonSearchPlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSearchPlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSearchPlayerReq) ProtoMessage() {}

func (x *CommonSearchPlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSearchPlayerReq.ProtoReflect.Descriptor instead.
func (*CommonSearchPlayerReq) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{22}
}

func (x *CommonSearchPlayerReq) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CommonSearchPlayerReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *CommonSearchPlayerReq) GetSystemId() int32 {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return 0
}

func (x *CommonSearchPlayerReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type CommonSearchPlayerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerData *SearchPlayerMsg `protobuf:"bytes,2,opt,name=playerData" json:"playerData,omitempty"`
}

func (x *CommonSearchPlayerResp) Reset() {
	*x = CommonSearchPlayerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSearchPlayerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSearchPlayerResp) ProtoMessage() {}

func (x *CommonSearchPlayerResp) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSearchPlayerResp.ProtoReflect.Descriptor instead.
func (*CommonSearchPlayerResp) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{23}
}

func (x *CommonSearchPlayerResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *CommonSearchPlayerResp) GetPlayerData() *SearchPlayerMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

type PlayerPilotShowDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	AppearanceId *int32 `protobuf:"varint,2,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId *int32 `protobuf:"varint,3,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
}

func (x *PlayerPilotShowDataMsg) Reset() {
	*x = PlayerPilotShowDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPilotShowDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPilotShowDataMsg) ProtoMessage() {}

func (x *PlayerPilotShowDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPilotShowDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerPilotShowDataMsg) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{24}
}

func (x *PlayerPilotShowDataMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerPilotShowDataMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *PlayerPilotShowDataMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

type GetPlayerPilotShowDataMsgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId []int64 `protobuf:"varint,1,rep,name=playerId" json:"playerId,omitempty"`
}

func (x *GetPlayerPilotShowDataMsgListReq) Reset() {
	*x = GetPlayerPilotShowDataMsgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerPilotShowDataMsgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerPilotShowDataMsgListReq) ProtoMessage() {}

func (x *GetPlayerPilotShowDataMsgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerPilotShowDataMsgListReq.ProtoReflect.Descriptor instead.
func (*GetPlayerPilotShowDataMsgListReq) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{25}
}

func (x *GetPlayerPilotShowDataMsgListReq) GetPlayerId() []int64 {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

type GetPlayerPilotShowDataMsgListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PilotShowMsgList []*PlayerPilotShowDataMsg `protobuf:"bytes,2,rep,name=pilotShowMsgList" json:"pilotShowMsgList,omitempty"`
}

func (x *GetPlayerPilotShowDataMsgListResp) Reset() {
	*x = GetPlayerPilotShowDataMsgListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WatchPlayer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerPilotShowDataMsgListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerPilotShowDataMsgListResp) ProtoMessage() {}

func (x *GetPlayerPilotShowDataMsgListResp) ProtoReflect() protoreflect.Message {
	mi := &file_WatchPlayer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerPilotShowDataMsgListResp.ProtoReflect.Descriptor instead.
func (*GetPlayerPilotShowDataMsgListResp) Descriptor() ([]byte, []int) {
	return file_WatchPlayer_proto_rawDescGZIP(), []int{26}
}

func (x *GetPlayerPilotShowDataMsgListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetPlayerPilotShowDataMsgListResp) GetPilotShowMsgList() []*PlayerPilotShowDataMsg {
	if x != nil {
		return x.PilotShowMsgList
	}
	return nil
}

var File_WatchPlayer_proto protoreflect.FileDescriptor

var file_WatchPlayer_proto_rawDesc = []byte{
	0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8,
	0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c,
	0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x50, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x4c, 0x76, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x67, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x17,
	0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a,
	0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x63, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x17, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x76,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x4c, 0x76, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x22, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x11, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x50,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63,
	0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x21, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xb2, 0x01, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x7a, 0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68,
	0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x4d, 0x73, 0x67, 0x52, 0x1e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x4d, 0x73, 0x67, 0x22, 0x9c, 0x02, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x54, 0x0a,
	0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x41, 0x72, 0x72, 0x12, 0x6e, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x22, 0x58, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x90, 0x04,
	0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x57,
	0x0a, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x0d, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0b, 0x70, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53,
	0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x73, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x14,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x14, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a,
	0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xd4, 0x07, 0x0a, 0x14, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0d, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x0d, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x0e, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x5f, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x14, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x62, 0x0a, 0x11, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x11, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x70,
	0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x70, 0x65, 0x74, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1d,
	0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x59, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x4b, 0x0a,
	0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x10, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x10,
	0x70, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x52, 0x10, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64,
	0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_WatchPlayer_proto_rawDescOnce sync.Once
	file_WatchPlayer_proto_rawDescData = file_WatchPlayer_proto_rawDesc
)

func file_WatchPlayer_proto_rawDescGZIP() []byte {
	file_WatchPlayer_proto_rawDescOnce.Do(func() {
		file_WatchPlayer_proto_rawDescData = protoimpl.X.CompressGZIP(file_WatchPlayer_proto_rawDescData)
	})
	return file_WatchPlayer_proto_rawDescData
}

var file_WatchPlayer_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_WatchPlayer_proto_goTypes = []any{
	(*PlayerCharacterImageMsg)(nil),            // 0: com.yq.msg.CityMsg.PlayerCharacterImageMsg
	(*GetPlayerDetailDataReq)(nil),             // 1: com.yq.msg.CityMsg.getPlayerDetailDataReq
	(*GetPlayerDetailDataResp)(nil),            // 2: com.yq.msg.CityMsg.getPlayerDetailDataResp
	(*PlayerShowInfoMsg)(nil),                  // 3: com.yq.msg.CityMsg.PlayerShowInfoMsg
	(*PlayerHeadDataMsg)(nil),                  // 4: com.yq.msg.CityMsg.PlayerHeadDataMsg
	(*PlayerHeadAndNameMsg)(nil),               // 5: com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	(*PlayerHeadAndFightMsg)(nil),              // 6: com.yq.msg.CityMsg.PlayerHeadAndFightMsg
	(*PlayerAppearanceDataMsg)(nil),            // 7: com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	(*GetTopPlayerInfoReq)(nil),                // 8: com.yq.msg.CityMsg.GetTopPlayerInfoReq
	(*GetTopPlayerInfoResp)(nil),               // 9: com.yq.msg.CityMsg.GetTopPlayerInfoResp
	(*PlayerRankDataMsg)(nil),                  // 10: com.yq.msg.CityMsg.PlayerRankDataMsg
	(*GetPlayerDetailDataWithGodBodyReq)(nil),  // 11: com.yq.msg.CityMsg.getPlayerDetailDataWithGodBodyReq
	(*GetPlayerDetailDataWithGodBodyResp)(nil), // 12: com.yq.msg.CityMsg.getPlayerDetailDataWithGodBodyResp
	(*PlayerDetailDataWithGodBodyMsg)(nil),     // 13: com.yq.msg.CityMsg.PlayerDetailDataWithGodBodyMsg
	(*PlayerGodBodyBattleMainMsg)(nil),         // 14: com.yq.msg.CityMsg.PlayerGodBodyBattleMainMsg
	(*PlayerGodBodyDetailDataMsg)(nil),         // 15: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg
	(*GodBodyDetailDataMsg)(nil),               // 16: com.yq.msg.CityMsg.GodBodyDetailDataMsg
	(*GetLockedPlayerDetailDataReq)(nil),       // 17: com.yq.msg.CityMsg.getLockedPlayerDetailDataReq
	(*GetLockedPlayerDetailDataResp)(nil),      // 18: com.yq.msg.CityMsg.getLockedPlayerDetailDataResp
	(*SearchPlayerMsg)(nil),                    // 19: com.yq.msg.CityMsg.SearchPlayerMsg
	(*SearchPlayerReq)(nil),                    // 20: com.yq.msg.CityMsg.SearchPlayerReq
	(*SearchPlayerResp)(nil),                   // 21: com.yq.msg.CityMsg.SearchPlayerResp
	(*CommonSearchPlayerReq)(nil),              // 22: com.yq.msg.CityMsg.CommonSearchPlayerReq
	(*CommonSearchPlayerResp)(nil),             // 23: com.yq.msg.CityMsg.CommonSearchPlayerResp
	(*PlayerPilotShowDataMsg)(nil),             // 24: com.yq.msg.CityMsg.PlayerPilotShowDataMsg
	(*GetPlayerPilotShowDataMsgListReq)(nil),   // 25: com.yq.msg.CityMsg.getPlayerPilotShowDataMsgListReq
	(*GetPlayerPilotShowDataMsgListResp)(nil),  // 26: com.yq.msg.CityMsg.getPlayerPilotShowDataMsgListResp
	(*PlayerBaseDataMsg)(nil),                  // 27: com.yq.msg.CityMsg.PlayerBaseDataMsg
	(*PlayerDetailDataMsg)(nil),                // 28: com.yq.msg.CityMsg.PlayerDetailDataMsg
	(*SeparationDataMsg)(nil),                  // 29: com.yq.msg.CityMsg.SeparationDataMsg
	(*MagicDataMsg)(nil),                       // 30: com.yq.msg.CityMsg.MagicDataMsg
	(*PetDataMsg)(nil),                         // 31: com.yq.msg.CityMsg.PetDataMsg
	(*SpiritDataMsg)(nil),                      // 32: com.yq.msg.CityMsg.SpiritDataMsg
	(*EquipmentAdvanceDataMsg)(nil),            // 33: com.yq.msg.CityMsg.EquipmentAdvanceDataMsg
	(*PlayerEquipCloudDataMsg)(nil),            // 34: com.yq.msg.CityMsg.PlayerEquipCloudDataMsg
	(*WorldRulePlayerDataMsg)(nil),             // 35: com.yq.msg.CityMsg.WorldRulePlayerDataMsg
	(*PlayerDetailDataMagicTreasureMsg)(nil),   // 36: com.yq.msg.CityMsg.PlayerDetailDataMagicTreasureMsg
	(*PetKernelDataMsg)(nil),                   // 37: com.yq.msg.CityMsg.PetKernelDataMsg
}
var file_WatchPlayer_proto_depIdxs = []int32{
	27, // 0: com.yq.msg.CityMsg.PlayerCharacterImageMsg.playerBaseDataMsg:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	28, // 1: com.yq.msg.CityMsg.getPlayerDetailDataResp.playerDetailDataMsg:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	5,  // 2: com.yq.msg.CityMsg.PlayerShowInfoMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	4,  // 3: com.yq.msg.CityMsg.PlayerHeadAndNameMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	5,  // 4: com.yq.msg.CityMsg.PlayerHeadAndFightMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	0,  // 5: com.yq.msg.CityMsg.GetTopPlayerInfoResp.playerList:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	13, // 6: com.yq.msg.CityMsg.getPlayerDetailDataWithGodBodyResp.playerDetailDataWithGodBodyMsg:type_name -> com.yq.msg.CityMsg.PlayerDetailDataWithGodBodyMsg
	14, // 7: com.yq.msg.CityMsg.PlayerDetailDataWithGodBodyMsg.battleMainArr:type_name -> com.yq.msg.CityMsg.PlayerGodBodyBattleMainMsg
	15, // 8: com.yq.msg.CityMsg.PlayerDetailDataWithGodBodyMsg.playerGodBodyDetailDataMsg:type_name -> com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg
	29, // 9: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg.otherSeparationData:type_name -> com.yq.msg.CityMsg.SeparationDataMsg
	30, // 10: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg.MagicDataList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	31, // 11: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg.petDataList:type_name -> com.yq.msg.CityMsg.PetDataMsg
	32, // 12: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg.spiritDataList:type_name -> com.yq.msg.CityMsg.SpiritDataMsg
	33, // 13: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg.equipmentAdvanceData:type_name -> com.yq.msg.CityMsg.EquipmentAdvanceDataMsg
	34, // 14: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg.cloudDataList:type_name -> com.yq.msg.CityMsg.PlayerEquipCloudDataMsg
	29, // 15: com.yq.msg.CityMsg.GodBodyDetailDataMsg.separationData:type_name -> com.yq.msg.CityMsg.SeparationDataMsg
	30, // 16: com.yq.msg.CityMsg.GodBodyDetailDataMsg.MagicDataList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	31, // 17: com.yq.msg.CityMsg.GodBodyDetailDataMsg.petDataList:type_name -> com.yq.msg.CityMsg.PetDataMsg
	32, // 18: com.yq.msg.CityMsg.GodBodyDetailDataMsg.spiritDataList:type_name -> com.yq.msg.CityMsg.SpiritDataMsg
	33, // 19: com.yq.msg.CityMsg.GodBodyDetailDataMsg.equipmentAdvanceData:type_name -> com.yq.msg.CityMsg.EquipmentAdvanceDataMsg
	34, // 20: com.yq.msg.CityMsg.GodBodyDetailDataMsg.cloudDataList:type_name -> com.yq.msg.CityMsg.PlayerEquipCloudDataMsg
	35, // 21: com.yq.msg.CityMsg.GodBodyDetailDataMsg.worldRuleDataMsg:type_name -> com.yq.msg.CityMsg.WorldRulePlayerDataMsg
	36, // 22: com.yq.msg.CityMsg.GodBodyDetailDataMsg.magicTreasureData:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMagicTreasureMsg
	37, // 23: com.yq.msg.CityMsg.GodBodyDetailDataMsg.petKernelList:type_name -> com.yq.msg.CityMsg.PetKernelDataMsg
	28, // 24: com.yq.msg.CityMsg.getLockedPlayerDetailDataResp.playerDetailDataMsg:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	27, // 25: com.yq.msg.CityMsg.SearchPlayerMsg.data:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	19, // 26: com.yq.msg.CityMsg.SearchPlayerResp.playerData:type_name -> com.yq.msg.CityMsg.SearchPlayerMsg
	19, // 27: com.yq.msg.CityMsg.CommonSearchPlayerResp.playerData:type_name -> com.yq.msg.CityMsg.SearchPlayerMsg
	24, // 28: com.yq.msg.CityMsg.getPlayerPilotShowDataMsgListResp.pilotShowMsgList:type_name -> com.yq.msg.CityMsg.PlayerPilotShowDataMsg
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_WatchPlayer_proto_init() }
func file_WatchPlayer_proto_init() {
	if File_WatchPlayer_proto != nil {
		return
	}
	file_Common_proto_init()
	file_EquipmentAdvance_proto_init()
	file_Attribute_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_WatchPlayer_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerCharacterImageMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlayerDetailDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlayerDetailDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerShowInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerHeadDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerHeadAndNameMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerHeadAndFightMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerAppearanceDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetTopPlayerInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetTopPlayerInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerRankDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlayerDetailDataWithGodBodyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlayerDetailDataWithGodBodyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerDetailDataWithGodBodyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerGodBodyBattleMainMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerGodBodyDetailDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GodBodyDetailDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetLockedPlayerDetailDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetLockedPlayerDetailDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SearchPlayerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SearchPlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SearchPlayerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CommonSearchPlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CommonSearchPlayerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerPilotShowDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlayerPilotShowDataMsgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WatchPlayer_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlayerPilotShowDataMsgListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_WatchPlayer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WatchPlayer_proto_goTypes,
		DependencyIndexes: file_WatchPlayer_proto_depIdxs,
		MessageInfos:      file_WatchPlayer_proto_msgTypes,
	}.Build()
	File_WatchPlayer_proto = out.File
	file_WatchPlayer_proto_rawDesc = nil
	file_WatchPlayer_proto_goTypes = nil
	file_WatchPlayer_proto_depIdxs = nil
}
