// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: StarTrial.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StarTrialDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId               *int32                  `protobuf:"varint,1,req,name=bossId" json:"bossId,omitempty"`
	ChallengeTimes       *int32                  `protobuf:"varint,2,opt,name=challengeTimes" json:"challengeTimes,omitempty"`
	PlayerHeadAndNameMsg []*PlayerHeadAndNameMsg `protobuf:"bytes,3,rep,name=playerHeadAndNameMsg" json:"playerHeadAndNameMsg,omitempty"`
	PrevBossId           *int32                  `protobuf:"varint,4,opt,name=prevBossId" json:"prevBossId,omitempty"`
	PowerList            []int64                 `protobuf:"varint,5,rep,name=powerList" json:"powerList,omitempty"`
	RewardState          *int32                  `protobuf:"varint,6,opt,name=rewardState" json:"rewardState,omitempty"`
}

func (x *StarTrialDataMsg) Reset() {
	*x = StarTrialDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialDataMsg) ProtoMessage() {}

func (x *StarTrialDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialDataMsg.ProtoReflect.Descriptor instead.
func (*StarTrialDataMsg) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{0}
}

func (x *StarTrialDataMsg) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

func (x *StarTrialDataMsg) GetChallengeTimes() int32 {
	if x != nil && x.ChallengeTimes != nil {
		return *x.ChallengeTimes
	}
	return 0
}

func (x *StarTrialDataMsg) GetPlayerHeadAndNameMsg() []*PlayerHeadAndNameMsg {
	if x != nil {
		return x.PlayerHeadAndNameMsg
	}
	return nil
}

func (x *StarTrialDataMsg) GetPrevBossId() int32 {
	if x != nil && x.PrevBossId != nil {
		return *x.PrevBossId
	}
	return 0
}

func (x *StarTrialDataMsg) GetPowerList() []int64 {
	if x != nil {
		return x.PowerList
	}
	return nil
}

func (x *StarTrialDataMsg) GetRewardState() int32 {
	if x != nil && x.RewardState != nil {
		return *x.RewardState
	}
	return 0
}

type GetDailyFightRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDailyFightRewardReq) Reset() {
	*x = GetDailyFightRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyFightRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyFightRewardReq) ProtoMessage() {}

func (x *GetDailyFightRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyFightRewardReq.ProtoReflect.Descriptor instead.
func (*GetDailyFightRewardReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{1}
}

type GetDailyFightRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Rewards     *string `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
	RewardState *int32  `protobuf:"varint,3,opt,name=rewardState" json:"rewardState,omitempty"`
}

func (x *GetDailyFightRewardResp) Reset() {
	*x = GetDailyFightRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyFightRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyFightRewardResp) ProtoMessage() {}

func (x *GetDailyFightRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyFightRewardResp.ProtoReflect.Descriptor instead.
func (*GetDailyFightRewardResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{2}
}

func (x *GetDailyFightRewardResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetDailyFightRewardResp) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *GetDailyFightRewardResp) GetRewardState() int32 {
	if x != nil && x.RewardState != nil {
		return *x.RewardState
	}
	return 0
}

type GetBossDetailDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId *int32 `protobuf:"varint,1,req,name=bossId" json:"bossId,omitempty"`
}

func (x *GetBossDetailDataReq) Reset() {
	*x = GetBossDetailDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBossDetailDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBossDetailDataReq) ProtoMessage() {}

func (x *GetBossDetailDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBossDetailDataReq.ProtoReflect.Descriptor instead.
func (*GetBossDetailDataReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{3}
}

func (x *GetBossDetailDataReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

type GetBossDetailDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32               `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerDetailDataMsg *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=playerDetailDataMsg" json:"playerDetailDataMsg,omitempty"`
}

func (x *GetBossDetailDataResp) Reset() {
	*x = GetBossDetailDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBossDetailDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBossDetailDataResp) ProtoMessage() {}

func (x *GetBossDetailDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBossDetailDataResp.ProtoReflect.Descriptor instead.
func (*GetBossDetailDataResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{4}
}

func (x *GetBossDetailDataResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetBossDetailDataResp) GetPlayerDetailDataMsg() *PlayerDetailDataMsg {
	if x != nil {
		return x.PlayerDetailDataMsg
	}
	return nil
}

type StarTrialChallengeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId *int32 `protobuf:"varint,1,req,name=BossId" json:"BossId,omitempty"`
}

func (x *StarTrialChallengeReq) Reset() {
	*x = StarTrialChallengeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialChallengeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialChallengeReq) ProtoMessage() {}

func (x *StarTrialChallengeReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialChallengeReq.ProtoReflect.Descriptor instead.
func (*StarTrialChallengeReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{5}
}

func (x *StarTrialChallengeReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

type StarTrialChallengeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Rewards         *string          `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
	AllBattleRecord *BattleRecordMsg `protobuf:"bytes,3,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
}

func (x *StarTrialChallengeResp) Reset() {
	*x = StarTrialChallengeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialChallengeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialChallengeResp) ProtoMessage() {}

func (x *StarTrialChallengeResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialChallengeResp.ProtoReflect.Descriptor instead.
func (*StarTrialChallengeResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{6}
}

func (x *StarTrialChallengeResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *StarTrialChallengeResp) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *StarTrialChallengeResp) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

type RspRankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret               *int32               `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	StarTrialRankData []*StarTrialRankData `protobuf:"bytes,2,rep,name=starTrialRankData" json:"starTrialRankData,omitempty"`
	Rank              *int32               `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	Star              *int32               `protobuf:"varint,4,opt,name=star" json:"star,omitempty"`
}

func (x *RspRankData) Reset() {
	*x = RspRankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRankData) ProtoMessage() {}

func (x *RspRankData) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRankData.ProtoReflect.Descriptor instead.
func (*RspRankData) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{7}
}

func (x *RspRankData) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspRankData) GetStarTrialRankData() []*StarTrialRankData {
	if x != nil {
		return x.StarTrialRankData
	}
	return nil
}

func (x *RspRankData) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *RspRankData) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

type StarTrialRankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerRankDataMsg *PlayerRankDataMsg `protobuf:"bytes,1,opt,name=playerRankDataMsg" json:"playerRankDataMsg,omitempty"`
	Rank              *int32             `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	Star              *int32             `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`
}

func (x *StarTrialRankData) Reset() {
	*x = StarTrialRankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialRankData) ProtoMessage() {}

func (x *StarTrialRankData) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialRankData.ProtoReflect.Descriptor instead.
func (*StarTrialRankData) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{8}
}

func (x *StarTrialRankData) GetPlayerRankDataMsg() *PlayerRankDataMsg {
	if x != nil {
		return x.PlayerRankDataMsg
	}
	return nil
}

func (x *StarTrialRankData) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *StarTrialRankData) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

type StarTrialRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId *int32 `protobuf:"varint,1,req,name=bossId" json:"bossId,omitempty"`
}

func (x *StarTrialRecordReq) Reset() {
	*x = StarTrialRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialRecordReq) ProtoMessage() {}

func (x *StarTrialRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialRecordReq.ProtoReflect.Descriptor instead.
func (*StarTrialRecordReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{9}
}

func (x *StarTrialRecordReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

type StarTrialRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RecordList []*StarTrialRecordDataMsg `protobuf:"bytes,2,rep,name=recordList" json:"recordList,omitempty"`
	BossID     *int32                    `protobuf:"varint,3,opt,name=bossID" json:"bossID,omitempty"`
}

func (x *StarTrialRecordResp) Reset() {
	*x = StarTrialRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialRecordResp) ProtoMessage() {}

func (x *StarTrialRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialRecordResp.ProtoReflect.Descriptor instead.
func (*StarTrialRecordResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{10}
}

func (x *StarTrialRecordResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *StarTrialRecordResp) GetRecordList() []*StarTrialRecordDataMsg {
	if x != nil {
		return x.RecordList
	}
	return nil
}

func (x *StarTrialRecordResp) GetBossID() int32 {
	if x != nil && x.BossID != nil {
		return *x.BossID
	}
	return 0
}

type StarTrialRecordDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerHeadAndNameMsg *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=playerHeadAndNameMsg" json:"playerHeadAndNameMsg,omitempty"`
	Time                 *int64                `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	TitleId              *int32                `protobuf:"varint,3,opt,name=titleId" json:"titleId,omitempty"`
	RecordId             *int32                `protobuf:"varint,4,opt,name=recordId" json:"recordId,omitempty"`
}

func (x *StarTrialRecordDataMsg) Reset() {
	*x = StarTrialRecordDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialRecordDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialRecordDataMsg) ProtoMessage() {}

func (x *StarTrialRecordDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialRecordDataMsg.ProtoReflect.Descriptor instead.
func (*StarTrialRecordDataMsg) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{11}
}

func (x *StarTrialRecordDataMsg) GetPlayerHeadAndNameMsg() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.PlayerHeadAndNameMsg
	}
	return nil
}

func (x *StarTrialRecordDataMsg) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *StarTrialRecordDataMsg) GetTitleId() int32 {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return 0
}

func (x *StarTrialRecordDataMsg) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type StarTrialBattleReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId *int32 `protobuf:"varint,1,req,name=recordId" json:"recordId,omitempty"`
	BossId   *int32 `protobuf:"varint,2,opt,name=bossId" json:"bossId,omitempty"`
}

func (x *StarTrialBattleReplyReq) Reset() {
	*x = StarTrialBattleReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialBattleReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialBattleReplyReq) ProtoMessage() {}

func (x *StarTrialBattleReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialBattleReplyReq.ProtoReflect.Descriptor instead.
func (*StarTrialBattleReplyReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{12}
}

func (x *StarTrialBattleReplyReq) GetRecordId() int32 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

func (x *StarTrialBattleReplyReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

type StarTrialBattleReplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AllBattleRecord *BattleRecordMsg      `protobuf:"bytes,2,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	LeftPlayerInfo  *PlayerHeadAndNameMsg `protobuf:"bytes,3,opt,name=leftPlayerInfo" json:"leftPlayerInfo,omitempty"`
	BossID          *int32                `protobuf:"varint,4,opt,name=BossID" json:"BossID,omitempty"`
}

func (x *StarTrialBattleReplyResp) Reset() {
	*x = StarTrialBattleReplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialBattleReplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialBattleReplyResp) ProtoMessage() {}

func (x *StarTrialBattleReplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialBattleReplyResp.ProtoReflect.Descriptor instead.
func (*StarTrialBattleReplyResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{13}
}

func (x *StarTrialBattleReplyResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *StarTrialBattleReplyResp) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *StarTrialBattleReplyResp) GetLeftPlayerInfo() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.LeftPlayerInfo
	}
	return nil
}

func (x *StarTrialBattleReplyResp) GetBossID() int32 {
	if x != nil && x.BossID != nil {
		return *x.BossID
	}
	return 0
}

type EnterStarTrialCodexMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnterStarTrialCodexMsgReq) Reset() {
	*x = EnterStarTrialCodexMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterStarTrialCodexMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterStarTrialCodexMsgReq) ProtoMessage() {}

func (x *EnterStarTrialCodexMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterStarTrialCodexMsgReq.ProtoReflect.Descriptor instead.
func (*EnterStarTrialCodexMsgReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{14}
}

type EnterStarTrialCodexMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	StarTrialCodexData []*StarTrialCodexData `protobuf:"bytes,2,rep,name=starTrialCodexData" json:"starTrialCodexData,omitempty"`
}

func (x *EnterStarTrialCodexMsgResp) Reset() {
	*x = EnterStarTrialCodexMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterStarTrialCodexMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterStarTrialCodexMsgResp) ProtoMessage() {}

func (x *EnterStarTrialCodexMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterStarTrialCodexMsgResp.ProtoReflect.Descriptor instead.
func (*EnterStarTrialCodexMsgResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{15}
}

func (x *EnterStarTrialCodexMsgResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *EnterStarTrialCodexMsgResp) GetStarTrialCodexData() []*StarTrialCodexData {
	if x != nil {
		return x.StarTrialCodexData
	}
	return nil
}

type StarTrialCodexData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossID *int32 `protobuf:"varint,1,opt,name=bossID" json:"bossID,omitempty"`
	Star   *int32 `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
}

func (x *StarTrialCodexData) Reset() {
	*x = StarTrialCodexData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialCodexData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialCodexData) ProtoMessage() {}

func (x *StarTrialCodexData) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialCodexData.ProtoReflect.Descriptor instead.
func (*StarTrialCodexData) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{16}
}

func (x *StarTrialCodexData) GetBossID() int32 {
	if x != nil && x.BossID != nil {
		return *x.BossID
	}
	return 0
}

func (x *StarTrialCodexData) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

type PlayerStarTrialCodexMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossType *int32 `protobuf:"varint,1,opt,name=bossType" json:"bossType,omitempty"`
}

func (x *PlayerStarTrialCodexMsgReq) Reset() {
	*x = PlayerStarTrialCodexMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStarTrialCodexMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStarTrialCodexMsgReq) ProtoMessage() {}

func (x *PlayerStarTrialCodexMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStarTrialCodexMsgReq.ProtoReflect.Descriptor instead.
func (*PlayerStarTrialCodexMsgReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerStarTrialCodexMsgReq) GetBossType() int32 {
	if x != nil && x.BossType != nil {
		return *x.BossType
	}
	return 0
}

type RspPlayerStarTrialCodexMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                         *int32                     `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerStarTrialCodexMsgList []*PlayerStarTrialCodexMsg `protobuf:"bytes,2,rep,name=playerStarTrialCodexMsgList" json:"playerStarTrialCodexMsgList,omitempty"`
	CurStar                     *int32                     `protobuf:"varint,3,opt,name=curStar" json:"curStar,omitempty"`
}

func (x *RspPlayerStarTrialCodexMsg) Reset() {
	*x = RspPlayerStarTrialCodexMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPlayerStarTrialCodexMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPlayerStarTrialCodexMsg) ProtoMessage() {}

func (x *RspPlayerStarTrialCodexMsg) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPlayerStarTrialCodexMsg.ProtoReflect.Descriptor instead.
func (*RspPlayerStarTrialCodexMsg) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{18}
}

func (x *RspPlayerStarTrialCodexMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspPlayerStarTrialCodexMsg) GetPlayerStarTrialCodexMsgList() []*PlayerStarTrialCodexMsg {
	if x != nil {
		return x.PlayerStarTrialCodexMsgList
	}
	return nil
}

func (x *RspPlayerStarTrialCodexMsg) GetCurStar() int32 {
	if x != nil && x.CurStar != nil {
		return *x.CurStar
	}
	return 0
}

type PlayerStarTrialCodexMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstTime *int64 `protobuf:"varint,1,opt,name=firstTime" json:"firstTime,omitempty"`
	BossID    *int32 `protobuf:"varint,2,opt,name=bossID" json:"bossID,omitempty"`
}

func (x *PlayerStarTrialCodexMsg) Reset() {
	*x = PlayerStarTrialCodexMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStarTrialCodexMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStarTrialCodexMsg) ProtoMessage() {}

func (x *PlayerStarTrialCodexMsg) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStarTrialCodexMsg.ProtoReflect.Descriptor instead.
func (*PlayerStarTrialCodexMsg) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{19}
}

func (x *PlayerStarTrialCodexMsg) GetFirstTime() int64 {
	if x != nil && x.FirstTime != nil {
		return *x.FirstTime
	}
	return 0
}

func (x *PlayerStarTrialCodexMsg) GetBossID() int32 {
	if x != nil && x.BossID != nil {
		return *x.BossID
	}
	return 0
}

type GetStarTrialGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStarTrialGroupInfoReq) Reset() {
	*x = GetStarTrialGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStarTrialGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStarTrialGroupInfoReq) ProtoMessage() {}

func (x *GetStarTrialGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStarTrialGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetStarTrialGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{20}
}

type GetStarTrialGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ServerList []int64 `protobuf:"varint,2,rep,name=serverList" json:"serverList,omitempty"`
}

func (x *GetStarTrialGroupInfoResp) Reset() {
	*x = GetStarTrialGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStarTrialGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStarTrialGroupInfoResp) ProtoMessage() {}

func (x *GetStarTrialGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStarTrialGroupInfoResp.ProtoReflect.Descriptor instead.
func (*GetStarTrialGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{21}
}

func (x *GetStarTrialGroupInfoResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetStarTrialGroupInfoResp) GetServerList() []int64 {
	if x != nil {
		return x.ServerList
	}
	return nil
}

type StarTrialGetPlayerDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId   *int32 `protobuf:"varint,1,req,name=bossId" json:"bossId,omitempty"`
	PlayerId *int64 `protobuf:"varint,2,req,name=playerId" json:"playerId,omitempty"`
	ServerId *int64 `protobuf:"varint,3,req,name=serverId" json:"serverId,omitempty"`
}

func (x *StarTrialGetPlayerDetailReq) Reset() {
	*x = StarTrialGetPlayerDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialGetPlayerDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialGetPlayerDetailReq) ProtoMessage() {}

func (x *StarTrialGetPlayerDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialGetPlayerDetailReq.ProtoReflect.Descriptor instead.
func (*StarTrialGetPlayerDetailReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{22}
}

func (x *StarTrialGetPlayerDetailReq) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

func (x *StarTrialGetPlayerDetailReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *StarTrialGetPlayerDetailReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type StarTrialGetPlayerDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32               `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerDetailDataMsg *PlayerDetailDataMsg `protobuf:"bytes,2,opt,name=playerDetailDataMsg" json:"playerDetailDataMsg,omitempty"`
}

func (x *StarTrialGetPlayerDetailResp) Reset() {
	*x = StarTrialGetPlayerDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialGetPlayerDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialGetPlayerDetailResp) ProtoMessage() {}

func (x *StarTrialGetPlayerDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialGetPlayerDetailResp.ProtoReflect.Descriptor instead.
func (*StarTrialGetPlayerDetailResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{23}
}

func (x *StarTrialGetPlayerDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *StarTrialGetPlayerDetailResp) GetPlayerDetailDataMsg() *PlayerDetailDataMsg {
	if x != nil {
		return x.PlayerDetailDataMsg
	}
	return nil
}

type StarTrialEnterMainPanelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StarTrialEnterMainPanelReq) Reset() {
	*x = StarTrialEnterMainPanelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialEnterMainPanelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialEnterMainPanelReq) ProtoMessage() {}

func (x *StarTrialEnterMainPanelReq) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialEnterMainPanelReq.ProtoReflect.Descriptor instead.
func (*StarTrialEnterMainPanelReq) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{24}
}

type StarTrialEnterMainPanelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                  *int32                  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerHeadAndNameMsg []*PlayerHeadAndNameMsg `protobuf:"bytes,2,rep,name=playerHeadAndNameMsg" json:"playerHeadAndNameMsg,omitempty"`
	DataMsg              *StarTrialDataMsg       `protobuf:"bytes,3,opt,name=dataMsg" json:"dataMsg,omitempty"`
	ConsumeScore         *int64                  `protobuf:"varint,4,opt,name=consumeScore" json:"consumeScore,omitempty"`
}

func (x *StarTrialEnterMainPanelResp) Reset() {
	*x = StarTrialEnterMainPanelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StarTrial_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarTrialEnterMainPanelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTrialEnterMainPanelResp) ProtoMessage() {}

func (x *StarTrialEnterMainPanelResp) ProtoReflect() protoreflect.Message {
	mi := &file_StarTrial_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTrialEnterMainPanelResp.ProtoReflect.Descriptor instead.
func (*StarTrialEnterMainPanelResp) Descriptor() ([]byte, []int) {
	return file_StarTrial_proto_rawDescGZIP(), []int{25}
}

func (x *StarTrialEnterMainPanelResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *StarTrialEnterMainPanelResp) GetPlayerHeadAndNameMsg() []*PlayerHeadAndNameMsg {
	if x != nil {
		return x.PlayerHeadAndNameMsg
	}
	return nil
}

func (x *StarTrialEnterMainPanelResp) GetDataMsg() *StarTrialDataMsg {
	if x != nil {
		return x.DataMsg
	}
	return nil
}

func (x *StarTrialEnterMainPanelResp) GetConsumeScore() int64 {
	if x != nil && x.ConsumeScore != nil {
		return *x.ConsumeScore
	}
	return 0
}

var File_StarTrial_proto protoreflect.FileDescriptor

var file_StarTrial_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73,
	0x67, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x42,
	0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x22, 0x2f, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f,
	0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6f, 0x73, 0x73,
	0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x52, 0x73, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a,
	0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x2c, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x62, 0x6f, 0x73, 0x73, 0x49, 0x44, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x12, 0x5c, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x53, 0x74, 0x61,
	0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61,
	0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f, 0x73, 0x73,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x44,
	0x22, 0x1b, 0x0a, 0x19, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0x86, 0x01,
	0x0a, 0x1a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x78, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x56,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x6f, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f,
	0x73, 0x73, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x38, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x52, 0x73, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x4d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x6d, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x78, 0x4d, 0x73, 0x67, 0x52, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x78, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x22, 0x4f, 0x0a, 0x17,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x78, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x44, 0x22, 0x1a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22, 0x4d, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x22, 0xf1, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f,
	0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_StarTrial_proto_rawDescOnce sync.Once
	file_StarTrial_proto_rawDescData = file_StarTrial_proto_rawDesc
)

func file_StarTrial_proto_rawDescGZIP() []byte {
	file_StarTrial_proto_rawDescOnce.Do(func() {
		file_StarTrial_proto_rawDescData = protoimpl.X.CompressGZIP(file_StarTrial_proto_rawDescData)
	})
	return file_StarTrial_proto_rawDescData
}

var file_StarTrial_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_StarTrial_proto_goTypes = []any{
	(*StarTrialDataMsg)(nil),             // 0: com.yq.msg.CityMsg.StarTrialDataMsg
	(*GetDailyFightRewardReq)(nil),       // 1: com.yq.msg.CityMsg.GetDailyFightRewardReq
	(*GetDailyFightRewardResp)(nil),      // 2: com.yq.msg.CityMsg.GetDailyFightRewardResp
	(*GetBossDetailDataReq)(nil),         // 3: com.yq.msg.CityMsg.GetBossDetailDataReq
	(*GetBossDetailDataResp)(nil),        // 4: com.yq.msg.CityMsg.GetBossDetailDataResp
	(*StarTrialChallengeReq)(nil),        // 5: com.yq.msg.CityMsg.StarTrialChallengeReq
	(*StarTrialChallengeResp)(nil),       // 6: com.yq.msg.CityMsg.StarTrialChallengeResp
	(*RspRankData)(nil),                  // 7: com.yq.msg.CityMsg.RspRankData
	(*StarTrialRankData)(nil),            // 8: com.yq.msg.CityMsg.StarTrialRankData
	(*StarTrialRecordReq)(nil),           // 9: com.yq.msg.CityMsg.StarTrialRecordReq
	(*StarTrialRecordResp)(nil),          // 10: com.yq.msg.CityMsg.StarTrialRecordResp
	(*StarTrialRecordDataMsg)(nil),       // 11: com.yq.msg.CityMsg.StarTrialRecordDataMsg
	(*StarTrialBattleReplyReq)(nil),      // 12: com.yq.msg.CityMsg.StarTrialBattleReplyReq
	(*StarTrialBattleReplyResp)(nil),     // 13: com.yq.msg.CityMsg.StarTrialBattleReplyResp
	(*EnterStarTrialCodexMsgReq)(nil),    // 14: com.yq.msg.CityMsg.EnterStarTrialCodexMsgReq
	(*EnterStarTrialCodexMsgResp)(nil),   // 15: com.yq.msg.CityMsg.EnterStarTrialCodexMsgResp
	(*StarTrialCodexData)(nil),           // 16: com.yq.msg.CityMsg.StarTrialCodexData
	(*PlayerStarTrialCodexMsgReq)(nil),   // 17: com.yq.msg.CityMsg.PlayerStarTrialCodexMsgReq
	(*RspPlayerStarTrialCodexMsg)(nil),   // 18: com.yq.msg.CityMsg.RspPlayerStarTrialCodexMsg
	(*PlayerStarTrialCodexMsg)(nil),      // 19: com.yq.msg.CityMsg.PlayerStarTrialCodexMsg
	(*GetStarTrialGroupInfoReq)(nil),     // 20: com.yq.msg.CityMsg.GetStarTrialGroupInfoReq
	(*GetStarTrialGroupInfoResp)(nil),    // 21: com.yq.msg.CityMsg.GetStarTrialGroupInfoResp
	(*StarTrialGetPlayerDetailReq)(nil),  // 22: com.yq.msg.CityMsg.StarTrialGetPlayerDetailReq
	(*StarTrialGetPlayerDetailResp)(nil), // 23: com.yq.msg.CityMsg.StarTrialGetPlayerDetailResp
	(*StarTrialEnterMainPanelReq)(nil),   // 24: com.yq.msg.CityMsg.StarTrialEnterMainPanelReq
	(*StarTrialEnterMainPanelResp)(nil),  // 25: com.yq.msg.CityMsg.StarTrialEnterMainPanelResp
	(*PlayerHeadAndNameMsg)(nil),         // 26: com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	(*PlayerDetailDataMsg)(nil),          // 27: com.yq.msg.CityMsg.PlayerDetailDataMsg
	(*BattleRecordMsg)(nil),              // 28: com.yq.msg.CityMsg.BattleRecordMsg
	(*PlayerRankDataMsg)(nil),            // 29: com.yq.msg.CityMsg.PlayerRankDataMsg
}
var file_StarTrial_proto_depIdxs = []int32{
	26, // 0: com.yq.msg.CityMsg.StarTrialDataMsg.playerHeadAndNameMsg:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	27, // 1: com.yq.msg.CityMsg.GetBossDetailDataResp.playerDetailDataMsg:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	28, // 2: com.yq.msg.CityMsg.StarTrialChallengeResp.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	8,  // 3: com.yq.msg.CityMsg.RspRankData.starTrialRankData:type_name -> com.yq.msg.CityMsg.StarTrialRankData
	29, // 4: com.yq.msg.CityMsg.StarTrialRankData.playerRankDataMsg:type_name -> com.yq.msg.CityMsg.PlayerRankDataMsg
	11, // 5: com.yq.msg.CityMsg.StarTrialRecordResp.recordList:type_name -> com.yq.msg.CityMsg.StarTrialRecordDataMsg
	26, // 6: com.yq.msg.CityMsg.StarTrialRecordDataMsg.playerHeadAndNameMsg:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	28, // 7: com.yq.msg.CityMsg.StarTrialBattleReplyResp.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	26, // 8: com.yq.msg.CityMsg.StarTrialBattleReplyResp.leftPlayerInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	16, // 9: com.yq.msg.CityMsg.EnterStarTrialCodexMsgResp.starTrialCodexData:type_name -> com.yq.msg.CityMsg.StarTrialCodexData
	19, // 10: com.yq.msg.CityMsg.RspPlayerStarTrialCodexMsg.playerStarTrialCodexMsgList:type_name -> com.yq.msg.CityMsg.PlayerStarTrialCodexMsg
	27, // 11: com.yq.msg.CityMsg.StarTrialGetPlayerDetailResp.playerDetailDataMsg:type_name -> com.yq.msg.CityMsg.PlayerDetailDataMsg
	26, // 12: com.yq.msg.CityMsg.StarTrialEnterMainPanelResp.playerHeadAndNameMsg:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	0,  // 13: com.yq.msg.CityMsg.StarTrialEnterMainPanelResp.dataMsg:type_name -> com.yq.msg.CityMsg.StarTrialDataMsg
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_StarTrial_proto_init() }
func file_StarTrial_proto_init() {
	if File_StarTrial_proto != nil {
		return
	}
	file_Battle_proto_init()
	file_Common_proto_init()
	file_WatchPlayer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_StarTrial_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetDailyFightRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetDailyFightRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetBossDetailDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetBossDetailDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialChallengeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialChallengeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RspRankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialRankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialRecordDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialBattleReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialBattleReplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*EnterStarTrialCodexMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*EnterStarTrialCodexMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialCodexData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerStarTrialCodexMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RspPlayerStarTrialCodexMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerStarTrialCodexMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetStarTrialGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetStarTrialGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialGetPlayerDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialGetPlayerDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialEnterMainPanelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StarTrial_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*StarTrialEnterMainPanelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_StarTrial_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_StarTrial_proto_goTypes,
		DependencyIndexes: file_StarTrial_proto_depIdxs,
		MessageInfos:      file_StarTrial_proto_msgTypes,
	}.Build()
	File_StarTrial_proto = out.File
	file_StarTrial_proto_rawDesc = nil
	file_StarTrial_proto_goTypes = nil
	file_StarTrial_proto_depIdxs = nil
}
