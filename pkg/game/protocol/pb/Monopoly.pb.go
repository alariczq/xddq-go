// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: Monopoly.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MonopolyProtocols int32

const (
	MonopolyProtocols_monopoly_enter_activity                          MonopolyProtocols = 213101
	MonopolyProtocols_monopoly_enter_map                               MonopolyProtocols = 213102
	MonopolyProtocols_monopoly_roll_dice                               MonopolyProtocols = 213103
	MonopolyProtocols_monopoly_assist_list                             MonopolyProtocols = 213104
	MonopolyProtocols_monopoly_replenish_strength                      MonopolyProtocols = 213105
	MonopolyProtocols_monopoly_rescue_trap                             MonopolyProtocols = 213107
	MonopolyProtocols_monopoly_rob_list                                MonopolyProtocols = 213108
	MonopolyProtocols_monopoly_rob_union_detail                        MonopolyProtocols = 213109
	MonopolyProtocols_monopoly_rob                                     MonopolyProtocols = 213110
	MonopolyProtocols_monopoly_union_log_list                          MonopolyProtocols = 213111
	MonopolyProtocols_monopoly_player_log_detail                       MonopolyProtocols = 213112
	MonopolyProtocols_monopoly_assist_attack_monster                   MonopolyProtocols = 213113
	MonopolyProtocols_monopoly_receive_monster_reward                  MonopolyProtocols = 213114
	MonopolyProtocols_monopoly_red_point                               MonopolyProtocols = 213115
	MonopolyProtocols_monopoly_remote_roll_dice                        MonopolyProtocols = 213116
	MonopolyProtocols_monopoly_enter_rob                               MonopolyProtocols = 213117
	MonopolyProtocols_monopoly_auto_lock                               MonopolyProtocols = 213118
	MonopolyProtocols_monopoly_blessing_list                           MonopolyProtocols = 213119
	MonopolyProtocols_monopoly_receive_blessing                        MonopolyProtocols = 213120
	MonopolyProtocols_monopoly_quick_move                              MonopolyProtocols = 213121
	MonopolyProtocols_monopoly_dark_grid_move                          MonopolyProtocols = 213122
	MonopolyProtocols_monopoly_event_handle                            MonopolyProtocols = 213123
	MonopolyProtocols_monopoly_monster_attr                            MonopolyProtocols = 213124
	MonopolyProtocols_monopoly_monster_get_rank                        MonopolyProtocols = 213125
	MonopolyProtocols_monopoly_get_enemy_list                          MonopolyProtocols = 213126
	MonopolyProtocols_monopoly_score_detail                            MonopolyProtocols = 213127
	MonopolyProtocols_monopoly_building_score_detail                   MonopolyProtocols = 213128
	MonopolyProtocols_monopoly_barrage_notify                          MonopolyProtocols = 213130
	MonopolyProtocols_monopoly_move_notify                             MonopolyProtocols = 213131
	MonopolyProtocols_monopoly_notify_player_end_trap                  MonopolyProtocols = 213132
	MonopolyProtocols_monopoly_notify_building_upgrade                 MonopolyProtocols = 213133
	MonopolyProtocols_monopoly_sync_all_player_notify                  MonopolyProtocols = 213134
	MonopolyProtocols_monopoly_send_blessing_notify                    MonopolyProtocols = 213135
	MonopolyProtocols_monopoly_score_notify                            MonopolyProtocols = 213136
	MonopolyProtocols_monopoly_rank_notify                             MonopolyProtocols = 213137
	MonopolyProtocols_monopoly_assist_monster_die_notify               MonopolyProtocols = 213138
	MonopolyProtocols_monopoly_my_blessing_notify                      MonopolyProtocols = 213139
	MonopolyProtocols_monopoly_assist_red_notify                       MonopolyProtocols = 213140
	MonopolyProtocols_monopoly_get_group_rank                          MonopolyProtocols = 213141
	MonopolyProtocols_monopoly_worship                                 MonopolyProtocols = 213142
	MonopolyProtocols_monopoly_worship_back                            MonopolyProtocols = 213143
	MonopolyProtocols_monopoly_score_change_notify                     MonopolyProtocols = 213144
	MonopolyProtocols_monopoly_guess_players                           MonopolyProtocols = 213145
	MonopolyProtocols_monopoly_get_guess_data                          MonopolyProtocols = 213146
	MonopolyProtocols_monopoly_guess_select                            MonopolyProtocols = 213147
	MonopolyProtocols_monopoly_guess_reward                            MonopolyProtocols = 213148
	MonopolyProtocols_CrossToGame_monopoly_sync_server_player_attr     MonopolyProtocols = 213171
	MonopolyProtocols_CrossToGame_monopoly_sync_server_monster_attr    MonopolyProtocols = 213172
	MonopolyProtocols_CrossToGame_monopoly_data_sync_agent             MonopolyProtocols = 213173
	MonopolyProtocols_CrossToGame_monopoly_sync_player_trap_end        MonopolyProtocols = 213174
	MonopolyProtocols_CrossToGame_monopoly_assist_attack_back          MonopolyProtocols = 213175
	MonopolyProtocols_CrossToGame_monopoly_receive_monster_reward_back MonopolyProtocols = 213176
	MonopolyProtocols_CrossToGame_monopoly_rov_back                    MonopolyProtocols = 213177
	MonopolyProtocols_CrossToGame_monopoly_send_blessing_back          MonopolyProtocols = 213178
	MonopolyProtocols_CrossToGame_monopoly_red_point_back              MonopolyProtocols = 213179
	MonopolyProtocols_CrossToGame_monopoly_receive_blessing_back       MonopolyProtocols = 213180
	MonopolyProtocols_CrossToGame_monopoly_send_rank_reward            MonopolyProtocols = 213181
	MonopolyProtocols_CrossToGame_monopoly_sync_score_change           MonopolyProtocols = 213182
	MonopolyProtocols_CrossToGame_monopoly_enter_map                   MonopolyProtocols = 213183
	MonopolyProtocols_CrossToGame_monopoly_enter_activity              MonopolyProtocols = 213184
	MonopolyProtocols_CrossToGame_monopoly_try_add_assist_back         MonopolyProtocols = 213185
	MonopolyProtocols_CrossToGame_monopoly_assist_add_score            MonopolyProtocols = 213186
	MonopolyProtocols_CrossToGame_monopoly_guess_reward_back           MonopolyProtocols = 213187
)

// Enum value maps for MonopolyProtocols.
var (
	MonopolyProtocols_name = map[int32]string{
		213101: "monopoly_enter_activity",
		213102: "monopoly_enter_map",
		213103: "monopoly_roll_dice",
		213104: "monopoly_assist_list",
		213105: "monopoly_replenish_strength",
		213107: "monopoly_rescue_trap",
		213108: "monopoly_rob_list",
		213109: "monopoly_rob_union_detail",
		213110: "monopoly_rob",
		213111: "monopoly_union_log_list",
		213112: "monopoly_player_log_detail",
		213113: "monopoly_assist_attack_monster",
		213114: "monopoly_receive_monster_reward",
		213115: "monopoly_red_point",
		213116: "monopoly_remote_roll_dice",
		213117: "monopoly_enter_rob",
		213118: "monopoly_auto_lock",
		213119: "monopoly_blessing_list",
		213120: "monopoly_receive_blessing",
		213121: "monopoly_quick_move",
		213122: "monopoly_dark_grid_move",
		213123: "monopoly_event_handle",
		213124: "monopoly_monster_attr",
		213125: "monopoly_monster_get_rank",
		213126: "monopoly_get_enemy_list",
		213127: "monopoly_score_detail",
		213128: "monopoly_building_score_detail",
		213130: "monopoly_barrage_notify",
		213131: "monopoly_move_notify",
		213132: "monopoly_notify_player_end_trap",
		213133: "monopoly_notify_building_upgrade",
		213134: "monopoly_sync_all_player_notify",
		213135: "monopoly_send_blessing_notify",
		213136: "monopoly_score_notify",
		213137: "monopoly_rank_notify",
		213138: "monopoly_assist_monster_die_notify",
		213139: "monopoly_my_blessing_notify",
		213140: "monopoly_assist_red_notify",
		213141: "monopoly_get_group_rank",
		213142: "monopoly_worship",
		213143: "monopoly_worship_back",
		213144: "monopoly_score_change_notify",
		213145: "monopoly_guess_players",
		213146: "monopoly_get_guess_data",
		213147: "monopoly_guess_select",
		213148: "monopoly_guess_reward",
		213171: "CrossToGame_monopoly_sync_server_player_attr",
		213172: "CrossToGame_monopoly_sync_server_monster_attr",
		213173: "CrossToGame_monopoly_data_sync_agent",
		213174: "CrossToGame_monopoly_sync_player_trap_end",
		213175: "CrossToGame_monopoly_assist_attack_back",
		213176: "CrossToGame_monopoly_receive_monster_reward_back",
		213177: "CrossToGame_monopoly_rov_back",
		213178: "CrossToGame_monopoly_send_blessing_back",
		213179: "CrossToGame_monopoly_red_point_back",
		213180: "CrossToGame_monopoly_receive_blessing_back",
		213181: "CrossToGame_monopoly_send_rank_reward",
		213182: "CrossToGame_monopoly_sync_score_change",
		213183: "CrossToGame_monopoly_enter_map",
		213184: "CrossToGame_monopoly_enter_activity",
		213185: "CrossToGame_monopoly_try_add_assist_back",
		213186: "CrossToGame_monopoly_assist_add_score",
		213187: "CrossToGame_monopoly_guess_reward_back",
	}
	MonopolyProtocols_value = map[string]int32{
		"monopoly_enter_activity":                          213101,
		"monopoly_enter_map":                               213102,
		"monopoly_roll_dice":                               213103,
		"monopoly_assist_list":                             213104,
		"monopoly_replenish_strength":                      213105,
		"monopoly_rescue_trap":                             213107,
		"monopoly_rob_list":                                213108,
		"monopoly_rob_union_detail":                        213109,
		"monopoly_rob":                                     213110,
		"monopoly_union_log_list":                          213111,
		"monopoly_player_log_detail":                       213112,
		"monopoly_assist_attack_monster":                   213113,
		"monopoly_receive_monster_reward":                  213114,
		"monopoly_red_point":                               213115,
		"monopoly_remote_roll_dice":                        213116,
		"monopoly_enter_rob":                               213117,
		"monopoly_auto_lock":                               213118,
		"monopoly_blessing_list":                           213119,
		"monopoly_receive_blessing":                        213120,
		"monopoly_quick_move":                              213121,
		"monopoly_dark_grid_move":                          213122,
		"monopoly_event_handle":                            213123,
		"monopoly_monster_attr":                            213124,
		"monopoly_monster_get_rank":                        213125,
		"monopoly_get_enemy_list":                          213126,
		"monopoly_score_detail":                            213127,
		"monopoly_building_score_detail":                   213128,
		"monopoly_barrage_notify":                          213130,
		"monopoly_move_notify":                             213131,
		"monopoly_notify_player_end_trap":                  213132,
		"monopoly_notify_building_upgrade":                 213133,
		"monopoly_sync_all_player_notify":                  213134,
		"monopoly_send_blessing_notify":                    213135,
		"monopoly_score_notify":                            213136,
		"monopoly_rank_notify":                             213137,
		"monopoly_assist_monster_die_notify":               213138,
		"monopoly_my_blessing_notify":                      213139,
		"monopoly_assist_red_notify":                       213140,
		"monopoly_get_group_rank":                          213141,
		"monopoly_worship":                                 213142,
		"monopoly_worship_back":                            213143,
		"monopoly_score_change_notify":                     213144,
		"monopoly_guess_players":                           213145,
		"monopoly_get_guess_data":                          213146,
		"monopoly_guess_select":                            213147,
		"monopoly_guess_reward":                            213148,
		"CrossToGame_monopoly_sync_server_player_attr":     213171,
		"CrossToGame_monopoly_sync_server_monster_attr":    213172,
		"CrossToGame_monopoly_data_sync_agent":             213173,
		"CrossToGame_monopoly_sync_player_trap_end":        213174,
		"CrossToGame_monopoly_assist_attack_back":          213175,
		"CrossToGame_monopoly_receive_monster_reward_back": 213176,
		"CrossToGame_monopoly_rov_back":                    213177,
		"CrossToGame_monopoly_send_blessing_back":          213178,
		"CrossToGame_monopoly_red_point_back":              213179,
		"CrossToGame_monopoly_receive_blessing_back":       213180,
		"CrossToGame_monopoly_send_rank_reward":            213181,
		"CrossToGame_monopoly_sync_score_change":           213182,
		"CrossToGame_monopoly_enter_map":                   213183,
		"CrossToGame_monopoly_enter_activity":              213184,
		"CrossToGame_monopoly_try_add_assist_back":         213185,
		"CrossToGame_monopoly_assist_add_score":            213186,
		"CrossToGame_monopoly_guess_reward_back":           213187,
	}
)

func (x MonopolyProtocols) Enum() *MonopolyProtocols {
	p := new(MonopolyProtocols)
	*p = x
	return p
}

func (x MonopolyProtocols) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonopolyProtocols) Descriptor() protoreflect.EnumDescriptor {
	return file_Monopoly_proto_enumTypes[0].Descriptor()
}

func (MonopolyProtocols) Type() protoreflect.EnumType {
	return &file_Monopoly_proto_enumTypes[0]
}

func (x MonopolyProtocols) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MonopolyProtocols) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MonopolyProtocols(num)
	return nil
}

// Deprecated: Use MonopolyProtocols.Descriptor instead.
func (MonopolyProtocols) EnumDescriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{0}
}

type MonopolySyncType int32

const (
	MonopolySyncType_barrage  MonopolySyncType = 1
	MonopolySyncType_move     MonopolySyncType = 2
	MonopolySyncType_trap     MonopolySyncType = 3
	MonopolySyncType_building MonopolySyncType = 4
	MonopolySyncType_blessing MonopolySyncType = 5
	MonopolySyncType_score    MonopolySyncType = 6
	MonopolySyncType_dead     MonopolySyncType = 7
	MonopolySyncType_redPoint MonopolySyncType = 8
)

// Enum value maps for MonopolySyncType.
var (
	MonopolySyncType_name = map[int32]string{
		1: "barrage",
		2: "move",
		3: "trap",
		4: "building",
		5: "blessing",
		6: "score",
		7: "dead",
		8: "redPoint",
	}
	MonopolySyncType_value = map[string]int32{
		"barrage":  1,
		"move":     2,
		"trap":     3,
		"building": 4,
		"blessing": 5,
		"score":    6,
		"dead":     7,
		"redPoint": 8,
	}
)

func (x MonopolySyncType) Enum() *MonopolySyncType {
	p := new(MonopolySyncType)
	*p = x
	return p
}

func (x MonopolySyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonopolySyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_Monopoly_proto_enumTypes[1].Descriptor()
}

func (MonopolySyncType) Type() protoreflect.EnumType {
	return &file_Monopoly_proto_enumTypes[1]
}

func (x MonopolySyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MonopolySyncType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MonopolySyncType(num)
	return nil
}

// Deprecated: Use MonopolySyncType.Descriptor instead.
func (MonopolySyncType) EnumDescriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{1}
}

type MonopolyRedPointEnum int32

const (
	MonopolyRedPointEnum_MonopolyRedPoint_null                MonopolyRedPointEnum = 0
	MonopolyRedPointEnum_MonopolyRedPoint_assistFinish        MonopolyRedPointEnum = 1
	MonopolyRedPointEnum_MonopolyRedPoint_assistTrap          MonopolyRedPointEnum = 2
	MonopolyRedPointEnum_MonopolyRedPoint_unionRankReward     MonopolyRedPointEnum = 3
	MonopolyRedPointEnum_MonopolyRedPoint_playerRankReward    MonopolyRedPointEnum = 4
	MonopolyRedPointEnum_MonopolyRedPoint_strengthReward      MonopolyRedPointEnum = 5
	MonopolyRedPointEnum_MonopolyRedPoint_unionRecharge       MonopolyRedPointEnum = 6
	MonopolyRedPointEnum_MonopolyRedPoint_battlePass          MonopolyRedPointEnum = 7
	MonopolyRedPointEnum_MonopolyRedPoint_freeGift            MonopolyRedPointEnum = 8
	MonopolyRedPointEnum_MonopolyRedPoint_strength            MonopolyRedPointEnum = 9
	MonopolyRedPointEnum_MonopolyRedPoint_unionAchievement    MonopolyRedPointEnum = 10
	MonopolyRedPointEnum_MonopolyRedPoint_personalAchievement MonopolyRedPointEnum = 11
	MonopolyRedPointEnum_MonopolyRedPoint_rob                 MonopolyRedPointEnum = 12
	MonopolyRedPointEnum_MonopolyRedPoint_assistMonster       MonopolyRedPointEnum = 13
	MonopolyRedPointEnum_MonopolyRedPoint_canGuess            MonopolyRedPointEnum = 14
	MonopolyRedPointEnum_MonopolyRedPoint_guessReward         MonopolyRedPointEnum = 15
)

// Enum value maps for MonopolyRedPointEnum.
var (
	MonopolyRedPointEnum_name = map[int32]string{
		0:  "MonopolyRedPoint_null",
		1:  "MonopolyRedPoint_assistFinish",
		2:  "MonopolyRedPoint_assistTrap",
		3:  "MonopolyRedPoint_unionRankReward",
		4:  "MonopolyRedPoint_playerRankReward",
		5:  "MonopolyRedPoint_strengthReward",
		6:  "MonopolyRedPoint_unionRecharge",
		7:  "MonopolyRedPoint_battlePass",
		8:  "MonopolyRedPoint_freeGift",
		9:  "MonopolyRedPoint_strength",
		10: "MonopolyRedPoint_unionAchievement",
		11: "MonopolyRedPoint_personalAchievement",
		12: "MonopolyRedPoint_rob",
		13: "MonopolyRedPoint_assistMonster",
		14: "MonopolyRedPoint_canGuess",
		15: "MonopolyRedPoint_guessReward",
	}
	MonopolyRedPointEnum_value = map[string]int32{
		"MonopolyRedPoint_null":                0,
		"MonopolyRedPoint_assistFinish":        1,
		"MonopolyRedPoint_assistTrap":          2,
		"MonopolyRedPoint_unionRankReward":     3,
		"MonopolyRedPoint_playerRankReward":    4,
		"MonopolyRedPoint_strengthReward":      5,
		"MonopolyRedPoint_unionRecharge":       6,
		"MonopolyRedPoint_battlePass":          7,
		"MonopolyRedPoint_freeGift":            8,
		"MonopolyRedPoint_strength":            9,
		"MonopolyRedPoint_unionAchievement":    10,
		"MonopolyRedPoint_personalAchievement": 11,
		"MonopolyRedPoint_rob":                 12,
		"MonopolyRedPoint_assistMonster":       13,
		"MonopolyRedPoint_canGuess":            14,
		"MonopolyRedPoint_guessReward":         15,
	}
)

func (x MonopolyRedPointEnum) Enum() *MonopolyRedPointEnum {
	p := new(MonopolyRedPointEnum)
	*p = x
	return p
}

func (x MonopolyRedPointEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonopolyRedPointEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Monopoly_proto_enumTypes[2].Descriptor()
}

func (MonopolyRedPointEnum) Type() protoreflect.EnumType {
	return &file_Monopoly_proto_enumTypes[2]
}

func (x MonopolyRedPointEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MonopolyRedPointEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MonopolyRedPointEnum(num)
	return nil
}

// Deprecated: Use MonopolyRedPointEnum.Descriptor instead.
func (MonopolyRedPointEnum) EnumDescriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{2}
}

type MonopolyConfigSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventConfigs  []*MonopolyEventConfigMsg   `protobuf:"bytes,1,rep,name=eventConfigs" json:"eventConfigs,omitempty"`
	MapConfigs    []*MonopolyMapConfigMsg     `protobuf:"bytes,2,rep,name=mapConfigs" json:"mapConfigs,omitempty"`
	MonsterConfig []*MonopolyMonsterConfigMsg `protobuf:"bytes,3,rep,name=monsterConfig" json:"monsterConfig,omitempty"`
	TimeConfig    []*MonopolyTimeConfigMsg    `protobuf:"bytes,4,rep,name=timeConfig" json:"timeConfig,omitempty"`
	GroupConfig   []*MonopolyGroupConfigMsg   `protobuf:"bytes,5,rep,name=groupConfig" json:"groupConfig,omitempty"`
}

func (x *MonopolyConfigSyncMsg) Reset() {
	*x = MonopolyConfigSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyConfigSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyConfigSyncMsg) ProtoMessage() {}

func (x *MonopolyConfigSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyConfigSyncMsg.ProtoReflect.Descriptor instead.
func (*MonopolyConfigSyncMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{0}
}

func (x *MonopolyConfigSyncMsg) GetEventConfigs() []*MonopolyEventConfigMsg {
	if x != nil {
		return x.EventConfigs
	}
	return nil
}

func (x *MonopolyConfigSyncMsg) GetMapConfigs() []*MonopolyMapConfigMsg {
	if x != nil {
		return x.MapConfigs
	}
	return nil
}

func (x *MonopolyConfigSyncMsg) GetMonsterConfig() []*MonopolyMonsterConfigMsg {
	if x != nil {
		return x.MonsterConfig
	}
	return nil
}

func (x *MonopolyConfigSyncMsg) GetTimeConfig() []*MonopolyTimeConfigMsg {
	if x != nil {
		return x.TimeConfig
	}
	return nil
}

func (x *MonopolyConfigSyncMsg) GetGroupConfig() []*MonopolyGroupConfigMsg {
	if x != nil {
		return x.GroupConfig
	}
	return nil
}

type MonopolyEventConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id         *int32  `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Type       *int32  `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Desc       *string `protobuf:"bytes,4,req,name=desc" json:"desc,omitempty"`
	Length     *int32  `protobuf:"varint,5,req,name=length" json:"length,omitempty"`
	Param      *string `protobuf:"bytes,6,req,name=param" json:"param,omitempty"`
	DrawParam  *string `protobuf:"bytes,7,req,name=drawParam" json:"drawParam,omitempty"`
	Reward     *string `protobuf:"bytes,8,req,name=reward" json:"reward,omitempty"`
	Score      *string `protobuf:"bytes,9,req,name=score" json:"score,omitempty"`
	Name       *string `protobuf:"bytes,10,req,name=name" json:"name,omitempty"`
}

func (x *MonopolyEventConfigMsg) Reset() {
	*x = MonopolyEventConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEventConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEventConfigMsg) ProtoMessage() {}

func (x *MonopolyEventConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEventConfigMsg.ProtoReflect.Descriptor instead.
func (*MonopolyEventConfigMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{1}
}

func (x *MonopolyEventConfigMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyEventConfigMsg) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MonopolyEventConfigMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MonopolyEventConfigMsg) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *MonopolyEventConfigMsg) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *MonopolyEventConfigMsg) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

func (x *MonopolyEventConfigMsg) GetDrawParam() string {
	if x != nil && x.DrawParam != nil {
		return *x.DrawParam
	}
	return ""
}

func (x *MonopolyEventConfigMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyEventConfigMsg) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

func (x *MonopolyEventConfigMsg) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type MonopolyMapConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id         *int32  `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Event      *int32  `protobuf:"varint,3,req,name=event" json:"event,omitempty"`
	Param      *string `protobuf:"bytes,4,opt,name=param" json:"param,omitempty"`
}

func (x *MonopolyMapConfigMsg) Reset() {
	*x = MonopolyMapConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMapConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMapConfigMsg) ProtoMessage() {}

func (x *MonopolyMapConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMapConfigMsg.ProtoReflect.Descriptor instead.
func (*MonopolyMapConfigMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{2}
}

func (x *MonopolyMapConfigMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyMapConfigMsg) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MonopolyMapConfigMsg) GetEvent() int32 {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return 0
}

func (x *MonopolyMapConfigMsg) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

type MonopolyMonsterConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Id         *int32  `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	TargetId   *int32  `protobuf:"varint,3,req,name=targetId" json:"targetId,omitempty"`
	Param      *string `protobuf:"bytes,4,req,name=param" json:"param,omitempty"`
}

func (x *MonopolyMonsterConfigMsg) Reset() {
	*x = MonopolyMonsterConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMonsterConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMonsterConfigMsg) ProtoMessage() {}

func (x *MonopolyMonsterConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMonsterConfigMsg.ProtoReflect.Descriptor instead.
func (*MonopolyMonsterConfigMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{3}
}

func (x *MonopolyMonsterConfigMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyMonsterConfigMsg) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MonopolyMonsterConfigMsg) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *MonopolyMonsterConfigMsg) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

type MonopolyTimeConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	TimeId       *int32  `protobuf:"varint,2,req,name=timeId" json:"timeId,omitempty"`
	BeginTime    *int64  `protobuf:"varint,3,req,name=beginTime" json:"beginTime,omitempty"`
	DurationTime *int64  `protobuf:"varint,4,req,name=durationTime" json:"durationTime,omitempty"`
	Param        *string `protobuf:"bytes,5,req,name=param" json:"param,omitempty"`
}

func (x *MonopolyTimeConfigMsg) Reset() {
	*x = MonopolyTimeConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyTimeConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyTimeConfigMsg) ProtoMessage() {}

func (x *MonopolyTimeConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyTimeConfigMsg.ProtoReflect.Descriptor instead.
func (*MonopolyTimeConfigMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{4}
}

func (x *MonopolyTimeConfigMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyTimeConfigMsg) GetTimeId() int32 {
	if x != nil && x.TimeId != nil {
		return *x.TimeId
	}
	return 0
}

func (x *MonopolyTimeConfigMsg) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *MonopolyTimeConfigMsg) GetDurationTime() int64 {
	if x != nil && x.DurationTime != nil {
		return *x.DurationTime
	}
	return 0
}

func (x *MonopolyTimeConfigMsg) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

type MonopolyGroupConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RankId     *int32  `protobuf:"varint,2,req,name=rankId" json:"rankId,omitempty"`
	Size       *int32  `protobuf:"varint,3,req,name=size" json:"size,omitempty"`
	Up         *int32  `protobuf:"varint,4,req,name=up" json:"up,omitempty"`
	Down       *int32  `protobuf:"varint,5,req,name=down" json:"down,omitempty"`
	Score      *string `protobuf:"bytes,6,req,name=score" json:"score,omitempty"`
}

func (x *MonopolyGroupConfigMsg) Reset() {
	*x = MonopolyGroupConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGroupConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGroupConfigMsg) ProtoMessage() {}

func (x *MonopolyGroupConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGroupConfigMsg.ProtoReflect.Descriptor instead.
func (*MonopolyGroupConfigMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{5}
}

func (x *MonopolyGroupConfigMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyGroupConfigMsg) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *MonopolyGroupConfigMsg) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *MonopolyGroupConfigMsg) GetUp() int32 {
	if x != nil && x.Up != nil {
		return *x.Up
	}
	return 0
}

func (x *MonopolyGroupConfigMsg) GetDown() int32 {
	if x != nil && x.Down != nil {
		return *x.Down
	}
	return 0
}

func (x *MonopolyGroupConfigMsg) GetScore() string {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return ""
}

type MonopolyEnterActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyEnterActivityReq) Reset() {
	*x = MonopolyEnterActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEnterActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEnterActivityReq) ProtoMessage() {}

func (x *MonopolyEnterActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEnterActivityReq.ProtoReflect.Descriptor instead.
func (*MonopolyEnterActivityReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{6}
}

func (x *MonopolyEnterActivityReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyEnterActivityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionRank     *int32                    `protobuf:"varint,2,opt,name=unionRank" json:"unionRank,omitempty"`
	Round         *int32                    `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Group         *int32                    `protobuf:"varint,4,opt,name=group" json:"group,omitempty"`
	RankId        *int32                    `protobuf:"varint,5,opt,name=rankId" json:"rankId,omitempty"`
	Groups        []int32                   `protobuf:"varint,6,rep,name=groups" json:"groups,omitempty"`
	UnionId       *int64                    `protobuf:"varint,7,opt,name=unionId" json:"unionId,omitempty"`
	Top3Union     []*UnionBaseData          `protobuf:"bytes,8,rep,name=top3Union" json:"top3Union,omitempty"`
	SettleInfo    *MonopolySettleInfo       `protobuf:"bytes,9,opt,name=settleInfo" json:"settleInfo,omitempty"`
	WorshipPlayer *MonopolyWorshipPlayerMsg `protobuf:"bytes,10,opt,name=worshipPlayer" json:"worshipPlayer,omitempty"`
	CanWorship    *bool                     `protobuf:"varint,11,opt,name=canWorship" json:"canWorship,omitempty"`
}

func (x *MonopolyEnterActivityResp) Reset() {
	*x = MonopolyEnterActivityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEnterActivityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEnterActivityResp) ProtoMessage() {}

func (x *MonopolyEnterActivityResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEnterActivityResp.ProtoReflect.Descriptor instead.
func (*MonopolyEnterActivityResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{7}
}

func (x *MonopolyEnterActivityResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyEnterActivityResp) GetUnionRank() int32 {
	if x != nil && x.UnionRank != nil {
		return *x.UnionRank
	}
	return 0
}

func (x *MonopolyEnterActivityResp) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *MonopolyEnterActivityResp) GetGroup() int32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

func (x *MonopolyEnterActivityResp) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *MonopolyEnterActivityResp) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *MonopolyEnterActivityResp) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *MonopolyEnterActivityResp) GetTop3Union() []*UnionBaseData {
	if x != nil {
		return x.Top3Union
	}
	return nil
}

func (x *MonopolyEnterActivityResp) GetSettleInfo() *MonopolySettleInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *MonopolyEnterActivityResp) GetWorshipPlayer() *MonopolyWorshipPlayerMsg {
	if x != nil {
		return x.WorshipPlayer
	}
	return nil
}

func (x *MonopolyEnterActivityResp) GetCanWorship() bool {
	if x != nil && x.CanWorship != nil {
		return *x.CanWorship
	}
	return false
}

type MonopolySettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round           *int32 `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
	Statues         *int32 `protobuf:"varint,2,opt,name=statues" json:"statues,omitempty"`
	GroupRank       *int32 `protobuf:"varint,3,opt,name=groupRank" json:"groupRank,omitempty"`
	Rank            *int32 `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	BattleFieldSore *int32 `protobuf:"varint,5,opt,name=battleFieldSore" json:"battleFieldSore,omitempty"`
	TotalScore      *int32 `protobuf:"varint,6,opt,name=totalScore" json:"totalScore,omitempty"`
}

func (x *MonopolySettleInfo) Reset() {
	*x = MonopolySettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolySettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolySettleInfo) ProtoMessage() {}

func (x *MonopolySettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolySettleInfo.ProtoReflect.Descriptor instead.
func (*MonopolySettleInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{8}
}

func (x *MonopolySettleInfo) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *MonopolySettleInfo) GetStatues() int32 {
	if x != nil && x.Statues != nil {
		return *x.Statues
	}
	return 0
}

func (x *MonopolySettleInfo) GetGroupRank() int32 {
	if x != nil && x.GroupRank != nil {
		return *x.GroupRank
	}
	return 0
}

func (x *MonopolySettleInfo) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolySettleInfo) GetBattleFieldSore() int32 {
	if x != nil && x.BattleFieldSore != nil {
		return *x.BattleFieldSore
	}
	return 0
}

func (x *MonopolySettleInfo) GetTotalScore() int32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

type MonopolyEnterMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyEnterMapReq) Reset() {
	*x = MonopolyEnterMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEnterMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEnterMapReq) ProtoMessage() {}

func (x *MonopolyEnterMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEnterMapReq.ProtoReflect.Descriptor instead.
func (*MonopolyEnterMapReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{9}
}

func (x *MonopolyEnterMapReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyEnterMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerData   *MonopolySelfPlayerDataMsg    `protobuf:"bytes,2,opt,name=playerData" json:"playerData,omitempty"`
	IsAutoUnLock *bool                         `protobuf:"varint,3,opt,name=isAutoUnLock" json:"isAutoUnLock,omitempty"`
	EventData    *MonopolyEventDoingInfoEntity `protobuf:"bytes,4,opt,name=eventData" json:"eventData,omitempty"`
	MallInfo     []*MonopolyUserMallInfo       `protobuf:"bytes,5,rep,name=mallInfo" json:"mallInfo,omitempty"`
	Rank         *int32                        `protobuf:"varint,6,opt,name=rank" json:"rank,omitempty"`
	BuildExp     *int32                        `protobuf:"varint,7,opt,name=buildExp" json:"buildExp,omitempty"`
	TeamInfos    []*MonopolyOtherPlayerDataMsg `protobuf:"bytes,8,rep,name=teamInfos" json:"teamInfos,omitempty"`
	NoticeNum    *int32                        `protobuf:"varint,9,opt,name=noticeNum" json:"noticeNum,omitempty"`
	UnionRank    *int32                        `protobuf:"varint,10,opt,name=unionRank" json:"unionRank,omitempty"`
	UnionScore   *int32                        `protobuf:"varint,11,opt,name=unionScore" json:"unionScore,omitempty"`
}

func (x *MonopolyEnterMapResp) Reset() {
	*x = MonopolyEnterMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEnterMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEnterMapResp) ProtoMessage() {}

func (x *MonopolyEnterMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEnterMapResp.ProtoReflect.Descriptor instead.
func (*MonopolyEnterMapResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{10}
}

func (x *MonopolyEnterMapResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyEnterMapResp) GetPlayerData() *MonopolySelfPlayerDataMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *MonopolyEnterMapResp) GetIsAutoUnLock() bool {
	if x != nil && x.IsAutoUnLock != nil {
		return *x.IsAutoUnLock
	}
	return false
}

func (x *MonopolyEnterMapResp) GetEventData() *MonopolyEventDoingInfoEntity {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *MonopolyEnterMapResp) GetMallInfo() []*MonopolyUserMallInfo {
	if x != nil {
		return x.MallInfo
	}
	return nil
}

func (x *MonopolyEnterMapResp) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolyEnterMapResp) GetBuildExp() int32 {
	if x != nil && x.BuildExp != nil {
		return *x.BuildExp
	}
	return 0
}

func (x *MonopolyEnterMapResp) GetTeamInfos() []*MonopolyOtherPlayerDataMsg {
	if x != nil {
		return x.TeamInfos
	}
	return nil
}

func (x *MonopolyEnterMapResp) GetNoticeNum() int32 {
	if x != nil && x.NoticeNum != nil {
		return *x.NoticeNum
	}
	return 0
}

func (x *MonopolyEnterMapResp) GetUnionRank() int32 {
	if x != nil && x.UnionRank != nil {
		return *x.UnionRank
	}
	return 0
}

func (x *MonopolyEnterMapResp) GetUnionScore() int32 {
	if x != nil && x.UnionScore != nil {
		return *x.UnionScore
	}
	return 0
}

type MonopolySelfPlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadData          *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=headData" json:"headData,omitempty"`
	CurrentPosition   *int32             `protobuf:"varint,2,opt,name=currentPosition" json:"currentPosition,omitempty"`
	AppearanceId      *int32             `protobuf:"varint,3,opt,name=appearanceId" json:"appearanceId,omitempty"`
	CloudId           *int32             `protobuf:"varint,4,opt,name=cloudId" json:"cloudId,omitempty"`
	NickName          *string            `protobuf:"bytes,5,opt,name=nickName" json:"nickName,omitempty"`
	Strength          *int32             `protobuf:"varint,6,opt,name=strength" json:"strength,omitempty"`
	FightValue        *int64             `protobuf:"varint,7,opt,name=fightValue" json:"fightValue,omitempty"`
	LastRecoveryTime  *int64             `protobuf:"varint,8,opt,name=lastRecoveryTime" json:"lastRecoveryTime,omitempty"`
	TrapEndTime       *int64             `protobuf:"varint,9,opt,name=trapEndTime" json:"trapEndTime,omitempty"`
	DoubleRewardCount *int32             `protobuf:"varint,10,opt,name=doubleRewardCount" json:"doubleRewardCount,omitempty"`
	Score             *int32             `protobuf:"varint,11,opt,name=score" json:"score,omitempty"`
	TotalCostStrength *int32             `protobuf:"varint,12,opt,name=totalCostStrength" json:"totalCostStrength,omitempty"`
	TriggerMoveBuff   *int32             `protobuf:"varint,13,opt,name=triggerMoveBuff" json:"triggerMoveBuff,omitempty"`
	NeedMove          *bool              `protobuf:"varint,14,opt,name=needMove" json:"needMove,omitempty"`
	Title             *int32             `protobuf:"varint,15,opt,name=title" json:"title,omitempty"`
}

func (x *MonopolySelfPlayerDataMsg) Reset() {
	*x = MonopolySelfPlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolySelfPlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolySelfPlayerDataMsg) ProtoMessage() {}

func (x *MonopolySelfPlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolySelfPlayerDataMsg.ProtoReflect.Descriptor instead.
func (*MonopolySelfPlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{11}
}

func (x *MonopolySelfPlayerDataMsg) GetHeadData() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadData
	}
	return nil
}

func (x *MonopolySelfPlayerDataMsg) GetCurrentPosition() int32 {
	if x != nil && x.CurrentPosition != nil {
		return *x.CurrentPosition
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetCloudId() int32 {
	if x != nil && x.CloudId != nil {
		return *x.CloudId
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MonopolySelfPlayerDataMsg) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetLastRecoveryTime() int64 {
	if x != nil && x.LastRecoveryTime != nil {
		return *x.LastRecoveryTime
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetTrapEndTime() int64 {
	if x != nil && x.TrapEndTime != nil {
		return *x.TrapEndTime
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetDoubleRewardCount() int32 {
	if x != nil && x.DoubleRewardCount != nil {
		return *x.DoubleRewardCount
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetTotalCostStrength() int32 {
	if x != nil && x.TotalCostStrength != nil {
		return *x.TotalCostStrength
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetTriggerMoveBuff() int32 {
	if x != nil && x.TriggerMoveBuff != nil {
		return *x.TriggerMoveBuff
	}
	return 0
}

func (x *MonopolySelfPlayerDataMsg) GetNeedMove() bool {
	if x != nil && x.NeedMove != nil {
		return *x.NeedMove
	}
	return false
}

func (x *MonopolySelfPlayerDataMsg) GetTitle() int32 {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return 0
}

type MonopolyBuffDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId *int32 `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"`
	Layer   *int32 `protobuf:"varint,2,opt,name=layer" json:"layer,omitempty"`
}

func (x *MonopolyBuffDataMsg) Reset() {
	*x = MonopolyBuffDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBuffDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBuffDataMsg) ProtoMessage() {}

func (x *MonopolyBuffDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBuffDataMsg.ProtoReflect.Descriptor instead.
func (*MonopolyBuffDataMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{12}
}

func (x *MonopolyBuffDataMsg) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *MonopolyBuffDataMsg) GetLayer() int32 {
	if x != nil && x.Layer != nil {
		return *x.Layer
	}
	return 0
}

type MonopolyOtherPlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadData        *PlayerHeadDataMsg `protobuf:"bytes,1,opt,name=headData" json:"headData,omitempty"`
	CurrentPosition *int32             `protobuf:"varint,2,opt,name=currentPosition" json:"currentPosition,omitempty"`
	AppearanceId    *int32             `protobuf:"varint,3,opt,name=appearanceId" json:"appearanceId,omitempty"`
	CloudId         *int32             `protobuf:"varint,4,opt,name=cloudId" json:"cloudId,omitempty"`
	NickName        *string            `protobuf:"bytes,5,opt,name=nickName" json:"nickName,omitempty"`
	TrapEndTime     *int64             `protobuf:"varint,6,opt,name=trapEndTime" json:"trapEndTime,omitempty"`
	Title           *int32             `protobuf:"varint,7,opt,name=title" json:"title,omitempty"`
}

func (x *MonopolyOtherPlayerDataMsg) Reset() {
	*x = MonopolyOtherPlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyOtherPlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyOtherPlayerDataMsg) ProtoMessage() {}

func (x *MonopolyOtherPlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyOtherPlayerDataMsg.ProtoReflect.Descriptor instead.
func (*MonopolyOtherPlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{13}
}

func (x *MonopolyOtherPlayerDataMsg) GetHeadData() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadData
	}
	return nil
}

func (x *MonopolyOtherPlayerDataMsg) GetCurrentPosition() int32 {
	if x != nil && x.CurrentPosition != nil {
		return *x.CurrentPosition
	}
	return 0
}

func (x *MonopolyOtherPlayerDataMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *MonopolyOtherPlayerDataMsg) GetCloudId() int32 {
	if x != nil && x.CloudId != nil {
		return *x.CloudId
	}
	return 0
}

func (x *MonopolyOtherPlayerDataMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MonopolyOtherPlayerDataMsg) GetTrapEndTime() int64 {
	if x != nil && x.TrapEndTime != nil {
		return *x.TrapEndTime
	}
	return 0
}

func (x *MonopolyOtherPlayerDataMsg) GetTitle() int32 {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return 0
}

type MonopolyRollDiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyRollDiceReq) Reset() {
	*x = MonopolyRollDiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRollDiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRollDiceReq) ProtoMessage() {}

func (x *MonopolyRollDiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRollDiceReq.ProtoReflect.Descriptor instead.
func (*MonopolyRollDiceReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{14}
}

func (x *MonopolyRollDiceReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyRollDiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MapIndex   *int32              `protobuf:"varint,2,opt,name=mapIndex" json:"mapIndex,omitempty"`
	MoveResult *MonopolyMoveResult `protobuf:"bytes,3,opt,name=moveResult" json:"moveResult,omitempty"`
}

func (x *MonopolyRollDiceResp) Reset() {
	*x = MonopolyRollDiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRollDiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRollDiceResp) ProtoMessage() {}

func (x *MonopolyRollDiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRollDiceResp.ProtoReflect.Descriptor instead.
func (*MonopolyRollDiceResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{15}
}

func (x *MonopolyRollDiceResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyRollDiceResp) GetMapIndex() int32 {
	if x != nil && x.MapIndex != nil {
		return *x.MapIndex
	}
	return 0
}

func (x *MonopolyRollDiceResp) GetMoveResult() *MonopolyMoveResult {
	if x != nil {
		return x.MoveResult
	}
	return nil
}

type MonopolyMoveResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data             *MonopolyExploreResultData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Strength         *int32                     `protobuf:"varint,2,opt,name=strength" json:"strength,omitempty"`
	LastRecoveryTime *int64                     `protobuf:"varint,3,opt,name=lastRecoveryTime" json:"lastRecoveryTime,omitempty"`
	TotalCostEnergy  *int32                     `protobuf:"varint,4,opt,name=totalCostEnergy" json:"totalCostEnergy,omitempty"`
	Score            *int32                     `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	NeedMove         *bool                      `protobuf:"varint,6,opt,name=needMove" json:"needMove,omitempty"`
}

func (x *MonopolyMoveResult) Reset() {
	*x = MonopolyMoveResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMoveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMoveResult) ProtoMessage() {}

func (x *MonopolyMoveResult) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMoveResult.ProtoReflect.Descriptor instead.
func (*MonopolyMoveResult) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{16}
}

func (x *MonopolyMoveResult) GetData() *MonopolyExploreResultData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MonopolyMoveResult) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *MonopolyMoveResult) GetLastRecoveryTime() int64 {
	if x != nil && x.LastRecoveryTime != nil {
		return *x.LastRecoveryTime
	}
	return 0
}

func (x *MonopolyMoveResult) GetTotalCostEnergy() int32 {
	if x != nil && x.TotalCostEnergy != nil {
		return *x.TotalCostEnergy
	}
	return 0
}

func (x *MonopolyMoveResult) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MonopolyMoveResult) GetNeedMove() bool {
	if x != nil && x.NeedMove != nil {
		return *x.NeedMove
	}
	return false
}

type MonopolyExploreResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward              *string                    `protobuf:"bytes,1,opt,name=reward" json:"reward,omitempty"`
	MonsterInfo         *MonopolyMonsterMsg        `protobuf:"bytes,2,opt,name=monsterInfo" json:"monsterInfo,omitempty"`
	MallInfo            []*MonopolyUserMallInfo    `protobuf:"bytes,3,rep,name=mallInfo" json:"mallInfo,omitempty"`
	TrapEndTime         *int64                     `protobuf:"varint,4,opt,name=trapEndTime" json:"trapEndTime,omitempty"`
	QuickMove           *int32                     `protobuf:"varint,5,opt,name=quickMove" json:"quickMove,omitempty"`
	DoubleReward        *int32                     `protobuf:"varint,6,opt,name=doubleReward" json:"doubleReward,omitempty"`
	MonopolyBlessingMsg *MonopolyBlessingMsg       `protobuf:"bytes,7,opt,name=MonopolyBlessingMsg" json:"MonopolyBlessingMsg,omitempty"`
	DarkGridRewardList  *MonopolyDarkGridRewardMsg `protobuf:"bytes,8,opt,name=darkGridRewardList" json:"darkGridRewardList,omitempty"`
	EventId             *int32                     `protobuf:"varint,9,opt,name=eventId" json:"eventId,omitempty"`
}

func (x *MonopolyExploreResultData) Reset() {
	*x = MonopolyExploreResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyExploreResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyExploreResultData) ProtoMessage() {}

func (x *MonopolyExploreResultData) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyExploreResultData.ProtoReflect.Descriptor instead.
func (*MonopolyExploreResultData) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{17}
}

func (x *MonopolyExploreResultData) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyExploreResultData) GetMonsterInfo() *MonopolyMonsterMsg {
	if x != nil {
		return x.MonsterInfo
	}
	return nil
}

func (x *MonopolyExploreResultData) GetMallInfo() []*MonopolyUserMallInfo {
	if x != nil {
		return x.MallInfo
	}
	return nil
}

func (x *MonopolyExploreResultData) GetTrapEndTime() int64 {
	if x != nil && x.TrapEndTime != nil {
		return *x.TrapEndTime
	}
	return 0
}

func (x *MonopolyExploreResultData) GetQuickMove() int32 {
	if x != nil && x.QuickMove != nil {
		return *x.QuickMove
	}
	return 0
}

func (x *MonopolyExploreResultData) GetDoubleReward() int32 {
	if x != nil && x.DoubleReward != nil {
		return *x.DoubleReward
	}
	return 0
}

func (x *MonopolyExploreResultData) GetMonopolyBlessingMsg() *MonopolyBlessingMsg {
	if x != nil {
		return x.MonopolyBlessingMsg
	}
	return nil
}

func (x *MonopolyExploreResultData) GetDarkGridRewardList() *MonopolyDarkGridRewardMsg {
	if x != nil {
		return x.DarkGridRewardList
	}
	return nil
}

func (x *MonopolyExploreResultData) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type MonopolyEventDoingInfoEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterInfo        *MonopolyMonsterMsg        `protobuf:"bytes,1,opt,name=monsterInfo" json:"monsterInfo,omitempty"`
	BlessingMsg        *MonopolyBlessingMsg       `protobuf:"bytes,2,opt,name=blessingMsg" json:"blessingMsg,omitempty"`
	DarkGridRewardList *MonopolyDarkGridRewardMsg `protobuf:"bytes,3,opt,name=darkGridRewardList" json:"darkGridRewardList,omitempty"`
}

func (x *MonopolyEventDoingInfoEntity) Reset() {
	*x = MonopolyEventDoingInfoEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEventDoingInfoEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEventDoingInfoEntity) ProtoMessage() {}

func (x *MonopolyEventDoingInfoEntity) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEventDoingInfoEntity.ProtoReflect.Descriptor instead.
func (*MonopolyEventDoingInfoEntity) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{18}
}

func (x *MonopolyEventDoingInfoEntity) GetMonsterInfo() *MonopolyMonsterMsg {
	if x != nil {
		return x.MonsterInfo
	}
	return nil
}

func (x *MonopolyEventDoingInfoEntity) GetBlessingMsg() *MonopolyBlessingMsg {
	if x != nil {
		return x.BlessingMsg
	}
	return nil
}

func (x *MonopolyEventDoingInfoEntity) GetDarkGridRewardList() *MonopolyDarkGridRewardMsg {
	if x != nil {
		return x.DarkGridRewardList
	}
	return nil
}

type MonopolyMonsterMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterUid      *int64           `protobuf:"varint,1,opt,name=monsterUid" json:"monsterUid,omitempty"`
	MonsterId       *int32           `protobuf:"varint,2,opt,name=monsterId" json:"monsterId,omitempty"`
	MaxHp           *int64           `protobuf:"varint,3,opt,name=maxHp" json:"maxHp,omitempty"`
	LeftHp          *int64           `protobuf:"varint,4,opt,name=leftHp" json:"leftHp,omitempty"`
	TriggerPlayerId *int64           `protobuf:"varint,5,opt,name=triggerPlayerId" json:"triggerPlayerId,omitempty"`
	EventId         *int32           `protobuf:"varint,6,opt,name=eventId" json:"eventId,omitempty"`
	FightValue      *int64           `protobuf:"varint,7,opt,name=fightValue" json:"fightValue,omitempty"`
	BattleRecord    *BattleRecordMsg `protobuf:"bytes,8,opt,name=battleRecord" json:"battleRecord,omitempty"`
	AttackTime      *int64           `protobuf:"varint,9,opt,name=attackTime" json:"attackTime,omitempty"`
	Reward          *string          `protobuf:"bytes,10,opt,name=reward" json:"reward,omitempty"`
	Damage          *int64           `protobuf:"varint,11,opt,name=damage" json:"damage,omitempty"`
}

func (x *MonopolyMonsterMsg) Reset() {
	*x = MonopolyMonsterMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMonsterMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMonsterMsg) ProtoMessage() {}

func (x *MonopolyMonsterMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMonsterMsg.ProtoReflect.Descriptor instead.
func (*MonopolyMonsterMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{19}
}

func (x *MonopolyMonsterMsg) GetMonsterUid() int64 {
	if x != nil && x.MonsterUid != nil {
		return *x.MonsterUid
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetMonsterId() int32 {
	if x != nil && x.MonsterId != nil {
		return *x.MonsterId
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetMaxHp() int64 {
	if x != nil && x.MaxHp != nil {
		return *x.MaxHp
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetLeftHp() int64 {
	if x != nil && x.LeftHp != nil {
		return *x.LeftHp
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetTriggerPlayerId() int64 {
	if x != nil && x.TriggerPlayerId != nil {
		return *x.TriggerPlayerId
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.BattleRecord
	}
	return nil
}

func (x *MonopolyMonsterMsg) GetAttackTime() int64 {
	if x != nil && x.AttackTime != nil {
		return *x.AttackTime
	}
	return 0
}

func (x *MonopolyMonsterMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyMonsterMsg) GetDamage() int64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

type MonopolyUserMallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MallId      *int32 `protobuf:"varint,1,opt,name=mallId" json:"mallId,omitempty"`
	ExpiredTime *int64 `protobuf:"varint,2,opt,name=expiredTime" json:"expiredTime,omitempty"`
	CanBuyCount *int32 `protobuf:"varint,3,opt,name=canBuyCount" json:"canBuyCount,omitempty"`
}

func (x *MonopolyUserMallInfo) Reset() {
	*x = MonopolyUserMallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyUserMallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyUserMallInfo) ProtoMessage() {}

func (x *MonopolyUserMallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyUserMallInfo.ProtoReflect.Descriptor instead.
func (*MonopolyUserMallInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{20}
}

func (x *MonopolyUserMallInfo) GetMallId() int32 {
	if x != nil && x.MallId != nil {
		return *x.MallId
	}
	return 0
}

func (x *MonopolyUserMallInfo) GetExpiredTime() int64 {
	if x != nil && x.ExpiredTime != nil {
		return *x.ExpiredTime
	}
	return 0
}

func (x *MonopolyUserMallInfo) GetCanBuyCount() int32 {
	if x != nil && x.CanBuyCount != nil {
		return *x.CanBuyCount
	}
	return 0
}

type MonopolyBlessingMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlessingList []*MonopolyBlessingInfo `protobuf:"bytes,1,rep,name=blessingList" json:"blessingList,omitempty"`
	Reward       *string                 `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
}

func (x *MonopolyBlessingMsg) Reset() {
	*x = MonopolyBlessingMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBlessingMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBlessingMsg) ProtoMessage() {}

func (x *MonopolyBlessingMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBlessingMsg.ProtoReflect.Descriptor instead.
func (*MonopolyBlessingMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{21}
}

func (x *MonopolyBlessingMsg) GetBlessingList() []*MonopolyBlessingInfo {
	if x != nil {
		return x.BlessingList
	}
	return nil
}

func (x *MonopolyBlessingMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type MonopolyBlessingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Type  *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (x *MonopolyBlessingInfo) Reset() {
	*x = MonopolyBlessingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBlessingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBlessingInfo) ProtoMessage() {}

func (x *MonopolyBlessingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBlessingInfo.ProtoReflect.Descriptor instead.
func (*MonopolyBlessingInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{22}
}

func (x *MonopolyBlessingInfo) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MonopolyBlessingInfo) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type MonopolyDarkGridRewardMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerOn *int32   `protobuf:"varint,1,opt,name=playerOn" json:"playerOn,omitempty"`
	Reward   []string `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
}

func (x *MonopolyDarkGridRewardMsg) Reset() {
	*x = MonopolyDarkGridRewardMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyDarkGridRewardMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyDarkGridRewardMsg) ProtoMessage() {}

func (x *MonopolyDarkGridRewardMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyDarkGridRewardMsg.ProtoReflect.Descriptor instead.
func (*MonopolyDarkGridRewardMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{23}
}

func (x *MonopolyDarkGridRewardMsg) GetPlayerOn() int32 {
	if x != nil && x.PlayerOn != nil {
		return *x.PlayerOn
	}
	return 0
}

func (x *MonopolyDarkGridRewardMsg) GetReward() []string {
	if x != nil {
		return x.Reward
	}
	return nil
}

type MonopolyAssistListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyAssistListReq) Reset() {
	*x = MonopolyAssistListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAssistListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAssistListReq) ProtoMessage() {}

func (x *MonopolyAssistListReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAssistListReq.ProtoReflect.Descriptor instead.
func (*MonopolyAssistListReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{24}
}

func (x *MonopolyAssistListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyAssistListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	TrapInfo    []*MonopolyTrapPlayerMsg    `protobuf:"bytes,2,rep,name=trapInfo" json:"trapInfo,omitempty"`
	AssistInfo  []*MonopolyAssistMonsterMsg `protobuf:"bytes,3,rep,name=assistInfo" json:"assistInfo,omitempty"`
	AssistTimes *int32                      `protobuf:"varint,4,opt,name=assistTimes" json:"assistTimes,omitempty"`
}

func (x *MonopolyAssistListResp) Reset() {
	*x = MonopolyAssistListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAssistListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAssistListResp) ProtoMessage() {}

func (x *MonopolyAssistListResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAssistListResp.ProtoReflect.Descriptor instead.
func (*MonopolyAssistListResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{25}
}

func (x *MonopolyAssistListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyAssistListResp) GetTrapInfo() []*MonopolyTrapPlayerMsg {
	if x != nil {
		return x.TrapInfo
	}
	return nil
}

func (x *MonopolyAssistListResp) GetAssistInfo() []*MonopolyAssistMonsterMsg {
	if x != nil {
		return x.AssistInfo
	}
	return nil
}

func (x *MonopolyAssistListResp) GetAssistTimes() int32 {
	if x != nil && x.AssistTimes != nil {
		return *x.AssistTimes
	}
	return 0
}

type MonopolyTrapPlayerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *int64  `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	AppearanceId *int32  `protobuf:"varint,2,opt,name=appearanceId" json:"appearanceId,omitempty"`
	NickName     *string `protobuf:"bytes,3,opt,name=nickName" json:"nickName,omitempty"`
	EndTime      *int64  `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
}

func (x *MonopolyTrapPlayerMsg) Reset() {
	*x = MonopolyTrapPlayerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyTrapPlayerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyTrapPlayerMsg) ProtoMessage() {}

func (x *MonopolyTrapPlayerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyTrapPlayerMsg.ProtoReflect.Descriptor instead.
func (*MonopolyTrapPlayerMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{26}
}

func (x *MonopolyTrapPlayerMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MonopolyTrapPlayerMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *MonopolyTrapPlayerMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MonopolyTrapPlayerMsg) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type MonopolyAssistMonsterMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterUid  *int64   `protobuf:"varint,1,opt,name=monsterUid" json:"monsterUid,omitempty"`
	MonsterId   *int32   `protobuf:"varint,2,opt,name=monsterId" json:"monsterId,omitempty"`
	Hp          *int64   `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`
	LeftHp      *int64   `protobuf:"varint,4,opt,name=leftHp" json:"leftHp,omitempty"`
	NickName    *string  `protobuf:"bytes,5,opt,name=nickName" json:"nickName,omitempty"`
	EventId     *int32   `protobuf:"varint,6,opt,name=eventId" json:"eventId,omitempty"`
	FightValue  *int64   `protobuf:"varint,7,opt,name=fightValue" json:"fightValue,omitempty"`
	AssistTime  *int64   `protobuf:"varint,8,opt,name=assistTime" json:"assistTime,omitempty"`
	HelperName  []string `protobuf:"bytes,9,rep,name=helperName" json:"helperName,omitempty"`
	State       *int32   `protobuf:"varint,10,opt,name=state" json:"state,omitempty"`
	Reward      *string  `protobuf:"bytes,11,opt,name=reward" json:"reward,omitempty"`
	AttackTime  *int64   `protobuf:"varint,12,opt,name=attackTime" json:"attackTime,omitempty"`
	PlayerId    *int64   `protobuf:"varint,13,opt,name=playerId" json:"playerId,omitempty"`
	Score       *int32   `protobuf:"varint,14,opt,name=score" json:"score,omitempty"`
	UnionScore  *int32   `protobuf:"varint,15,opt,name=unionScore" json:"unionScore,omitempty"`
	AssistTimes *int32   `protobuf:"varint,16,opt,name=assistTimes" json:"assistTimes,omitempty"`
}

func (x *MonopolyAssistMonsterMsg) Reset() {
	*x = MonopolyAssistMonsterMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAssistMonsterMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAssistMonsterMsg) ProtoMessage() {}

func (x *MonopolyAssistMonsterMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAssistMonsterMsg.ProtoReflect.Descriptor instead.
func (*MonopolyAssistMonsterMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{27}
}

func (x *MonopolyAssistMonsterMsg) GetMonsterUid() int64 {
	if x != nil && x.MonsterUid != nil {
		return *x.MonsterUid
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetMonsterId() int32 {
	if x != nil && x.MonsterId != nil {
		return *x.MonsterId
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetHp() int64 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetLeftHp() int64 {
	if x != nil && x.LeftHp != nil {
		return *x.LeftHp
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MonopolyAssistMonsterMsg) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetAssistTime() int64 {
	if x != nil && x.AssistTime != nil {
		return *x.AssistTime
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetHelperName() []string {
	if x != nil {
		return x.HelperName
	}
	return nil
}

func (x *MonopolyAssistMonsterMsg) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyAssistMonsterMsg) GetAttackTime() int64 {
	if x != nil && x.AttackTime != nil {
		return *x.AttackTime
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetUnionScore() int32 {
	if x != nil && x.UnionScore != nil {
		return *x.UnionScore
	}
	return 0
}

func (x *MonopolyAssistMonsterMsg) GetAssistTimes() int32 {
	if x != nil && x.AssistTimes != nil {
		return *x.AssistTimes
	}
	return 0
}

type MonopolyMonsterLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterUid *int64   `protobuf:"varint,1,opt,name=monsterUid" json:"monsterUid,omitempty"`
	MonsterId  *int64   `protobuf:"varint,2,opt,name=monsterId" json:"monsterId,omitempty"`
	AssistName []string `protobuf:"bytes,3,rep,name=assistName" json:"assistName,omitempty"`
	State      *int32   `protobuf:"varint,4,opt,name=state" json:"state,omitempty"`
	Reward     *string  `protobuf:"bytes,5,opt,name=reward" json:"reward,omitempty"`
}

func (x *MonopolyMonsterLogMsg) Reset() {
	*x = MonopolyMonsterLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMonsterLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMonsterLogMsg) ProtoMessage() {}

func (x *MonopolyMonsterLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMonsterLogMsg.ProtoReflect.Descriptor instead.
func (*MonopolyMonsterLogMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{28}
}

func (x *MonopolyMonsterLogMsg) GetMonsterUid() int64 {
	if x != nil && x.MonsterUid != nil {
		return *x.MonsterUid
	}
	return 0
}

func (x *MonopolyMonsterLogMsg) GetMonsterId() int64 {
	if x != nil && x.MonsterId != nil {
		return *x.MonsterId
	}
	return 0
}

func (x *MonopolyMonsterLogMsg) GetAssistName() []string {
	if x != nil {
		return x.AssistName
	}
	return nil
}

func (x *MonopolyMonsterLogMsg) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *MonopolyMonsterLogMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type MonopolyReplenishStrengthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UseCount   *int32 `protobuf:"varint,2,req,name=useCount" json:"useCount,omitempty"`
}

func (x *MonopolyReplenishStrengthReq) Reset() {
	*x = MonopolyReplenishStrengthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyReplenishStrengthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyReplenishStrengthReq) ProtoMessage() {}

func (x *MonopolyReplenishStrengthReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyReplenishStrengthReq.ProtoReflect.Descriptor instead.
func (*MonopolyReplenishStrengthReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{29}
}

func (x *MonopolyReplenishStrengthReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyReplenishStrengthReq) GetUseCount() int32 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

type MonopolyReplenishStrengthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	CostInfo         *string `protobuf:"bytes,2,opt,name=costInfo" json:"costInfo,omitempty"`
	Strength         *int32  `protobuf:"varint,3,opt,name=strength" json:"strength,omitempty"`
	LastRecoveryTime *int64  `protobuf:"varint,4,opt,name=lastRecoveryTime" json:"lastRecoveryTime,omitempty"`
}

func (x *MonopolyReplenishStrengthResp) Reset() {
	*x = MonopolyReplenishStrengthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyReplenishStrengthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyReplenishStrengthResp) ProtoMessage() {}

func (x *MonopolyReplenishStrengthResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyReplenishStrengthResp.ProtoReflect.Descriptor instead.
func (*MonopolyReplenishStrengthResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{30}
}

func (x *MonopolyReplenishStrengthResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyReplenishStrengthResp) GetCostInfo() string {
	if x != nil && x.CostInfo != nil {
		return *x.CostInfo
	}
	return ""
}

func (x *MonopolyReplenishStrengthResp) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *MonopolyReplenishStrengthResp) GetLastRecoveryTime() int64 {
	if x != nil && x.LastRecoveryTime != nil {
		return *x.LastRecoveryTime
	}
	return 0
}

type MonopolyEventActionReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Action     *int32 `protobuf:"varint,2,req,name=action" json:"action,omitempty"`
}

func (x *MonopolyEventActionReqMsg) Reset() {
	*x = MonopolyEventActionReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEventActionReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEventActionReqMsg) ProtoMessage() {}

func (x *MonopolyEventActionReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEventActionReqMsg.ProtoReflect.Descriptor instead.
func (*MonopolyEventActionReqMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{31}
}

func (x *MonopolyEventActionReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyEventActionReqMsg) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type MonopolyEventActionRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MonsterData *MonopolyMonsterMsg `protobuf:"bytes,2,opt,name=monsterData" json:"monsterData,omitempty"`
	Reward      *string             `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	Score       *int32              `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	UnionScore  *int32              `protobuf:"varint,5,opt,name=unionScore" json:"unionScore,omitempty"`
}

func (x *MonopolyEventActionRespMsg) Reset() {
	*x = MonopolyEventActionRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEventActionRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEventActionRespMsg) ProtoMessage() {}

func (x *MonopolyEventActionRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEventActionRespMsg.ProtoReflect.Descriptor instead.
func (*MonopolyEventActionRespMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{32}
}

func (x *MonopolyEventActionRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyEventActionRespMsg) GetMonsterData() *MonopolyMonsterMsg {
	if x != nil {
		return x.MonsterData
	}
	return nil
}

func (x *MonopolyEventActionRespMsg) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyEventActionRespMsg) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MonopolyEventActionRespMsg) GetUnionScore() int32 {
	if x != nil && x.UnionScore != nil {
		return *x.UnionScore
	}
	return 0
}

type MonopolyRescueTrapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	PlayerId   *int64 `protobuf:"varint,2,req,name=playerId" json:"playerId,omitempty"`
}

func (x *MonopolyRescueTrapReq) Reset() {
	*x = MonopolyRescueTrapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRescueTrapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRescueTrapReq) ProtoMessage() {}

func (x *MonopolyRescueTrapReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRescueTrapReq.ProtoReflect.Descriptor instead.
func (*MonopolyRescueTrapReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{33}
}

func (x *MonopolyRescueTrapReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyRescueTrapReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MonopolyRescueTrapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MonopolyRescueTrapResp) Reset() {
	*x = MonopolyRescueTrapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRescueTrapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRescueTrapResp) ProtoMessage() {}

func (x *MonopolyRescueTrapResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRescueTrapResp.ProtoReflect.Descriptor instead.
func (*MonopolyRescueTrapResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{34}
}

func (x *MonopolyRescueTrapResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MonopolyDrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Index      *int32 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
}

func (x *MonopolyDrawReq) Reset() {
	*x = MonopolyDrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyDrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyDrawReq) ProtoMessage() {}

func (x *MonopolyDrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyDrawReq.ProtoReflect.Descriptor instead.
func (*MonopolyDrawReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{35}
}

func (x *MonopolyDrawReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyDrawReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type MonopolyDrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *string `protobuf:"bytes,1,opt,name=reward" json:"reward,omitempty"`
	Type   *int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (x *MonopolyDrawResp) Reset() {
	*x = MonopolyDrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyDrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyDrawResp) ProtoMessage() {}

func (x *MonopolyDrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyDrawResp.ProtoReflect.Descriptor instead.
func (*MonopolyDrawResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{36}
}

func (x *MonopolyDrawResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyDrawResp) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type MonopolyRobListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyRobListReq) Reset() {
	*x = MonopolyRobListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRobListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRobListReq) ProtoMessage() {}

func (x *MonopolyRobListReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRobListReq.ProtoReflect.Descriptor instead.
func (*MonopolyRobListReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{37}
}

func (x *MonopolyRobListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyRobListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32                  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RobUnionList   []*MonopolyRobUnionInfo `protobuf:"bytes,2,rep,name=robUnionList" json:"robUnionList,omitempty"`
	LastRobUnionId *int64                  `protobuf:"varint,3,opt,name=lastRobUnionId" json:"lastRobUnionId,omitempty"`
}

func (x *MonopolyRobListResp) Reset() {
	*x = MonopolyRobListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRobListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRobListResp) ProtoMessage() {}

func (x *MonopolyRobListResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRobListResp.ProtoReflect.Descriptor instead.
func (*MonopolyRobListResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{38}
}

func (x *MonopolyRobListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyRobListResp) GetRobUnionList() []*MonopolyRobUnionInfo {
	if x != nil {
		return x.RobUnionList
	}
	return nil
}

func (x *MonopolyRobListResp) GetLastRobUnionId() int64 {
	if x != nil && x.LastRobUnionId != nil {
		return *x.LastRobUnionId
	}
	return 0
}

type MonopolyRobUnionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId      *int64  `protobuf:"varint,1,opt,name=unionId" json:"unionId,omitempty"`
	UnionName    *string `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	MasterName   *string `protobuf:"bytes,3,opt,name=masterName" json:"masterName,omitempty"`
	UnionExp     *int64  `protobuf:"varint,4,opt,name=unionExp" json:"unionExp,omitempty"`
	UnionFlag    *int32  `protobuf:"varint,5,opt,name=unionFlag" json:"unionFlag,omitempty"`
	UnionScore   *int32  `protobuf:"varint,6,opt,name=unionScore" json:"unionScore,omitempty"`
	LootedPoints *int32  `protobuf:"varint,7,opt,name=lootedPoints" json:"lootedPoints,omitempty"`
	ServerId     *int64  `protobuf:"varint,8,opt,name=serverId" json:"serverId,omitempty"`
}

func (x *MonopolyRobUnionInfo) Reset() {
	*x = MonopolyRobUnionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRobUnionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRobUnionInfo) ProtoMessage() {}

func (x *MonopolyRobUnionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRobUnionInfo.ProtoReflect.Descriptor instead.
func (*MonopolyRobUnionInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{39}
}

func (x *MonopolyRobUnionInfo) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *MonopolyRobUnionInfo) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *MonopolyRobUnionInfo) GetMasterName() string {
	if x != nil && x.MasterName != nil {
		return *x.MasterName
	}
	return ""
}

func (x *MonopolyRobUnionInfo) GetUnionExp() int64 {
	if x != nil && x.UnionExp != nil {
		return *x.UnionExp
	}
	return 0
}

func (x *MonopolyRobUnionInfo) GetUnionFlag() int32 {
	if x != nil && x.UnionFlag != nil {
		return *x.UnionFlag
	}
	return 0
}

func (x *MonopolyRobUnionInfo) GetUnionScore() int32 {
	if x != nil && x.UnionScore != nil {
		return *x.UnionScore
	}
	return 0
}

func (x *MonopolyRobUnionInfo) GetLootedPoints() int32 {
	if x != nil && x.LootedPoints != nil {
		return *x.LootedPoints
	}
	return 0
}

func (x *MonopolyRobUnionInfo) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type MonopolyRobUnionDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64  `protobuf:"varint,2,opt,name=unionId" json:"unionId,omitempty"`
	UnionName  *string `protobuf:"bytes,3,opt,name=unionName" json:"unionName,omitempty"`
}

func (x *MonopolyRobUnionDetailReq) Reset() {
	*x = MonopolyRobUnionDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRobUnionDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRobUnionDetailReq) ProtoMessage() {}

func (x *MonopolyRobUnionDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRobUnionDetailReq.ProtoReflect.Descriptor instead.
func (*MonopolyRobUnionDetailReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{40}
}

func (x *MonopolyRobUnionDetailReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyRobUnionDetailReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *MonopolyRobUnionDetailReq) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

type MonopolyRobUnionDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RobUnionDetail *MonopolyRobUnionInfo `protobuf:"bytes,2,opt,name=robUnionDetail" json:"robUnionDetail,omitempty"`
}

func (x *MonopolyRobUnionDetailResp) Reset() {
	*x = MonopolyRobUnionDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRobUnionDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRobUnionDetailResp) ProtoMessage() {}

func (x *MonopolyRobUnionDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRobUnionDetailResp.ProtoReflect.Descriptor instead.
func (*MonopolyRobUnionDetailResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{41}
}

func (x *MonopolyRobUnionDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyRobUnionDetailResp) GetRobUnionDetail() *MonopolyRobUnionInfo {
	if x != nil {
		return x.RobUnionDetail
	}
	return nil
}

type MonopolyRobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *MonopolyRobReq) Reset() {
	*x = MonopolyRobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRobReq) ProtoMessage() {}

func (x *MonopolyRobReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRobReq.ProtoReflect.Descriptor instead.
func (*MonopolyRobReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{42}
}

func (x *MonopolyRobReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyRobReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type MonopolyRobResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	SelfUnionScore  *int64 `protobuf:"varint,2,opt,name=selfUnionScore" json:"selfUnionScore,omitempty"`
	OtherUnionScore *int64 `protobuf:"varint,3,opt,name=otherUnionScore" json:"otherUnionScore,omitempty"`
	Rank            *int32 `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
}

func (x *MonopolyRobResp) Reset() {
	*x = MonopolyRobResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRobResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRobResp) ProtoMessage() {}

func (x *MonopolyRobResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRobResp.ProtoReflect.Descriptor instead.
func (*MonopolyRobResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{43}
}

func (x *MonopolyRobResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyRobResp) GetSelfUnionScore() int64 {
	if x != nil && x.SelfUnionScore != nil {
		return *x.SelfUnionScore
	}
	return 0
}

func (x *MonopolyRobResp) GetOtherUnionScore() int64 {
	if x != nil && x.OtherUnionScore != nil {
		return *x.OtherUnionScore
	}
	return 0
}

func (x *MonopolyRobResp) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type MonopolyUnionLogListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Type       *int32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Page       *int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (x *MonopolyUnionLogListReq) Reset() {
	*x = MonopolyUnionLogListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyUnionLogListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyUnionLogListReq) ProtoMessage() {}

func (x *MonopolyUnionLogListReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyUnionLogListReq.ProtoReflect.Descriptor instead.
func (*MonopolyUnionLogListReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{44}
}

func (x *MonopolyUnionLogListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyUnionLogListReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MonopolyUnionLogListReq) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type MonopolyUnionLogListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionLogList []*MonopolyUnionLogInfo `protobuf:"bytes,2,rep,name=unionLogList" json:"unionLogList,omitempty"`
}

func (x *MonopolyUnionLogListResp) Reset() {
	*x = MonopolyUnionLogListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyUnionLogListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyUnionLogListResp) ProtoMessage() {}

func (x *MonopolyUnionLogListResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyUnionLogListResp.ProtoReflect.Descriptor instead.
func (*MonopolyUnionLogListResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{45}
}

func (x *MonopolyUnionLogListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyUnionLogListResp) GetUnionLogList() []*MonopolyUnionLogInfo {
	if x != nil {
		return x.UnionLogList
	}
	return nil
}

type MonopolyUnionLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    *int64             `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	NickName    *string            `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	GainScore   *int64             `protobuf:"varint,3,opt,name=gainScore" json:"gainScore,omitempty"`
	RobUnionNum *int32             `protobuf:"varint,4,opt,name=robUnionNum" json:"robUnionNum,omitempty"`
	UnionId     *int64             `protobuf:"varint,5,opt,name=unionId" json:"unionId,omitempty"`
	HeadData    *PlayerHeadDataMsg `protobuf:"bytes,6,opt,name=headData" json:"headData,omitempty"`
	UnionFlag   *int32             `protobuf:"varint,7,opt,name=unionFlag" json:"unionFlag,omitempty"`
	ServerId    *int64             `protobuf:"varint,8,opt,name=serverId" json:"serverId,omitempty"`
}

func (x *MonopolyUnionLogInfo) Reset() {
	*x = MonopolyUnionLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyUnionLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyUnionLogInfo) ProtoMessage() {}

func (x *MonopolyUnionLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyUnionLogInfo.ProtoReflect.Descriptor instead.
func (*MonopolyUnionLogInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{46}
}

func (x *MonopolyUnionLogInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MonopolyUnionLogInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MonopolyUnionLogInfo) GetGainScore() int64 {
	if x != nil && x.GainScore != nil {
		return *x.GainScore
	}
	return 0
}

func (x *MonopolyUnionLogInfo) GetRobUnionNum() int32 {
	if x != nil && x.RobUnionNum != nil {
		return *x.RobUnionNum
	}
	return 0
}

func (x *MonopolyUnionLogInfo) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *MonopolyUnionLogInfo) GetHeadData() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadData
	}
	return nil
}

func (x *MonopolyUnionLogInfo) GetUnionFlag() int32 {
	if x != nil && x.UnionFlag != nil {
		return *x.UnionFlag
	}
	return 0
}

func (x *MonopolyUnionLogInfo) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type MonopolyPlayerLogDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Type       *int32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	TargetId   *int64 `protobuf:"varint,3,req,name=targetId" json:"targetId,omitempty"`
}

func (x *MonopolyPlayerLogDetailReq) Reset() {
	*x = MonopolyPlayerLogDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyPlayerLogDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyPlayerLogDetailReq) ProtoMessage() {}

func (x *MonopolyPlayerLogDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyPlayerLogDetailReq.ProtoReflect.Descriptor instead.
func (*MonopolyPlayerLogDetailReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{47}
}

func (x *MonopolyPlayerLogDetailReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyPlayerLogDetailReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MonopolyPlayerLogDetailReq) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type MonopolyPlayerLogDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	PlayerLogDetail []*MonopolyPlayerLogDetailInfo `protobuf:"bytes,2,rep,name=playerLogDetail" json:"playerLogDetail,omitempty"`
}

func (x *MonopolyPlayerLogDetailResp) Reset() {
	*x = MonopolyPlayerLogDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyPlayerLogDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyPlayerLogDetailResp) ProtoMessage() {}

func (x *MonopolyPlayerLogDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyPlayerLogDetailResp.ProtoReflect.Descriptor instead.
func (*MonopolyPlayerLogDetailResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{48}
}

func (x *MonopolyPlayerLogDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyPlayerLogDetailResp) GetPlayerLogDetail() []*MonopolyPlayerLogDetailInfo {
	if x != nil {
		return x.PlayerLogDetail
	}
	return nil
}

type MonopolyPlayerLogDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GainScore    *int32  `protobuf:"varint,1,opt,name=gainScore" json:"gainScore,omitempty"`
	RobTime      *int64  `protobuf:"varint,2,opt,name=robTime" json:"robTime,omitempty"`
	RobUnionName *string `protobuf:"bytes,3,opt,name=robUnionName" json:"robUnionName,omitempty"`
}

func (x *MonopolyPlayerLogDetailInfo) Reset() {
	*x = MonopolyPlayerLogDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyPlayerLogDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyPlayerLogDetailInfo) ProtoMessage() {}

func (x *MonopolyPlayerLogDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyPlayerLogDetailInfo.ProtoReflect.Descriptor instead.
func (*MonopolyPlayerLogDetailInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{49}
}

func (x *MonopolyPlayerLogDetailInfo) GetGainScore() int32 {
	if x != nil && x.GainScore != nil {
		return *x.GainScore
	}
	return 0
}

func (x *MonopolyPlayerLogDetailInfo) GetRobTime() int64 {
	if x != nil && x.RobTime != nil {
		return *x.RobTime
	}
	return 0
}

func (x *MonopolyPlayerLogDetailInfo) GetRobUnionName() string {
	if x != nil && x.RobUnionName != nil {
		return *x.RobUnionName
	}
	return ""
}

type MonopolyAssistAttackMonsterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,opt,name=activityId" json:"activityId,omitempty"`
	MonsterUid *int64 `protobuf:"varint,2,opt,name=monsterUid" json:"monsterUid,omitempty"`
	PlayerId   *int64 `protobuf:"varint,3,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *MonopolyAssistAttackMonsterReq) Reset() {
	*x = MonopolyAssistAttackMonsterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAssistAttackMonsterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAssistAttackMonsterReq) ProtoMessage() {}

func (x *MonopolyAssistAttackMonsterReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAssistAttackMonsterReq.ProtoReflect.Descriptor instead.
func (*MonopolyAssistAttackMonsterReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{50}
}

func (x *MonopolyAssistAttackMonsterReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyAssistAttackMonsterReq) GetMonsterUid() int64 {
	if x != nil && x.MonsterUid != nil {
		return *x.MonsterUid
	}
	return 0
}

func (x *MonopolyAssistAttackMonsterReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MonopolyAssistAttackMonsterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward       *string                   `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	MonsterInfo  *MonopolyAssistMonsterMsg `protobuf:"bytes,3,opt,name=monsterInfo" json:"monsterInfo,omitempty"`
	BattleRecord *BattleRecordMsg          `protobuf:"bytes,4,opt,name=battleRecord" json:"battleRecord,omitempty"`
	Rate         *int32                    `protobuf:"varint,5,opt,name=rate" json:"rate,omitempty"`
	Damage       *int64                    `protobuf:"varint,6,opt,name=damage" json:"damage,omitempty"`
}

func (x *MonopolyAssistAttackMonsterResp) Reset() {
	*x = MonopolyAssistAttackMonsterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAssistAttackMonsterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAssistAttackMonsterResp) ProtoMessage() {}

func (x *MonopolyAssistAttackMonsterResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAssistAttackMonsterResp.ProtoReflect.Descriptor instead.
func (*MonopolyAssistAttackMonsterResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{51}
}

func (x *MonopolyAssistAttackMonsterResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyAssistAttackMonsterResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyAssistAttackMonsterResp) GetMonsterInfo() *MonopolyAssistMonsterMsg {
	if x != nil {
		return x.MonsterInfo
	}
	return nil
}

func (x *MonopolyAssistAttackMonsterResp) GetBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.BattleRecord
	}
	return nil
}

func (x *MonopolyAssistAttackMonsterResp) GetRate() int32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *MonopolyAssistAttackMonsterResp) GetDamage() int64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

type MonopolyReceiveMonsterRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,opt,name=activityId" json:"activityId,omitempty"`
	MonsterUid *int64 `protobuf:"varint,2,opt,name=monsterUid" json:"monsterUid,omitempty"`
}

func (x *MonopolyReceiveMonsterRewardReq) Reset() {
	*x = MonopolyReceiveMonsterRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyReceiveMonsterRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyReceiveMonsterRewardReq) ProtoMessage() {}

func (x *MonopolyReceiveMonsterRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyReceiveMonsterRewardReq.ProtoReflect.Descriptor instead.
func (*MonopolyReceiveMonsterRewardReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{52}
}

func (x *MonopolyReceiveMonsterRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyReceiveMonsterRewardReq) GetMonsterUid() int64 {
	if x != nil && x.MonsterUid != nil {
		return *x.MonsterUid
	}
	return 0
}

type MonopolyReceiveMonsterRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                   `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MonsterUid *int64                   `protobuf:"varint,2,opt,name=monsterUid" json:"monsterUid,omitempty"`
	Reward     *string                  `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	Score      *int32                   `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	PlayerData *PlayerCharacterImageMsg `protobuf:"bytes,5,opt,name=playerData" json:"playerData,omitempty"`
}

func (x *MonopolyReceiveMonsterRewardResp) Reset() {
	*x = MonopolyReceiveMonsterRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyReceiveMonsterRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyReceiveMonsterRewardResp) ProtoMessage() {}

func (x *MonopolyReceiveMonsterRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyReceiveMonsterRewardResp.ProtoReflect.Descriptor instead.
func (*MonopolyReceiveMonsterRewardResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{53}
}

func (x *MonopolyReceiveMonsterRewardResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyReceiveMonsterRewardResp) GetMonsterUid() int64 {
	if x != nil && x.MonsterUid != nil {
		return *x.MonsterUid
	}
	return 0
}

func (x *MonopolyReceiveMonsterRewardResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyReceiveMonsterRewardResp) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MonopolyReceiveMonsterRewardResp) GetPlayerData() *PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

type MonopolyBreakFreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	AskHelp    *int32 `protobuf:"varint,2,opt,name=askHelp" json:"askHelp,omitempty"`
}

func (x *MonopolyBreakFreeReq) Reset() {
	*x = MonopolyBreakFreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBreakFreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBreakFreeReq) ProtoMessage() {}

func (x *MonopolyBreakFreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBreakFreeReq.ProtoReflect.Descriptor instead.
func (*MonopolyBreakFreeReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{54}
}

func (x *MonopolyBreakFreeReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyBreakFreeReq) GetAskHelp() int32 {
	if x != nil && x.AskHelp != nil {
		return *x.AskHelp
	}
	return 0
}

type MonopolyBreakFreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strength         *int32 `protobuf:"varint,1,opt,name=strength" json:"strength,omitempty"`
	LastRecoveryTime *int64 `protobuf:"varint,2,opt,name=lastRecoveryTime" json:"lastRecoveryTime,omitempty"`
	TotalCostEnergy  *int32 `protobuf:"varint,3,opt,name=totalCostEnergy" json:"totalCostEnergy,omitempty"`
}

func (x *MonopolyBreakFreeResp) Reset() {
	*x = MonopolyBreakFreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBreakFreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBreakFreeResp) ProtoMessage() {}

func (x *MonopolyBreakFreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBreakFreeResp.ProtoReflect.Descriptor instead.
func (*MonopolyBreakFreeResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{55}
}

func (x *MonopolyBreakFreeResp) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *MonopolyBreakFreeResp) GetLastRecoveryTime() int64 {
	if x != nil && x.LastRecoveryTime != nil {
		return *x.LastRecoveryTime
	}
	return 0
}

func (x *MonopolyBreakFreeResp) GetTotalCostEnergy() int32 {
	if x != nil && x.TotalCostEnergy != nil {
		return *x.TotalCostEnergy
	}
	return 0
}

type MonopolyRedPointReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyRedPointReqMsg) Reset() {
	*x = MonopolyRedPointReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRedPointReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRedPointReqMsg) ProtoMessage() {}

func (x *MonopolyRedPointReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRedPointReqMsg.ProtoReflect.Descriptor instead.
func (*MonopolyRedPointReqMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{56}
}

func (x *MonopolyRedPointReqMsg) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyRedPointRespMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *MonopolyRedPointRespMsg) Reset() {
	*x = MonopolyRedPointRespMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRedPointRespMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRedPointRespMsg) ProtoMessage() {}

func (x *MonopolyRedPointRespMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRedPointRespMsg.ProtoReflect.Descriptor instead.
func (*MonopolyRedPointRespMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{57}
}

func (x *MonopolyRedPointRespMsg) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyRedPointRespMsg) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type MonopolyRemoteRollDiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	DiceNum    *int32 `protobuf:"varint,2,req,name=diceNum" json:"diceNum,omitempty"`
}

func (x *MonopolyRemoteRollDiceReq) Reset() {
	*x = MonopolyRemoteRollDiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRemoteRollDiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRemoteRollDiceReq) ProtoMessage() {}

func (x *MonopolyRemoteRollDiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRemoteRollDiceReq.ProtoReflect.Descriptor instead.
func (*MonopolyRemoteRollDiceReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{58}
}

func (x *MonopolyRemoteRollDiceReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyRemoteRollDiceReq) GetDiceNum() int32 {
	if x != nil && x.DiceNum != nil {
		return *x.DiceNum
	}
	return 0
}

type MonopolyRemoteRollDiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MapIndex   *int32              `protobuf:"varint,2,opt,name=mapIndex" json:"mapIndex,omitempty"`
	MoveResult *MonopolyMoveResult `protobuf:"bytes,3,opt,name=moveResult" json:"moveResult,omitempty"`
}

func (x *MonopolyRemoteRollDiceResp) Reset() {
	*x = MonopolyRemoteRollDiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRemoteRollDiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRemoteRollDiceResp) ProtoMessage() {}

func (x *MonopolyRemoteRollDiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRemoteRollDiceResp.ProtoReflect.Descriptor instead.
func (*MonopolyRemoteRollDiceResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{59}
}

func (x *MonopolyRemoteRollDiceResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyRemoteRollDiceResp) GetMapIndex() int32 {
	if x != nil && x.MapIndex != nil {
		return *x.MapIndex
	}
	return 0
}

func (x *MonopolyRemoteRollDiceResp) GetMoveResult() *MonopolyMoveResult {
	if x != nil {
		return x.MoveResult
	}
	return nil
}

type MonopolyEnterRobMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *MonopolyEnterRobMapReq) Reset() {
	*x = MonopolyEnterRobMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEnterRobMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEnterRobMapReq) ProtoMessage() {}

func (x *MonopolyEnterRobMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEnterRobMapReq.ProtoReflect.Descriptor instead.
func (*MonopolyEnterRobMapReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{60}
}

func (x *MonopolyEnterRobMapReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyEnterRobMapReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type MonopolyEnterRobMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	UnionName       *string `protobuf:"bytes,2,opt,name=unionName" json:"unionName,omitempty"`
	UnionMasterName *string `protobuf:"bytes,3,opt,name=unionMasterName" json:"unionMasterName,omitempty"`
	ServerId        *int64  `protobuf:"varint,4,opt,name=serverId" json:"serverId,omitempty"`
	OtherUnionScore *int64  `protobuf:"varint,5,opt,name=otherUnionScore" json:"otherUnionScore,omitempty"`
	SelfUnionScore  *int64  `protobuf:"varint,6,opt,name=selfUnionScore" json:"selfUnionScore,omitempty"`
	BuildingExp     *int32  `protobuf:"varint,7,opt,name=buildingExp" json:"buildingExp,omitempty"`
	UnionFlag       *int32  `protobuf:"varint,8,opt,name=unionFlag" json:"unionFlag,omitempty"`
}

func (x *MonopolyEnterRobMapResp) Reset() {
	*x = MonopolyEnterRobMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEnterRobMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEnterRobMapResp) ProtoMessage() {}

func (x *MonopolyEnterRobMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEnterRobMapResp.ProtoReflect.Descriptor instead.
func (*MonopolyEnterRobMapResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{61}
}

func (x *MonopolyEnterRobMapResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyEnterRobMapResp) GetUnionName() string {
	if x != nil && x.UnionName != nil {
		return *x.UnionName
	}
	return ""
}

func (x *MonopolyEnterRobMapResp) GetUnionMasterName() string {
	if x != nil && x.UnionMasterName != nil {
		return *x.UnionMasterName
	}
	return ""
}

func (x *MonopolyEnterRobMapResp) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *MonopolyEnterRobMapResp) GetOtherUnionScore() int64 {
	if x != nil && x.OtherUnionScore != nil {
		return *x.OtherUnionScore
	}
	return 0
}

func (x *MonopolyEnterRobMapResp) GetSelfUnionScore() int64 {
	if x != nil && x.SelfUnionScore != nil {
		return *x.SelfUnionScore
	}
	return 0
}

func (x *MonopolyEnterRobMapResp) GetBuildingExp() int32 {
	if x != nil && x.BuildingExp != nil {
		return *x.BuildingExp
	}
	return 0
}

func (x *MonopolyEnterRobMapResp) GetUnionFlag() int32 {
	if x != nil && x.UnionFlag != nil {
		return *x.UnionFlag
	}
	return 0
}

type MonopolyAutoUnlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyAutoUnlockReq) Reset() {
	*x = MonopolyAutoUnlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAutoUnlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAutoUnlockReq) ProtoMessage() {}

func (x *MonopolyAutoUnlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAutoUnlockReq.ProtoReflect.Descriptor instead.
func (*MonopolyAutoUnlockReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{62}
}

func (x *MonopolyAutoUnlockReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyAutoUnlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MonopolyAutoUnlockResp) Reset() {
	*x = MonopolyAutoUnlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAutoUnlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAutoUnlockResp) ProtoMessage() {}

func (x *MonopolyAutoUnlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAutoUnlockResp.ProtoReflect.Descriptor instead.
func (*MonopolyAutoUnlockResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{63}
}

func (x *MonopolyAutoUnlockResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MonopolyBlessingListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyBlessingListReq) Reset() {
	*x = MonopolyBlessingListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBlessingListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBlessingListReq) ProtoMessage() {}

func (x *MonopolyBlessingListReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBlessingListReq.ProtoReflect.Descriptor instead.
func (*MonopolyBlessingListReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{64}
}

func (x *MonopolyBlessingListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyBlessingListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32                       `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BlessingList []*MonopolyBlessedNoticeInfo `protobuf:"bytes,2,rep,name=blessingList" json:"blessingList,omitempty"`
}

func (x *MonopolyBlessingListResp) Reset() {
	*x = MonopolyBlessingListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBlessingListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBlessingListResp) ProtoMessage() {}

func (x *MonopolyBlessingListResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBlessingListResp.ProtoReflect.Descriptor instead.
func (*MonopolyBlessingListResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{65}
}

func (x *MonopolyBlessingListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyBlessingListResp) GetBlessingList() []*MonopolyBlessedNoticeInfo {
	if x != nil {
		return x.BlessingList
	}
	return nil
}

type MonopolyBlessedNoticeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int64                   `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	PlayerData *PlayerCharacterImageMsg `protobuf:"bytes,2,req,name=playerData" json:"playerData,omitempty"`
	Status     *int32                   `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Time       *int64                   `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Strength   *int32                   `protobuf:"varint,5,opt,name=strength" json:"strength,omitempty"`
	GiftName   *string                  `protobuf:"bytes,6,opt,name=giftName" json:"giftName,omitempty"`
}

func (x *MonopolyBlessedNoticeInfo) Reset() {
	*x = MonopolyBlessedNoticeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBlessedNoticeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBlessedNoticeInfo) ProtoMessage() {}

func (x *MonopolyBlessedNoticeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBlessedNoticeInfo.ProtoReflect.Descriptor instead.
func (*MonopolyBlessedNoticeInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{66}
}

func (x *MonopolyBlessedNoticeInfo) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MonopolyBlessedNoticeInfo) GetPlayerData() *PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *MonopolyBlessedNoticeInfo) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MonopolyBlessedNoticeInfo) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *MonopolyBlessedNoticeInfo) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *MonopolyBlessedNoticeInfo) GetGiftName() string {
	if x != nil && x.GiftName != nil {
		return *x.GiftName
	}
	return ""
}

type MonopolyReceiveBlessingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	RecordId   *int64 `protobuf:"varint,2,req,name=recordId" json:"recordId,omitempty"`
}

func (x *MonopolyReceiveBlessingReq) Reset() {
	*x = MonopolyReceiveBlessingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyReceiveBlessingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyReceiveBlessingReq) ProtoMessage() {}

func (x *MonopolyReceiveBlessingReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyReceiveBlessingReq.ProtoReflect.Descriptor instead.
func (*MonopolyReceiveBlessingReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{67}
}

func (x *MonopolyReceiveBlessingReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyReceiveBlessingReq) GetRecordId() int64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type MonopolyReceiveBlessingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Strength         *int32 `protobuf:"varint,2,opt,name=strength" json:"strength,omitempty"`
	LastRecoveryTime *int64 `protobuf:"varint,3,opt,name=lastRecoveryTime" json:"lastRecoveryTime,omitempty"`
	IsAlreadyGet     *bool  `protobuf:"varint,4,opt,name=isAlreadyGet" json:"isAlreadyGet,omitempty"`
}

func (x *MonopolyReceiveBlessingResp) Reset() {
	*x = MonopolyReceiveBlessingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyReceiveBlessingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyReceiveBlessingResp) ProtoMessage() {}

func (x *MonopolyReceiveBlessingResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyReceiveBlessingResp.ProtoReflect.Descriptor instead.
func (*MonopolyReceiveBlessingResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{68}
}

func (x *MonopolyReceiveBlessingResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyReceiveBlessingResp) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *MonopolyReceiveBlessingResp) GetLastRecoveryTime() int64 {
	if x != nil && x.LastRecoveryTime != nil {
		return *x.LastRecoveryTime
	}
	return 0
}

func (x *MonopolyReceiveBlessingResp) GetIsAlreadyGet() bool {
	if x != nil && x.IsAlreadyGet != nil {
		return *x.IsAlreadyGet
	}
	return false
}

type MonopolyQuickMoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyQuickMoveReq) Reset() {
	*x = MonopolyQuickMoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyQuickMoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyQuickMoveReq) ProtoMessage() {}

func (x *MonopolyQuickMoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyQuickMoveReq.ProtoReflect.Descriptor instead.
func (*MonopolyQuickMoveReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{69}
}

func (x *MonopolyQuickMoveReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyQuickMoveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapIndex   *int32              `protobuf:"varint,1,opt,name=mapIndex" json:"mapIndex,omitempty"`
	MoveResult *MonopolyMoveResult `protobuf:"bytes,2,opt,name=moveResult" json:"moveResult,omitempty"`
}

func (x *MonopolyQuickMoveResp) Reset() {
	*x = MonopolyQuickMoveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyQuickMoveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyQuickMoveResp) ProtoMessage() {}

func (x *MonopolyQuickMoveResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyQuickMoveResp.ProtoReflect.Descriptor instead.
func (*MonopolyQuickMoveResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{70}
}

func (x *MonopolyQuickMoveResp) GetMapIndex() int32 {
	if x != nil && x.MapIndex != nil {
		return *x.MapIndex
	}
	return 0
}

func (x *MonopolyQuickMoveResp) GetMoveResult() *MonopolyMoveResult {
	if x != nil {
		return x.MoveResult
	}
	return nil
}

type MonopolyDarkGridMoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	DiceNum    *int32 `protobuf:"varint,2,opt,name=diceNum" json:"diceNum,omitempty"`
}

func (x *MonopolyDarkGridMoveReq) Reset() {
	*x = MonopolyDarkGridMoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyDarkGridMoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyDarkGridMoveReq) ProtoMessage() {}

func (x *MonopolyDarkGridMoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyDarkGridMoveReq.ProtoReflect.Descriptor instead.
func (*MonopolyDarkGridMoveReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{71}
}

func (x *MonopolyDarkGridMoveReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyDarkGridMoveReq) GetDiceNum() int32 {
	if x != nil && x.DiceNum != nil {
		return *x.DiceNum
	}
	return 0
}

type MonopolyDarkGridMoveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapIndex   *int32              `protobuf:"varint,1,opt,name=mapIndex" json:"mapIndex,omitempty"`
	Reward     *string             `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	MoveResult *MonopolyMoveResult `protobuf:"bytes,3,opt,name=moveResult" json:"moveResult,omitempty"`
}

func (x *MonopolyDarkGridMoveResp) Reset() {
	*x = MonopolyDarkGridMoveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyDarkGridMoveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyDarkGridMoveResp) ProtoMessage() {}

func (x *MonopolyDarkGridMoveResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyDarkGridMoveResp.ProtoReflect.Descriptor instead.
func (*MonopolyDarkGridMoveResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{72}
}

func (x *MonopolyDarkGridMoveResp) GetMapIndex() int32 {
	if x != nil && x.MapIndex != nil {
		return *x.MapIndex
	}
	return 0
}

func (x *MonopolyDarkGridMoveResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyDarkGridMoveResp) GetMoveResult() *MonopolyMoveResult {
	if x != nil {
		return x.MoveResult
	}
	return nil
}

type MonopolyEventHandleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	EventId    *int32 `protobuf:"varint,2,req,name=eventId" json:"eventId,omitempty"`
	Index      *int32 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Req        []byte `protobuf:"bytes,4,opt,name=req" json:"req,omitempty"`
}

func (x *MonopolyEventHandleReq) Reset() {
	*x = MonopolyEventHandleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEventHandleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEventHandleReq) ProtoMessage() {}

func (x *MonopolyEventHandleReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEventHandleReq.ProtoReflect.Descriptor instead.
func (*MonopolyEventHandleReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{73}
}

func (x *MonopolyEventHandleReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyEventHandleReq) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *MonopolyEventHandleReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MonopolyEventHandleReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

type MonopolyEventHandleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Index *int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Resp  []byte `protobuf:"bytes,3,opt,name=resp" json:"resp,omitempty"`
}

func (x *MonopolyEventHandleResp) Reset() {
	*x = MonopolyEventHandleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyEventHandleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyEventHandleResp) ProtoMessage() {}

func (x *MonopolyEventHandleResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyEventHandleResp.ProtoReflect.Descriptor instead.
func (*MonopolyEventHandleResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{74}
}

func (x *MonopolyEventHandleResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyEventHandleResp) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MonopolyEventHandleResp) GetResp() []byte {
	if x != nil {
		return x.Resp
	}
	return nil
}

type MonopolyMonsterAttrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	EventId    *int32 `protobuf:"varint,2,req,name=eventId" json:"eventId,omitempty"`
}

func (x *MonopolyMonsterAttrReq) Reset() {
	*x = MonopolyMonsterAttrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMonsterAttrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMonsterAttrReq) ProtoMessage() {}

func (x *MonopolyMonsterAttrReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMonsterAttrReq.ProtoReflect.Descriptor instead.
func (*MonopolyMonsterAttrReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{75}
}

func (x *MonopolyMonsterAttrReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyMonsterAttrReq) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type MonopolyMonsterAttrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	AttributeList []*AttributeDataMsg `protobuf:"bytes,2,rep,name=attributeList" json:"attributeList,omitempty"`
}

func (x *MonopolyMonsterAttrResp) Reset() {
	*x = MonopolyMonsterAttrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMonsterAttrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMonsterAttrResp) ProtoMessage() {}

func (x *MonopolyMonsterAttrResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMonsterAttrResp.ProtoReflect.Descriptor instead.
func (*MonopolyMonsterAttrResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{76}
}

func (x *MonopolyMonsterAttrResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyMonsterAttrResp) GetAttributeList() []*AttributeDataMsg {
	if x != nil {
		return x.AttributeList
	}
	return nil
}

type MonopolyGetPlayerRankReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyGetPlayerRankReq) Reset() {
	*x = MonopolyGetPlayerRankReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetPlayerRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetPlayerRankReq) ProtoMessage() {}

func (x *MonopolyGetPlayerRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetPlayerRankReq.ProtoReflect.Descriptor instead.
func (*MonopolyGetPlayerRankReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{77}
}

func (x *MonopolyGetPlayerRankReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyGetPlayerRankResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Rank      *int32 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	UnionRank *int32 `protobuf:"varint,3,opt,name=unionRank" json:"unionRank,omitempty"`
}

func (x *MonopolyGetPlayerRankResp) Reset() {
	*x = MonopolyGetPlayerRankResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetPlayerRankResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetPlayerRankResp) ProtoMessage() {}

func (x *MonopolyGetPlayerRankResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetPlayerRankResp.ProtoReflect.Descriptor instead.
func (*MonopolyGetPlayerRankResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{78}
}

func (x *MonopolyGetPlayerRankResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyGetPlayerRankResp) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolyGetPlayerRankResp) GetUnionRank() int32 {
	if x != nil && x.UnionRank != nil {
		return *x.UnionRank
	}
	return 0
}

type MonopolyGetEnemyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyGetEnemyListReq) Reset() {
	*x = MonopolyGetEnemyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetEnemyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetEnemyListReq) ProtoMessage() {}

func (x *MonopolyGetEnemyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetEnemyListReq.ProtoReflect.Descriptor instead.
func (*MonopolyGetEnemyListReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{79}
}

func (x *MonopolyGetEnemyListReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyGetEnemyListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       *int32                  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	EnemyList []*MonopolyRobUnionInfo `protobuf:"bytes,2,rep,name=enemyList" json:"enemyList,omitempty"`
}

func (x *MonopolyGetEnemyListResp) Reset() {
	*x = MonopolyGetEnemyListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetEnemyListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetEnemyListResp) ProtoMessage() {}

func (x *MonopolyGetEnemyListResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetEnemyListResp.ProtoReflect.Descriptor instead.
func (*MonopolyGetEnemyListResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{80}
}

func (x *MonopolyGetEnemyListResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyGetEnemyListResp) GetEnemyList() []*MonopolyRobUnionInfo {
	if x != nil {
		return x.EnemyList
	}
	return nil
}

type MonopolyScoreDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionId    *int64 `protobuf:"varint,2,req,name=unionId" json:"unionId,omitempty"`
}

func (x *MonopolyScoreDetailReq) Reset() {
	*x = MonopolyScoreDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyScoreDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyScoreDetailReq) ProtoMessage() {}

func (x *MonopolyScoreDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyScoreDetailReq.ProtoReflect.Descriptor instead.
func (*MonopolyScoreDetailReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{81}
}

func (x *MonopolyScoreDetailReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyScoreDetailReq) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

type MonopolyScoreDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	ScoreDetail []*MonopolyScoreDetailInfo `protobuf:"bytes,2,rep,name=scoreDetail" json:"scoreDetail,omitempty"`
}

func (x *MonopolyScoreDetailResp) Reset() {
	*x = MonopolyScoreDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyScoreDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyScoreDetailResp) ProtoMessage() {}

func (x *MonopolyScoreDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyScoreDetailResp.ProtoReflect.Descriptor instead.
func (*MonopolyScoreDetailResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{82}
}

func (x *MonopolyScoreDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyScoreDetailResp) GetScoreDetail() []*MonopolyScoreDetailInfo {
	if x != nil {
		return x.ScoreDetail
	}
	return nil
}

type MonopolyScoreDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score            *int32 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	PlunderPoints    *int32 `protobuf:"varint,2,opt,name=plunderPoints" json:"plunderPoints,omitempty"`
	LootedPoints     *int32 `protobuf:"varint,3,opt,name=lootedPoints" json:"lootedPoints,omitempty"`
	Rank             *int32 `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	BattleFieldScore *int32 `protobuf:"varint,5,opt,name=battleFieldScore" json:"battleFieldScore,omitempty"`
}

func (x *MonopolyScoreDetailInfo) Reset() {
	*x = MonopolyScoreDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyScoreDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyScoreDetailInfo) ProtoMessage() {}

func (x *MonopolyScoreDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyScoreDetailInfo.ProtoReflect.Descriptor instead.
func (*MonopolyScoreDetailInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{83}
}

func (x *MonopolyScoreDetailInfo) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MonopolyScoreDetailInfo) GetPlunderPoints() int32 {
	if x != nil && x.PlunderPoints != nil {
		return *x.PlunderPoints
	}
	return 0
}

func (x *MonopolyScoreDetailInfo) GetLootedPoints() int32 {
	if x != nil && x.LootedPoints != nil {
		return *x.LootedPoints
	}
	return 0
}

func (x *MonopolyScoreDetailInfo) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolyScoreDetailInfo) GetBattleFieldScore() int32 {
	if x != nil && x.BattleFieldScore != nil {
		return *x.BattleFieldScore
	}
	return 0
}

type MonopolyBarrageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackerName *string            `protobuf:"bytes,1,req,name=attackerName" json:"attackerName,omitempty"`
	HeadData     *PlayerHeadDataMsg `protobuf:"bytes,2,opt,name=headData" json:"headData,omitempty"`
	Score        *int64             `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (x *MonopolyBarrageNotify) Reset() {
	*x = MonopolyBarrageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBarrageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBarrageNotify) ProtoMessage() {}

func (x *MonopolyBarrageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBarrageNotify.ProtoReflect.Descriptor instead.
func (*MonopolyBarrageNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{84}
}

func (x *MonopolyBarrageNotify) GetAttackerName() string {
	if x != nil && x.AttackerName != nil {
		return *x.AttackerName
	}
	return ""
}

func (x *MonopolyBarrageNotify) GetHeadData() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadData
	}
	return nil
}

func (x *MonopolyBarrageNotify) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type MonopolyMoveNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData *MonopolyOtherPlayerDataMsg `protobuf:"bytes,1,opt,name=playerData" json:"playerData,omitempty"`
	UnionScore *int32                      `protobuf:"varint,2,opt,name=unionScore" json:"unionScore,omitempty"`
}

func (x *MonopolyMoveNotify) Reset() {
	*x = MonopolyMoveNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMoveNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMoveNotify) ProtoMessage() {}

func (x *MonopolyMoveNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMoveNotify.ProtoReflect.Descriptor instead.
func (*MonopolyMoveNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{85}
}

func (x *MonopolyMoveNotify) GetPlayerData() *MonopolyOtherPlayerDataMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *MonopolyMoveNotify) GetUnionScore() int32 {
	if x != nil && x.UnionScore != nil {
		return *x.UnionScore
	}
	return 0
}

type MonopolyNotifyPlayerEndTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   *int64                   `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	Active     *bool                    `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	PlayerData *PlayerCharacterImageMsg `protobuf:"bytes,3,opt,name=playerData" json:"playerData,omitempty"`
	BreakPos   *int32                   `protobuf:"varint,4,opt,name=breakPos" json:"breakPos,omitempty"`
}

func (x *MonopolyNotifyPlayerEndTrap) Reset() {
	*x = MonopolyNotifyPlayerEndTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyNotifyPlayerEndTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyNotifyPlayerEndTrap) ProtoMessage() {}

func (x *MonopolyNotifyPlayerEndTrap) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyNotifyPlayerEndTrap.ProtoReflect.Descriptor instead.
func (*MonopolyNotifyPlayerEndTrap) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{86}
}

func (x *MonopolyNotifyPlayerEndTrap) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MonopolyNotifyPlayerEndTrap) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *MonopolyNotifyPlayerEndTrap) GetPlayerData() *PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *MonopolyNotifyPlayerEndTrap) GetBreakPos() int32 {
	if x != nil && x.BreakPos != nil {
		return *x.BreakPos
	}
	return 0
}

type MonopolyNotifyBuildingUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingExp *int32 `protobuf:"varint,1,opt,name=buildingExp" json:"buildingExp,omitempty"`
	PlayerId    *int64 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *MonopolyNotifyBuildingUpgrade) Reset() {
	*x = MonopolyNotifyBuildingUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyNotifyBuildingUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyNotifyBuildingUpgrade) ProtoMessage() {}

func (x *MonopolyNotifyBuildingUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyNotifyBuildingUpgrade.ProtoReflect.Descriptor instead.
func (*MonopolyNotifyBuildingUpgrade) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{87}
}

func (x *MonopolyNotifyBuildingUpgrade) GetBuildingExp() int32 {
	if x != nil && x.BuildingExp != nil {
		return *x.BuildingExp
	}
	return 0
}

func (x *MonopolyNotifyBuildingUpgrade) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type MonopolySendBlessingNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeNum *int32 `protobuf:"varint,1,opt,name=noticeNum" json:"noticeNum,omitempty"`
}

func (x *MonopolySendBlessingNotify) Reset() {
	*x = MonopolySendBlessingNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolySendBlessingNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolySendBlessingNotify) ProtoMessage() {}

func (x *MonopolySendBlessingNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolySendBlessingNotify.ProtoReflect.Descriptor instead.
func (*MonopolySendBlessingNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{88}
}

func (x *MonopolySendBlessingNotify) GetNoticeNum() int32 {
	if x != nil && x.NoticeNum != nil {
		return *x.NoticeNum
	}
	return 0
}

type MonopolyScoreNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionScore *int32 `protobuf:"varint,1,opt,name=unionScore" json:"unionScore,omitempty"`
	Rank       *int32 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
}

func (x *MonopolyScoreNotify) Reset() {
	*x = MonopolyScoreNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyScoreNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyScoreNotify) ProtoMessage() {}

func (x *MonopolyScoreNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyScoreNotify.ProtoReflect.Descriptor instead.
func (*MonopolyScoreNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{89}
}

func (x *MonopolyScoreNotify) GetUnionScore() int32 {
	if x != nil && x.UnionScore != nil {
		return *x.UnionScore
	}
	return 0
}

func (x *MonopolyScoreNotify) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type MonopolyRankNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      *int32 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	UnionRank *int32 `protobuf:"varint,2,opt,name=unionRank" json:"unionRank,omitempty"`
}

func (x *MonopolyRankNotify) Reset() {
	*x = MonopolyRankNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRankNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRankNotify) ProtoMessage() {}

func (x *MonopolyRankNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRankNotify.ProtoReflect.Descriptor instead.
func (*MonopolyRankNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{90}
}

func (x *MonopolyRankNotify) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolyRankNotify) GetUnionRank() int32 {
	if x != nil && x.UnionRank != nil {
		return *x.UnionRank
	}
	return 0
}

type MonopolyAssistMonsterDieNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterUid *int64 `protobuf:"varint,1,opt,name=monsterUid" json:"monsterUid,omitempty"`
}

func (x *MonopolyAssistMonsterDieNotify) Reset() {
	*x = MonopolyAssistMonsterDieNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAssistMonsterDieNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAssistMonsterDieNotify) ProtoMessage() {}

func (x *MonopolyAssistMonsterDieNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAssistMonsterDieNotify.ProtoReflect.Descriptor instead.
func (*MonopolyAssistMonsterDieNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{91}
}

func (x *MonopolyAssistMonsterDieNotify) GetMonsterUid() int64 {
	if x != nil && x.MonsterUid != nil {
		return *x.MonsterUid
	}
	return 0
}

type MonopolyRankMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseData   *UnionBaseData `protobuf:"bytes,1,opt,name=baseData" json:"baseData,omitempty"`
	Score      *int64         `protobuf:"varint,2,req,name=score" json:"score,omitempty"`
	FightValue *int64         `protobuf:"varint,3,req,name=fightValue" json:"fightValue,omitempty"`
	Rank       *int32         `protobuf:"varint,4,req,name=rank" json:"rank,omitempty"`
	MasterId   *int64         `protobuf:"varint,5,req,name=masterId" json:"masterId,omitempty"`
	MasterName *string        `protobuf:"bytes,6,req,name=masterName" json:"masterName,omitempty"`
}

func (x *MonopolyRankMsg) Reset() {
	*x = MonopolyRankMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRankMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRankMsg) ProtoMessage() {}

func (x *MonopolyRankMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRankMsg.ProtoReflect.Descriptor instead.
func (*MonopolyRankMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{92}
}

func (x *MonopolyRankMsg) GetBaseData() *UnionBaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *MonopolyRankMsg) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MonopolyRankMsg) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *MonopolyRankMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolyRankMsg) GetMasterId() int64 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

func (x *MonopolyRankMsg) GetMasterName() string {
	if x != nil && x.MasterName != nil {
		return *x.MasterName
	}
	return ""
}

type MonopolyRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInfo []*MonopolyRankMsg `protobuf:"bytes,1,rep,name=rankInfo" json:"rankInfo,omitempty"`
}

func (x *MonopolyRankList) Reset() {
	*x = MonopolyRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyRankList) ProtoMessage() {}

func (x *MonopolyRankList) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyRankList.ProtoReflect.Descriptor instead.
func (*MonopolyRankList) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{93}
}

func (x *MonopolyRankList) GetRankInfo() []*MonopolyRankMsg {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

type MonopolyMyBlessingNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData *PlayerCharacterImageMsg `protobuf:"bytes,1,req,name=playerData" json:"playerData,omitempty"`
	Strength   *int32                   `protobuf:"varint,2,req,name=strength" json:"strength,omitempty"`
	GiftName   *string                  `protobuf:"bytes,3,req,name=giftName" json:"giftName,omitempty"`
}

func (x *MonopolyMyBlessingNotify) Reset() {
	*x = MonopolyMyBlessingNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyMyBlessingNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyMyBlessingNotify) ProtoMessage() {}

func (x *MonopolyMyBlessingNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyMyBlessingNotify.ProtoReflect.Descriptor instead.
func (*MonopolyMyBlessingNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{94}
}

func (x *MonopolyMyBlessingNotify) GetPlayerData() *PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *MonopolyMyBlessingNotify) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *MonopolyMyBlessingNotify) GetGiftName() string {
	if x != nil && x.GiftName != nil {
		return *x.GiftName
	}
	return ""
}

type MonopolyAssistRedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (x *MonopolyAssistRedNotify) Reset() {
	*x = MonopolyAssistRedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyAssistRedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyAssistRedNotify) ProtoMessage() {}

func (x *MonopolyAssistRedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyAssistRedNotify.ProtoReflect.Descriptor instead.
func (*MonopolyAssistRedNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{95}
}

func (x *MonopolyAssistRedNotify) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type MonopolyBuildingScoreDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank     *int32  `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	NickName *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	Score    *int64  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (x *MonopolyBuildingScoreDetailInfo) Reset() {
	*x = MonopolyBuildingScoreDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBuildingScoreDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBuildingScoreDetailInfo) ProtoMessage() {}

func (x *MonopolyBuildingScoreDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBuildingScoreDetailInfo.ProtoReflect.Descriptor instead.
func (*MonopolyBuildingScoreDetailInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{96}
}

func (x *MonopolyBuildingScoreDetailInfo) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolyBuildingScoreDetailInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MonopolyBuildingScoreDetailInfo) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type MonopolyBuildingScoreDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyBuildingScoreDetailReq) Reset() {
	*x = MonopolyBuildingScoreDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBuildingScoreDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBuildingScoreDetailReq) ProtoMessage() {}

func (x *MonopolyBuildingScoreDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBuildingScoreDetailReq.ProtoReflect.Descriptor instead.
func (*MonopolyBuildingScoreDetailReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{97}
}

func (x *MonopolyBuildingScoreDetailReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyBuildingScoreDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32                             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Datas []*MonopolyBuildingScoreDetailInfo `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *MonopolyBuildingScoreDetailResp) Reset() {
	*x = MonopolyBuildingScoreDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyBuildingScoreDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyBuildingScoreDetailResp) ProtoMessage() {}

func (x *MonopolyBuildingScoreDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyBuildingScoreDetailResp.ProtoReflect.Descriptor instead.
func (*MonopolyBuildingScoreDetailResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{98}
}

func (x *MonopolyBuildingScoreDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyBuildingScoreDetailResp) GetDatas() []*MonopolyBuildingScoreDetailInfo {
	if x != nil {
		return x.Datas
	}
	return nil
}

type MonopolyGetGroupDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	GroupId    *int32 `protobuf:"varint,2,req,name=groupId" json:"groupId,omitempty"`
}

func (x *MonopolyGetGroupDetailReq) Reset() {
	*x = MonopolyGetGroupDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetGroupDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetGroupDetailReq) ProtoMessage() {}

func (x *MonopolyGetGroupDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetGroupDetailReq.ProtoReflect.Descriptor instead.
func (*MonopolyGetGroupDetailReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{99}
}

func (x *MonopolyGetGroupDetailReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyGetGroupDetailReq) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type MonopolyGetGroupDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RankMsg []*MonopolyRankMsg `protobuf:"bytes,2,rep,name=rankMsg" json:"rankMsg,omitempty"`
}

func (x *MonopolyGetGroupDetailResp) Reset() {
	*x = MonopolyGetGroupDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetGroupDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetGroupDetailResp) ProtoMessage() {}

func (x *MonopolyGetGroupDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetGroupDetailResp.ProtoReflect.Descriptor instead.
func (*MonopolyGetGroupDetailResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{100}
}

func (x *MonopolyGetGroupDetailResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyGetGroupDetailResp) GetRankMsg() []*MonopolyRankMsg {
	if x != nil {
		return x.RankMsg
	}
	return nil
}

type MonopolyWorshipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyWorshipReq) Reset() {
	*x = MonopolyWorshipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyWorshipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyWorshipReq) ProtoMessage() {}

func (x *MonopolyWorshipReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyWorshipReq.ProtoReflect.Descriptor instead.
func (*MonopolyWorshipReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{101}
}

func (x *MonopolyWorshipReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyWorshipResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward        *string                   `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	WorshipPlayer *MonopolyWorshipPlayerMsg `protobuf:"bytes,3,opt,name=worshipPlayer" json:"worshipPlayer,omitempty"`
}

func (x *MonopolyWorshipResp) Reset() {
	*x = MonopolyWorshipResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyWorshipResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyWorshipResp) ProtoMessage() {}

func (x *MonopolyWorshipResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyWorshipResp.ProtoReflect.Descriptor instead.
func (*MonopolyWorshipResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{102}
}

func (x *MonopolyWorshipResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyWorshipResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MonopolyWorshipResp) GetWorshipPlayer() *MonopolyWorshipPlayerMsg {
	if x != nil {
		return x.WorshipPlayer
	}
	return nil
}

type MonopolyWorshipPlayerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId         *int64             `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId         *int64             `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
	NickName         *string            `protobuf:"bytes,3,req,name=nickName" json:"nickName,omitempty"`
	Pet              []int32            `protobuf:"varint,4,rep,name=pet" json:"pet,omitempty"`
	Spirit           []int32            `protobuf:"varint,5,rep,name=spirit" json:"spirit,omitempty"`
	AppearanceId     *int32             `protobuf:"varint,6,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId     *int32             `protobuf:"varint,7,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	RealmsId         *int32             `protobuf:"varint,8,opt,name=realmsId" json:"realmsId,omitempty"`
	Rank             *int32             `protobuf:"varint,10,opt,name=rank" json:"rank,omitempty"`
	HeadInfo         *PlayerHeadDataMsg `protobuf:"bytes,13,opt,name=headInfo" json:"headInfo,omitempty"`
	PetSoulShapeList []int32            `protobuf:"varint,14,rep,name=petSoulShapeList" json:"petSoulShapeList,omitempty"`
	TitleId          *int32             `protobuf:"varint,15,opt,name=titleId" json:"titleId,omitempty"`
	PetLinkageId     []int32            `protobuf:"varint,16,rep,name=petLinkageId" json:"petLinkageId,omitempty"`
	SpiritLinkageId  []int32            `protobuf:"varint,17,rep,name=spiritLinkageId" json:"spiritLinkageId,omitempty"`
}

func (x *MonopolyWorshipPlayerMsg) Reset() {
	*x = MonopolyWorshipPlayerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyWorshipPlayerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyWorshipPlayerMsg) ProtoMessage() {}

func (x *MonopolyWorshipPlayerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyWorshipPlayerMsg.ProtoReflect.Descriptor instead.
func (*MonopolyWorshipPlayerMsg) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{103}
}

func (x *MonopolyWorshipPlayerMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MonopolyWorshipPlayerMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *MonopolyWorshipPlayerMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MonopolyWorshipPlayerMsg) GetPet() []int32 {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *MonopolyWorshipPlayerMsg) GetSpirit() []int32 {
	if x != nil {
		return x.Spirit
	}
	return nil
}

func (x *MonopolyWorshipPlayerMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *MonopolyWorshipPlayerMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *MonopolyWorshipPlayerMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *MonopolyWorshipPlayerMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *MonopolyWorshipPlayerMsg) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *MonopolyWorshipPlayerMsg) GetPetSoulShapeList() []int32 {
	if x != nil {
		return x.PetSoulShapeList
	}
	return nil
}

func (x *MonopolyWorshipPlayerMsg) GetTitleId() int32 {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return 0
}

func (x *MonopolyWorshipPlayerMsg) GetPetLinkageId() []int32 {
	if x != nil {
		return x.PetLinkageId
	}
	return nil
}

func (x *MonopolyWorshipPlayerMsg) GetSpiritLinkageId() []int32 {
	if x != nil {
		return x.SpiritLinkageId
	}
	return nil
}

type MonopolyPlayerScoreChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *int32 `protobuf:"varint,1,req,name=score" json:"score,omitempty"`
}

func (x *MonopolyPlayerScoreChangeNotify) Reset() {
	*x = MonopolyPlayerScoreChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyPlayerScoreChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyPlayerScoreChangeNotify) ProtoMessage() {}

func (x *MonopolyPlayerScoreChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyPlayerScoreChangeNotify.ProtoReflect.Descriptor instead.
func (*MonopolyPlayerScoreChangeNotify) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{104}
}

func (x *MonopolyPlayerScoreChangeNotify) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type MonopolyGuessPlayersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	Param      *int32 `protobuf:"varint,2,opt,name=param" json:"param,omitempty"`
}

func (x *MonopolyGuessPlayersReq) Reset() {
	*x = MonopolyGuessPlayersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessPlayersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessPlayersReq) ProtoMessage() {}

func (x *MonopolyGuessPlayersReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessPlayersReq.ProtoReflect.Descriptor instead.
func (*MonopolyGuessPlayersReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{105}
}

func (x *MonopolyGuessPlayersReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyGuessPlayersReq) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

type MonopolyGuessPlayersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                     `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Param      *int32                     `protobuf:"varint,2,opt,name=param" json:"param,omitempty"`
	PlayerList []*MonopolyGuessPlayerInfo `protobuf:"bytes,3,rep,name=playerList" json:"playerList,omitempty"`
}

func (x *MonopolyGuessPlayersResp) Reset() {
	*x = MonopolyGuessPlayersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessPlayersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessPlayersResp) ProtoMessage() {}

func (x *MonopolyGuessPlayersResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessPlayersResp.ProtoReflect.Descriptor instead.
func (*MonopolyGuessPlayersResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{106}
}

func (x *MonopolyGuessPlayersResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyGuessPlayersResp) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

func (x *MonopolyGuessPlayersResp) GetPlayerList() []*MonopolyGuessPlayerInfo {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type MonopolyGuessPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64  `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	ServerId *int32  `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *MonopolyGuessPlayerInfo) Reset() {
	*x = MonopolyGuessPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessPlayerInfo) ProtoMessage() {}

func (x *MonopolyGuessPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessPlayerInfo.ProtoReflect.Descriptor instead.
func (*MonopolyGuessPlayerInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{107}
}

func (x *MonopolyGuessPlayerInfo) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *MonopolyGuessPlayerInfo) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *MonopolyGuessPlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type MonopolyGetGuessDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyGetGuessDataReq) Reset() {
	*x = MonopolyGetGuessDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetGuessDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetGuessDataReq) ProtoMessage() {}

func (x *MonopolyGetGuessDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetGuessDataReq.ProtoReflect.Descriptor instead.
func (*MonopolyGetGuessDataReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{108}
}

func (x *MonopolyGetGuessDataReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyGetGuessDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32                    `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	InfoList       []*MonopolyGuessUnionInfo `protobuf:"bytes,2,rep,name=infoList" json:"infoList,omitempty"`
	UnionIdArr     []int64                   `protobuf:"varint,3,rep,name=unionIdArr" json:"unionIdArr,omitempty"`
	RewardRankAchi []int32                   `protobuf:"varint,4,rep,name=rewardRankAchi" json:"rewardRankAchi,omitempty"`
	IsReceive      *bool                     `protobuf:"varint,5,opt,name=isReceive" json:"isReceive,omitempty"`
	RewardParam    *int32                    `protobuf:"varint,6,opt,name=rewardParam" json:"rewardParam,omitempty"`
}

func (x *MonopolyGetGuessDataResp) Reset() {
	*x = MonopolyGetGuessDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGetGuessDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGetGuessDataResp) ProtoMessage() {}

func (x *MonopolyGetGuessDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGetGuessDataResp.ProtoReflect.Descriptor instead.
func (*MonopolyGetGuessDataResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{109}
}

func (x *MonopolyGetGuessDataResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyGetGuessDataResp) GetInfoList() []*MonopolyGuessUnionInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

func (x *MonopolyGetGuessDataResp) GetUnionIdArr() []int64 {
	if x != nil {
		return x.UnionIdArr
	}
	return nil
}

func (x *MonopolyGetGuessDataResp) GetRewardRankAchi() []int32 {
	if x != nil {
		return x.RewardRankAchi
	}
	return nil
}

func (x *MonopolyGetGuessDataResp) GetIsReceive() bool {
	if x != nil && x.IsReceive != nil {
		return *x.IsReceive
	}
	return false
}

func (x *MonopolyGetGuessDataResp) GetRewardParam() int32 {
	if x != nil && x.RewardParam != nil {
		return *x.RewardParam
	}
	return 0
}

type MonopolyGuessUnionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankInfo      *MonopolyRankMsg `protobuf:"bytes,1,opt,name=rankInfo" json:"rankInfo,omitempty"`
	SelectedCount *int32           `protobuf:"varint,2,opt,name=selectedCount" json:"selectedCount,omitempty"`
	Result        *bool            `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *MonopolyGuessUnionInfo) Reset() {
	*x = MonopolyGuessUnionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessUnionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessUnionInfo) ProtoMessage() {}

func (x *MonopolyGuessUnionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessUnionInfo.ProtoReflect.Descriptor instead.
func (*MonopolyGuessUnionInfo) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{110}
}

func (x *MonopolyGuessUnionInfo) GetRankInfo() *MonopolyRankMsg {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

func (x *MonopolyGuessUnionInfo) GetSelectedCount() int32 {
	if x != nil && x.SelectedCount != nil {
		return *x.SelectedCount
	}
	return 0
}

func (x *MonopolyGuessUnionInfo) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type MonopolyGuessSelectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32  `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
	UnionIdArr []int64 `protobuf:"varint,3,rep,name=unionIdArr" json:"unionIdArr,omitempty"`
}

func (x *MonopolyGuessSelectReq) Reset() {
	*x = MonopolyGuessSelectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessSelectReq) ProtoMessage() {}

func (x *MonopolyGuessSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessSelectReq.ProtoReflect.Descriptor instead.
func (*MonopolyGuessSelectReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{111}
}

func (x *MonopolyGuessSelectReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

func (x *MonopolyGuessSelectReq) GetUnionIdArr() []int64 {
	if x != nil {
		return x.UnionIdArr
	}
	return nil
}

type MonopolyGuessSelectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MonopolyGuessSelectResp) Reset() {
	*x = MonopolyGuessSelectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessSelectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessSelectResp) ProtoMessage() {}

func (x *MonopolyGuessSelectResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessSelectResp.ProtoReflect.Descriptor instead.
func (*MonopolyGuessSelectResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{112}
}

func (x *MonopolyGuessSelectResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MonopolyGuessRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,req,name=activityId" json:"activityId,omitempty"`
}

func (x *MonopolyGuessRewardReq) Reset() {
	*x = MonopolyGuessRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessRewardReq) ProtoMessage() {}

func (x *MonopolyGuessRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessRewardReq.ProtoReflect.Descriptor instead.
func (*MonopolyGuessRewardReq) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{113}
}

func (x *MonopolyGuessRewardReq) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

type MonopolyGuessRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32  `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Rewards *string `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
}

func (x *MonopolyGuessRewardResp) Reset() {
	*x = MonopolyGuessRewardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Monopoly_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonopolyGuessRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonopolyGuessRewardResp) ProtoMessage() {}

func (x *MonopolyGuessRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_Monopoly_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonopolyGuessRewardResp.ProtoReflect.Descriptor instead.
func (*MonopolyGuessRewardResp) Descriptor() ([]byte, []int) {
	return file_Monopoly_proto_rawDescGZIP(), []int{114}
}

func (x *MonopolyGuessRewardResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MonopolyGuessRewardResp) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

var File_Monopoly_proto protoreflect.FileDescriptor

var file_Monopoly_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x4e, 0x0a,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x48, 0x0a,
	0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x6d, 0x61, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x0a, 0x18, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x3a, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xbe,
	0x03, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x33, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x33, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0d, 0x77,
	0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x52, 0x0d, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22,
	0xc0, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6f,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x35, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x14, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x12, 0x4c, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xba, 0x04, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x70, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x42, 0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x9b, 0x02, 0x0a, 0x1a,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x35, 0x0a, 0x13, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x8c, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x6f, 0x6c,
	0x6c, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xfb, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x22, 0xfb, 0x03,
	0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a,
	0x08, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x6f,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x4d,
	0x6f, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x59, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x4d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d,
	0x73, 0x67, 0x12, 0x5d, 0x0a, 0x12, 0x64, 0x61, 0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x44, 0x61, 0x72, 0x6b,
	0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x12, 0x64,
	0x61, 0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x1c,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0b,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0b, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x73,
	0x67, 0x12, 0x5d, 0x0a, 0x12, 0x64, 0x61, 0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x44, 0x61, 0x72, 0x6b, 0x47,
	0x72, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x12, 0x64, 0x61,
	0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xfd, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x66, 0x74, 0x48, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x66,
	0x74, 0x48, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x73, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x72, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x62,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x6c, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0x40, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x6c, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x44,
	0x61, 0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x22, 0x37, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xe1, 0x01,
	0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x54, 0x72,
	0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xd8, 0x03, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x68, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x68, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x66, 0x74, 0x48, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x66, 0x74, 0x48, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a,
	0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0x5a, 0x0a, 0x1c, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95,
	0x01, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x65,
	0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x1a,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0b,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x63, 0x75, 0x65, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x63, 0x75, 0x65, 0x54, 0x72, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x47, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3e,
	0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34,
	0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x6f, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x52, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4c,
	0x0a, 0x0c, 0x72, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x52, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x72, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x62, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x52, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x6f, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x73, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x6f, 0x62, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x52, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x6f, 0x62, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x4a, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x52, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x52, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c,
	0x66, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22,
	0x61, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x7a, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x4c, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa5,
	0x02, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x79, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x72, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x62, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x1e,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x1f, 0x4d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x73, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a,
	0x1f, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x22, 0xcf, 0x01, 0x0a, 0x20, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x50, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73,
	0x6b, 0x48, 0x65, 0x6c, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x6b,
	0x48, 0x65, 0x6c, 0x70, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x22, 0x38, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x17, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x19, 0x4d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x6c, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x46, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x52, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x17,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x62,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x37, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0x39, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x7f, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x6c, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x51, 0x0a,
	0x0c, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xdc, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x6c, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x58, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x47, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x22, 0x36, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x7b, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x53, 0x0a, 0x17,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x72, 0x69, 0x64,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x44, 0x61,
	0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7a, 0x0a, 0x16, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x72, 0x65, 0x71, 0x22, 0x55, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x52, 0x0a,
	0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x77, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4a,
	0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x18, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x39, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x74, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x46, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x52, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x17,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x6f, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x12,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x73, 0x22,
	0x5d, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a,
	0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x49, 0x0a, 0x13, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x46, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x40, 0x0a,
	0x1e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22,
	0xd6, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b,
	0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b,
	0x4d, 0x73, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x01,
	0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x4d, 0x79, 0x42, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2d, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x67,
	0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x40, 0x0a, 0x1e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x55, 0x0a, 0x19, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x22,
	0x34, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xe7, 0x03, 0x0a, 0x18,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x41,
	0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x70, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4f,
	0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x8f, 0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x75, 0x65, 0x73,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x65, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x75, 0x65,
	0x73, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x72, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x68, 0x69, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x68, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x16,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x41, 0x72, 0x72, 0x22, 0x2b, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x17, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2a, 0xc4, 0x11, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x17, 0x6d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0xed, 0x80, 0x0d, 0x12, 0x18, 0x0a, 0x12, 0x6d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x10,
	0xee, 0x80, 0x0d, 0x12, 0x18, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x10, 0xef, 0x80, 0x0d, 0x12, 0x1a, 0x0a,
	0x14, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0xf0, 0x80, 0x0d, 0x12, 0x21, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0xf1, 0x80, 0x0d, 0x12, 0x1a, 0x0a, 0x14,
	0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x63, 0x75, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x70, 0x10, 0xf3, 0x80, 0x0d, 0x12, 0x17, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x6f, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0xf4, 0x80,
	0x0d, 0x12, 0x1f, 0x0a, 0x19, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x6f,
	0x62, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0xf5,
	0x80, 0x0d, 0x12, 0x12, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72,
	0x6f, 0x62, 0x10, 0xf6, 0x80, 0x0d, 0x12, 0x1d, 0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x10, 0xf7, 0x80, 0x0d, 0x12, 0x20, 0x0a, 0x1a, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x10, 0xf8, 0x80, 0x0d, 0x12, 0x24, 0x0a, 0x1e, 0x6d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x10, 0xf9, 0x80, 0x0d, 0x12, 0x25, 0x0a,
	0x1f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x10, 0xfa, 0x80, 0x0d, 0x12, 0x18, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x5f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0xfb, 0x80, 0x0d, 0x12, 0x1f,
	0x0a, 0x19, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x10, 0xfc, 0x80, 0x0d, 0x12,
	0x18, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x6f, 0x62, 0x10, 0xfd, 0x80, 0x0d, 0x12, 0x18, 0x0a, 0x12, 0x6d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x10,
	0xfe, 0x80, 0x0d, 0x12, 0x1c, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f,
	0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0xff, 0x80,
	0x0d, 0x12, 0x1f, 0x0a, 0x19, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x80,
	0x81, 0x0d, 0x12, 0x19, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x81, 0x81, 0x0d, 0x12, 0x1d, 0x0a,
	0x17, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x67,
	0x72, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x82, 0x81, 0x0d, 0x12, 0x1b, 0x0a, 0x15,
	0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x83, 0x81, 0x0d, 0x12, 0x1b, 0x0a, 0x15, 0x6d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x10, 0x84, 0x81, 0x0d, 0x12, 0x1f, 0x0a, 0x19, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x10, 0x85, 0x81, 0x0d, 0x12, 0x1d, 0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x10, 0x86, 0x81, 0x0d, 0x12, 0x1b, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10,
	0x87, 0x81, 0x0d, 0x12, 0x24, 0x0a, 0x1e, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x88, 0x81, 0x0d, 0x12, 0x1d, 0x0a, 0x17, 0x6d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x10, 0x8a, 0x81, 0x0d, 0x12, 0x1a, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x10, 0x8b, 0x81, 0x0d, 0x12, 0x25, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x10, 0x8c, 0x81, 0x0d, 0x12, 0x26, 0x0a, 0x20, 0x6d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10,
	0x8d, 0x81, 0x0d, 0x12, 0x25, 0x0a, 0x1f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x8e, 0x81, 0x0d, 0x12, 0x23, 0x0a, 0x1d, 0x6d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x8f, 0x81, 0x0d, 0x12,
	0x1b, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x90, 0x81, 0x0d, 0x12, 0x1a, 0x0a, 0x14,
	0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x10, 0x91, 0x81, 0x0d, 0x12, 0x28, 0x0a, 0x22, 0x6d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x92,
	0x81, 0x0d, 0x12, 0x21, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x6d,
	0x79, 0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x10, 0x93, 0x81, 0x0d, 0x12, 0x20, 0x0a, 0x1a, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c,
	0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x10, 0x94, 0x81, 0x0d, 0x12, 0x1d, 0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x10, 0x95, 0x81, 0x0d, 0x12, 0x16, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x96, 0x81, 0x0d, 0x12, 0x1b,
	0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x97, 0x81, 0x0d, 0x12, 0x22, 0x0a, 0x1c, 0x6d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x98, 0x81, 0x0d, 0x12,
	0x1c, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x67, 0x75, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x99, 0x81, 0x0d, 0x12, 0x1d, 0x0a,
	0x17, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75,
	0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x10, 0x9a, 0x81, 0x0d, 0x12, 0x1b, 0x0a, 0x15,
	0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x9b, 0x81, 0x0d, 0x12, 0x1b, 0x0a, 0x15, 0x6d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x10, 0x9c, 0x81, 0x0d, 0x12, 0x32, 0x0a, 0x2c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54,
	0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x10, 0xb3, 0x81, 0x0d, 0x12, 0x33, 0x0a, 0x2d, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x10, 0xb4, 0x81, 0x0d, 0x12,
	0x2a, 0x0a, 0x24, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0xb5, 0x81, 0x0d, 0x12, 0x2f, 0x0a, 0x29, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x10, 0xb6, 0x81, 0x0d, 0x12, 0x2d, 0x0a, 0x27,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0xb7, 0x81, 0x0d, 0x12, 0x36, 0x0a, 0x30, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10,
	0xb8, 0x81, 0x0d, 0x12, 0x23, 0x0a, 0x1d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x6f, 0x76, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x10, 0xb9, 0x81, 0x0d, 0x12, 0x2d, 0x0a, 0x27, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x10, 0xba, 0x81, 0x0d, 0x12, 0x29, 0x0a, 0x23, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0xbb,
	0x81, 0x0d, 0x12, 0x30, 0x0a, 0x2a, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x10, 0xbc, 0x81, 0x0d, 0x12, 0x2b, 0x0a, 0x25, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0xbd, 0x81,
	0x0d, 0x12, 0x2c, 0x0a, 0x26, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xbe, 0x81, 0x0d, 0x12,
	0x24, 0x0a, 0x1e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x10, 0xbf, 0x81, 0x0d, 0x12, 0x29, 0x0a, 0x23, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f,
	0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0xc0, 0x81, 0x0d,
	0x12, 0x2e, 0x0a, 0x28, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0xc1, 0x81, 0x0d,
	0x12, 0x2b, 0x0a, 0x25, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x10, 0xc2, 0x81, 0x0d, 0x12, 0x2c, 0x0a,
	0x26, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0xc3, 0x81, 0x0d, 0x2a, 0x72, 0x0a, 0x10, 0x4d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x6d, 0x6f, 0x76, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x72, 0x61, 0x70, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x64, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x08, 0x2a,
	0xba, 0x04, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x70, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x6f, 0x6e,
	0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x06, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x10, 0x07, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x47, 0x69, 0x66, 0x74, 0x10, 0x08, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0b, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x62, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x6e, 0x47, 0x75, 0x65, 0x73, 0x73, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x6f,
	0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67,
	0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x0f, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f,
	0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70,
	0x62, 0x3b, 0x70, 0x62,
}

var (
	file_Monopoly_proto_rawDescOnce sync.Once
	file_Monopoly_proto_rawDescData = file_Monopoly_proto_rawDesc
)

func file_Monopoly_proto_rawDescGZIP() []byte {
	file_Monopoly_proto_rawDescOnce.Do(func() {
		file_Monopoly_proto_rawDescData = protoimpl.X.CompressGZIP(file_Monopoly_proto_rawDescData)
	})
	return file_Monopoly_proto_rawDescData
}

var file_Monopoly_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_Monopoly_proto_msgTypes = make([]protoimpl.MessageInfo, 115)
var file_Monopoly_proto_goTypes = []any{
	(MonopolyProtocols)(0),                   // 0: com.yq.msg.CityMsg.MonopolyProtocols
	(MonopolySyncType)(0),                    // 1: com.yq.msg.CityMsg.MonopolySyncType
	(MonopolyRedPointEnum)(0),                // 2: com.yq.msg.CityMsg.MonopolyRedPointEnum
	(*MonopolyConfigSyncMsg)(nil),            // 3: com.yq.msg.CityMsg.MonopolyConfigSyncMsg
	(*MonopolyEventConfigMsg)(nil),           // 4: com.yq.msg.CityMsg.MonopolyEventConfigMsg
	(*MonopolyMapConfigMsg)(nil),             // 5: com.yq.msg.CityMsg.MonopolyMapConfigMsg
	(*MonopolyMonsterConfigMsg)(nil),         // 6: com.yq.msg.CityMsg.MonopolyMonsterConfigMsg
	(*MonopolyTimeConfigMsg)(nil),            // 7: com.yq.msg.CityMsg.MonopolyTimeConfigMsg
	(*MonopolyGroupConfigMsg)(nil),           // 8: com.yq.msg.CityMsg.MonopolyGroupConfigMsg
	(*MonopolyEnterActivityReq)(nil),         // 9: com.yq.msg.CityMsg.MonopolyEnterActivityReq
	(*MonopolyEnterActivityResp)(nil),        // 10: com.yq.msg.CityMsg.MonopolyEnterActivityResp
	(*MonopolySettleInfo)(nil),               // 11: com.yq.msg.CityMsg.MonopolySettleInfo
	(*MonopolyEnterMapReq)(nil),              // 12: com.yq.msg.CityMsg.MonopolyEnterMapReq
	(*MonopolyEnterMapResp)(nil),             // 13: com.yq.msg.CityMsg.MonopolyEnterMapResp
	(*MonopolySelfPlayerDataMsg)(nil),        // 14: com.yq.msg.CityMsg.MonopolySelfPlayerDataMsg
	(*MonopolyBuffDataMsg)(nil),              // 15: com.yq.msg.CityMsg.MonopolyBuffDataMsg
	(*MonopolyOtherPlayerDataMsg)(nil),       // 16: com.yq.msg.CityMsg.MonopolyOtherPlayerDataMsg
	(*MonopolyRollDiceReq)(nil),              // 17: com.yq.msg.CityMsg.MonopolyRollDiceReq
	(*MonopolyRollDiceResp)(nil),             // 18: com.yq.msg.CityMsg.MonopolyRollDiceResp
	(*MonopolyMoveResult)(nil),               // 19: com.yq.msg.CityMsg.MonopolyMoveResult
	(*MonopolyExploreResultData)(nil),        // 20: com.yq.msg.CityMsg.MonopolyExploreResultData
	(*MonopolyEventDoingInfoEntity)(nil),     // 21: com.yq.msg.CityMsg.MonopolyEventDoingInfoEntity
	(*MonopolyMonsterMsg)(nil),               // 22: com.yq.msg.CityMsg.MonopolyMonsterMsg
	(*MonopolyUserMallInfo)(nil),             // 23: com.yq.msg.CityMsg.MonopolyUserMallInfo
	(*MonopolyBlessingMsg)(nil),              // 24: com.yq.msg.CityMsg.MonopolyBlessingMsg
	(*MonopolyBlessingInfo)(nil),             // 25: com.yq.msg.CityMsg.MonopolyBlessingInfo
	(*MonopolyDarkGridRewardMsg)(nil),        // 26: com.yq.msg.CityMsg.MonopolyDarkGridRewardMsg
	(*MonopolyAssistListReq)(nil),            // 27: com.yq.msg.CityMsg.MonopolyAssistListReq
	(*MonopolyAssistListResp)(nil),           // 28: com.yq.msg.CityMsg.MonopolyAssistListResp
	(*MonopolyTrapPlayerMsg)(nil),            // 29: com.yq.msg.CityMsg.MonopolyTrapPlayerMsg
	(*MonopolyAssistMonsterMsg)(nil),         // 30: com.yq.msg.CityMsg.MonopolyAssistMonsterMsg
	(*MonopolyMonsterLogMsg)(nil),            // 31: com.yq.msg.CityMsg.MonopolyMonsterLogMsg
	(*MonopolyReplenishStrengthReq)(nil),     // 32: com.yq.msg.CityMsg.MonopolyReplenishStrengthReq
	(*MonopolyReplenishStrengthResp)(nil),    // 33: com.yq.msg.CityMsg.MonopolyReplenishStrengthResp
	(*MonopolyEventActionReqMsg)(nil),        // 34: com.yq.msg.CityMsg.MonopolyEventActionReqMsg
	(*MonopolyEventActionRespMsg)(nil),       // 35: com.yq.msg.CityMsg.MonopolyEventActionRespMsg
	(*MonopolyRescueTrapReq)(nil),            // 36: com.yq.msg.CityMsg.MonopolyRescueTrapReq
	(*MonopolyRescueTrapResp)(nil),           // 37: com.yq.msg.CityMsg.MonopolyRescueTrapResp
	(*MonopolyDrawReq)(nil),                  // 38: com.yq.msg.CityMsg.MonopolyDrawReq
	(*MonopolyDrawResp)(nil),                 // 39: com.yq.msg.CityMsg.MonopolyDrawResp
	(*MonopolyRobListReq)(nil),               // 40: com.yq.msg.CityMsg.MonopolyRobListReq
	(*MonopolyRobListResp)(nil),              // 41: com.yq.msg.CityMsg.MonopolyRobListResp
	(*MonopolyRobUnionInfo)(nil),             // 42: com.yq.msg.CityMsg.MonopolyRobUnionInfo
	(*MonopolyRobUnionDetailReq)(nil),        // 43: com.yq.msg.CityMsg.MonopolyRobUnionDetailReq
	(*MonopolyRobUnionDetailResp)(nil),       // 44: com.yq.msg.CityMsg.MonopolyRobUnionDetailResp
	(*MonopolyRobReq)(nil),                   // 45: com.yq.msg.CityMsg.MonopolyRobReq
	(*MonopolyRobResp)(nil),                  // 46: com.yq.msg.CityMsg.MonopolyRobResp
	(*MonopolyUnionLogListReq)(nil),          // 47: com.yq.msg.CityMsg.MonopolyUnionLogListReq
	(*MonopolyUnionLogListResp)(nil),         // 48: com.yq.msg.CityMsg.MonopolyUnionLogListResp
	(*MonopolyUnionLogInfo)(nil),             // 49: com.yq.msg.CityMsg.MonopolyUnionLogInfo
	(*MonopolyPlayerLogDetailReq)(nil),       // 50: com.yq.msg.CityMsg.MonopolyPlayerLogDetailReq
	(*MonopolyPlayerLogDetailResp)(nil),      // 51: com.yq.msg.CityMsg.MonopolyPlayerLogDetailResp
	(*MonopolyPlayerLogDetailInfo)(nil),      // 52: com.yq.msg.CityMsg.MonopolyPlayerLogDetailInfo
	(*MonopolyAssistAttackMonsterReq)(nil),   // 53: com.yq.msg.CityMsg.MonopolyAssistAttackMonsterReq
	(*MonopolyAssistAttackMonsterResp)(nil),  // 54: com.yq.msg.CityMsg.MonopolyAssistAttackMonsterResp
	(*MonopolyReceiveMonsterRewardReq)(nil),  // 55: com.yq.msg.CityMsg.MonopolyReceiveMonsterRewardReq
	(*MonopolyReceiveMonsterRewardResp)(nil), // 56: com.yq.msg.CityMsg.MonopolyReceiveMonsterRewardResp
	(*MonopolyBreakFreeReq)(nil),             // 57: com.yq.msg.CityMsg.MonopolyBreakFreeReq
	(*MonopolyBreakFreeResp)(nil),            // 58: com.yq.msg.CityMsg.MonopolyBreakFreeResp
	(*MonopolyRedPointReqMsg)(nil),           // 59: com.yq.msg.CityMsg.MonopolyRedPointReqMsg
	(*MonopolyRedPointRespMsg)(nil),          // 60: com.yq.msg.CityMsg.MonopolyRedPointRespMsg
	(*MonopolyRemoteRollDiceReq)(nil),        // 61: com.yq.msg.CityMsg.MonopolyRemoteRollDiceReq
	(*MonopolyRemoteRollDiceResp)(nil),       // 62: com.yq.msg.CityMsg.MonopolyRemoteRollDiceResp
	(*MonopolyEnterRobMapReq)(nil),           // 63: com.yq.msg.CityMsg.MonopolyEnterRobMapReq
	(*MonopolyEnterRobMapResp)(nil),          // 64: com.yq.msg.CityMsg.MonopolyEnterRobMapResp
	(*MonopolyAutoUnlockReq)(nil),            // 65: com.yq.msg.CityMsg.MonopolyAutoUnlockReq
	(*MonopolyAutoUnlockResp)(nil),           // 66: com.yq.msg.CityMsg.MonopolyAutoUnlockResp
	(*MonopolyBlessingListReq)(nil),          // 67: com.yq.msg.CityMsg.MonopolyBlessingListReq
	(*MonopolyBlessingListResp)(nil),         // 68: com.yq.msg.CityMsg.MonopolyBlessingListResp
	(*MonopolyBlessedNoticeInfo)(nil),        // 69: com.yq.msg.CityMsg.MonopolyBlessedNoticeInfo
	(*MonopolyReceiveBlessingReq)(nil),       // 70: com.yq.msg.CityMsg.MonopolyReceiveBlessingReq
	(*MonopolyReceiveBlessingResp)(nil),      // 71: com.yq.msg.CityMsg.MonopolyReceiveBlessingResp
	(*MonopolyQuickMoveReq)(nil),             // 72: com.yq.msg.CityMsg.MonopolyQuickMoveReq
	(*MonopolyQuickMoveResp)(nil),            // 73: com.yq.msg.CityMsg.MonopolyQuickMoveResp
	(*MonopolyDarkGridMoveReq)(nil),          // 74: com.yq.msg.CityMsg.MonopolyDarkGridMoveReq
	(*MonopolyDarkGridMoveResp)(nil),         // 75: com.yq.msg.CityMsg.MonopolyDarkGridMoveResp
	(*MonopolyEventHandleReq)(nil),           // 76: com.yq.msg.CityMsg.MonopolyEventHandleReq
	(*MonopolyEventHandleResp)(nil),          // 77: com.yq.msg.CityMsg.MonopolyEventHandleResp
	(*MonopolyMonsterAttrReq)(nil),           // 78: com.yq.msg.CityMsg.MonopolyMonsterAttrReq
	(*MonopolyMonsterAttrResp)(nil),          // 79: com.yq.msg.CityMsg.MonopolyMonsterAttrResp
	(*MonopolyGetPlayerRankReq)(nil),         // 80: com.yq.msg.CityMsg.MonopolyGetPlayerRankReq
	(*MonopolyGetPlayerRankResp)(nil),        // 81: com.yq.msg.CityMsg.MonopolyGetPlayerRankResp
	(*MonopolyGetEnemyListReq)(nil),          // 82: com.yq.msg.CityMsg.MonopolyGetEnemyListReq
	(*MonopolyGetEnemyListResp)(nil),         // 83: com.yq.msg.CityMsg.MonopolyGetEnemyListResp
	(*MonopolyScoreDetailReq)(nil),           // 84: com.yq.msg.CityMsg.MonopolyScoreDetailReq
	(*MonopolyScoreDetailResp)(nil),          // 85: com.yq.msg.CityMsg.MonopolyScoreDetailResp
	(*MonopolyScoreDetailInfo)(nil),          // 86: com.yq.msg.CityMsg.MonopolyScoreDetailInfo
	(*MonopolyBarrageNotify)(nil),            // 87: com.yq.msg.CityMsg.MonopolyBarrageNotify
	(*MonopolyMoveNotify)(nil),               // 88: com.yq.msg.CityMsg.MonopolyMoveNotify
	(*MonopolyNotifyPlayerEndTrap)(nil),      // 89: com.yq.msg.CityMsg.MonopolyNotifyPlayerEndTrap
	(*MonopolyNotifyBuildingUpgrade)(nil),    // 90: com.yq.msg.CityMsg.MonopolyNotifyBuildingUpgrade
	(*MonopolySendBlessingNotify)(nil),       // 91: com.yq.msg.CityMsg.MonopolySendBlessingNotify
	(*MonopolyScoreNotify)(nil),              // 92: com.yq.msg.CityMsg.MonopolyScoreNotify
	(*MonopolyRankNotify)(nil),               // 93: com.yq.msg.CityMsg.MonopolyRankNotify
	(*MonopolyAssistMonsterDieNotify)(nil),   // 94: com.yq.msg.CityMsg.MonopolyAssistMonsterDieNotify
	(*MonopolyRankMsg)(nil),                  // 95: com.yq.msg.CityMsg.MonopolyRankMsg
	(*MonopolyRankList)(nil),                 // 96: com.yq.msg.CityMsg.MonopolyRankList
	(*MonopolyMyBlessingNotify)(nil),         // 97: com.yq.msg.CityMsg.MonopolyMyBlessingNotify
	(*MonopolyAssistRedNotify)(nil),          // 98: com.yq.msg.CityMsg.MonopolyAssistRedNotify
	(*MonopolyBuildingScoreDetailInfo)(nil),  // 99: com.yq.msg.CityMsg.MonopolyBuildingScoreDetailInfo
	(*MonopolyBuildingScoreDetailReq)(nil),   // 100: com.yq.msg.CityMsg.MonopolyBuildingScoreDetailReq
	(*MonopolyBuildingScoreDetailResp)(nil),  // 101: com.yq.msg.CityMsg.MonopolyBuildingScoreDetailResp
	(*MonopolyGetGroupDetailReq)(nil),        // 102: com.yq.msg.CityMsg.MonopolyGetGroupDetailReq
	(*MonopolyGetGroupDetailResp)(nil),       // 103: com.yq.msg.CityMsg.MonopolyGetGroupDetailResp
	(*MonopolyWorshipReq)(nil),               // 104: com.yq.msg.CityMsg.MonopolyWorshipReq
	(*MonopolyWorshipResp)(nil),              // 105: com.yq.msg.CityMsg.MonopolyWorshipResp
	(*MonopolyWorshipPlayerMsg)(nil),         // 106: com.yq.msg.CityMsg.MonopolyWorshipPlayerMsg
	(*MonopolyPlayerScoreChangeNotify)(nil),  // 107: com.yq.msg.CityMsg.MonopolyPlayerScoreChangeNotify
	(*MonopolyGuessPlayersReq)(nil),          // 108: com.yq.msg.CityMsg.MonopolyGuessPlayersReq
	(*MonopolyGuessPlayersResp)(nil),         // 109: com.yq.msg.CityMsg.MonopolyGuessPlayersResp
	(*MonopolyGuessPlayerInfo)(nil),          // 110: com.yq.msg.CityMsg.MonopolyGuessPlayerInfo
	(*MonopolyGetGuessDataReq)(nil),          // 111: com.yq.msg.CityMsg.MonopolyGetGuessDataReq
	(*MonopolyGetGuessDataResp)(nil),         // 112: com.yq.msg.CityMsg.MonopolyGetGuessDataResp
	(*MonopolyGuessUnionInfo)(nil),           // 113: com.yq.msg.CityMsg.MonopolyGuessUnionInfo
	(*MonopolyGuessSelectReq)(nil),           // 114: com.yq.msg.CityMsg.MonopolyGuessSelectReq
	(*MonopolyGuessSelectResp)(nil),          // 115: com.yq.msg.CityMsg.MonopolyGuessSelectResp
	(*MonopolyGuessRewardReq)(nil),           // 116: com.yq.msg.CityMsg.MonopolyGuessRewardReq
	(*MonopolyGuessRewardResp)(nil),          // 117: com.yq.msg.CityMsg.MonopolyGuessRewardResp
	(*UnionBaseData)(nil),                    // 118: com.yq.msg.CityMsg.UnionBaseData
	(*PlayerHeadDataMsg)(nil),                // 119: com.yq.msg.CityMsg.PlayerHeadDataMsg
	(*BattleRecordMsg)(nil),                  // 120: com.yq.msg.CityMsg.BattleRecordMsg
	(*PlayerCharacterImageMsg)(nil),          // 121: com.yq.msg.CityMsg.PlayerCharacterImageMsg
	(*AttributeDataMsg)(nil),                 // 122: com.yq.msg.CityMsg.AttributeDataMsg
}
var file_Monopoly_proto_depIdxs = []int32{
	4,   // 0: com.yq.msg.CityMsg.MonopolyConfigSyncMsg.eventConfigs:type_name -> com.yq.msg.CityMsg.MonopolyEventConfigMsg
	5,   // 1: com.yq.msg.CityMsg.MonopolyConfigSyncMsg.mapConfigs:type_name -> com.yq.msg.CityMsg.MonopolyMapConfigMsg
	6,   // 2: com.yq.msg.CityMsg.MonopolyConfigSyncMsg.monsterConfig:type_name -> com.yq.msg.CityMsg.MonopolyMonsterConfigMsg
	7,   // 3: com.yq.msg.CityMsg.MonopolyConfigSyncMsg.timeConfig:type_name -> com.yq.msg.CityMsg.MonopolyTimeConfigMsg
	8,   // 4: com.yq.msg.CityMsg.MonopolyConfigSyncMsg.groupConfig:type_name -> com.yq.msg.CityMsg.MonopolyGroupConfigMsg
	118, // 5: com.yq.msg.CityMsg.MonopolyEnterActivityResp.top3Union:type_name -> com.yq.msg.CityMsg.UnionBaseData
	11,  // 6: com.yq.msg.CityMsg.MonopolyEnterActivityResp.settleInfo:type_name -> com.yq.msg.CityMsg.MonopolySettleInfo
	106, // 7: com.yq.msg.CityMsg.MonopolyEnterActivityResp.worshipPlayer:type_name -> com.yq.msg.CityMsg.MonopolyWorshipPlayerMsg
	14,  // 8: com.yq.msg.CityMsg.MonopolyEnterMapResp.playerData:type_name -> com.yq.msg.CityMsg.MonopolySelfPlayerDataMsg
	21,  // 9: com.yq.msg.CityMsg.MonopolyEnterMapResp.eventData:type_name -> com.yq.msg.CityMsg.MonopolyEventDoingInfoEntity
	23,  // 10: com.yq.msg.CityMsg.MonopolyEnterMapResp.mallInfo:type_name -> com.yq.msg.CityMsg.MonopolyUserMallInfo
	16,  // 11: com.yq.msg.CityMsg.MonopolyEnterMapResp.teamInfos:type_name -> com.yq.msg.CityMsg.MonopolyOtherPlayerDataMsg
	119, // 12: com.yq.msg.CityMsg.MonopolySelfPlayerDataMsg.headData:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	119, // 13: com.yq.msg.CityMsg.MonopolyOtherPlayerDataMsg.headData:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	19,  // 14: com.yq.msg.CityMsg.MonopolyRollDiceResp.moveResult:type_name -> com.yq.msg.CityMsg.MonopolyMoveResult
	20,  // 15: com.yq.msg.CityMsg.MonopolyMoveResult.data:type_name -> com.yq.msg.CityMsg.MonopolyExploreResultData
	22,  // 16: com.yq.msg.CityMsg.MonopolyExploreResultData.monsterInfo:type_name -> com.yq.msg.CityMsg.MonopolyMonsterMsg
	23,  // 17: com.yq.msg.CityMsg.MonopolyExploreResultData.mallInfo:type_name -> com.yq.msg.CityMsg.MonopolyUserMallInfo
	24,  // 18: com.yq.msg.CityMsg.MonopolyExploreResultData.MonopolyBlessingMsg:type_name -> com.yq.msg.CityMsg.MonopolyBlessingMsg
	26,  // 19: com.yq.msg.CityMsg.MonopolyExploreResultData.darkGridRewardList:type_name -> com.yq.msg.CityMsg.MonopolyDarkGridRewardMsg
	22,  // 20: com.yq.msg.CityMsg.MonopolyEventDoingInfoEntity.monsterInfo:type_name -> com.yq.msg.CityMsg.MonopolyMonsterMsg
	24,  // 21: com.yq.msg.CityMsg.MonopolyEventDoingInfoEntity.blessingMsg:type_name -> com.yq.msg.CityMsg.MonopolyBlessingMsg
	26,  // 22: com.yq.msg.CityMsg.MonopolyEventDoingInfoEntity.darkGridRewardList:type_name -> com.yq.msg.CityMsg.MonopolyDarkGridRewardMsg
	120, // 23: com.yq.msg.CityMsg.MonopolyMonsterMsg.battleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	25,  // 24: com.yq.msg.CityMsg.MonopolyBlessingMsg.blessingList:type_name -> com.yq.msg.CityMsg.MonopolyBlessingInfo
	29,  // 25: com.yq.msg.CityMsg.MonopolyAssistListResp.trapInfo:type_name -> com.yq.msg.CityMsg.MonopolyTrapPlayerMsg
	30,  // 26: com.yq.msg.CityMsg.MonopolyAssistListResp.assistInfo:type_name -> com.yq.msg.CityMsg.MonopolyAssistMonsterMsg
	22,  // 27: com.yq.msg.CityMsg.MonopolyEventActionRespMsg.monsterData:type_name -> com.yq.msg.CityMsg.MonopolyMonsterMsg
	42,  // 28: com.yq.msg.CityMsg.MonopolyRobListResp.robUnionList:type_name -> com.yq.msg.CityMsg.MonopolyRobUnionInfo
	42,  // 29: com.yq.msg.CityMsg.MonopolyRobUnionDetailResp.robUnionDetail:type_name -> com.yq.msg.CityMsg.MonopolyRobUnionInfo
	49,  // 30: com.yq.msg.CityMsg.MonopolyUnionLogListResp.unionLogList:type_name -> com.yq.msg.CityMsg.MonopolyUnionLogInfo
	119, // 31: com.yq.msg.CityMsg.MonopolyUnionLogInfo.headData:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	52,  // 32: com.yq.msg.CityMsg.MonopolyPlayerLogDetailResp.playerLogDetail:type_name -> com.yq.msg.CityMsg.MonopolyPlayerLogDetailInfo
	30,  // 33: com.yq.msg.CityMsg.MonopolyAssistAttackMonsterResp.monsterInfo:type_name -> com.yq.msg.CityMsg.MonopolyAssistMonsterMsg
	120, // 34: com.yq.msg.CityMsg.MonopolyAssistAttackMonsterResp.battleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	121, // 35: com.yq.msg.CityMsg.MonopolyReceiveMonsterRewardResp.playerData:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	19,  // 36: com.yq.msg.CityMsg.MonopolyRemoteRollDiceResp.moveResult:type_name -> com.yq.msg.CityMsg.MonopolyMoveResult
	69,  // 37: com.yq.msg.CityMsg.MonopolyBlessingListResp.blessingList:type_name -> com.yq.msg.CityMsg.MonopolyBlessedNoticeInfo
	121, // 38: com.yq.msg.CityMsg.MonopolyBlessedNoticeInfo.playerData:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	19,  // 39: com.yq.msg.CityMsg.MonopolyQuickMoveResp.moveResult:type_name -> com.yq.msg.CityMsg.MonopolyMoveResult
	19,  // 40: com.yq.msg.CityMsg.MonopolyDarkGridMoveResp.moveResult:type_name -> com.yq.msg.CityMsg.MonopolyMoveResult
	122, // 41: com.yq.msg.CityMsg.MonopolyMonsterAttrResp.attributeList:type_name -> com.yq.msg.CityMsg.AttributeDataMsg
	42,  // 42: com.yq.msg.CityMsg.MonopolyGetEnemyListResp.enemyList:type_name -> com.yq.msg.CityMsg.MonopolyRobUnionInfo
	86,  // 43: com.yq.msg.CityMsg.MonopolyScoreDetailResp.scoreDetail:type_name -> com.yq.msg.CityMsg.MonopolyScoreDetailInfo
	119, // 44: com.yq.msg.CityMsg.MonopolyBarrageNotify.headData:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	16,  // 45: com.yq.msg.CityMsg.MonopolyMoveNotify.playerData:type_name -> com.yq.msg.CityMsg.MonopolyOtherPlayerDataMsg
	121, // 46: com.yq.msg.CityMsg.MonopolyNotifyPlayerEndTrap.playerData:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	118, // 47: com.yq.msg.CityMsg.MonopolyRankMsg.baseData:type_name -> com.yq.msg.CityMsg.UnionBaseData
	95,  // 48: com.yq.msg.CityMsg.MonopolyRankList.rankInfo:type_name -> com.yq.msg.CityMsg.MonopolyRankMsg
	121, // 49: com.yq.msg.CityMsg.MonopolyMyBlessingNotify.playerData:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	99,  // 50: com.yq.msg.CityMsg.MonopolyBuildingScoreDetailResp.datas:type_name -> com.yq.msg.CityMsg.MonopolyBuildingScoreDetailInfo
	95,  // 51: com.yq.msg.CityMsg.MonopolyGetGroupDetailResp.rankMsg:type_name -> com.yq.msg.CityMsg.MonopolyRankMsg
	106, // 52: com.yq.msg.CityMsg.MonopolyWorshipResp.worshipPlayer:type_name -> com.yq.msg.CityMsg.MonopolyWorshipPlayerMsg
	119, // 53: com.yq.msg.CityMsg.MonopolyWorshipPlayerMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	110, // 54: com.yq.msg.CityMsg.MonopolyGuessPlayersResp.playerList:type_name -> com.yq.msg.CityMsg.MonopolyGuessPlayerInfo
	113, // 55: com.yq.msg.CityMsg.MonopolyGetGuessDataResp.infoList:type_name -> com.yq.msg.CityMsg.MonopolyGuessUnionInfo
	95,  // 56: com.yq.msg.CityMsg.MonopolyGuessUnionInfo.rankInfo:type_name -> com.yq.msg.CityMsg.MonopolyRankMsg
	57,  // [57:57] is the sub-list for method output_type
	57,  // [57:57] is the sub-list for method input_type
	57,  // [57:57] is the sub-list for extension type_name
	57,  // [57:57] is the sub-list for extension extendee
	0,   // [0:57] is the sub-list for field type_name
}

func init() { file_Monopoly_proto_init() }
func file_Monopoly_proto_init() {
	if File_Monopoly_proto != nil {
		return
	}
	file_Battle_proto_init()
	file_Common_proto_init()
	file_WatchPlayer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Monopoly_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyConfigSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEventConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMapConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMonsterConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyTimeConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGroupConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEnterActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEnterActivityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolySettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEnterMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEnterMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolySelfPlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBuffDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyOtherPlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRollDiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRollDiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMoveResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyExploreResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEventDoingInfoEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMonsterMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyUserMallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBlessingMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBlessingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyDarkGridRewardMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAssistListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAssistListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyTrapPlayerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAssistMonsterMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMonsterLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyReplenishStrengthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyReplenishStrengthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEventActionReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEventActionRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRescueTrapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRescueTrapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyDrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyDrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRobListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRobListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRobUnionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRobUnionDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRobUnionDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRobResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyUnionLogListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyUnionLogListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyUnionLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyPlayerLogDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyPlayerLogDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyPlayerLogDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAssistAttackMonsterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAssistAttackMonsterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyReceiveMonsterRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyReceiveMonsterRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBreakFreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBreakFreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRedPointReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRedPointRespMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRemoteRollDiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRemoteRollDiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEnterRobMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEnterRobMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAutoUnlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAutoUnlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBlessingListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBlessingListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBlessedNoticeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyReceiveBlessingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyReceiveBlessingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyQuickMoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyQuickMoveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyDarkGridMoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyDarkGridMoveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEventHandleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyEventHandleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMonsterAttrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMonsterAttrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetPlayerRankReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetPlayerRankResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetEnemyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetEnemyListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyScoreDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyScoreDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyScoreDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBarrageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMoveNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyNotifyPlayerEndTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyNotifyBuildingUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolySendBlessingNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyScoreNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRankNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAssistMonsterDieNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRankMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyMyBlessingNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyAssistRedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBuildingScoreDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBuildingScoreDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyBuildingScoreDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetGroupDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetGroupDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyWorshipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyWorshipResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyWorshipPlayerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyPlayerScoreChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessPlayersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessPlayersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetGuessDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGetGuessDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessUnionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessSelectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessSelectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Monopoly_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*MonopolyGuessRewardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Monopoly_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   115,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Monopoly_proto_goTypes,
		DependencyIndexes: file_Monopoly_proto_depIdxs,
		EnumInfos:         file_Monopoly_proto_enumTypes,
		MessageInfos:      file_Monopoly_proto_msgTypes,
	}.Build()
	File_Monopoly_proto = out.File
	file_Monopoly_proto_rawDesc = nil
	file_Monopoly_proto_goTypes = nil
	file_Monopoly_proto_depIdxs = nil
}
