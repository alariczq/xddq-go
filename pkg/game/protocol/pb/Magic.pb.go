// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: Magic.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerMagicDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipMagicList      []int32                   `protobuf:"varint,1,rep,name=equipMagicList" json:"equipMagicList,omitempty"`
	MagicMsgList        []*MagicDataMsg           `protobuf:"bytes,2,rep,name=magicMsgList" json:"magicMsgList,omitempty"`
	MagicMarkMsgList    []*MagicMarkMsg           `protobuf:"bytes,3,rep,name=magicMarkMsgList" json:"magicMarkMsgList,omitempty"`
	FloorsTimes         *int32                    `protobuf:"varint,4,req,name=floorsTimes" json:"floorsTimes,omitempty"`
	FreeDrawTimes       *int32                    `protobuf:"varint,5,req,name=freeDrawTimes" json:"freeDrawTimes,omitempty"`
	MagicCombineMsgList []*MagicCombineMsg        `protobuf:"bytes,6,rep,name=magicCombineMsgList" json:"magicCombineMsgList,omitempty"`
	MagicFreeAd         *MagicFreeAdData          `protobuf:"bytes,7,opt,name=magicFreeAd" json:"magicFreeAd,omitempty"`
	PieceShopOpen       *bool                     `protobuf:"varint,8,opt,name=pieceShopOpen" json:"pieceShopOpen,omitempty"`
	CurUsePresetsIndex  *int32                    `protobuf:"varint,9,opt,name=curUsePresetsIndex" json:"curUsePresetsIndex,omitempty"`
	SeparationMarkMsg   []*MagicSeparationMarkMsg `protobuf:"bytes,10,rep,name=separationMarkMsg" json:"separationMarkMsg,omitempty"`
}

func (x *PlayerMagicDataMsg) Reset() {
	*x = PlayerMagicDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMagicDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMagicDataMsg) ProtoMessage() {}

func (x *PlayerMagicDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMagicDataMsg.ProtoReflect.Descriptor instead.
func (*PlayerMagicDataMsg) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerMagicDataMsg) GetEquipMagicList() []int32 {
	if x != nil {
		return x.EquipMagicList
	}
	return nil
}

func (x *PlayerMagicDataMsg) GetMagicMsgList() []*MagicDataMsg {
	if x != nil {
		return x.MagicMsgList
	}
	return nil
}

func (x *PlayerMagicDataMsg) GetMagicMarkMsgList() []*MagicMarkMsg {
	if x != nil {
		return x.MagicMarkMsgList
	}
	return nil
}

func (x *PlayerMagicDataMsg) GetFloorsTimes() int32 {
	if x != nil && x.FloorsTimes != nil {
		return *x.FloorsTimes
	}
	return 0
}

func (x *PlayerMagicDataMsg) GetFreeDrawTimes() int32 {
	if x != nil && x.FreeDrawTimes != nil {
		return *x.FreeDrawTimes
	}
	return 0
}

func (x *PlayerMagicDataMsg) GetMagicCombineMsgList() []*MagicCombineMsg {
	if x != nil {
		return x.MagicCombineMsgList
	}
	return nil
}

func (x *PlayerMagicDataMsg) GetMagicFreeAd() *MagicFreeAdData {
	if x != nil {
		return x.MagicFreeAd
	}
	return nil
}

func (x *PlayerMagicDataMsg) GetPieceShopOpen() bool {
	if x != nil && x.PieceShopOpen != nil {
		return *x.PieceShopOpen
	}
	return false
}

func (x *PlayerMagicDataMsg) GetCurUsePresetsIndex() int32 {
	if x != nil && x.CurUsePresetsIndex != nil {
		return *x.CurUsePresetsIndex
	}
	return 0
}

func (x *PlayerMagicDataMsg) GetSeparationMarkMsg() []*MagicSeparationMarkMsg {
	if x != nil {
		return x.SeparationMarkMsg
	}
	return nil
}

type MagicSeparationMarkMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeparationIdx      *int32                 `protobuf:"varint,1,opt,name=separationIdx" json:"separationIdx,omitempty"`
	PresetsMarkMsgList []*MagicPresetsMarkMsg `protobuf:"bytes,2,rep,name=presetsMarkMsgList" json:"presetsMarkMsgList,omitempty"`
}

func (x *MagicSeparationMarkMsg) Reset() {
	*x = MagicSeparationMarkMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSeparationMarkMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSeparationMarkMsg) ProtoMessage() {}

func (x *MagicSeparationMarkMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSeparationMarkMsg.ProtoReflect.Descriptor instead.
func (*MagicSeparationMarkMsg) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{1}
}

func (x *MagicSeparationMarkMsg) GetSeparationIdx() int32 {
	if x != nil && x.SeparationIdx != nil {
		return *x.SeparationIdx
	}
	return 0
}

func (x *MagicSeparationMarkMsg) GetPresetsMarkMsgList() []*MagicPresetsMarkMsg {
	if x != nil {
		return x.PresetsMarkMsgList
	}
	return nil
}

type MagicPresetsMarkMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetsIdx *int32  `protobuf:"varint,1,opt,name=presetsIdx" json:"presetsIdx,omitempty"`
	MarkList   []int32 `protobuf:"varint,2,rep,name=markList" json:"markList,omitempty"`
}

func (x *MagicPresetsMarkMsg) Reset() {
	*x = MagicPresetsMarkMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicPresetsMarkMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicPresetsMarkMsg) ProtoMessage() {}

func (x *MagicPresetsMarkMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicPresetsMarkMsg.ProtoReflect.Descriptor instead.
func (*MagicPresetsMarkMsg) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{2}
}

func (x *MagicPresetsMarkMsg) GetPresetsIdx() int32 {
	if x != nil && x.PresetsIdx != nil {
		return *x.PresetsIdx
	}
	return 0
}

func (x *MagicPresetsMarkMsg) GetMarkList() []int32 {
	if x != nil {
		return x.MarkList
	}
	return nil
}

type MagicFreeAdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeTimes  *int32 `protobuf:"varint,1,opt,name=freeTimes" json:"freeTimes,omitempty"`
	LastAdTime *int64 `protobuf:"varint,2,opt,name=lastAdTime" json:"lastAdTime,omitempty"`
}

func (x *MagicFreeAdData) Reset() {
	*x = MagicFreeAdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicFreeAdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicFreeAdData) ProtoMessage() {}

func (x *MagicFreeAdData) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicFreeAdData.ProtoReflect.Descriptor instead.
func (*MagicFreeAdData) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{3}
}

func (x *MagicFreeAdData) GetFreeTimes() int32 {
	if x != nil && x.FreeTimes != nil {
		return *x.FreeTimes
	}
	return 0
}

func (x *MagicFreeAdData) GetLastAdTime() int64 {
	if x != nil && x.LastAdTime != nil {
		return *x.LastAdTime
	}
	return 0
}

type MagicCombineMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombineId *int32 `protobuf:"varint,1,opt,name=combineId" json:"combineId,omitempty"`
	Lv        *int32 `protobuf:"varint,2,opt,name=lv" json:"lv,omitempty"`
}

func (x *MagicCombineMsg) Reset() {
	*x = MagicCombineMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicCombineMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicCombineMsg) ProtoMessage() {}

func (x *MagicCombineMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicCombineMsg.ProtoReflect.Descriptor instead.
func (*MagicCombineMsg) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{4}
}

func (x *MagicCombineMsg) GetCombineId() int32 {
	if x != nil && x.CombineId != nil {
		return *x.CombineId
	}
	return 0
}

func (x *MagicCombineMsg) GetLv() int32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

type MagicMarkMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId *int32 `protobuf:"varint,1,opt,name=configId" json:"configId,omitempty"`
	Num      *int64 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *MagicMarkMsg) Reset() {
	*x = MagicMarkMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicMarkMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicMarkMsg) ProtoMessage() {}

func (x *MagicMarkMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicMarkMsg.ProtoReflect.Descriptor instead.
func (*MagicMarkMsg) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{5}
}

func (x *MagicMarkMsg) GetConfigId() int32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *MagicMarkMsg) GetNum() int64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type MagicDerivationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times       *int32 `protobuf:"varint,1,opt,name=times" json:"times,omitempty"`
	IsAd        *bool  `protobuf:"varint,2,opt,name=isAd" json:"isAd,omitempty"`
	IsUseADTime *bool  `protobuf:"varint,3,opt,name=isUseADTime" json:"isUseADTime,omitempty"`
}

func (x *MagicDerivationReq) Reset() {
	*x = MagicDerivationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicDerivationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicDerivationReq) ProtoMessage() {}

func (x *MagicDerivationReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicDerivationReq.ProtoReflect.Descriptor instead.
func (*MagicDerivationReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{6}
}

func (x *MagicDerivationReq) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *MagicDerivationReq) GetIsAd() bool {
	if x != nil && x.IsAd != nil {
		return *x.IsAd
	}
	return false
}

func (x *MagicDerivationReq) GetIsUseADTime() bool {
	if x != nil && x.IsUseADTime != nil {
		return *x.IsUseADTime
	}
	return false
}

type MagicDerivationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32           `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicId       []int32          `protobuf:"varint,2,rep,name=magicId" json:"magicId,omitempty"`
	Reward        *string          `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	MagicMsgList  []*MagicDataMsg  `protobuf:"bytes,4,rep,name=magicMsgList" json:"magicMsgList,omitempty"`
	FloorsTimes   *int32           `protobuf:"varint,5,opt,name=floorsTimes" json:"floorsTimes,omitempty"`
	FreeDrawTimes *int32           `protobuf:"varint,6,opt,name=freeDrawTimes" json:"freeDrawTimes,omitempty"`
	MagicFreeAd   *MagicFreeAdData `protobuf:"bytes,7,opt,name=magicFreeAd" json:"magicFreeAd,omitempty"`
}

func (x *MagicDerivationResp) Reset() {
	*x = MagicDerivationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicDerivationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicDerivationResp) ProtoMessage() {}

func (x *MagicDerivationResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicDerivationResp.ProtoReflect.Descriptor instead.
func (*MagicDerivationResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{7}
}

func (x *MagicDerivationResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicDerivationResp) GetMagicId() []int32 {
	if x != nil {
		return x.MagicId
	}
	return nil
}

func (x *MagicDerivationResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MagicDerivationResp) GetMagicMsgList() []*MagicDataMsg {
	if x != nil {
		return x.MagicMsgList
	}
	return nil
}

func (x *MagicDerivationResp) GetFloorsTimes() int32 {
	if x != nil && x.FloorsTimes != nil {
		return *x.FloorsTimes
	}
	return 0
}

func (x *MagicDerivationResp) GetFreeDrawTimes() int32 {
	if x != nil && x.FreeDrawTimes != nil {
		return *x.FreeDrawTimes
	}
	return 0
}

func (x *MagicDerivationResp) GetMagicFreeAd() *MagicFreeAdData {
	if x != nil {
		return x.MagicFreeAd
	}
	return nil
}

type MagicEquipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicId *int32 `protobuf:"varint,1,opt,name=magicId" json:"magicId,omitempty"`
}

func (x *MagicEquipReq) Reset() {
	*x = MagicEquipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicEquipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicEquipReq) ProtoMessage() {}

func (x *MagicEquipReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicEquipReq.ProtoReflect.Descriptor instead.
func (*MagicEquipReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{8}
}

func (x *MagicEquipReq) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

type MagicEquipResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	EquipMagicList []int32 `protobuf:"varint,2,rep,name=equipMagicList" json:"equipMagicList,omitempty"`
}

func (x *MagicEquipResp) Reset() {
	*x = MagicEquipResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicEquipResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicEquipResp) ProtoMessage() {}

func (x *MagicEquipResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicEquipResp.ProtoReflect.Descriptor instead.
func (*MagicEquipResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{9}
}

func (x *MagicEquipResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicEquipResp) GetEquipMagicList() []int32 {
	if x != nil {
		return x.EquipMagicList
	}
	return nil
}

type MagicResetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicId *int32 `protobuf:"varint,1,opt,name=magicId" json:"magicId,omitempty"`
}

func (x *MagicResetReq) Reset() {
	*x = MagicResetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicResetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicResetReq) ProtoMessage() {}

func (x *MagicResetReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicResetReq.ProtoReflect.Descriptor instead.
func (*MagicResetReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{10}
}

func (x *MagicResetReq) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

type MagicResetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicMsgList     []*MagicDataMsg `protobuf:"bytes,2,rep,name=magicMsgList" json:"magicMsgList,omitempty"`
	Reward           *string         `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	MagicMarkMsgList []*MagicMarkMsg `protobuf:"bytes,4,rep,name=magicMarkMsgList" json:"magicMarkMsgList,omitempty"`
}

func (x *MagicResetResp) Reset() {
	*x = MagicResetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicResetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicResetResp) ProtoMessage() {}

func (x *MagicResetResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicResetResp.ProtoReflect.Descriptor instead.
func (*MagicResetResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{11}
}

func (x *MagicResetResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicResetResp) GetMagicMsgList() []*MagicDataMsg {
	if x != nil {
		return x.MagicMsgList
	}
	return nil
}

func (x *MagicResetResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MagicResetResp) GetMagicMarkMsgList() []*MagicMarkMsg {
	if x != nil {
		return x.MagicMarkMsgList
	}
	return nil
}

type MagicStageUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicId *int32 `protobuf:"varint,1,opt,name=magicId" json:"magicId,omitempty"`
}

func (x *MagicStageUpReq) Reset() {
	*x = MagicStageUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicStageUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicStageUpReq) ProtoMessage() {}

func (x *MagicStageUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicStageUpReq.ProtoReflect.Descriptor instead.
func (*MagicStageUpReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{12}
}

func (x *MagicStageUpReq) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

type MagicStageUpAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MagicStageUpAllReq) Reset() {
	*x = MagicStageUpAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicStageUpAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicStageUpAllReq) ProtoMessage() {}

func (x *MagicStageUpAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicStageUpAllReq.ProtoReflect.Descriptor instead.
func (*MagicStageUpAllReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{13}
}

type MagicStageUpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           *int32          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicMsgList  []*MagicDataMsg `protobuf:"bytes,2,rep,name=magicMsgList" json:"magicMsgList,omitempty"`
	Reward        *string         `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	PieceShopOpen *bool           `protobuf:"varint,4,opt,name=pieceShopOpen" json:"pieceShopOpen,omitempty"`
}

func (x *MagicStageUpResp) Reset() {
	*x = MagicStageUpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicStageUpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicStageUpResp) ProtoMessage() {}

func (x *MagicStageUpResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicStageUpResp.ProtoReflect.Descriptor instead.
func (*MagicStageUpResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{14}
}

func (x *MagicStageUpResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicStageUpResp) GetMagicMsgList() []*MagicDataMsg {
	if x != nil {
		return x.MagicMsgList
	}
	return nil
}

func (x *MagicStageUpResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MagicStageUpResp) GetPieceShopOpen() bool {
	if x != nil && x.PieceShopOpen != nil {
		return *x.PieceShopOpen
	}
	return false
}

type MagicLvUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicId *int32 `protobuf:"varint,1,opt,name=magicId" json:"magicId,omitempty"`
	IsTen   *bool  `protobuf:"varint,2,opt,name=isTen" json:"isTen,omitempty"`
}

func (x *MagicLvUpReq) Reset() {
	*x = MagicLvUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicLvUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicLvUpReq) ProtoMessage() {}

func (x *MagicLvUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicLvUpReq.ProtoReflect.Descriptor instead.
func (*MagicLvUpReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{15}
}

func (x *MagicLvUpReq) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

func (x *MagicLvUpReq) GetIsTen() bool {
	if x != nil && x.IsTen != nil {
		return *x.IsTen
	}
	return false
}

type MagicLvUpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicMsgList []*MagicDataMsg `protobuf:"bytes,2,rep,name=magicMsgList" json:"magicMsgList,omitempty"`
}

func (x *MagicLvUpResp) Reset() {
	*x = MagicLvUpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicLvUpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicLvUpResp) ProtoMessage() {}

func (x *MagicLvUpResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicLvUpResp.ProtoReflect.Descriptor instead.
func (*MagicLvUpResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{16}
}

func (x *MagicLvUpResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicLvUpResp) GetMagicMsgList() []*MagicDataMsg {
	if x != nil {
		return x.MagicMsgList
	}
	return nil
}

type MagicEquipMarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicId *int32 `protobuf:"varint,1,opt,name=magicId" json:"magicId,omitempty"`
	Index   *int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	MarkId  *int32 `protobuf:"varint,3,opt,name=markId" json:"markId,omitempty"`
}

func (x *MagicEquipMarkReq) Reset() {
	*x = MagicEquipMarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicEquipMarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicEquipMarkReq) ProtoMessage() {}

func (x *MagicEquipMarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicEquipMarkReq.ProtoReflect.Descriptor instead.
func (*MagicEquipMarkReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{17}
}

func (x *MagicEquipMarkReq) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

func (x *MagicEquipMarkReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MagicEquipMarkReq) GetMarkId() int32 {
	if x != nil && x.MarkId != nil {
		return *x.MarkId
	}
	return 0
}

type MagicEquipMarkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicMsgList     []*MagicDataMsg `protobuf:"bytes,2,rep,name=magicMsgList" json:"magicMsgList,omitempty"`
	MagicMarkMsgList []*MagicMarkMsg `protobuf:"bytes,3,rep,name=magicMarkMsgList" json:"magicMarkMsgList,omitempty"`
}

func (x *MagicEquipMarkResp) Reset() {
	*x = MagicEquipMarkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicEquipMarkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicEquipMarkResp) ProtoMessage() {}

func (x *MagicEquipMarkResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicEquipMarkResp.ProtoReflect.Descriptor instead.
func (*MagicEquipMarkResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{18}
}

func (x *MagicEquipMarkResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicEquipMarkResp) GetMagicMsgList() []*MagicDataMsg {
	if x != nil {
		return x.MagicMsgList
	}
	return nil
}

func (x *MagicEquipMarkResp) GetMagicMarkMsgList() []*MagicMarkMsg {
	if x != nil {
		return x.MagicMarkMsgList
	}
	return nil
}

type MagicUnsnatchMarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicId *int32 `protobuf:"varint,1,opt,name=magicId" json:"magicId,omitempty"`
	Index   *int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (x *MagicUnsnatchMarkReq) Reset() {
	*x = MagicUnsnatchMarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicUnsnatchMarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicUnsnatchMarkReq) ProtoMessage() {}

func (x *MagicUnsnatchMarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicUnsnatchMarkReq.ProtoReflect.Descriptor instead.
func (*MagicUnsnatchMarkReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{19}
}

func (x *MagicUnsnatchMarkReq) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

func (x *MagicUnsnatchMarkReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type MagicUnsnatchMarkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicMsgList     []*MagicDataMsg `protobuf:"bytes,2,rep,name=magicMsgList" json:"magicMsgList,omitempty"`
	MagicMarkMsgList []*MagicMarkMsg `protobuf:"bytes,3,rep,name=magicMarkMsgList" json:"magicMarkMsgList,omitempty"`
}

func (x *MagicUnsnatchMarkResp) Reset() {
	*x = MagicUnsnatchMarkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicUnsnatchMarkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicUnsnatchMarkResp) ProtoMessage() {}

func (x *MagicUnsnatchMarkResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicUnsnatchMarkResp.ProtoReflect.Descriptor instead.
func (*MagicUnsnatchMarkResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{20}
}

func (x *MagicUnsnatchMarkResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicUnsnatchMarkResp) GetMagicMsgList() []*MagicDataMsg {
	if x != nil {
		return x.MagicMsgList
	}
	return nil
}

func (x *MagicUnsnatchMarkResp) GetMagicMarkMsgList() []*MagicMarkMsg {
	if x != nil {
		return x.MagicMarkMsgList
	}
	return nil
}

type MagicFusionMarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeList []int32 `protobuf:"varint,1,rep,name=typeList" json:"typeList,omitempty"`
}

func (x *MagicFusionMarkReq) Reset() {
	*x = MagicFusionMarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicFusionMarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicFusionMarkReq) ProtoMessage() {}

func (x *MagicFusionMarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicFusionMarkReq.ProtoReflect.Descriptor instead.
func (*MagicFusionMarkReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{21}
}

func (x *MagicFusionMarkReq) GetTypeList() []int32 {
	if x != nil {
		return x.TypeList
	}
	return nil
}

type MagicFusionMarkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret              *int32          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicMarkMsgList []*MagicMarkMsg `protobuf:"bytes,2,rep,name=magicMarkMsgList" json:"magicMarkMsgList,omitempty"`
	Reward           *string         `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
}

func (x *MagicFusionMarkResp) Reset() {
	*x = MagicFusionMarkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicFusionMarkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicFusionMarkResp) ProtoMessage() {}

func (x *MagicFusionMarkResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicFusionMarkResp.ProtoReflect.Descriptor instead.
func (*MagicFusionMarkResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{22}
}

func (x *MagicFusionMarkResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicFusionMarkResp) GetMagicMarkMsgList() []*MagicMarkMsg {
	if x != nil {
		return x.MagicMarkMsgList
	}
	return nil
}

func (x *MagicFusionMarkResp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type MagicCombineLvUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombineId *int32 `protobuf:"varint,1,opt,name=combineId" json:"combineId,omitempty"`
}

func (x *MagicCombineLvUpReq) Reset() {
	*x = MagicCombineLvUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicCombineLvUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicCombineLvUpReq) ProtoMessage() {}

func (x *MagicCombineLvUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicCombineLvUpReq.ProtoReflect.Descriptor instead.
func (*MagicCombineLvUpReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{23}
}

func (x *MagicCombineLvUpReq) GetCombineId() int32 {
	if x != nil && x.CombineId != nil {
		return *x.CombineId
	}
	return 0
}

type MagicCombineLvUpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32           `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	MagicCombineMsg *MagicCombineMsg `protobuf:"bytes,2,opt,name=magicCombineMsg" json:"magicCombineMsg,omitempty"`
}

func (x *MagicCombineLvUpResp) Reset() {
	*x = MagicCombineLvUpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicCombineLvUpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicCombineLvUpResp) ProtoMessage() {}

func (x *MagicCombineLvUpResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicCombineLvUpResp.ProtoReflect.Descriptor instead.
func (*MagicCombineLvUpResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{24}
}

func (x *MagicCombineLvUpResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *MagicCombineLvUpResp) GetMagicCombineMsg() *MagicCombineMsg {
	if x != nil {
		return x.MagicCombineMsg
	}
	return nil
}

type MagicSwitchPresetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetsIndex *int32 `protobuf:"varint,1,req,name=presetsIndex" json:"presetsIndex,omitempty"`
}

func (x *MagicSwitchPresetsReq) Reset() {
	*x = MagicSwitchPresetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSwitchPresetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSwitchPresetsReq) ProtoMessage() {}

func (x *MagicSwitchPresetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSwitchPresetsReq.ProtoReflect.Descriptor instead.
func (*MagicSwitchPresetsReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{25}
}

func (x *MagicSwitchPresetsReq) GetPresetsIndex() int32 {
	if x != nil && x.PresetsIndex != nil {
		return *x.PresetsIndex
	}
	return 0
}

type MagicSwitchPresetsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *MagicSwitchPresetsResp) Reset() {
	*x = MagicSwitchPresetsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSwitchPresetsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSwitchPresetsResp) ProtoMessage() {}

func (x *MagicSwitchPresetsResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSwitchPresetsResp.ProtoReflect.Descriptor instead.
func (*MagicSwitchPresetsResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{26}
}

func (x *MagicSwitchPresetsResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type GetPresetMagicInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GodBodyIndex *int32 `protobuf:"varint,1,req,name=godBodyIndex" json:"godBodyIndex,omitempty"`
	PresetIndex  *int32 `protobuf:"varint,2,req,name=presetIndex" json:"presetIndex,omitempty"`
}

func (x *GetPresetMagicInfoReq) Reset() {
	*x = GetPresetMagicInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresetMagicInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresetMagicInfoReq) ProtoMessage() {}

func (x *GetPresetMagicInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresetMagicInfoReq.ProtoReflect.Descriptor instead.
func (*GetPresetMagicInfoReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{27}
}

func (x *GetPresetMagicInfoReq) GetGodBodyIndex() int32 {
	if x != nil && x.GodBodyIndex != nil {
		return *x.GodBodyIndex
	}
	return 0
}

func (x *GetPresetMagicInfoReq) GetPresetIndex() int32 {
	if x != nil && x.PresetIndex != nil {
		return *x.PresetIndex
	}
	return 0
}

type GetPresetMagicInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32          `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MagicData      []*MagicDataMsg `protobuf:"bytes,2,rep,name=magicData" json:"magicData,omitempty"`
	EquipMagicList []int32         `protobuf:"varint,3,rep,name=equipMagicList" json:"equipMagicList,omitempty"`
}

func (x *GetPresetMagicInfoResp) Reset() {
	*x = GetPresetMagicInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresetMagicInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresetMagicInfoResp) ProtoMessage() {}

func (x *GetPresetMagicInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresetMagicInfoResp.ProtoReflect.Descriptor instead.
func (*GetPresetMagicInfoResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{28}
}

func (x *GetPresetMagicInfoResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *GetPresetMagicInfoResp) GetMagicData() []*MagicDataMsg {
	if x != nil {
		return x.MagicData
	}
	return nil
}

func (x *GetPresetMagicInfoResp) GetEquipMagicList() []int32 {
	if x != nil {
		return x.EquipMagicList
	}
	return nil
}

type UnEquipStoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GodBodyIndex *int32 `protobuf:"varint,1,req,name=godBodyIndex" json:"godBodyIndex,omitempty"`
	PresetIndex  *int32 `protobuf:"varint,2,req,name=presetIndex" json:"presetIndex,omitempty"`
	All          *bool  `protobuf:"varint,3,req,name=all" json:"all,omitempty"`
	MagicId      *int32 `protobuf:"varint,4,opt,name=magicId" json:"magicId,omitempty"`
	StoneIndex   *int32 `protobuf:"varint,5,opt,name=stoneIndex" json:"stoneIndex,omitempty"`
}

func (x *UnEquipStoneReq) Reset() {
	*x = UnEquipStoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnEquipStoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnEquipStoneReq) ProtoMessage() {}

func (x *UnEquipStoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnEquipStoneReq.ProtoReflect.Descriptor instead.
func (*UnEquipStoneReq) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{29}
}

func (x *UnEquipStoneReq) GetGodBodyIndex() int32 {
	if x != nil && x.GodBodyIndex != nil {
		return *x.GodBodyIndex
	}
	return 0
}

func (x *UnEquipStoneReq) GetPresetIndex() int32 {
	if x != nil && x.PresetIndex != nil {
		return *x.PresetIndex
	}
	return 0
}

func (x *UnEquipStoneReq) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

func (x *UnEquipStoneReq) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

func (x *UnEquipStoneReq) GetStoneIndex() int32 {
	if x != nil && x.StoneIndex != nil {
		return *x.StoneIndex
	}
	return 0
}

type UnEquipStoneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32          `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MagicData  []*MagicDataMsg `protobuf:"bytes,2,rep,name=magicData" json:"magicData,omitempty"`
	MagicStone []*MagicMarkMsg `protobuf:"bytes,3,rep,name=magicStone" json:"magicStone,omitempty"`
}

func (x *UnEquipStoneResp) Reset() {
	*x = UnEquipStoneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Magic_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnEquipStoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnEquipStoneResp) ProtoMessage() {}

func (x *UnEquipStoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_Magic_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnEquipStoneResp.ProtoReflect.Descriptor instead.
func (*UnEquipStoneResp) Descriptor() ([]byte, []int) {
	return file_Magic_proto_rawDescGZIP(), []int{30}
}

func (x *UnEquipStoneResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *UnEquipStoneResp) GetMagicData() []*MagicDataMsg {
	if x != nil {
		return x.MagicData
	}
	return nil
}

func (x *UnEquipStoneResp) GetMagicStone() []*MagicMarkMsg {
	if x != nil {
		return x.MagicStone
	}
	return nil
}

var File_Magic_proto protoreflect.FileDescriptor

var file_Magic_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe6, 0x04, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72,
	0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67,
	0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x44, 0x72, 0x61, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x72, 0x65,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x46, 0x72, 0x65, 0x65, 0x41, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x46, 0x72, 0x65, 0x65, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x46, 0x72, 0x65, 0x65, 0x41, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x69, 0x65, 0x63,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x70, 0x69, 0x65, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x55, 0x73, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x55,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x58,
	0x0a, 0x11, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x57, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x12,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x49, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x0f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x46, 0x72,
	0x65, 0x65, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x76, 0x22, 0x3c, 0x0a, 0x0c, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x60, 0x0a, 0x12, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x41, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x41, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x55, 0x73, 0x65, 0x41, 0x44,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x41, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x13, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x72, 0x65, 0x65, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x46, 0x72, 0x65, 0x65, 0x41, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x46, 0x72, 0x65, 0x65, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x46, 0x72, 0x65, 0x65, 0x41, 0x64, 0x22, 0x29, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x29, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x44, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a,
	0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x70, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x22, 0xa8,
	0x01, 0x0a, 0x10, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x69, 0x65, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x69, 0x65, 0x63,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x3e, 0x0a, 0x0c, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x4c, 0x76, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x0d, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x4c, 0x76, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0c,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x5b, 0x0a, 0x11, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x22,
	0xba, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x14,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x73, 0x6e, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e,
	0x73, 0x6e, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d,
	0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d,
	0x73, 0x67, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x12, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x46, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x33, 0x0a, 0x13, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4c, 0x76, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x14, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4c, 0x76, 0x55, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x4d, 0x73, 0x67, 0x22, 0x3b, 0x0a, 0x15, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x2a, 0x0a, 0x16, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x5d, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x92, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x09,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x74, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3e,
	0x0a, 0x09, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0a, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x61, 0x72,
	0x6b, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x74, 0x6f, 0x6e, 0x65,
	0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_Magic_proto_rawDescOnce sync.Once
	file_Magic_proto_rawDescData = file_Magic_proto_rawDesc
)

func file_Magic_proto_rawDescGZIP() []byte {
	file_Magic_proto_rawDescOnce.Do(func() {
		file_Magic_proto_rawDescData = protoimpl.X.CompressGZIP(file_Magic_proto_rawDescData)
	})
	return file_Magic_proto_rawDescData
}

var file_Magic_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_Magic_proto_goTypes = []any{
	(*PlayerMagicDataMsg)(nil),     // 0: com.yq.msg.CityMsg.PlayerMagicDataMsg
	(*MagicSeparationMarkMsg)(nil), // 1: com.yq.msg.CityMsg.MagicSeparationMarkMsg
	(*MagicPresetsMarkMsg)(nil),    // 2: com.yq.msg.CityMsg.MagicPresetsMarkMsg
	(*MagicFreeAdData)(nil),        // 3: com.yq.msg.CityMsg.MagicFreeAdData
	(*MagicCombineMsg)(nil),        // 4: com.yq.msg.CityMsg.MagicCombineMsg
	(*MagicMarkMsg)(nil),           // 5: com.yq.msg.CityMsg.MagicMarkMsg
	(*MagicDerivationReq)(nil),     // 6: com.yq.msg.CityMsg.MagicDerivationReq
	(*MagicDerivationResp)(nil),    // 7: com.yq.msg.CityMsg.MagicDerivationResp
	(*MagicEquipReq)(nil),          // 8: com.yq.msg.CityMsg.MagicEquipReq
	(*MagicEquipResp)(nil),         // 9: com.yq.msg.CityMsg.MagicEquipResp
	(*MagicResetReq)(nil),          // 10: com.yq.msg.CityMsg.MagicResetReq
	(*MagicResetResp)(nil),         // 11: com.yq.msg.CityMsg.MagicResetResp
	(*MagicStageUpReq)(nil),        // 12: com.yq.msg.CityMsg.MagicStageUpReq
	(*MagicStageUpAllReq)(nil),     // 13: com.yq.msg.CityMsg.MagicStageUpAllReq
	(*MagicStageUpResp)(nil),       // 14: com.yq.msg.CityMsg.MagicStageUpResp
	(*MagicLvUpReq)(nil),           // 15: com.yq.msg.CityMsg.MagicLvUpReq
	(*MagicLvUpResp)(nil),          // 16: com.yq.msg.CityMsg.MagicLvUpResp
	(*MagicEquipMarkReq)(nil),      // 17: com.yq.msg.CityMsg.MagicEquipMarkReq
	(*MagicEquipMarkResp)(nil),     // 18: com.yq.msg.CityMsg.MagicEquipMarkResp
	(*MagicUnsnatchMarkReq)(nil),   // 19: com.yq.msg.CityMsg.MagicUnsnatchMarkReq
	(*MagicUnsnatchMarkResp)(nil),  // 20: com.yq.msg.CityMsg.MagicUnsnatchMarkResp
	(*MagicFusionMarkReq)(nil),     // 21: com.yq.msg.CityMsg.MagicFusionMarkReq
	(*MagicFusionMarkResp)(nil),    // 22: com.yq.msg.CityMsg.MagicFusionMarkResp
	(*MagicCombineLvUpReq)(nil),    // 23: com.yq.msg.CityMsg.MagicCombineLvUpReq
	(*MagicCombineLvUpResp)(nil),   // 24: com.yq.msg.CityMsg.MagicCombineLvUpResp
	(*MagicSwitchPresetsReq)(nil),  // 25: com.yq.msg.CityMsg.MagicSwitchPresetsReq
	(*MagicSwitchPresetsResp)(nil), // 26: com.yq.msg.CityMsg.MagicSwitchPresetsResp
	(*GetPresetMagicInfoReq)(nil),  // 27: com.yq.msg.CityMsg.GetPresetMagicInfoReq
	(*GetPresetMagicInfoResp)(nil), // 28: com.yq.msg.CityMsg.GetPresetMagicInfoResp
	(*UnEquipStoneReq)(nil),        // 29: com.yq.msg.CityMsg.UnEquipStoneReq
	(*UnEquipStoneResp)(nil),       // 30: com.yq.msg.CityMsg.UnEquipStoneResp
	(*MagicDataMsg)(nil),           // 31: com.yq.msg.CityMsg.MagicDataMsg
}
var file_Magic_proto_depIdxs = []int32{
	31, // 0: com.yq.msg.CityMsg.PlayerMagicDataMsg.magicMsgList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	5,  // 1: com.yq.msg.CityMsg.PlayerMagicDataMsg.magicMarkMsgList:type_name -> com.yq.msg.CityMsg.MagicMarkMsg
	4,  // 2: com.yq.msg.CityMsg.PlayerMagicDataMsg.magicCombineMsgList:type_name -> com.yq.msg.CityMsg.MagicCombineMsg
	3,  // 3: com.yq.msg.CityMsg.PlayerMagicDataMsg.magicFreeAd:type_name -> com.yq.msg.CityMsg.MagicFreeAdData
	1,  // 4: com.yq.msg.CityMsg.PlayerMagicDataMsg.separationMarkMsg:type_name -> com.yq.msg.CityMsg.MagicSeparationMarkMsg
	2,  // 5: com.yq.msg.CityMsg.MagicSeparationMarkMsg.presetsMarkMsgList:type_name -> com.yq.msg.CityMsg.MagicPresetsMarkMsg
	31, // 6: com.yq.msg.CityMsg.MagicDerivationResp.magicMsgList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	3,  // 7: com.yq.msg.CityMsg.MagicDerivationResp.magicFreeAd:type_name -> com.yq.msg.CityMsg.MagicFreeAdData
	31, // 8: com.yq.msg.CityMsg.MagicResetResp.magicMsgList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	5,  // 9: com.yq.msg.CityMsg.MagicResetResp.magicMarkMsgList:type_name -> com.yq.msg.CityMsg.MagicMarkMsg
	31, // 10: com.yq.msg.CityMsg.MagicStageUpResp.magicMsgList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	31, // 11: com.yq.msg.CityMsg.MagicLvUpResp.magicMsgList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	31, // 12: com.yq.msg.CityMsg.MagicEquipMarkResp.magicMsgList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	5,  // 13: com.yq.msg.CityMsg.MagicEquipMarkResp.magicMarkMsgList:type_name -> com.yq.msg.CityMsg.MagicMarkMsg
	31, // 14: com.yq.msg.CityMsg.MagicUnsnatchMarkResp.magicMsgList:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	5,  // 15: com.yq.msg.CityMsg.MagicUnsnatchMarkResp.magicMarkMsgList:type_name -> com.yq.msg.CityMsg.MagicMarkMsg
	5,  // 16: com.yq.msg.CityMsg.MagicFusionMarkResp.magicMarkMsgList:type_name -> com.yq.msg.CityMsg.MagicMarkMsg
	4,  // 17: com.yq.msg.CityMsg.MagicCombineLvUpResp.magicCombineMsg:type_name -> com.yq.msg.CityMsg.MagicCombineMsg
	31, // 18: com.yq.msg.CityMsg.GetPresetMagicInfoResp.magicData:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	31, // 19: com.yq.msg.CityMsg.UnEquipStoneResp.magicData:type_name -> com.yq.msg.CityMsg.MagicDataMsg
	5,  // 20: com.yq.msg.CityMsg.UnEquipStoneResp.magicStone:type_name -> com.yq.msg.CityMsg.MagicMarkMsg
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_Magic_proto_init() }
func file_Magic_proto_init() {
	if File_Magic_proto != nil {
		return
	}
	file_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Magic_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerMagicDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MagicSeparationMarkMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MagicPresetsMarkMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MagicFreeAdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MagicCombineMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MagicMarkMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MagicDerivationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MagicDerivationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MagicEquipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MagicEquipResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MagicResetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MagicResetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MagicStageUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MagicStageUpAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MagicStageUpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MagicLvUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MagicLvUpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MagicEquipMarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MagicEquipMarkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MagicUnsnatchMarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MagicUnsnatchMarkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MagicFusionMarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MagicFusionMarkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*MagicCombineLvUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MagicCombineLvUpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MagicSwitchPresetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MagicSwitchPresetsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetPresetMagicInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetPresetMagicInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*UnEquipStoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Magic_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UnEquipStoneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Magic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Magic_proto_goTypes,
		DependencyIndexes: file_Magic_proto_depIdxs,
		MessageInfos:      file_Magic_proto_msgTypes,
	}.Build()
	File_Magic_proto = out.File
	file_Magic_proto_rawDesc = nil
	file_Magic_proto_goTypes = nil
	file_Magic_proto_depIdxs = nil
}
