// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: SkyWar.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SkyWarPb int32

const (
	SkyWarPb_SkyWarPb_Null                                     SkyWarPb = 0
	SkyWarPb_SkyWarPb_Enter                                    SkyWarPb = 208401
	SkyWarPb_SkyWarPb_RefreshEnemy                             SkyWarPb = 208402
	SkyWarPb_SkyWarPb_Fight                                    SkyWarPb = 208403
	SkyWarPb_SkyWarPb_Rank                                     SkyWarPb = 208404
	SkyWarPb_SkyWarPb_Log                                      SkyWarPb = 208405
	SkyWarPb_SkyWarPb_PlayBack                                 SkyWarPb = 208406
	SkyWarPb_SkyWarPb_Formation                                SkyWarPb = 208407
	SkyWarPb_SkyWarPb_Set_Order                                SkyWarPb = 208408
	SkyWarPb_SkyWarPb_Sky_Rank                                 SkyWarPb = 208409
	SkyWarPb_SkyWarPb_Worship                                  SkyWarPb = 208410
	SkyWarPb_SkyWarPb_Buy_Times                                SkyWarPb = 208411
	SkyWarPb_SkyWarPb_Power_Rank                               SkyWarPb = 208412
	SkyWarPb_SkyWarPb_Data_Sync                                SkyWarPb = 208413
	SkyWarPb_SkyWarPb_CrossToGame_Get_Player_List              SkyWarPb = 208431
	SkyWarPb_SkyWarPb_CrossToGame_Login_Sync                   SkyWarPb = 208432
	SkyWarPb_SkyWarPb_CrossToGame_Enter                        SkyWarPb = 208433
	SkyWarPb_SkyWarPb_CrossToGame_Buy_Times                    SkyWarPb = 208434
	SkyWarPb_SkyWarPb_CrossToGame_Get_Battle_Result_From_Other SkyWarPb = 208435
	SkyWarPb_SkyWarPb_CrossToGame_Send_Reward                  SkyWarPb = 208436
	SkyWarPb_SkyWarPb_CrossToGame_Worship                      SkyWarPb = 208437
	SkyWarPb_SkyWarPb_CrossToGame_Check_Sign                   SkyWarPb = 208438
	SkyWarPb_SkyWarPb_CrossToGame_Play_Back                    SkyWarPb = 208439
)

// Enum value maps for SkyWarPb.
var (
	SkyWarPb_name = map[int32]string{
		0:      "SkyWarPb_Null",
		208401: "SkyWarPb_Enter",
		208402: "SkyWarPb_RefreshEnemy",
		208403: "SkyWarPb_Fight",
		208404: "SkyWarPb_Rank",
		208405: "SkyWarPb_Log",
		208406: "SkyWarPb_PlayBack",
		208407: "SkyWarPb_Formation",
		208408: "SkyWarPb_Set_Order",
		208409: "SkyWarPb_Sky_Rank",
		208410: "SkyWarPb_Worship",
		208411: "SkyWarPb_Buy_Times",
		208412: "SkyWarPb_Power_Rank",
		208413: "SkyWarPb_Data_Sync",
		208431: "SkyWarPb_CrossToGame_Get_Player_List",
		208432: "SkyWarPb_CrossToGame_Login_Sync",
		208433: "SkyWarPb_CrossToGame_Enter",
		208434: "SkyWarPb_CrossToGame_Buy_Times",
		208435: "SkyWarPb_CrossToGame_Get_Battle_Result_From_Other",
		208436: "SkyWarPb_CrossToGame_Send_Reward",
		208437: "SkyWarPb_CrossToGame_Worship",
		208438: "SkyWarPb_CrossToGame_Check_Sign",
		208439: "SkyWarPb_CrossToGame_Play_Back",
	}
	SkyWarPb_value = map[string]int32{
		"SkyWarPb_Null":                                     0,
		"SkyWarPb_Enter":                                    208401,
		"SkyWarPb_RefreshEnemy":                             208402,
		"SkyWarPb_Fight":                                    208403,
		"SkyWarPb_Rank":                                     208404,
		"SkyWarPb_Log":                                      208405,
		"SkyWarPb_PlayBack":                                 208406,
		"SkyWarPb_Formation":                                208407,
		"SkyWarPb_Set_Order":                                208408,
		"SkyWarPb_Sky_Rank":                                 208409,
		"SkyWarPb_Worship":                                  208410,
		"SkyWarPb_Buy_Times":                                208411,
		"SkyWarPb_Power_Rank":                               208412,
		"SkyWarPb_Data_Sync":                                208413,
		"SkyWarPb_CrossToGame_Get_Player_List":              208431,
		"SkyWarPb_CrossToGame_Login_Sync":                   208432,
		"SkyWarPb_CrossToGame_Enter":                        208433,
		"SkyWarPb_CrossToGame_Buy_Times":                    208434,
		"SkyWarPb_CrossToGame_Get_Battle_Result_From_Other": 208435,
		"SkyWarPb_CrossToGame_Send_Reward":                  208436,
		"SkyWarPb_CrossToGame_Worship":                      208437,
		"SkyWarPb_CrossToGame_Check_Sign":                   208438,
		"SkyWarPb_CrossToGame_Play_Back":                    208439,
	}
)

func (x SkyWarPb) Enum() *SkyWarPb {
	p := new(SkyWarPb)
	*p = x
	return p
}

func (x SkyWarPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkyWarPb) Descriptor() protoreflect.EnumDescriptor {
	return file_SkyWar_proto_enumTypes[0].Descriptor()
}

func (SkyWarPb) Type() protoreflect.EnumType {
	return &file_SkyWar_proto_enumTypes[0]
}

func (x SkyWarPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SkyWarPb) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SkyWarPb(num)
	return nil
}

// Deprecated: Use SkyWarPb.Descriptor instead.
func (SkyWarPb) EnumDescriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{0}
}

type SkyWarBuyType int32

const (
	SkyWarBuyType_Battle  SkyWarBuyType = 1
	SkyWarBuyType_Refresh SkyWarBuyType = 2
)

// Enum value maps for SkyWarBuyType.
var (
	SkyWarBuyType_name = map[int32]string{
		1: "Battle",
		2: "Refresh",
	}
	SkyWarBuyType_value = map[string]int32{
		"Battle":  1,
		"Refresh": 2,
	}
)

func (x SkyWarBuyType) Enum() *SkyWarBuyType {
	p := new(SkyWarBuyType)
	*p = x
	return p
}

func (x SkyWarBuyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkyWarBuyType) Descriptor() protoreflect.EnumDescriptor {
	return file_SkyWar_proto_enumTypes[1].Descriptor()
}

func (SkyWarBuyType) Type() protoreflect.EnumType {
	return &file_SkyWar_proto_enumTypes[1]
}

func (x SkyWarBuyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SkyWarBuyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SkyWarBuyType(num)
	return nil
}

// Deprecated: Use SkyWarBuyType.Descriptor instead.
func (SkyWarBuyType) EnumDescriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{1}
}

type SkyWarDataSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyGroupRank *int32             `protobuf:"varint,1,opt,name=myGroupRank" json:"myGroupRank,omitempty"`
	MyScore     *int32             `protobuf:"varint,2,opt,name=myScore" json:"myScore,omitempty"`
	EnemyData   []*EnemyPlayerData `protobuf:"bytes,3,rep,name=enemyData" json:"enemyData,omitempty"`
}

func (x *SkyWarDataSync) Reset() {
	*x = SkyWarDataSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarDataSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarDataSync) ProtoMessage() {}

func (x *SkyWarDataSync) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarDataSync.ProtoReflect.Descriptor instead.
func (*SkyWarDataSync) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{0}
}

func (x *SkyWarDataSync) GetMyGroupRank() int32 {
	if x != nil && x.MyGroupRank != nil {
		return *x.MyGroupRank
	}
	return 0
}

func (x *SkyWarDataSync) GetMyScore() int32 {
	if x != nil && x.MyScore != nil {
		return *x.MyScore
	}
	return 0
}

func (x *SkyWarDataSync) GetEnemyData() []*EnemyPlayerData {
	if x != nil {
		return x.EnemyData
	}
	return nil
}

type EnemyPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData *PlayerCharacterImageMsg `protobuf:"bytes,1,opt,name=playerData" json:"playerData,omitempty"`
	WinScore   *int32                   `protobuf:"varint,2,opt,name=winScore" json:"winScore,omitempty"`
}

func (x *EnemyPlayerData) Reset() {
	*x = EnemyPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnemyPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnemyPlayerData) ProtoMessage() {}

func (x *EnemyPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnemyPlayerData.ProtoReflect.Descriptor instead.
func (*EnemyPlayerData) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{1}
}

func (x *EnemyPlayerData) GetPlayerData() *PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *EnemyPlayerData) GetWinScore() int32 {
	if x != nil && x.WinScore != nil {
		return *x.WinScore
	}
	return 0
}

type SkyWarEnterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *SkyWarEnterReq) Reset() {
	*x = SkyWarEnterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarEnterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarEnterReq) ProtoMessage() {}

func (x *SkyWarEnterReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarEnterReq.ProtoReflect.Descriptor instead.
func (*SkyWarEnterReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{2}
}

func (x *SkyWarEnterReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type SkyWarEnterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	MyPowerRank     *int32             `protobuf:"varint,2,opt,name=myPowerRank" json:"myPowerRank,omitempty"`
	RefreshTimes    *int32             `protobuf:"varint,3,opt,name=refreshTimes" json:"refreshTimes,omitempty"`
	RankData        []*SkyWarRankData  `protobuf:"bytes,4,rep,name=rankData" json:"rankData,omitempty"`
	EnemyData       []*EnemyPlayerData `protobuf:"bytes,5,rep,name=enemyData" json:"enemyData,omitempty"`
	MyScore         *int32             `protobuf:"varint,6,opt,name=myScore" json:"myScore,omitempty"`
	MyGroupRank     *int32             `protobuf:"varint,7,opt,name=myGroupRank" json:"myGroupRank,omitempty"`
	CurrentSky      *int32             `protobuf:"varint,8,opt,name=currentSky" json:"currentSky,omitempty"`
	LastWeekSky     *int32             `protobuf:"varint,9,opt,name=lastWeekSky" json:"lastWeekSky,omitempty"`
	BattleTimes     *int32             `protobuf:"varint,10,opt,name=battleTimes" json:"battleTimes,omitempty"`
	BuyBattleTimes  *int32             `protobuf:"varint,11,opt,name=buyBattleTimes" json:"buyBattleTimes,omitempty"`
	BuyRefreshTimes *int32             `protobuf:"varint,12,opt,name=buyRefreshTimes" json:"buyRefreshTimes,omitempty"`
	ApplySky        *int32             `protobuf:"varint,13,opt,name=applySky" json:"applySky,omitempty"`
}

func (x *SkyWarEnterRsp) Reset() {
	*x = SkyWarEnterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarEnterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarEnterRsp) ProtoMessage() {}

func (x *SkyWarEnterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarEnterRsp.ProtoReflect.Descriptor instead.
func (*SkyWarEnterRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{3}
}

func (x *SkyWarEnterRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarEnterRsp) GetMyPowerRank() int32 {
	if x != nil && x.MyPowerRank != nil {
		return *x.MyPowerRank
	}
	return 0
}

func (x *SkyWarEnterRsp) GetRefreshTimes() int32 {
	if x != nil && x.RefreshTimes != nil {
		return *x.RefreshTimes
	}
	return 0
}

func (x *SkyWarEnterRsp) GetRankData() []*SkyWarRankData {
	if x != nil {
		return x.RankData
	}
	return nil
}

func (x *SkyWarEnterRsp) GetEnemyData() []*EnemyPlayerData {
	if x != nil {
		return x.EnemyData
	}
	return nil
}

func (x *SkyWarEnterRsp) GetMyScore() int32 {
	if x != nil && x.MyScore != nil {
		return *x.MyScore
	}
	return 0
}

func (x *SkyWarEnterRsp) GetMyGroupRank() int32 {
	if x != nil && x.MyGroupRank != nil {
		return *x.MyGroupRank
	}
	return 0
}

func (x *SkyWarEnterRsp) GetCurrentSky() int32 {
	if x != nil && x.CurrentSky != nil {
		return *x.CurrentSky
	}
	return 0
}

func (x *SkyWarEnterRsp) GetLastWeekSky() int32 {
	if x != nil && x.LastWeekSky != nil {
		return *x.LastWeekSky
	}
	return 0
}

func (x *SkyWarEnterRsp) GetBattleTimes() int32 {
	if x != nil && x.BattleTimes != nil {
		return *x.BattleTimes
	}
	return 0
}

func (x *SkyWarEnterRsp) GetBuyBattleTimes() int32 {
	if x != nil && x.BuyBattleTimes != nil {
		return *x.BuyBattleTimes
	}
	return 0
}

func (x *SkyWarEnterRsp) GetBuyRefreshTimes() int32 {
	if x != nil && x.BuyRefreshTimes != nil {
		return *x.BuyRefreshTimes
	}
	return 0
}

func (x *SkyWarEnterRsp) GetApplySky() int32 {
	if x != nil && x.ApplySky != nil {
		return *x.ApplySky
	}
	return 0
}

type SkyWarRefreshEnemyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *SkyWarRefreshEnemyReq) Reset() {
	*x = SkyWarRefreshEnemyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarRefreshEnemyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarRefreshEnemyReq) ProtoMessage() {}

func (x *SkyWarRefreshEnemyReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarRefreshEnemyReq.ProtoReflect.Descriptor instead.
func (*SkyWarRefreshEnemyReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{4}
}

func (x *SkyWarRefreshEnemyReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type SkyWarRefreshEnemyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          *int32             `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	EnemyData    []*EnemyPlayerData `protobuf:"bytes,2,rep,name=enemyData" json:"enemyData,omitempty"`
	RefreshTimes *int32             `protobuf:"varint,3,opt,name=refreshTimes" json:"refreshTimes,omitempty"`
}

func (x *SkyWarRefreshEnemyRsp) Reset() {
	*x = SkyWarRefreshEnemyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarRefreshEnemyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarRefreshEnemyRsp) ProtoMessage() {}

func (x *SkyWarRefreshEnemyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarRefreshEnemyRsp.ProtoReflect.Descriptor instead.
func (*SkyWarRefreshEnemyRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{5}
}

func (x *SkyWarRefreshEnemyRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarRefreshEnemyRsp) GetEnemyData() []*EnemyPlayerData {
	if x != nil {
		return x.EnemyData
	}
	return nil
}

func (x *SkyWarRefreshEnemyRsp) GetRefreshTimes() int32 {
	if x != nil && x.RefreshTimes != nil {
		return *x.RefreshTimes
	}
	return 0
}

type SkyWarFightReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	TargetPlayerId *int64 `protobuf:"varint,2,req,name=targetPlayerId" json:"targetPlayerId,omitempty"`
	TargetServerId *int64 `protobuf:"varint,3,req,name=targetServerId" json:"targetServerId,omitempty"`
	Position       *int32 `protobuf:"varint,4,req,name=position" json:"position,omitempty"`
}

func (x *SkyWarFightReq) Reset() {
	*x = SkyWarFightReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarFightReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarFightReq) ProtoMessage() {}

func (x *SkyWarFightReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarFightReq.ProtoReflect.Descriptor instead.
func (*SkyWarFightReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{6}
}

func (x *SkyWarFightReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyWarFightReq) GetTargetPlayerId() int64 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

func (x *SkyWarFightReq) GetTargetServerId() int64 {
	if x != nil && x.TargetServerId != nil {
		return *x.TargetServerId
	}
	return 0
}

func (x *SkyWarFightReq) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type SkyWarFightRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                 *int32                        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BattleRecordMsg     []*BattleRecordMsg            `protobuf:"bytes,2,rep,name=battleRecordMsg" json:"battleRecordMsg,omitempty"`
	MySeparationInfo    []*SkyWarSeparationSimplyInfo `protobuf:"bytes,3,rep,name=mySeparationInfo" json:"mySeparationInfo,omitempty"`
	OtherSeparationInfo []*SkyWarSeparationSimplyInfo `protobuf:"bytes,4,rep,name=otherSeparationInfo" json:"otherSeparationInfo,omitempty"`
	Reward              *string                       `protobuf:"bytes,5,opt,name=reward" json:"reward,omitempty"`
	BattleTimes         *int32                        `protobuf:"varint,6,opt,name=battleTimes" json:"battleTimes,omitempty"`
}

func (x *SkyWarFightRsp) Reset() {
	*x = SkyWarFightRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarFightRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarFightRsp) ProtoMessage() {}

func (x *SkyWarFightRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarFightRsp.ProtoReflect.Descriptor instead.
func (*SkyWarFightRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{7}
}

func (x *SkyWarFightRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarFightRsp) GetBattleRecordMsg() []*BattleRecordMsg {
	if x != nil {
		return x.BattleRecordMsg
	}
	return nil
}

func (x *SkyWarFightRsp) GetMySeparationInfo() []*SkyWarSeparationSimplyInfo {
	if x != nil {
		return x.MySeparationInfo
	}
	return nil
}

func (x *SkyWarFightRsp) GetOtherSeparationInfo() []*SkyWarSeparationSimplyInfo {
	if x != nil {
		return x.OtherSeparationInfo
	}
	return nil
}

func (x *SkyWarFightRsp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *SkyWarFightRsp) GetBattleTimes() int32 {
	if x != nil && x.BattleTimes != nil {
		return *x.BattleTimes
	}
	return 0
}

type SkyWarSeparationSimplyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightValue      *int64 `protobuf:"varint,1,opt,name=fightValue" json:"fightValue,omitempty"`
	SeparationIndex *int32 `protobuf:"varint,2,opt,name=separationIndex" json:"separationIndex,omitempty"`
}

func (x *SkyWarSeparationSimplyInfo) Reset() {
	*x = SkyWarSeparationSimplyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarSeparationSimplyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarSeparationSimplyInfo) ProtoMessage() {}

func (x *SkyWarSeparationSimplyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarSeparationSimplyInfo.ProtoReflect.Descriptor instead.
func (*SkyWarSeparationSimplyInfo) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{8}
}

func (x *SkyWarSeparationSimplyInfo) GetFightValue() int64 {
	if x != nil && x.FightValue != nil {
		return *x.FightValue
	}
	return 0
}

func (x *SkyWarSeparationSimplyInfo) GetSeparationIndex() int32 {
	if x != nil && x.SeparationIndex != nil {
		return *x.SeparationIndex
	}
	return 0
}

type SkyWarRankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData *PlayerCharacterImageMsg `protobuf:"bytes,1,opt,name=playerData" json:"playerData,omitempty"`
	Score      *int32                   `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Rank       *int32                   `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
}

func (x *SkyWarRankData) Reset() {
	*x = SkyWarRankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarRankData) ProtoMessage() {}

func (x *SkyWarRankData) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarRankData.ProtoReflect.Descriptor instead.
func (*SkyWarRankData) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{9}
}

func (x *SkyWarRankData) GetPlayerData() *PlayerCharacterImageMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *SkyWarRankData) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *SkyWarRankData) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type SkyWarRankReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	IsTopThree *bool  `protobuf:"varint,2,req,name=isTopThree" json:"isTopThree,omitempty"`
}

func (x *SkyWarRankReq) Reset() {
	*x = SkyWarRankReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarRankReq) ProtoMessage() {}

func (x *SkyWarRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarRankReq.ProtoReflect.Descriptor instead.
func (*SkyWarRankReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{10}
}

func (x *SkyWarRankReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyWarRankReq) GetIsTopThree() bool {
	if x != nil && x.IsTopThree != nil {
		return *x.IsTopThree
	}
	return false
}

type SkyWarRankRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32            `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RankData   []*SkyWarRankData `protobuf:"bytes,2,rep,name=rankData" json:"rankData,omitempty"`
	MyRankData *SkyWarRankData   `protobuf:"bytes,3,opt,name=myRankData" json:"myRankData,omitempty"`
}

func (x *SkyWarRankRsp) Reset() {
	*x = SkyWarRankRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarRankRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarRankRsp) ProtoMessage() {}

func (x *SkyWarRankRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarRankRsp.ProtoReflect.Descriptor instead.
func (*SkyWarRankRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{11}
}

func (x *SkyWarRankRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarRankRsp) GetRankData() []*SkyWarRankData {
	if x != nil {
		return x.RankData
	}
	return nil
}

func (x *SkyWarRankRsp) GetMyRankData() *SkyWarRankData {
	if x != nil {
		return x.MyRankData
	}
	return nil
}

type SkyWarLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData          *PlayerBaseDataMsg            `protobuf:"bytes,1,opt,name=playerData" json:"playerData,omitempty"`
	IsSeparation        *bool                         `protobuf:"varint,2,opt,name=isSeparation" json:"isSeparation,omitempty"`
	OtherSeparationInfo []*SkyWarSeparationSimplyInfo `protobuf:"bytes,3,rep,name=otherSeparationInfo" json:"otherSeparationInfo,omitempty"`
	IsWin               []bool                        `protobuf:"varint,4,rep,name=isWin" json:"isWin,omitempty"`
	Pos                 *int32                        `protobuf:"varint,5,opt,name=pos" json:"pos,omitempty"`
	BattleId            *int64                        `protobuf:"varint,6,opt,name=battleId" json:"battleId,omitempty"`
	WarTime             *int64                        `protobuf:"varint,7,opt,name=warTime" json:"warTime,omitempty"`
	MySeparationInfo    []*SkyWarSeparationSimplyInfo `protobuf:"bytes,8,rep,name=mySeparationInfo" json:"mySeparationInfo,omitempty"`
	IsAttacker          *bool                         `protobuf:"varint,9,opt,name=isAttacker" json:"isAttacker,omitempty"`
}

func (x *SkyWarLogData) Reset() {
	*x = SkyWarLogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarLogData) ProtoMessage() {}

func (x *SkyWarLogData) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarLogData.ProtoReflect.Descriptor instead.
func (*SkyWarLogData) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{12}
}

func (x *SkyWarLogData) GetPlayerData() *PlayerBaseDataMsg {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *SkyWarLogData) GetIsSeparation() bool {
	if x != nil && x.IsSeparation != nil {
		return *x.IsSeparation
	}
	return false
}

func (x *SkyWarLogData) GetOtherSeparationInfo() []*SkyWarSeparationSimplyInfo {
	if x != nil {
		return x.OtherSeparationInfo
	}
	return nil
}

func (x *SkyWarLogData) GetIsWin() []bool {
	if x != nil {
		return x.IsWin
	}
	return nil
}

func (x *SkyWarLogData) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *SkyWarLogData) GetBattleId() int64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

func (x *SkyWarLogData) GetWarTime() int64 {
	if x != nil && x.WarTime != nil {
		return *x.WarTime
	}
	return 0
}

func (x *SkyWarLogData) GetMySeparationInfo() []*SkyWarSeparationSimplyInfo {
	if x != nil {
		return x.MySeparationInfo
	}
	return nil
}

func (x *SkyWarLogData) GetIsAttacker() bool {
	if x != nil && x.IsAttacker != nil {
		return *x.IsAttacker
	}
	return false
}

type SkyWarLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *SkyWarLogReq) Reset() {
	*x = SkyWarLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarLogReq) ProtoMessage() {}

func (x *SkyWarLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarLogReq.ProtoReflect.Descriptor instead.
func (*SkyWarLogReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{13}
}

func (x *SkyWarLogReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type SkyWarLogRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32           `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	LogData []*SkyWarLogData `protobuf:"bytes,2,rep,name=logData" json:"logData,omitempty"`
}

func (x *SkyWarLogRsp) Reset() {
	*x = SkyWarLogRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarLogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarLogRsp) ProtoMessage() {}

func (x *SkyWarLogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarLogRsp.ProtoReflect.Descriptor instead.
func (*SkyWarLogRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{14}
}

func (x *SkyWarLogRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarLogRsp) GetLogData() []*SkyWarLogData {
	if x != nil {
		return x.LogData
	}
	return nil
}

type SkyWarLogPlaybackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId *int64 `protobuf:"varint,1,req,name=battleId" json:"battleId,omitempty"`
}

func (x *SkyWarLogPlaybackReq) Reset() {
	*x = SkyWarLogPlaybackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarLogPlaybackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarLogPlaybackReq) ProtoMessage() {}

func (x *SkyWarLogPlaybackReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarLogPlaybackReq.ProtoReflect.Descriptor instead.
func (*SkyWarLogPlaybackReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{15}
}

func (x *SkyWarLogPlaybackReq) GetBattleId() int64 {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return 0
}

type SkyWarLogPlaybackRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                    *int32                        `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	BattleRecordMsg        []*BattleRecordMsg            `protobuf:"bytes,2,rep,name=battleRecordMsg" json:"battleRecordMsg,omitempty"`
	IsLeft                 *bool                         `protobuf:"varint,3,opt,name=isLeft" json:"isLeft,omitempty"`
	AttackerSeparationInfo []*SkyWarSeparationSimplyInfo `protobuf:"bytes,4,rep,name=attackerSeparationInfo" json:"attackerSeparationInfo,omitempty"`
	DefendSeparationInfo   []*SkyWarSeparationSimplyInfo `protobuf:"bytes,5,rep,name=defendSeparationInfo" json:"defendSeparationInfo,omitempty"`
}

func (x *SkyWarLogPlaybackRsp) Reset() {
	*x = SkyWarLogPlaybackRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarLogPlaybackRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarLogPlaybackRsp) ProtoMessage() {}

func (x *SkyWarLogPlaybackRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarLogPlaybackRsp.ProtoReflect.Descriptor instead.
func (*SkyWarLogPlaybackRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{16}
}

func (x *SkyWarLogPlaybackRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarLogPlaybackRsp) GetBattleRecordMsg() []*BattleRecordMsg {
	if x != nil {
		return x.BattleRecordMsg
	}
	return nil
}

func (x *SkyWarLogPlaybackRsp) GetIsLeft() bool {
	if x != nil && x.IsLeft != nil {
		return *x.IsLeft
	}
	return false
}

func (x *SkyWarLogPlaybackRsp) GetAttackerSeparationInfo() []*SkyWarSeparationSimplyInfo {
	if x != nil {
		return x.AttackerSeparationInfo
	}
	return nil
}

func (x *SkyWarLogPlaybackRsp) GetDefendSeparationInfo() []*SkyWarSeparationSimplyInfo {
	if x != nil {
		return x.DefendSeparationInfo
	}
	return nil
}

type SkyWarFormationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId *int64 `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
}

func (x *SkyWarFormationReq) Reset() {
	*x = SkyWarFormationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarFormationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarFormationReq) ProtoMessage() {}

func (x *SkyWarFormationReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarFormationReq.ProtoReflect.Descriptor instead.
func (*SkyWarFormationReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{17}
}

func (x *SkyWarFormationReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyWarFormationReq) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type SkyWarFormationRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                      `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	SeparationIndex []int32                     `protobuf:"varint,3,rep,name=separationIndex" json:"separationIndex,omitempty"`
	GodBodyMsg      *PlayerGodBodyDetailDataMsg `protobuf:"bytes,4,opt,name=godBodyMsg" json:"godBodyMsg,omitempty"`
}

func (x *SkyWarFormationRsp) Reset() {
	*x = SkyWarFormationRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarFormationRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarFormationRsp) ProtoMessage() {}

func (x *SkyWarFormationRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarFormationRsp.ProtoReflect.Descriptor instead.
func (*SkyWarFormationRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{18}
}

func (x *SkyWarFormationRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarFormationRsp) GetSeparationIndex() []int32 {
	if x != nil {
		return x.SeparationIndex
	}
	return nil
}

func (x *SkyWarFormationRsp) GetGodBodyMsg() *PlayerGodBodyDetailDataMsg {
	if x != nil {
		return x.GodBodyMsg
	}
	return nil
}

type SkyWarSetOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        *int64  `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	SeparationIndex []int32 `protobuf:"varint,2,rep,name=separationIndex" json:"separationIndex,omitempty"`
}

func (x *SkyWarSetOrderReq) Reset() {
	*x = SkyWarSetOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarSetOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarSetOrderReq) ProtoMessage() {}

func (x *SkyWarSetOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarSetOrderReq.ProtoReflect.Descriptor instead.
func (*SkyWarSetOrderReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{19}
}

func (x *SkyWarSetOrderReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyWarSetOrderReq) GetSeparationIndex() []int32 {
	if x != nil {
		return x.SeparationIndex
	}
	return nil
}

type SkyWarSetOrderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
}

func (x *SkyWarSetOrderRsp) Reset() {
	*x = SkyWarSetOrderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarSetOrderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarSetOrderRsp) ProtoMessage() {}

func (x *SkyWarSetOrderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarSetOrderRsp.ProtoReflect.Descriptor instead.
func (*SkyWarSetOrderRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{20}
}

func (x *SkyWarSetOrderRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type SkyWarSkyRankReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *SkyWarSkyRankReq) Reset() {
	*x = SkyWarSkyRankReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarSkyRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarSkyRankReq) ProtoMessage() {}

func (x *SkyWarSkyRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarSkyRankReq.ProtoReflect.Descriptor instead.
func (*SkyWarSkyRankReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{21}
}

func (x *SkyWarSkyRankReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type SkyWarSkyRankRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32            `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	RankData   []*SkyWarRankData `protobuf:"bytes,2,rep,name=rankData" json:"rankData,omitempty"`
	MyRankData *SkyWarRankData   `protobuf:"bytes,3,opt,name=myRankData" json:"myRankData,omitempty"`
	Worship    *bool             `protobuf:"varint,4,opt,name=worship" json:"worship,omitempty"`
}

func (x *SkyWarSkyRankRsp) Reset() {
	*x = SkyWarSkyRankRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarSkyRankRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarSkyRankRsp) ProtoMessage() {}

func (x *SkyWarSkyRankRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarSkyRankRsp.ProtoReflect.Descriptor instead.
func (*SkyWarSkyRankRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{22}
}

func (x *SkyWarSkyRankRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarSkyRankRsp) GetRankData() []*SkyWarRankData {
	if x != nil {
		return x.RankData
	}
	return nil
}

func (x *SkyWarSkyRankRsp) GetMyRankData() *SkyWarRankData {
	if x != nil {
		return x.MyRankData
	}
	return nil
}

func (x *SkyWarSkyRankRsp) GetWorship() bool {
	if x != nil && x.Worship != nil {
		return *x.Worship
	}
	return false
}

type SkyWarWorshipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
}

func (x *SkyWarWorshipReq) Reset() {
	*x = SkyWarWorshipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarWorshipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarWorshipReq) ProtoMessage() {}

func (x *SkyWarWorshipReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarWorshipReq.ProtoReflect.Descriptor instead.
func (*SkyWarWorshipReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{23}
}

func (x *SkyWarWorshipReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type SkyWarWorshipRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret            *int32                `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Reward         *string               `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	PlayerShowData *SkyWarWorshipShowMsg `protobuf:"bytes,3,opt,name=playerShowData" json:"playerShowData,omitempty"`
}

func (x *SkyWarWorshipRsp) Reset() {
	*x = SkyWarWorshipRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarWorshipRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarWorshipRsp) ProtoMessage() {}

func (x *SkyWarWorshipRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarWorshipRsp.ProtoReflect.Descriptor instead.
func (*SkyWarWorshipRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{24}
}

func (x *SkyWarWorshipRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarWorshipRsp) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *SkyWarWorshipRsp) GetPlayerShowData() *SkyWarWorshipShowMsg {
	if x != nil {
		return x.PlayerShowData
	}
	return nil
}

type SkyWarWorshipShowMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId         *int64             `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	ServerId         *int64             `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
	NickName         *string            `protobuf:"bytes,3,req,name=nickName" json:"nickName,omitempty"`
	Pet              []int32            `protobuf:"varint,4,rep,name=pet" json:"pet,omitempty"`
	Spirit           []int32            `protobuf:"varint,5,rep,name=spirit" json:"spirit,omitempty"`
	AppearanceId     *int32             `protobuf:"varint,6,opt,name=appearanceId" json:"appearanceId,omitempty"`
	EquipCloudId     *int32             `protobuf:"varint,7,opt,name=equipCloudId" json:"equipCloudId,omitempty"`
	RealmsId         *int32             `protobuf:"varint,8,opt,name=realmsId" json:"realmsId,omitempty"`
	Time             *int64             `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	Rank             *int32             `protobuf:"varint,10,opt,name=rank" json:"rank,omitempty"`
	HeadIcon         *int32             `protobuf:"varint,11,opt,name=headIcon" json:"headIcon,omitempty"`
	WxHeadUrl        *string            `protobuf:"bytes,12,opt,name=wxHeadUrl" json:"wxHeadUrl,omitempty"`
	HeadInfo         *PlayerHeadDataMsg `protobuf:"bytes,13,opt,name=headInfo" json:"headInfo,omitempty"`
	PetSoulShapeList []int32            `protobuf:"varint,14,rep,name=petSoulShapeList" json:"petSoulShapeList,omitempty"`
	TitleId          *int32             `protobuf:"varint,15,opt,name=titleId" json:"titleId,omitempty"`
	PetLinkageId     []int32            `protobuf:"varint,16,rep,name=petLinkageId" json:"petLinkageId,omitempty"`
	SpiritLinkageId  []int32            `protobuf:"varint,17,rep,name=spiritLinkageId" json:"spiritLinkageId,omitempty"`
}

func (x *SkyWarWorshipShowMsg) Reset() {
	*x = SkyWarWorshipShowMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarWorshipShowMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarWorshipShowMsg) ProtoMessage() {}

func (x *SkyWarWorshipShowMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarWorshipShowMsg.ProtoReflect.Descriptor instead.
func (*SkyWarWorshipShowMsg) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{25}
}

func (x *SkyWarWorshipShowMsg) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetServerId() int64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *SkyWarWorshipShowMsg) GetPet() []int32 {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *SkyWarWorshipShowMsg) GetSpirit() []int32 {
	if x != nil {
		return x.Spirit
	}
	return nil
}

func (x *SkyWarWorshipShowMsg) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetEquipCloudId() int32 {
	if x != nil && x.EquipCloudId != nil {
		return *x.EquipCloudId
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetHeadIcon() int32 {
	if x != nil && x.HeadIcon != nil {
		return *x.HeadIcon
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetWxHeadUrl() string {
	if x != nil && x.WxHeadUrl != nil {
		return *x.WxHeadUrl
	}
	return ""
}

func (x *SkyWarWorshipShowMsg) GetHeadInfo() *PlayerHeadDataMsg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *SkyWarWorshipShowMsg) GetPetSoulShapeList() []int32 {
	if x != nil {
		return x.PetSoulShapeList
	}
	return nil
}

func (x *SkyWarWorshipShowMsg) GetTitleId() int32 {
	if x != nil && x.TitleId != nil {
		return *x.TitleId
	}
	return 0
}

func (x *SkyWarWorshipShowMsg) GetPetLinkageId() []int32 {
	if x != nil {
		return x.PetLinkageId
	}
	return nil
}

func (x *SkyWarWorshipShowMsg) GetSpiritLinkageId() []int32 {
	if x != nil {
		return x.SpiritLinkageId
	}
	return nil
}

type SkyWarBuyTimesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64         `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	Times    *int32         `protobuf:"varint,2,req,name=times" json:"times,omitempty"`
	Type     *SkyWarBuyType `protobuf:"varint,3,req,name=type,enum=com.yq.msg.CityMsg.SkyWarBuyType" json:"type,omitempty"`
}

func (x *SkyWarBuyTimesReq) Reset() {
	*x = SkyWarBuyTimesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarBuyTimesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarBuyTimesReq) ProtoMessage() {}

func (x *SkyWarBuyTimesReq) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarBuyTimesReq.ProtoReflect.Descriptor instead.
func (*SkyWarBuyTimesReq) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{26}
}

func (x *SkyWarBuyTimesReq) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *SkyWarBuyTimesReq) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *SkyWarBuyTimesReq) GetType() SkyWarBuyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SkyWarBuyType_Battle
}

type SkyWarBuyTimesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32         `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	Times *int32         `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
	Type  *SkyWarBuyType `protobuf:"varint,3,opt,name=type,enum=com.yq.msg.CityMsg.SkyWarBuyType" json:"type,omitempty"`
}

func (x *SkyWarBuyTimesRsp) Reset() {
	*x = SkyWarBuyTimesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SkyWar_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkyWarBuyTimesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkyWarBuyTimesRsp) ProtoMessage() {}

func (x *SkyWarBuyTimesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_SkyWar_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkyWarBuyTimesRsp.ProtoReflect.Descriptor instead.
func (*SkyWarBuyTimesRsp) Descriptor() ([]byte, []int) {
	return file_SkyWar_proto_rawDescGZIP(), []int{27}
}

func (x *SkyWarBuyTimesRsp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *SkyWarBuyTimesRsp) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *SkyWarBuyTimesRsp) GetType() SkyWarBuyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SkyWarBuyType_Battle
}

var File_SkyWar_proto protoreflect.FileDescriptor

var file_SkyWar_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x0f, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x2c, 0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf9, 0x03,
	0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x53, 0x6b, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x53, 0x6b, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x75, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x75,
	0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6b, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6b, 0x79, 0x22, 0x33, 0x0a, 0x15, 0x53, 0x6b, 0x79,
	0x57, 0x61, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x90,
	0x01, 0x0a, 0x15, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x02, 0x0a,
	0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52,
	0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67,
	0x12, 0x5a, 0x0a, 0x10, 0x6d, 0x79, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6d, 0x79, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x13,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53,
	0x6b, 0x79, 0x57, 0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x1a, 0x53, 0x6b, 0x79, 0x57,
	0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x87, 0x01, 0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x4b, 0x0a, 0x0d, 0x53, 0x6b,
	0x79, 0x57, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x6f, 0x70,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54,
	0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x79, 0x57,
	0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x72,
	0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0a, 0x6d,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xb6, 0x03, 0x0a, 0x0d, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x13,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53,
	0x6b, 0x79, 0x57, 0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x57, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x10,
	0x6d, 0x79, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x57,
	0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6d, 0x79, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x0c, 0x53, 0x6b, 0x79, 0x57,
	0x61, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0c, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79,
	0x57, 0x61, 0x72, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x4c, 0x6f, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x57,
	0x61, 0x72, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x66, 0x0a, 0x16, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53,
	0x6b, 0x79, 0x57, 0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x62, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x14, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4e, 0x0a, 0x0a, 0x67, 0x6f, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x67, 0x6f, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x25, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x2e, 0x0a, 0x10, 0x53, 0x6b, 0x79, 0x57,
	0x61, 0x72, 0x53, 0x6b, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x53, 0x6b, 0x79,
	0x57, 0x61, 0x72, 0x53, 0x6b, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x0a, 0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x2e, 0x0a,
	0x10, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x10, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x50, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72,
	0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb1,
	0x04, 0x0a, 0x14, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x70, 0x69, 0x72, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x78, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x70, 0x65, 0x74, 0x53, 0x6f, 0x75,
	0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x7c, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x42, 0x75, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x79,
	0x57, 0x61, 0x72, 0x42, 0x75, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x72, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x42, 0x75, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x2a, 0xc9, 0x05, 0x0a, 0x08, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50,
	0x62, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62,
	0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x91, 0xdc, 0x0c, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x6b,
	0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x10, 0x92, 0xdc, 0x0c, 0x12, 0x14, 0x0a, 0x0e, 0x53, 0x6b, 0x79, 0x57, 0x61,
	0x72, 0x50, 0x62, 0x5f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x10, 0x93, 0xdc, 0x0c, 0x12, 0x13, 0x0a,
	0x0d, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x94,
	0xdc, 0x0c, 0x12, 0x12, 0x0a, 0x0c, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x4c,
	0x6f, 0x67, 0x10, 0x95, 0xdc, 0x0c, 0x12, 0x17, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72,
	0x50, 0x62, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x96, 0xdc, 0x0c, 0x12,
	0x18, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x97, 0xdc, 0x0c, 0x12, 0x18, 0x0a, 0x12, 0x53, 0x6b, 0x79,
	0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0x98, 0xdc, 0x0c, 0x12, 0x17, 0x0a, 0x11, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f,
	0x53, 0x6b, 0x79, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x99, 0xdc, 0x0c, 0x12, 0x16, 0x0a, 0x10,
	0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x10, 0x9a, 0xdc, 0x0c, 0x12, 0x18, 0x0a, 0x12, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62,
	0x5f, 0x42, 0x75, 0x79, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x9b, 0xdc, 0x0c, 0x12, 0x19,
	0x0a, 0x13, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x9c, 0xdc, 0x0c, 0x12, 0x18, 0x0a, 0x12, 0x53, 0x6b, 0x79,
	0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x10,
	0x9d, 0xdc, 0x0c, 0x12, 0x2a, 0x0a, 0x24, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xaf, 0xdc, 0x0c, 0x12,
	0x25, 0x0a, 0x1f, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x53, 0x79,
	0x6e, 0x63, 0x10, 0xb0, 0xdc, 0x0c, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72,
	0x50, 0x62, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x10, 0xb1, 0xdc, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x6b, 0x79, 0x57,
	0x61, 0x72, 0x50, 0x62, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x42, 0x75, 0x79, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0xb2, 0xdc, 0x0c, 0x12, 0x37,
	0x0a, 0x31, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0xb3, 0xdc, 0x0c, 0x12, 0x26, 0x0a, 0x20, 0x53, 0x6b, 0x79, 0x57, 0x61,
	0x72, 0x50, 0x62, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f,
	0x53, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0xb4, 0xdc, 0x0c, 0x12,
	0x22, 0x0a, 0x1c, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x57, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10,
	0xb5, 0xdc, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x10, 0xb6, 0xdc, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x6b,
	0x79, 0x57, 0x61, 0x72, 0x50, 0x62, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x47, 0x61,
	0x6d, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x10, 0xb7, 0xdc, 0x0c,
	0x2a, 0x28, 0x0a, 0x0d, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x72, 0x42, 0x75, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x10, 0x02, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67,
	0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b,
	0x70, 0x62,
}

var (
	file_SkyWar_proto_rawDescOnce sync.Once
	file_SkyWar_proto_rawDescData = file_SkyWar_proto_rawDesc
)

func file_SkyWar_proto_rawDescGZIP() []byte {
	file_SkyWar_proto_rawDescOnce.Do(func() {
		file_SkyWar_proto_rawDescData = protoimpl.X.CompressGZIP(file_SkyWar_proto_rawDescData)
	})
	return file_SkyWar_proto_rawDescData
}

var file_SkyWar_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_SkyWar_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_SkyWar_proto_goTypes = []any{
	(SkyWarPb)(0),                      // 0: com.yq.msg.CityMsg.SkyWarPb
	(SkyWarBuyType)(0),                 // 1: com.yq.msg.CityMsg.SkyWarBuyType
	(*SkyWarDataSync)(nil),             // 2: com.yq.msg.CityMsg.SkyWarDataSync
	(*EnemyPlayerData)(nil),            // 3: com.yq.msg.CityMsg.EnemyPlayerData
	(*SkyWarEnterReq)(nil),             // 4: com.yq.msg.CityMsg.SkyWarEnterReq
	(*SkyWarEnterRsp)(nil),             // 5: com.yq.msg.CityMsg.SkyWarEnterRsp
	(*SkyWarRefreshEnemyReq)(nil),      // 6: com.yq.msg.CityMsg.SkyWarRefreshEnemyReq
	(*SkyWarRefreshEnemyRsp)(nil),      // 7: com.yq.msg.CityMsg.SkyWarRefreshEnemyRsp
	(*SkyWarFightReq)(nil),             // 8: com.yq.msg.CityMsg.SkyWarFightReq
	(*SkyWarFightRsp)(nil),             // 9: com.yq.msg.CityMsg.SkyWarFightRsp
	(*SkyWarSeparationSimplyInfo)(nil), // 10: com.yq.msg.CityMsg.SkyWarSeparationSimplyInfo
	(*SkyWarRankData)(nil),             // 11: com.yq.msg.CityMsg.SkyWarRankData
	(*SkyWarRankReq)(nil),              // 12: com.yq.msg.CityMsg.SkyWarRankReq
	(*SkyWarRankRsp)(nil),              // 13: com.yq.msg.CityMsg.SkyWarRankRsp
	(*SkyWarLogData)(nil),              // 14: com.yq.msg.CityMsg.SkyWarLogData
	(*SkyWarLogReq)(nil),               // 15: com.yq.msg.CityMsg.SkyWarLogReq
	(*SkyWarLogRsp)(nil),               // 16: com.yq.msg.CityMsg.SkyWarLogRsp
	(*SkyWarLogPlaybackReq)(nil),       // 17: com.yq.msg.CityMsg.SkyWarLogPlaybackReq
	(*SkyWarLogPlaybackRsp)(nil),       // 18: com.yq.msg.CityMsg.SkyWarLogPlaybackRsp
	(*SkyWarFormationReq)(nil),         // 19: com.yq.msg.CityMsg.SkyWarFormationReq
	(*SkyWarFormationRsp)(nil),         // 20: com.yq.msg.CityMsg.SkyWarFormationRsp
	(*SkyWarSetOrderReq)(nil),          // 21: com.yq.msg.CityMsg.SkyWarSetOrderReq
	(*SkyWarSetOrderRsp)(nil),          // 22: com.yq.msg.CityMsg.SkyWarSetOrderRsp
	(*SkyWarSkyRankReq)(nil),           // 23: com.yq.msg.CityMsg.SkyWarSkyRankReq
	(*SkyWarSkyRankRsp)(nil),           // 24: com.yq.msg.CityMsg.SkyWarSkyRankRsp
	(*SkyWarWorshipReq)(nil),           // 25: com.yq.msg.CityMsg.SkyWarWorshipReq
	(*SkyWarWorshipRsp)(nil),           // 26: com.yq.msg.CityMsg.SkyWarWorshipRsp
	(*SkyWarWorshipShowMsg)(nil),       // 27: com.yq.msg.CityMsg.SkyWarWorshipShowMsg
	(*SkyWarBuyTimesReq)(nil),          // 28: com.yq.msg.CityMsg.SkyWarBuyTimesReq
	(*SkyWarBuyTimesRsp)(nil),          // 29: com.yq.msg.CityMsg.SkyWarBuyTimesRsp
	(*PlayerCharacterImageMsg)(nil),    // 30: com.yq.msg.CityMsg.PlayerCharacterImageMsg
	(*BattleRecordMsg)(nil),            // 31: com.yq.msg.CityMsg.BattleRecordMsg
	(*PlayerBaseDataMsg)(nil),          // 32: com.yq.msg.CityMsg.PlayerBaseDataMsg
	(*PlayerGodBodyDetailDataMsg)(nil), // 33: com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg
	(*PlayerHeadDataMsg)(nil),          // 34: com.yq.msg.CityMsg.PlayerHeadDataMsg
}
var file_SkyWar_proto_depIdxs = []int32{
	3,  // 0: com.yq.msg.CityMsg.SkyWarDataSync.enemyData:type_name -> com.yq.msg.CityMsg.EnemyPlayerData
	30, // 1: com.yq.msg.CityMsg.EnemyPlayerData.playerData:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	11, // 2: com.yq.msg.CityMsg.SkyWarEnterRsp.rankData:type_name -> com.yq.msg.CityMsg.SkyWarRankData
	3,  // 3: com.yq.msg.CityMsg.SkyWarEnterRsp.enemyData:type_name -> com.yq.msg.CityMsg.EnemyPlayerData
	3,  // 4: com.yq.msg.CityMsg.SkyWarRefreshEnemyRsp.enemyData:type_name -> com.yq.msg.CityMsg.EnemyPlayerData
	31, // 5: com.yq.msg.CityMsg.SkyWarFightRsp.battleRecordMsg:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	10, // 6: com.yq.msg.CityMsg.SkyWarFightRsp.mySeparationInfo:type_name -> com.yq.msg.CityMsg.SkyWarSeparationSimplyInfo
	10, // 7: com.yq.msg.CityMsg.SkyWarFightRsp.otherSeparationInfo:type_name -> com.yq.msg.CityMsg.SkyWarSeparationSimplyInfo
	30, // 8: com.yq.msg.CityMsg.SkyWarRankData.playerData:type_name -> com.yq.msg.CityMsg.PlayerCharacterImageMsg
	11, // 9: com.yq.msg.CityMsg.SkyWarRankRsp.rankData:type_name -> com.yq.msg.CityMsg.SkyWarRankData
	11, // 10: com.yq.msg.CityMsg.SkyWarRankRsp.myRankData:type_name -> com.yq.msg.CityMsg.SkyWarRankData
	32, // 11: com.yq.msg.CityMsg.SkyWarLogData.playerData:type_name -> com.yq.msg.CityMsg.PlayerBaseDataMsg
	10, // 12: com.yq.msg.CityMsg.SkyWarLogData.otherSeparationInfo:type_name -> com.yq.msg.CityMsg.SkyWarSeparationSimplyInfo
	10, // 13: com.yq.msg.CityMsg.SkyWarLogData.mySeparationInfo:type_name -> com.yq.msg.CityMsg.SkyWarSeparationSimplyInfo
	14, // 14: com.yq.msg.CityMsg.SkyWarLogRsp.logData:type_name -> com.yq.msg.CityMsg.SkyWarLogData
	31, // 15: com.yq.msg.CityMsg.SkyWarLogPlaybackRsp.battleRecordMsg:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	10, // 16: com.yq.msg.CityMsg.SkyWarLogPlaybackRsp.attackerSeparationInfo:type_name -> com.yq.msg.CityMsg.SkyWarSeparationSimplyInfo
	10, // 17: com.yq.msg.CityMsg.SkyWarLogPlaybackRsp.defendSeparationInfo:type_name -> com.yq.msg.CityMsg.SkyWarSeparationSimplyInfo
	33, // 18: com.yq.msg.CityMsg.SkyWarFormationRsp.godBodyMsg:type_name -> com.yq.msg.CityMsg.PlayerGodBodyDetailDataMsg
	11, // 19: com.yq.msg.CityMsg.SkyWarSkyRankRsp.rankData:type_name -> com.yq.msg.CityMsg.SkyWarRankData
	11, // 20: com.yq.msg.CityMsg.SkyWarSkyRankRsp.myRankData:type_name -> com.yq.msg.CityMsg.SkyWarRankData
	27, // 21: com.yq.msg.CityMsg.SkyWarWorshipRsp.playerShowData:type_name -> com.yq.msg.CityMsg.SkyWarWorshipShowMsg
	34, // 22: com.yq.msg.CityMsg.SkyWarWorshipShowMsg.headInfo:type_name -> com.yq.msg.CityMsg.PlayerHeadDataMsg
	1,  // 23: com.yq.msg.CityMsg.SkyWarBuyTimesReq.type:type_name -> com.yq.msg.CityMsg.SkyWarBuyType
	1,  // 24: com.yq.msg.CityMsg.SkyWarBuyTimesRsp.type:type_name -> com.yq.msg.CityMsg.SkyWarBuyType
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_SkyWar_proto_init() }
func file_SkyWar_proto_init() {
	if File_SkyWar_proto != nil {
		return
	}
	file_Common_proto_init()
	file_WatchPlayer_proto_init()
	file_Battle_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SkyWar_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarDataSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EnemyPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarEnterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarEnterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarRefreshEnemyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarRefreshEnemyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarFightReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarFightRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarSeparationSimplyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarRankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarRankReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarRankRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarLogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarLogRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarLogPlaybackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarLogPlaybackRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarFormationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarFormationRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarSetOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarSetOrderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarSkyRankReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarSkyRankRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarWorshipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarWorshipRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarWorshipShowMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarBuyTimesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SkyWar_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SkyWarBuyTimesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SkyWar_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SkyWar_proto_goTypes,
		DependencyIndexes: file_SkyWar_proto_depIdxs,
		EnumInfos:         file_SkyWar_proto_enumTypes,
		MessageInfos:      file_SkyWar_proto_msgTypes,
	}.Build()
	File_SkyWar_proto = out.File
	file_SkyWar_proto_rawDesc = nil
	file_SkyWar_proto_goTypes = nil
	file_SkyWar_proto_depIdxs = nil
}
