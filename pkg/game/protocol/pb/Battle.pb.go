// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: Battle.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BattleMagicMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	MagicId *int32 `protobuf:"varint,2,req,name=magicId" json:"magicId,omitempty"`
}

func (x *BattleMagicMsg) Reset() {
	*x = BattleMagicMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleMagicMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleMagicMsg) ProtoMessage() {}

func (x *BattleMagicMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleMagicMsg.ProtoReflect.Descriptor instead.
func (*BattleMagicMsg) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{0}
}

func (x *BattleMagicMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BattleMagicMsg) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

type BattleMain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId         *int32          `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	BattleModel   *BattleModelMsg `protobuf:"bytes,2,req,name=battleModel" json:"battleModel,omitempty"`
	MaxHp         *int64          `protobuf:"varint,3,req,name=maxHp" json:"maxHp,omitempty"`
	MaxEnergy     *int32          `protobuf:"varint,4,opt,name=maxEnergy" json:"maxEnergy,omitempty"`
	InitShieldVal *int64          `protobuf:"varint,5,opt,name=initShieldVal" json:"initShieldVal,omitempty"`
	CurHp         *int64          `protobuf:"varint,6,opt,name=curHp" json:"curHp,omitempty"`
	Pos           *int32          `protobuf:"varint,7,opt,name=pos" json:"pos,omitempty"`
	Name          *string         `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	PlayerId      *int64          `protobuf:"varint,9,opt,name=playerId" json:"playerId,omitempty"`
}

func (x *BattleMain) Reset() {
	*x = BattleMain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleMain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleMain) ProtoMessage() {}

func (x *BattleMain) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleMain.ProtoReflect.Descriptor instead.
func (*BattleMain) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{1}
}

func (x *BattleMain) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *BattleMain) GetBattleModel() *BattleModelMsg {
	if x != nil {
		return x.BattleModel
	}
	return nil
}

func (x *BattleMain) GetMaxHp() int64 {
	if x != nil && x.MaxHp != nil {
		return *x.MaxHp
	}
	return 0
}

func (x *BattleMain) GetMaxEnergy() int32 {
	if x != nil && x.MaxEnergy != nil {
		return *x.MaxEnergy
	}
	return 0
}

func (x *BattleMain) GetInitShieldVal() int64 {
	if x != nil && x.InitShieldVal != nil {
		return *x.InitShieldVal
	}
	return 0
}

func (x *BattleMain) GetCurHp() int64 {
	if x != nil && x.CurHp != nil {
		return *x.CurHp
	}
	return 0
}

func (x *BattleMain) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *BattleMain) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BattleMain) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type BattleModelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *int32            `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	MainRoleId    *int32            `protobuf:"varint,2,opt,name=mainRoleId" json:"mainRoleId,omitempty"`
	RealmsId      *int32            `protobuf:"varint,3,opt,name=realmsId" json:"realmsId,omitempty"`
	CloudId       *int32            `protobuf:"varint,4,opt,name=cloudId" json:"cloudId,omitempty"`
	Pet           []*PetObj         `protobuf:"bytes,5,rep,name=pet" json:"pet,omitempty"`
	Spirit        []*SpiritObj      `protobuf:"bytes,6,rep,name=spirit" json:"spirit,omitempty"`
	Magic         []*BattleMagicMsg `protobuf:"bytes,7,rep,name=magic" json:"magic,omitempty"`
	AtkEffectId   *int32            `protobuf:"varint,8,opt,name=atkEffectId" json:"atkEffectId,omitempty"`
	SoaringState  *int32            `protobuf:"varint,9,opt,name=soaringState" json:"soaringState,omitempty"`
	UniverseObj   *UniverseObj      `protobuf:"bytes,10,opt,name=universeObj" json:"universeObj,omitempty"`
	CommonSkillId []int32           `protobuf:"varint,11,rep,name=commonSkillId" json:"commonSkillId,omitempty"`
}

func (x *BattleModelMsg) Reset() {
	*x = BattleModelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleModelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleModelMsg) ProtoMessage() {}

func (x *BattleModelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleModelMsg.ProtoReflect.Descriptor instead.
func (*BattleModelMsg) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{2}
}

func (x *BattleModelMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BattleModelMsg) GetMainRoleId() int32 {
	if x != nil && x.MainRoleId != nil {
		return *x.MainRoleId
	}
	return 0
}

func (x *BattleModelMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *BattleModelMsg) GetCloudId() int32 {
	if x != nil && x.CloudId != nil {
		return *x.CloudId
	}
	return 0
}

func (x *BattleModelMsg) GetPet() []*PetObj {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *BattleModelMsg) GetSpirit() []*SpiritObj {
	if x != nil {
		return x.Spirit
	}
	return nil
}

func (x *BattleModelMsg) GetMagic() []*BattleMagicMsg {
	if x != nil {
		return x.Magic
	}
	return nil
}

func (x *BattleModelMsg) GetAtkEffectId() int32 {
	if x != nil && x.AtkEffectId != nil {
		return *x.AtkEffectId
	}
	return 0
}

func (x *BattleModelMsg) GetSoaringState() int32 {
	if x != nil && x.SoaringState != nil {
		return *x.SoaringState
	}
	return 0
}

func (x *BattleModelMsg) GetUniverseObj() *UniverseObj {
	if x != nil {
		return x.UniverseObj
	}
	return nil
}

func (x *BattleModelMsg) GetCommonSkillId() []int32 {
	if x != nil {
		return x.CommonSkillId
	}
	return nil
}

type PetObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId         *int32  `protobuf:"varint,1,opt,name=objId" json:"objId,omitempty"`
	PetId         *int32  `protobuf:"varint,2,opt,name=petId" json:"petId,omitempty"`
	ResChange     *int32  `protobuf:"varint,3,opt,name=resChange" json:"resChange,omitempty"`
	SkillId       *int32  `protobuf:"varint,4,opt,name=skillId" json:"skillId,omitempty"`
	PetLinkageId  *int32  `protobuf:"varint,5,opt,name=petLinkageId" json:"petLinkageId,omitempty"`
	EquipKernelId []int32 `protobuf:"varint,6,rep,name=equipKernelId" json:"equipKernelId,omitempty"`
}

func (x *PetObj) Reset() {
	*x = PetObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetObj) ProtoMessage() {}

func (x *PetObj) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetObj.ProtoReflect.Descriptor instead.
func (*PetObj) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{3}
}

func (x *PetObj) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *PetObj) GetPetId() int32 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *PetObj) GetResChange() int32 {
	if x != nil && x.ResChange != nil {
		return *x.ResChange
	}
	return 0
}

func (x *PetObj) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *PetObj) GetPetLinkageId() int32 {
	if x != nil && x.PetLinkageId != nil {
		return *x.PetLinkageId
	}
	return 0
}

func (x *PetObj) GetEquipKernelId() []int32 {
	if x != nil {
		return x.EquipKernelId
	}
	return nil
}

type SpiritObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId           *int32 `protobuf:"varint,1,opt,name=objId" json:"objId,omitempty"`
	SpiritId        *int32 `protobuf:"varint,2,opt,name=spiritId" json:"spiritId,omitempty"`
	SkillLv         *int32 `protobuf:"varint,3,opt,name=skillLv" json:"skillLv,omitempty"`
	SpiritLinkageId *int32 `protobuf:"varint,4,opt,name=spiritLinkageId" json:"spiritLinkageId,omitempty"`
}

func (x *SpiritObj) Reset() {
	*x = SpiritObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiritObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiritObj) ProtoMessage() {}

func (x *SpiritObj) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiritObj.ProtoReflect.Descriptor instead.
func (*SpiritObj) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{4}
}

func (x *SpiritObj) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *SpiritObj) GetSpiritId() int32 {
	if x != nil && x.SpiritId != nil {
		return *x.SpiritId
	}
	return 0
}

func (x *SpiritObj) GetSkillLv() int32 {
	if x != nil && x.SkillLv != nil {
		return *x.SkillLv
	}
	return 0
}

func (x *SpiritObj) GetSpiritLinkageId() int32 {
	if x != nil && x.SpiritLinkageId != nil {
		return *x.SpiritLinkageId
	}
	return 0
}

type UniverseObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   *int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	SkillId []int32 `protobuf:"varint,2,rep,name=skillId" json:"skillId,omitempty"`
}

func (x *UniverseObj) Reset() {
	*x = UniverseObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseObj) ProtoMessage() {}

func (x *UniverseObj) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseObj.ProtoReflect.Descriptor instead.
func (*UniverseObj) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{5}
}

func (x *UniverseObj) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *UniverseObj) GetSkillId() []int32 {
	if x != nil {
		return x.SkillId
	}
	return nil
}

type BattleRecordMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleMain       []*BattleMain     `protobuf:"bytes,1,rep,name=battleMain" json:"battleMain,omitempty"`
	BattleRoundLog   []*BattleRoundLog `protobuf:"bytes,2,rep,name=battleRoundLog" json:"battleRoundLog,omitempty"`
	IsWin            *bool             `protobuf:"varint,3,req,name=isWin" json:"isWin,omitempty"`
	MaxRoundLimit    *int32            `protobuf:"varint,4,req,name=maxRoundLimit" json:"maxRoundLimit,omitempty"`
	LeftTeamSkillId  *int32            `protobuf:"varint,5,opt,name=leftTeamSkillId" json:"leftTeamSkillId,omitempty"`
	RightTeamSkillId *int32            `protobuf:"varint,6,opt,name=rightTeamSkillId" json:"rightTeamSkillId,omitempty"`
	SceneSkillId     []int32           `protobuf:"varint,7,rep,name=sceneSkillId" json:"sceneSkillId,omitempty"`
}

func (x *BattleRecordMsg) Reset() {
	*x = BattleRecordMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRecordMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRecordMsg) ProtoMessage() {}

func (x *BattleRecordMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRecordMsg.ProtoReflect.Descriptor instead.
func (*BattleRecordMsg) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{6}
}

func (x *BattleRecordMsg) GetBattleMain() []*BattleMain {
	if x != nil {
		return x.BattleMain
	}
	return nil
}

func (x *BattleRecordMsg) GetBattleRoundLog() []*BattleRoundLog {
	if x != nil {
		return x.BattleRoundLog
	}
	return nil
}

func (x *BattleRecordMsg) GetIsWin() bool {
	if x != nil && x.IsWin != nil {
		return *x.IsWin
	}
	return false
}

func (x *BattleRecordMsg) GetMaxRoundLimit() int32 {
	if x != nil && x.MaxRoundLimit != nil {
		return *x.MaxRoundLimit
	}
	return 0
}

func (x *BattleRecordMsg) GetLeftTeamSkillId() int32 {
	if x != nil && x.LeftTeamSkillId != nil {
		return *x.LeftTeamSkillId
	}
	return 0
}

func (x *BattleRecordMsg) GetRightTeamSkillId() int32 {
	if x != nil && x.RightTeamSkillId != nil {
		return *x.RightTeamSkillId
	}
	return 0
}

func (x *BattleRecordMsg) GetSceneSkillId() []int32 {
	if x != nil {
		return x.SceneSkillId
	}
	return nil
}

type TeamBattleRecordMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleMain       []*BattleMain     `protobuf:"bytes,1,rep,name=battleMain" json:"battleMain,omitempty"`
	BattleRoundLog   []*BattleRoundLog `protobuf:"bytes,2,rep,name=battleRoundLog" json:"battleRoundLog,omitempty"`
	IsWin            *bool             `protobuf:"varint,3,req,name=isWin" json:"isWin,omitempty"`
	MaxRoundLimit    *int32            `protobuf:"varint,4,req,name=maxRoundLimit" json:"maxRoundLimit,omitempty"`
	LeftTeamSkillId  *int32            `protobuf:"varint,5,opt,name=leftTeamSkillId" json:"leftTeamSkillId,omitempty"`
	RightTeamSkillId *int32            `protobuf:"varint,6,opt,name=rightTeamSkillId" json:"rightTeamSkillId,omitempty"`
	SceneSkillId     []int32           `protobuf:"varint,7,rep,name=sceneSkillId" json:"sceneSkillId,omitempty"`
}

func (x *TeamBattleRecordMsg) Reset() {
	*x = TeamBattleRecordMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamBattleRecordMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamBattleRecordMsg) ProtoMessage() {}

func (x *TeamBattleRecordMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamBattleRecordMsg.ProtoReflect.Descriptor instead.
func (*TeamBattleRecordMsg) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{7}
}

func (x *TeamBattleRecordMsg) GetBattleMain() []*BattleMain {
	if x != nil {
		return x.BattleMain
	}
	return nil
}

func (x *TeamBattleRecordMsg) GetBattleRoundLog() []*BattleRoundLog {
	if x != nil {
		return x.BattleRoundLog
	}
	return nil
}

func (x *TeamBattleRecordMsg) GetIsWin() bool {
	if x != nil && x.IsWin != nil {
		return *x.IsWin
	}
	return false
}

func (x *TeamBattleRecordMsg) GetMaxRoundLimit() int32 {
	if x != nil && x.MaxRoundLimit != nil {
		return *x.MaxRoundLimit
	}
	return 0
}

func (x *TeamBattleRecordMsg) GetLeftTeamSkillId() int32 {
	if x != nil && x.LeftTeamSkillId != nil {
		return *x.LeftTeamSkillId
	}
	return 0
}

func (x *TeamBattleRecordMsg) GetRightTeamSkillId() int32 {
	if x != nil && x.RightTeamSkillId != nil {
		return *x.RightTeamSkillId
	}
	return 0
}

func (x *TeamBattleRecordMsg) GetSceneSkillId() []int32 {
	if x != nil {
		return x.SceneSkillId
	}
	return nil
}

type BattleRoundLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round           *int32             `protobuf:"varint,1,req,name=round" json:"round,omitempty"`
	Action          []*BattleAction    `protobuf:"bytes,2,rep,name=action" json:"action,omitempty"`
	BattleMainState []*BattleMainState `protobuf:"bytes,3,rep,name=battleMainState" json:"battleMainState,omitempty"`
	UniverseValue   []*UniverseValue   `protobuf:"bytes,4,rep,name=universeValue" json:"universeValue,omitempty"`
}

func (x *BattleRoundLog) Reset() {
	*x = BattleRoundLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRoundLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRoundLog) ProtoMessage() {}

func (x *BattleRoundLog) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRoundLog.ProtoReflect.Descriptor instead.
func (*BattleRoundLog) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{8}
}

func (x *BattleRoundLog) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *BattleRoundLog) GetAction() []*BattleAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *BattleRoundLog) GetBattleMainState() []*BattleMainState {
	if x != nil {
		return x.BattleMainState
	}
	return nil
}

func (x *BattleRoundLog) GetUniverseValue() []*UniverseValue {
	if x != nil {
		return x.UniverseValue
	}
	return nil
}

type UniverseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId *int32 `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	Value *int32 `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *UniverseValue) Reset() {
	*x = UniverseValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniverseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniverseValue) ProtoMessage() {}

func (x *UniverseValue) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniverseValue.ProtoReflect.Descriptor instead.
func (*UniverseValue) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{9}
}

func (x *UniverseValue) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *UniverseValue) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type BattleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjType *int32 `protobuf:"varint,1,req,name=objType" json:"objType,omitempty"`
	Action  []byte `protobuf:"bytes,2,req,name=action" json:"action,omitempty"`
}

func (x *BattleAction) Reset() {
	*x = BattleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleAction) ProtoMessage() {}

func (x *BattleAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleAction.ProtoReflect.Descriptor instead.
func (*BattleAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{10}
}

func (x *BattleAction) GetObjType() int32 {
	if x != nil && x.ObjType != nil {
		return *x.ObjType
	}
	return 0
}

func (x *BattleAction) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

type MainAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId                 *int32              `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	IsAttackBackAction    *bool               `protobuf:"varint,2,opt,name=isAttackBackAction" json:"isAttackBackAction,omitempty"`
	MainAttackResult      []*MainAttackResult `protobuf:"bytes,3,rep,name=mainAttackResult" json:"mainAttackResult,omitempty"`
	RemoveStun            *bool               `protobuf:"varint,4,opt,name=removeStun" json:"removeStun,omitempty"`
	TargetId              *int32              `protobuf:"varint,5,opt,name=targetId" json:"targetId,omitempty"`
	TeamEnergyMyChange    *int32              `protobuf:"varint,6,opt,name=teamEnergyMyChange" json:"teamEnergyMyChange,omitempty"`
	TeamEnergyOtherChange *int32              `protobuf:"varint,7,opt,name=teamEnergyOtherChange" json:"teamEnergyOtherChange,omitempty"`
}

func (x *MainAction) Reset() {
	*x = MainAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainAction) ProtoMessage() {}

func (x *MainAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainAction.ProtoReflect.Descriptor instead.
func (*MainAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{11}
}

func (x *MainAction) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *MainAction) GetIsAttackBackAction() bool {
	if x != nil && x.IsAttackBackAction != nil {
		return *x.IsAttackBackAction
	}
	return false
}

func (x *MainAction) GetMainAttackResult() []*MainAttackResult {
	if x != nil {
		return x.MainAttackResult
	}
	return nil
}

func (x *MainAction) GetRemoveStun() bool {
	if x != nil && x.RemoveStun != nil {
		return *x.RemoveStun
	}
	return false
}

func (x *MainAction) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *MainAction) GetTeamEnergyMyChange() int32 {
	if x != nil && x.TeamEnergyMyChange != nil {
		return *x.TeamEnergyMyChange
	}
	return 0
}

func (x *MainAction) GetTeamEnergyOtherChange() int32 {
	if x != nil && x.TeamEnergyOtherChange != nil {
		return *x.TeamEnergyOtherChange
	}
	return 0
}

type MainAttackResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHit                        *bool                   `protobuf:"varint,1,req,name=isHit" json:"isHit,omitempty"`
	IsCritical                   *bool                   `protobuf:"varint,2,req,name=isCritical" json:"isCritical,omitempty"`
	IsMagic                      *bool                   `protobuf:"varint,3,req,name=isMagic" json:"isMagic,omitempty"`
	Damage                       *int64                  `protobuf:"varint,4,req,name=damage" json:"damage,omitempty"`
	LifeSteal                    *int64                  `protobuf:"varint,5,req,name=lifeSteal" json:"lifeSteal,omitempty"`
	StunRound                    *int32                  `protobuf:"varint,6,req,name=stunRound" json:"stunRound,omitempty"`
	EnergyMyChange               *int32                  `protobuf:"varint,7,opt,name=energyMyChange" json:"energyMyChange,omitempty"`
	EnergyOtherChange            *int32                  `protobuf:"varint,8,opt,name=energyOtherChange" json:"energyOtherChange,omitempty"`
	SpiritAction                 *SpiritAction           `protobuf:"bytes,9,opt,name=spiritAction" json:"spiritAction,omitempty"`
	MagicAction                  *MagicAction            `protobuf:"bytes,10,opt,name=magicAction" json:"magicAction,omitempty"`
	IsParry                      *bool                   `protobuf:"varint,11,opt,name=isParry" json:"isParry,omitempty"`
	IsArmorBreak                 *bool                   `protobuf:"varint,12,opt,name=isArmorBreak" json:"isArmorBreak,omitempty"`
	IsMagicDoubleAttack          *bool                   `protobuf:"varint,13,opt,name=isMagicDoubleAttack" json:"isMagicDoubleAttack,omitempty"`
	BossSpecialSkillAction       *BossSpecialSkillAction `protobuf:"bytes,14,opt,name=bossSpecialSkillAction" json:"bossSpecialSkillAction,omitempty"`
	ShieldMyChange               *int64                  `protobuf:"varint,15,opt,name=shieldMyChange" json:"shieldMyChange,omitempty"`
	ShieldOtherChange            *int64                  `protobuf:"varint,16,opt,name=shieldOtherChange" json:"shieldOtherChange,omitempty"`
	BeforeSpiritAction           *SpiritAction           `protobuf:"bytes,17,opt,name=beforeSpiritAction" json:"beforeSpiritAction,omitempty"`
	BeforeMagicAction            *MagicAction            `protobuf:"bytes,18,opt,name=beforeMagicAction" json:"beforeMagicAction,omitempty"`
	BeforeBossSpecialSkillAction *BossSpecialSkillAction `protobuf:"bytes,19,opt,name=beforeBossSpecialSkillAction" json:"beforeBossSpecialSkillAction,omitempty"`
}

func (x *MainAttackResult) Reset() {
	*x = MainAttackResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainAttackResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainAttackResult) ProtoMessage() {}

func (x *MainAttackResult) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainAttackResult.ProtoReflect.Descriptor instead.
func (*MainAttackResult) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{12}
}

func (x *MainAttackResult) GetIsHit() bool {
	if x != nil && x.IsHit != nil {
		return *x.IsHit
	}
	return false
}

func (x *MainAttackResult) GetIsCritical() bool {
	if x != nil && x.IsCritical != nil {
		return *x.IsCritical
	}
	return false
}

func (x *MainAttackResult) GetIsMagic() bool {
	if x != nil && x.IsMagic != nil {
		return *x.IsMagic
	}
	return false
}

func (x *MainAttackResult) GetDamage() int64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *MainAttackResult) GetLifeSteal() int64 {
	if x != nil && x.LifeSteal != nil {
		return *x.LifeSteal
	}
	return 0
}

func (x *MainAttackResult) GetStunRound() int32 {
	if x != nil && x.StunRound != nil {
		return *x.StunRound
	}
	return 0
}

func (x *MainAttackResult) GetEnergyMyChange() int32 {
	if x != nil && x.EnergyMyChange != nil {
		return *x.EnergyMyChange
	}
	return 0
}

func (x *MainAttackResult) GetEnergyOtherChange() int32 {
	if x != nil && x.EnergyOtherChange != nil {
		return *x.EnergyOtherChange
	}
	return 0
}

func (x *MainAttackResult) GetSpiritAction() *SpiritAction {
	if x != nil {
		return x.SpiritAction
	}
	return nil
}

func (x *MainAttackResult) GetMagicAction() *MagicAction {
	if x != nil {
		return x.MagicAction
	}
	return nil
}

func (x *MainAttackResult) GetIsParry() bool {
	if x != nil && x.IsParry != nil {
		return *x.IsParry
	}
	return false
}

func (x *MainAttackResult) GetIsArmorBreak() bool {
	if x != nil && x.IsArmorBreak != nil {
		return *x.IsArmorBreak
	}
	return false
}

func (x *MainAttackResult) GetIsMagicDoubleAttack() bool {
	if x != nil && x.IsMagicDoubleAttack != nil {
		return *x.IsMagicDoubleAttack
	}
	return false
}

func (x *MainAttackResult) GetBossSpecialSkillAction() *BossSpecialSkillAction {
	if x != nil {
		return x.BossSpecialSkillAction
	}
	return nil
}

func (x *MainAttackResult) GetShieldMyChange() int64 {
	if x != nil && x.ShieldMyChange != nil {
		return *x.ShieldMyChange
	}
	return 0
}

func (x *MainAttackResult) GetShieldOtherChange() int64 {
	if x != nil && x.ShieldOtherChange != nil {
		return *x.ShieldOtherChange
	}
	return 0
}

func (x *MainAttackResult) GetBeforeSpiritAction() *SpiritAction {
	if x != nil {
		return x.BeforeSpiritAction
	}
	return nil
}

func (x *MainAttackResult) GetBeforeMagicAction() *MagicAction {
	if x != nil {
		return x.BeforeMagicAction
	}
	return nil
}

func (x *MainAttackResult) GetBeforeBossSpecialSkillAction() *BossSpecialSkillAction {
	if x != nil {
		return x.BeforeBossSpecialSkillAction
	}
	return nil
}

type SpiritAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action []*PetAction `protobuf:"bytes,1,rep,name=action" json:"action,omitempty"`
}

func (x *SpiritAction) Reset() {
	*x = SpiritAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiritAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiritAction) ProtoMessage() {}

func (x *SpiritAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiritAction.ProtoReflect.Descriptor instead.
func (*SpiritAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{13}
}

func (x *SpiritAction) GetAction() []*PetAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type BossSpecialSkillAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action []*BossSpecialSkillOneAction `protobuf:"bytes,1,rep,name=action" json:"action,omitempty"`
}

func (x *BossSpecialSkillAction) Reset() {
	*x = BossSpecialSkillAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossSpecialSkillAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossSpecialSkillAction) ProtoMessage() {}

func (x *BossSpecialSkillAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossSpecialSkillAction.ProtoReflect.Descriptor instead.
func (*BossSpecialSkillAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{14}
}

func (x *BossSpecialSkillAction) GetAction() []*BossSpecialSkillOneAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type BossSpecialSkillOneAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId       *int32       `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	SkillEffect *SkillEffect `protobuf:"bytes,2,req,name=skillEffect" json:"skillEffect,omitempty"`
	TargetId    *int32       `protobuf:"varint,3,opt,name=targetId" json:"targetId,omitempty"`
}

func (x *BossSpecialSkillOneAction) Reset() {
	*x = BossSpecialSkillOneAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossSpecialSkillOneAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossSpecialSkillOneAction) ProtoMessage() {}

func (x *BossSpecialSkillOneAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossSpecialSkillOneAction.ProtoReflect.Descriptor instead.
func (*BossSpecialSkillOneAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{15}
}

func (x *BossSpecialSkillOneAction) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *BossSpecialSkillOneAction) GetSkillEffect() *SkillEffect {
	if x != nil {
		return x.SkillEffect
	}
	return nil
}

func (x *BossSpecialSkillOneAction) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type PetAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId                  *int32                  `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	SkillEffect            *SkillEffect            `protobuf:"bytes,2,req,name=skillEffect" json:"skillEffect,omitempty"`
	SpiritAction           *SpiritAction           `protobuf:"bytes,3,opt,name=spiritAction" json:"spiritAction,omitempty"`
	MagicAction            *MagicAction            `protobuf:"bytes,4,opt,name=magicAction" json:"magicAction,omitempty"`
	TargetId               *int32                  `protobuf:"varint,5,opt,name=targetId" json:"targetId,omitempty"`
	BossSpecialSkillAction *BossSpecialSkillAction `protobuf:"bytes,6,opt,name=bossSpecialSkillAction" json:"bossSpecialSkillAction,omitempty"`
}

func (x *PetAction) Reset() {
	*x = PetAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetAction) ProtoMessage() {}

func (x *PetAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetAction.ProtoReflect.Descriptor instead.
func (*PetAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{16}
}

func (x *PetAction) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *PetAction) GetSkillEffect() *SkillEffect {
	if x != nil {
		return x.SkillEffect
	}
	return nil
}

func (x *PetAction) GetSpiritAction() *SpiritAction {
	if x != nil {
		return x.SpiritAction
	}
	return nil
}

func (x *PetAction) GetMagicAction() *MagicAction {
	if x != nil {
		return x.MagicAction
	}
	return nil
}

func (x *PetAction) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *PetAction) GetBossSpecialSkillAction() *BossSpecialSkillAction {
	if x != nil {
		return x.BossSpecialSkillAction
	}
	return nil
}

type MagicAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicOneAction []*MagicOneAction `protobuf:"bytes,1,rep,name=magicOneAction" json:"magicOneAction,omitempty"`
}

func (x *MagicAction) Reset() {
	*x = MagicAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicAction) ProtoMessage() {}

func (x *MagicAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicAction.ProtoReflect.Descriptor instead.
func (*MagicAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{17}
}

func (x *MagicAction) GetMagicOneAction() []*MagicOneAction {
	if x != nil {
		return x.MagicOneAction
	}
	return nil
}

type MagicOneAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId       *int32       `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	MagicId     *int32       `protobuf:"varint,2,req,name=magicId" json:"magicId,omitempty"`
	SkillEffect *SkillEffect `protobuf:"bytes,3,req,name=skillEffect" json:"skillEffect,omitempty"`
	TargetId    *int32       `protobuf:"varint,4,opt,name=targetId" json:"targetId,omitempty"`
}

func (x *MagicOneAction) Reset() {
	*x = MagicOneAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicOneAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicOneAction) ProtoMessage() {}

func (x *MagicOneAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicOneAction.ProtoReflect.Descriptor instead.
func (*MagicOneAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{18}
}

func (x *MagicOneAction) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *MagicOneAction) GetMagicId() int32 {
	if x != nil && x.MagicId != nil {
		return *x.MagicId
	}
	return 0
}

func (x *MagicOneAction) GetSkillEffect() *SkillEffect {
	if x != nil {
		return x.SkillEffect
	}
	return nil
}

func (x *MagicOneAction) GetTargetId() int32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type SkillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId           *int32           `protobuf:"varint,1,req,name=skillId" json:"skillId,omitempty"`
	ContinueRound     *int32           `protobuf:"varint,2,req,name=continueRound" json:"continueRound,omitempty"`
	Damage            *int64           `protobuf:"varint,3,opt,name=damage" json:"damage,omitempty"`
	AddHp             *int64           `protobuf:"varint,4,opt,name=addHp" json:"addHp,omitempty"`
	EnergyMyChange    *int32           `protobuf:"varint,5,opt,name=energyMyChange" json:"energyMyChange,omitempty"`
	EnergyOtherChange *int32           `protobuf:"varint,6,opt,name=energyOtherChange" json:"energyOtherChange,omitempty"`
	ContinueRound2    *int32           `protobuf:"varint,7,opt,name=continueRound2" json:"continueRound2,omitempty"`
	IsParry           *bool            `protobuf:"varint,8,opt,name=isParry" json:"isParry,omitempty"`
	IsArmorBreak      *bool            `protobuf:"varint,9,opt,name=isArmorBreak" json:"isArmorBreak,omitempty"`
	TriggerIndex      *int32           `protobuf:"varint,10,opt,name=triggerIndex" json:"triggerIndex,omitempty"`
	ShieldMyChange    *int64           `protobuf:"varint,11,opt,name=shieldMyChange" json:"shieldMyChange,omitempty"`
	ShieldOtherChange *int64           `protobuf:"varint,12,opt,name=shieldOtherChange" json:"shieldOtherChange,omitempty"`
	IsSuppress        *bool            `protobuf:"varint,13,opt,name=isSuppress" json:"isSuppress,omitempty"`
	IsInspire         *bool            `protobuf:"varint,14,opt,name=isInspire" json:"isInspire,omitempty"`
	UniverseValue     []*UniverseValue `protobuf:"bytes,15,rep,name=universeValue" json:"universeValue,omitempty"`
}

func (x *SkillEffect) Reset() {
	*x = SkillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillEffect) ProtoMessage() {}

func (x *SkillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillEffect.ProtoReflect.Descriptor instead.
func (*SkillEffect) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{19}
}

func (x *SkillEffect) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *SkillEffect) GetContinueRound() int32 {
	if x != nil && x.ContinueRound != nil {
		return *x.ContinueRound
	}
	return 0
}

func (x *SkillEffect) GetDamage() int64 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *SkillEffect) GetAddHp() int64 {
	if x != nil && x.AddHp != nil {
		return *x.AddHp
	}
	return 0
}

func (x *SkillEffect) GetEnergyMyChange() int32 {
	if x != nil && x.EnergyMyChange != nil {
		return *x.EnergyMyChange
	}
	return 0
}

func (x *SkillEffect) GetEnergyOtherChange() int32 {
	if x != nil && x.EnergyOtherChange != nil {
		return *x.EnergyOtherChange
	}
	return 0
}

func (x *SkillEffect) GetContinueRound2() int32 {
	if x != nil && x.ContinueRound2 != nil {
		return *x.ContinueRound2
	}
	return 0
}

func (x *SkillEffect) GetIsParry() bool {
	if x != nil && x.IsParry != nil {
		return *x.IsParry
	}
	return false
}

func (x *SkillEffect) GetIsArmorBreak() bool {
	if x != nil && x.IsArmorBreak != nil {
		return *x.IsArmorBreak
	}
	return false
}

func (x *SkillEffect) GetTriggerIndex() int32 {
	if x != nil && x.TriggerIndex != nil {
		return *x.TriggerIndex
	}
	return 0
}

func (x *SkillEffect) GetShieldMyChange() int64 {
	if x != nil && x.ShieldMyChange != nil {
		return *x.ShieldMyChange
	}
	return 0
}

func (x *SkillEffect) GetShieldOtherChange() int64 {
	if x != nil && x.ShieldOtherChange != nil {
		return *x.ShieldOtherChange
	}
	return 0
}

func (x *SkillEffect) GetIsSuppress() bool {
	if x != nil && x.IsSuppress != nil {
		return *x.IsSuppress
	}
	return false
}

func (x *SkillEffect) GetIsInspire() bool {
	if x != nil && x.IsInspire != nil {
		return *x.IsInspire
	}
	return false
}

func (x *SkillEffect) GetUniverseValue() []*UniverseValue {
	if x != nil {
		return x.UniverseValue
	}
	return nil
}

type BattleMainState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId     *int32 `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	Hp        *int64 `protobuf:"varint,2,req,name=hp" json:"hp,omitempty"`
	Energy    *int32 `protobuf:"varint,3,req,name=energy" json:"energy,omitempty"`
	MaxHp     *int64 `protobuf:"varint,4,opt,name=maxHp" json:"maxHp,omitempty"`
	ShieldVal *int64 `protobuf:"varint,5,opt,name=shieldVal" json:"shieldVal,omitempty"`
	KillNum   *int32 `protobuf:"varint,6,opt,name=killNum" json:"killNum,omitempty"`
}

func (x *BattleMainState) Reset() {
	*x = BattleMainState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleMainState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleMainState) ProtoMessage() {}

func (x *BattleMainState) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleMainState.ProtoReflect.Descriptor instead.
func (*BattleMainState) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{20}
}

func (x *BattleMainState) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *BattleMainState) GetHp() int64 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *BattleMainState) GetEnergy() int32 {
	if x != nil && x.Energy != nil {
		return *x.Energy
	}
	return 0
}

func (x *BattleMainState) GetMaxHp() int64 {
	if x != nil && x.MaxHp != nil {
		return *x.MaxHp
	}
	return 0
}

func (x *BattleMainState) GetShieldVal() int64 {
	if x != nil && x.ShieldVal != nil {
		return *x.ShieldVal
	}
	return 0
}

func (x *BattleMainState) GetKillNum() int32 {
	if x != nil && x.KillNum != nil {
		return *x.KillNum
	}
	return 0
}

type TeamSkillAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLeft           *bool                 `protobuf:"varint,1,req,name=isLeft" json:"isLeft,omitempty"`
	Actions          []*TeamSkillOneAction `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	TeamEnergyChange *int32                `protobuf:"varint,3,req,name=teamEnergyChange" json:"teamEnergyChange,omitempty"`
}

func (x *TeamSkillAction) Reset() {
	*x = TeamSkillAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSkillAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSkillAction) ProtoMessage() {}

func (x *TeamSkillAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSkillAction.ProtoReflect.Descriptor instead.
func (*TeamSkillAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{21}
}

func (x *TeamSkillAction) GetIsLeft() bool {
	if x != nil && x.IsLeft != nil {
		return *x.IsLeft
	}
	return false
}

func (x *TeamSkillAction) GetActions() []*TeamSkillOneAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TeamSkillAction) GetTeamEnergyChange() int32 {
	if x != nil && x.TeamEnergyChange != nil {
		return *x.TeamEnergyChange
	}
	return 0
}

type TeamSkillOneAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId       *int32         `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	SkillEffect []*SkillEffect `protobuf:"bytes,2,rep,name=skillEffect" json:"skillEffect,omitempty"`
}

func (x *TeamSkillOneAction) Reset() {
	*x = TeamSkillOneAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSkillOneAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSkillOneAction) ProtoMessage() {}

func (x *TeamSkillOneAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSkillOneAction.ProtoReflect.Descriptor instead.
func (*TeamSkillOneAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{22}
}

func (x *TeamSkillOneAction) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *TeamSkillOneAction) GetSkillEffect() []*SkillEffect {
	if x != nil {
		return x.SkillEffect
	}
	return nil
}

type BossSkillAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId        *int32                `protobuf:"varint,1,req,name=objId" json:"objId,omitempty"`
	SkillId      *int32                `protobuf:"varint,2,req,name=skillId" json:"skillId,omitempty"`
	Actions      []*TeamSkillOneAction `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
	SpiritAction []*SpiritAction       `protobuf:"bytes,4,rep,name=spiritAction" json:"spiritAction,omitempty"`
	MagicAction  *MagicAction          `protobuf:"bytes,5,opt,name=magicAction" json:"magicAction,omitempty"`
}

func (x *BossSkillAction) Reset() {
	*x = BossSkillAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Battle_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossSkillAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossSkillAction) ProtoMessage() {}

func (x *BossSkillAction) ProtoReflect() protoreflect.Message {
	mi := &file_Battle_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossSkillAction.ProtoReflect.Descriptor instead.
func (*BossSkillAction) Descriptor() ([]byte, []int) {
	return file_Battle_proto_rawDescGZIP(), []int{23}
}

func (x *BossSkillAction) GetObjId() int32 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *BossSkillAction) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *BossSkillAction) GetActions() []*TeamSkillOneAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *BossSkillAction) GetSpiritAction() []*SpiritAction {
	if x != nil {
		return x.SpiritAction
	}
	return nil
}

func (x *BossSkillAction) GetMagicAction() *MagicAction {
	if x != nil {
		return x.MagicAction
	}
	return nil
}

var File_Battle_proto protoreflect.FileDescriptor

var file_Battle_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x22, 0x3e, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x49, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x48, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xc8, 0x03, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x03,
	0x70, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x52, 0x06, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x12, 0x38, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x74, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x74, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x62, 0x6a,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4f, 0x62, 0x6a, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x50,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4f, 0x62,
	0x6a, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x76, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x66,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xd7, 0x02, 0x0a,
	0x13, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67,
	0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3b, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40,
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x42, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x74, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xd0, 0x07, 0x0a, 0x10, 0x4d, 0x61,
	0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x48, 0x69, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x48, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x74,
	0x65, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x53,
	0x74, 0x65, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x6e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x75, 0x6e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x50, 0x61, 0x72, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x61, 0x72, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x30, 0x0a, 0x13, 0x69, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x62, 0x0a, 0x16, 0x62, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62,
	0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x11, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x1c,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0c,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x50, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x16, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0xed, 0x02, 0x0a, 0x09, 0x50, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x44,
	0x0a, 0x0c, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x16, 0x62, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x16, 0x62, 0x6f, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0b, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4f,
	0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4f, 0x6e, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x22, 0xb8, 0x04, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x48, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x64, 0x64,
	0x48, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x50, 0x61, 0x72, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x61, 0x72, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x68, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x48, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x22,
	0x97, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x12, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x42, 0x6f, 0x73,
	0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x0c, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x2f,
	0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x6d, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
}

var (
	file_Battle_proto_rawDescOnce sync.Once
	file_Battle_proto_rawDescData = file_Battle_proto_rawDesc
)

func file_Battle_proto_rawDescGZIP() []byte {
	file_Battle_proto_rawDescOnce.Do(func() {
		file_Battle_proto_rawDescData = protoimpl.X.CompressGZIP(file_Battle_proto_rawDescData)
	})
	return file_Battle_proto_rawDescData
}

var file_Battle_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_Battle_proto_goTypes = []any{
	(*BattleMagicMsg)(nil),            // 0: com.yq.msg.CityMsg.BattleMagicMsg
	(*BattleMain)(nil),                // 1: com.yq.msg.CityMsg.BattleMain
	(*BattleModelMsg)(nil),            // 2: com.yq.msg.CityMsg.BattleModelMsg
	(*PetObj)(nil),                    // 3: com.yq.msg.CityMsg.PetObj
	(*SpiritObj)(nil),                 // 4: com.yq.msg.CityMsg.SpiritObj
	(*UniverseObj)(nil),               // 5: com.yq.msg.CityMsg.UniverseObj
	(*BattleRecordMsg)(nil),           // 6: com.yq.msg.CityMsg.BattleRecordMsg
	(*TeamBattleRecordMsg)(nil),       // 7: com.yq.msg.CityMsg.TeamBattleRecordMsg
	(*BattleRoundLog)(nil),            // 8: com.yq.msg.CityMsg.BattleRoundLog
	(*UniverseValue)(nil),             // 9: com.yq.msg.CityMsg.UniverseValue
	(*BattleAction)(nil),              // 10: com.yq.msg.CityMsg.BattleAction
	(*MainAction)(nil),                // 11: com.yq.msg.CityMsg.MainAction
	(*MainAttackResult)(nil),          // 12: com.yq.msg.CityMsg.MainAttackResult
	(*SpiritAction)(nil),              // 13: com.yq.msg.CityMsg.SpiritAction
	(*BossSpecialSkillAction)(nil),    // 14: com.yq.msg.CityMsg.BossSpecialSkillAction
	(*BossSpecialSkillOneAction)(nil), // 15: com.yq.msg.CityMsg.BossSpecialSkillOneAction
	(*PetAction)(nil),                 // 16: com.yq.msg.CityMsg.PetAction
	(*MagicAction)(nil),               // 17: com.yq.msg.CityMsg.MagicAction
	(*MagicOneAction)(nil),            // 18: com.yq.msg.CityMsg.MagicOneAction
	(*SkillEffect)(nil),               // 19: com.yq.msg.CityMsg.SkillEffect
	(*BattleMainState)(nil),           // 20: com.yq.msg.CityMsg.BattleMainState
	(*TeamSkillAction)(nil),           // 21: com.yq.msg.CityMsg.TeamSkillAction
	(*TeamSkillOneAction)(nil),        // 22: com.yq.msg.CityMsg.TeamSkillOneAction
	(*BossSkillAction)(nil),           // 23: com.yq.msg.CityMsg.BossSkillAction
}
var file_Battle_proto_depIdxs = []int32{
	2,  // 0: com.yq.msg.CityMsg.BattleMain.battleModel:type_name -> com.yq.msg.CityMsg.BattleModelMsg
	3,  // 1: com.yq.msg.CityMsg.BattleModelMsg.pet:type_name -> com.yq.msg.CityMsg.PetObj
	4,  // 2: com.yq.msg.CityMsg.BattleModelMsg.spirit:type_name -> com.yq.msg.CityMsg.SpiritObj
	0,  // 3: com.yq.msg.CityMsg.BattleModelMsg.magic:type_name -> com.yq.msg.CityMsg.BattleMagicMsg
	5,  // 4: com.yq.msg.CityMsg.BattleModelMsg.universeObj:type_name -> com.yq.msg.CityMsg.UniverseObj
	1,  // 5: com.yq.msg.CityMsg.BattleRecordMsg.battleMain:type_name -> com.yq.msg.CityMsg.BattleMain
	8,  // 6: com.yq.msg.CityMsg.BattleRecordMsg.battleRoundLog:type_name -> com.yq.msg.CityMsg.BattleRoundLog
	1,  // 7: com.yq.msg.CityMsg.TeamBattleRecordMsg.battleMain:type_name -> com.yq.msg.CityMsg.BattleMain
	8,  // 8: com.yq.msg.CityMsg.TeamBattleRecordMsg.battleRoundLog:type_name -> com.yq.msg.CityMsg.BattleRoundLog
	10, // 9: com.yq.msg.CityMsg.BattleRoundLog.action:type_name -> com.yq.msg.CityMsg.BattleAction
	20, // 10: com.yq.msg.CityMsg.BattleRoundLog.battleMainState:type_name -> com.yq.msg.CityMsg.BattleMainState
	9,  // 11: com.yq.msg.CityMsg.BattleRoundLog.universeValue:type_name -> com.yq.msg.CityMsg.UniverseValue
	12, // 12: com.yq.msg.CityMsg.MainAction.mainAttackResult:type_name -> com.yq.msg.CityMsg.MainAttackResult
	13, // 13: com.yq.msg.CityMsg.MainAttackResult.spiritAction:type_name -> com.yq.msg.CityMsg.SpiritAction
	17, // 14: com.yq.msg.CityMsg.MainAttackResult.magicAction:type_name -> com.yq.msg.CityMsg.MagicAction
	14, // 15: com.yq.msg.CityMsg.MainAttackResult.bossSpecialSkillAction:type_name -> com.yq.msg.CityMsg.BossSpecialSkillAction
	13, // 16: com.yq.msg.CityMsg.MainAttackResult.beforeSpiritAction:type_name -> com.yq.msg.CityMsg.SpiritAction
	17, // 17: com.yq.msg.CityMsg.MainAttackResult.beforeMagicAction:type_name -> com.yq.msg.CityMsg.MagicAction
	14, // 18: com.yq.msg.CityMsg.MainAttackResult.beforeBossSpecialSkillAction:type_name -> com.yq.msg.CityMsg.BossSpecialSkillAction
	16, // 19: com.yq.msg.CityMsg.SpiritAction.action:type_name -> com.yq.msg.CityMsg.PetAction
	15, // 20: com.yq.msg.CityMsg.BossSpecialSkillAction.action:type_name -> com.yq.msg.CityMsg.BossSpecialSkillOneAction
	19, // 21: com.yq.msg.CityMsg.BossSpecialSkillOneAction.skillEffect:type_name -> com.yq.msg.CityMsg.SkillEffect
	19, // 22: com.yq.msg.CityMsg.PetAction.skillEffect:type_name -> com.yq.msg.CityMsg.SkillEffect
	13, // 23: com.yq.msg.CityMsg.PetAction.spiritAction:type_name -> com.yq.msg.CityMsg.SpiritAction
	17, // 24: com.yq.msg.CityMsg.PetAction.magicAction:type_name -> com.yq.msg.CityMsg.MagicAction
	14, // 25: com.yq.msg.CityMsg.PetAction.bossSpecialSkillAction:type_name -> com.yq.msg.CityMsg.BossSpecialSkillAction
	18, // 26: com.yq.msg.CityMsg.MagicAction.magicOneAction:type_name -> com.yq.msg.CityMsg.MagicOneAction
	19, // 27: com.yq.msg.CityMsg.MagicOneAction.skillEffect:type_name -> com.yq.msg.CityMsg.SkillEffect
	9,  // 28: com.yq.msg.CityMsg.SkillEffect.universeValue:type_name -> com.yq.msg.CityMsg.UniverseValue
	22, // 29: com.yq.msg.CityMsg.TeamSkillAction.actions:type_name -> com.yq.msg.CityMsg.TeamSkillOneAction
	19, // 30: com.yq.msg.CityMsg.TeamSkillOneAction.skillEffect:type_name -> com.yq.msg.CityMsg.SkillEffect
	22, // 31: com.yq.msg.CityMsg.BossSkillAction.actions:type_name -> com.yq.msg.CityMsg.TeamSkillOneAction
	13, // 32: com.yq.msg.CityMsg.BossSkillAction.spiritAction:type_name -> com.yq.msg.CityMsg.SpiritAction
	17, // 33: com.yq.msg.CityMsg.BossSkillAction.magicAction:type_name -> com.yq.msg.CityMsg.MagicAction
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_Battle_proto_init() }
func file_Battle_proto_init() {
	if File_Battle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Battle_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BattleMagicMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BattleMain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BattleModelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PetObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SpiritObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UniverseObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BattleRecordMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TeamBattleRecordMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BattleRoundLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UniverseValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BattleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MainAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MainAttackResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SpiritAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BossSpecialSkillAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*BossSpecialSkillOneAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PetAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MagicAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MagicOneAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SkillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*BattleMainState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TeamSkillAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*TeamSkillOneAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Battle_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*BossSkillAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Battle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Battle_proto_goTypes,
		DependencyIndexes: file_Battle_proto_depIdxs,
		MessageInfos:      file_Battle_proto_msgTypes,
	}.Build()
	File_Battle_proto = out.File
	file_Battle_proto_rawDesc = nil
	file_Battle_proto_goTypes = nil
	file_Battle_proto_depIdxs = nil
}
