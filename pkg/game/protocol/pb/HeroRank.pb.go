// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: HeroRank.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeroRankPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy           *int32  `protobuf:"varint,1,opt,name=energy" json:"energy,omitempty"`
	LastRefreshTime  *int64  `protobuf:"varint,2,opt,name=lastRefreshTime" json:"lastRefreshTime,omitempty"`
	BuyNumDaily      *int32  `protobuf:"varint,3,opt,name=buyNumDaily" json:"buyNumDaily,omitempty"`
	HistoryRank      *int32  `protobuf:"varint,4,opt,name=historyRank" json:"historyRank,omitempty"`
	TaskIdList       []int32 `protobuf:"varint,5,rep,name=taskIdList" json:"taskIdList,omitempty"`
	DailyRefreshTime *int64  `protobuf:"varint,6,opt,name=dailyRefreshTime" json:"dailyRefreshTime,omitempty"`
}

func (x *HeroRankPlayerInfo) Reset() {
	*x = HeroRankPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroRankPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroRankPlayerInfo) ProtoMessage() {}

func (x *HeroRankPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroRankPlayerInfo.ProtoReflect.Descriptor instead.
func (*HeroRankPlayerInfo) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{0}
}

func (x *HeroRankPlayerInfo) GetEnergy() int32 {
	if x != nil && x.Energy != nil {
		return *x.Energy
	}
	return 0
}

func (x *HeroRankPlayerInfo) GetLastRefreshTime() int64 {
	if x != nil && x.LastRefreshTime != nil {
		return *x.LastRefreshTime
	}
	return 0
}

func (x *HeroRankPlayerInfo) GetBuyNumDaily() int32 {
	if x != nil && x.BuyNumDaily != nil {
		return *x.BuyNumDaily
	}
	return 0
}

func (x *HeroRankPlayerInfo) GetHistoryRank() int32 {
	if x != nil && x.HistoryRank != nil {
		return *x.HistoryRank
	}
	return 0
}

func (x *HeroRankPlayerInfo) GetTaskIdList() []int32 {
	if x != nil {
		return x.TaskIdList
	}
	return nil
}

func (x *HeroRankPlayerInfo) GetDailyRefreshTime() int64 {
	if x != nil && x.DailyRefreshTime != nil {
		return *x.DailyRefreshTime
	}
	return 0
}

type SynHeroRankPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *HeroRankPlayerInfo `protobuf:"bytes,1,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *SynHeroRankPlayerInfo) Reset() {
	*x = SynHeroRankPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynHeroRankPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynHeroRankPlayerInfo) ProtoMessage() {}

func (x *SynHeroRankPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynHeroRankPlayerInfo.ProtoReflect.Descriptor instead.
func (*SynHeroRankPlayerInfo) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{1}
}

func (x *SynHeroRankPlayerInfo) GetPlayerInfo() *HeroRankPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type RspHeroRankEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo      *HeroRankPlayerInfo             `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
	FightPlayerList *HeroRankFightPlayerDataListMsg `protobuf:"bytes,3,opt,name=fightPlayerList" json:"fightPlayerList,omitempty"`
	Rank            *int32                          `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	RoundReward     *int32                          `protobuf:"varint,5,opt,name=roundReward" json:"roundReward,omitempty"`
}

func (x *RspHeroRankEnter) Reset() {
	*x = RspHeroRankEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHeroRankEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHeroRankEnter) ProtoMessage() {}

func (x *RspHeroRankEnter) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHeroRankEnter.ProtoReflect.Descriptor instead.
func (*RspHeroRankEnter) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{2}
}

func (x *RspHeroRankEnter) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspHeroRankEnter) GetPlayerInfo() *HeroRankPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *RspHeroRankEnter) GetFightPlayerList() *HeroRankFightPlayerDataListMsg {
	if x != nil {
		return x.FightPlayerList
	}
	return nil
}

func (x *RspHeroRankEnter) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *RspHeroRankEnter) GetRoundReward() int32 {
	if x != nil && x.RoundReward != nil {
		return *x.RoundReward
	}
	return 0
}

type ReqHeroRankFightPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (x *ReqHeroRankFightPlayerList) Reset() {
	*x = ReqHeroRankFightPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHeroRankFightPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHeroRankFightPlayerList) ProtoMessage() {}

func (x *ReqHeroRankFightPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHeroRankFightPlayerList.ProtoReflect.Descriptor instead.
func (*ReqHeroRankFightPlayerList) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{3}
}

func (x *ReqHeroRankFightPlayerList) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type RspHeroRankFightPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret             *int32                          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	FightPlayerList *HeroRankFightPlayerDataListMsg `protobuf:"bytes,2,opt,name=fightPlayerList" json:"fightPlayerList,omitempty"`
	Type            *int32                          `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Rank            *int32                          `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
}

func (x *RspHeroRankFightPlayerList) Reset() {
	*x = RspHeroRankFightPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHeroRankFightPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHeroRankFightPlayerList) ProtoMessage() {}

func (x *RspHeroRankFightPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHeroRankFightPlayerList.ProtoReflect.Descriptor instead.
func (*RspHeroRankFightPlayerList) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{4}
}

func (x *RspHeroRankFightPlayerList) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspHeroRankFightPlayerList) GetFightPlayerList() *HeroRankFightPlayerDataListMsg {
	if x != nil {
		return x.FightPlayerList
	}
	return nil
}

func (x *RspHeroRankFightPlayerList) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *RspHeroRankFightPlayerList) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type ReqHeroRankFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId     *int64 `protobuf:"varint,1,opt,name=targetId" json:"targetId,omitempty"`
	TargetRank   *int32 `protobuf:"varint,2,opt,name=targetRank" json:"targetRank,omitempty"`
	MasterId     *int32 `protobuf:"varint,3,opt,name=masterId" json:"masterId,omitempty"`
	MasterLv     *int32 `protobuf:"varint,4,opt,name=masterLv" json:"masterLv,omitempty"`
	AppearanceId *int32 `protobuf:"varint,5,opt,name=appearanceId" json:"appearanceId,omitempty"`
	CloudId      *int32 `protobuf:"varint,6,opt,name=cloudId" json:"cloudId,omitempty"`
}

func (x *ReqHeroRankFight) Reset() {
	*x = ReqHeroRankFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHeroRankFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHeroRankFight) ProtoMessage() {}

func (x *ReqHeroRankFight) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHeroRankFight.ProtoReflect.Descriptor instead.
func (*ReqHeroRankFight) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{5}
}

func (x *ReqHeroRankFight) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *ReqHeroRankFight) GetTargetRank() int32 {
	if x != nil && x.TargetRank != nil {
		return *x.TargetRank
	}
	return 0
}

func (x *ReqHeroRankFight) GetMasterId() int32 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

func (x *ReqHeroRankFight) GetMasterLv() int32 {
	if x != nil && x.MasterLv != nil {
		return *x.MasterLv
	}
	return 0
}

func (x *ReqHeroRankFight) GetAppearanceId() int32 {
	if x != nil && x.AppearanceId != nil {
		return *x.AppearanceId
	}
	return 0
}

func (x *ReqHeroRankFight) GetCloudId() int32 {
	if x != nil && x.CloudId != nil {
		return *x.CloudId
	}
	return 0
}

type RspHeroRankFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                       *int32                          `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo                *HeroRankPlayerInfo             `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
	Rank                      *int32                          `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	Rewards                   *string                         `protobuf:"bytes,4,opt,name=rewards" json:"rewards,omitempty"`
	AllBattleRecord           *BattleRecordMsg                `protobuf:"bytes,5,opt,name=allBattleRecord" json:"allBattleRecord,omitempty"`
	OtherPlayerHeadAndNameMsg *PlayerHeadAndNameMsg           `protobuf:"bytes,6,opt,name=otherPlayerHeadAndNameMsg" json:"otherPlayerHeadAndNameMsg,omitempty"`
	FightPlayerList           *HeroRankFightPlayerDataListMsg `protobuf:"bytes,7,opt,name=fightPlayerList" json:"fightPlayerList,omitempty"`
}

func (x *RspHeroRankFight) Reset() {
	*x = RspHeroRankFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHeroRankFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHeroRankFight) ProtoMessage() {}

func (x *RspHeroRankFight) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHeroRankFight.ProtoReflect.Descriptor instead.
func (*RspHeroRankFight) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{6}
}

func (x *RspHeroRankFight) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspHeroRankFight) GetPlayerInfo() *HeroRankPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *RspHeroRankFight) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *RspHeroRankFight) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *RspHeroRankFight) GetAllBattleRecord() *BattleRecordMsg {
	if x != nil {
		return x.AllBattleRecord
	}
	return nil
}

func (x *RspHeroRankFight) GetOtherPlayerHeadAndNameMsg() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.OtherPlayerHeadAndNameMsg
	}
	return nil
}

func (x *RspHeroRankFight) GetFightPlayerList() *HeroRankFightPlayerDataListMsg {
	if x != nil {
		return x.FightPlayerList
	}
	return nil
}

type ReqHeroRankClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	TargetId   *int64 `protobuf:"varint,2,opt,name=targetId" json:"targetId,omitempty"`
	TargetRank *int32 `protobuf:"varint,3,opt,name=targetRank" json:"targetRank,omitempty"`
}

func (x *ReqHeroRankClear) Reset() {
	*x = ReqHeroRankClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHeroRankClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHeroRankClear) ProtoMessage() {}

func (x *ReqHeroRankClear) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHeroRankClear.ProtoReflect.Descriptor instead.
func (*ReqHeroRankClear) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{7}
}

func (x *ReqHeroRankClear) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ReqHeroRankClear) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *ReqHeroRankClear) GetTargetRank() int32 {
	if x != nil && x.TargetRank != nil {
		return *x.TargetRank
	}
	return 0
}

type RspHeroRankClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                       *int32                `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ClearNum                  *int32                `protobuf:"varint,2,opt,name=clearNum" json:"clearNum,omitempty"`
	Rewards                   *string               `protobuf:"bytes,3,opt,name=rewards" json:"rewards,omitempty"`
	OtherPlayerHeadAndNameMsg *PlayerHeadAndNameMsg `protobuf:"bytes,4,opt,name=otherPlayerHeadAndNameMsg" json:"otherPlayerHeadAndNameMsg,omitempty"`
	PlayerInfo                *HeroRankPlayerInfo   `protobuf:"bytes,5,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *RspHeroRankClear) Reset() {
	*x = RspHeroRankClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHeroRankClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHeroRankClear) ProtoMessage() {}

func (x *RspHeroRankClear) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHeroRankClear.ProtoReflect.Descriptor instead.
func (*RspHeroRankClear) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{8}
}

func (x *RspHeroRankClear) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspHeroRankClear) GetClearNum() int32 {
	if x != nil && x.ClearNum != nil {
		return *x.ClearNum
	}
	return 0
}

func (x *RspHeroRankClear) GetRewards() string {
	if x != nil && x.Rewards != nil {
		return *x.Rewards
	}
	return ""
}

func (x *RspHeroRankClear) GetOtherPlayerHeadAndNameMsg() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.OtherPlayerHeadAndNameMsg
	}
	return nil
}

func (x *RspHeroRankClear) GetPlayerInfo() *HeroRankPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type HeroRankFightPlayerDataListMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopPlayerInfoList      []*HeroRankFightPlayerDataMsg `protobuf:"bytes,1,rep,name=topPlayerInfoList" json:"topPlayerInfoList,omitempty"`
	CanFightPlayerInfoList []*HeroRankFightPlayerDataMsg `protobuf:"bytes,2,rep,name=canFightPlayerInfoList" json:"canFightPlayerInfoList,omitempty"`
}

func (x *HeroRankFightPlayerDataListMsg) Reset() {
	*x = HeroRankFightPlayerDataListMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroRankFightPlayerDataListMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroRankFightPlayerDataListMsg) ProtoMessage() {}

func (x *HeroRankFightPlayerDataListMsg) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroRankFightPlayerDataListMsg.ProtoReflect.Descriptor instead.
func (*HeroRankFightPlayerDataListMsg) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{9}
}

func (x *HeroRankFightPlayerDataListMsg) GetTopPlayerInfoList() []*HeroRankFightPlayerDataMsg {
	if x != nil {
		return x.TopPlayerInfoList
	}
	return nil
}

func (x *HeroRankFightPlayerDataListMsg) GetCanFightPlayerInfoList() []*HeroRankFightPlayerDataMsg {
	if x != nil {
		return x.CanFightPlayerInfoList
	}
	return nil
}

type HeroRankFightPlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank     *int32                   `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	ShowInfo *PlayerAppearanceDataMsg `protobuf:"bytes,2,opt,name=showInfo" json:"showInfo,omitempty"`
	MasterId *int32                   `protobuf:"varint,3,opt,name=masterId" json:"masterId,omitempty"`
	MasterLv *int32                   `protobuf:"varint,4,opt,name=masterLv" json:"masterLv,omitempty"`
}

func (x *HeroRankFightPlayerDataMsg) Reset() {
	*x = HeroRankFightPlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroRankFightPlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroRankFightPlayerDataMsg) ProtoMessage() {}

func (x *HeroRankFightPlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroRankFightPlayerDataMsg.ProtoReflect.Descriptor instead.
func (*HeroRankFightPlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{10}
}

func (x *HeroRankFightPlayerDataMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *HeroRankFightPlayerDataMsg) GetShowInfo() *PlayerAppearanceDataMsg {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

func (x *HeroRankFightPlayerDataMsg) GetMasterId() int32 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

func (x *HeroRankFightPlayerDataMsg) GetMasterLv() int32 {
	if x != nil && x.MasterLv != nil {
		return *x.MasterLv
	}
	return 0
}

type RspHeroRankRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32                   `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	RecordList []*HeroRankRecordDataMsg `protobuf:"bytes,2,rep,name=recordList" json:"recordList,omitempty"`
}

func (x *RspHeroRankRecord) Reset() {
	*x = RspHeroRankRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHeroRankRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHeroRankRecord) ProtoMessage() {}

func (x *RspHeroRankRecord) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHeroRankRecord.ProtoReflect.Descriptor instead.
func (*RspHeroRankRecord) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{11}
}

func (x *RspHeroRankRecord) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspHeroRankRecord) GetRecordList() []*HeroRankRecordDataMsg {
	if x != nil {
		return x.RecordList
	}
	return nil
}

type HeroRankRecordDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FightPlayerData   *HeroRankRecordPlayerDataMsg `protobuf:"bytes,1,opt,name=fightPlayerData" json:"fightPlayerData,omitempty"`
	DefensePlayerData *HeroRankRecordPlayerDataMsg `protobuf:"bytes,2,opt,name=defensePlayerData" json:"defensePlayerData,omitempty"`
	IsFightWin        *bool                        `protobuf:"varint,3,opt,name=isFightWin" json:"isFightWin,omitempty"`
}

func (x *HeroRankRecordDataMsg) Reset() {
	*x = HeroRankRecordDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroRankRecordDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroRankRecordDataMsg) ProtoMessage() {}

func (x *HeroRankRecordDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroRankRecordDataMsg.ProtoReflect.Descriptor instead.
func (*HeroRankRecordDataMsg) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{12}
}

func (x *HeroRankRecordDataMsg) GetFightPlayerData() *HeroRankRecordPlayerDataMsg {
	if x != nil {
		return x.FightPlayerData
	}
	return nil
}

func (x *HeroRankRecordDataMsg) GetDefensePlayerData() *HeroRankRecordPlayerDataMsg {
	if x != nil {
		return x.DefensePlayerData
	}
	return nil
}

func (x *HeroRankRecordDataMsg) GetIsFightWin() bool {
	if x != nil && x.IsFightWin != nil {
		return *x.IsFightWin
	}
	return false
}

type HeroRankRecordPlayerDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadAndNameData *PlayerHeadAndNameMsg `protobuf:"bytes,1,opt,name=headAndNameData" json:"headAndNameData,omitempty"`
	RealmsId        *int32                `protobuf:"varint,2,opt,name=realmsId" json:"realmsId,omitempty"`
	Rank            *int32                `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
}

func (x *HeroRankRecordPlayerDataMsg) Reset() {
	*x = HeroRankRecordPlayerDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroRankRecordPlayerDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroRankRecordPlayerDataMsg) ProtoMessage() {}

func (x *HeroRankRecordPlayerDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroRankRecordPlayerDataMsg.ProtoReflect.Descriptor instead.
func (*HeroRankRecordPlayerDataMsg) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{13}
}

func (x *HeroRankRecordPlayerDataMsg) GetHeadAndNameData() *PlayerHeadAndNameMsg {
	if x != nil {
		return x.HeadAndNameData
	}
	return nil
}

func (x *HeroRankRecordPlayerDataMsg) GetRealmsId() int32 {
	if x != nil && x.RealmsId != nil {
		return *x.RealmsId
	}
	return 0
}

func (x *HeroRankRecordPlayerDataMsg) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type ReqHeroRankGetAchieve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId *int32 `protobuf:"varint,1,opt,name=taskId" json:"taskId,omitempty"`
}

func (x *ReqHeroRankGetAchieve) Reset() {
	*x = ReqHeroRankGetAchieve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHeroRankGetAchieve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHeroRankGetAchieve) ProtoMessage() {}

func (x *ReqHeroRankGetAchieve) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHeroRankGetAchieve.ProtoReflect.Descriptor instead.
func (*ReqHeroRankGetAchieve) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{14}
}

func (x *ReqHeroRankGetAchieve) GetTaskId() int32 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

type RspHeroRankGetAchieve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	Reward *string `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *RspHeroRankGetAchieve) Reset() {
	*x = RspHeroRankGetAchieve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHeroRankGetAchieve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHeroRankGetAchieve) ProtoMessage() {}

func (x *RspHeroRankGetAchieve) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHeroRankGetAchieve.ProtoReflect.Descriptor instead.
func (*RspHeroRankGetAchieve) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{15}
}

func (x *RspHeroRankGetAchieve) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspHeroRankGetAchieve) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

type ReqHeroRankBuyEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num *int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (x *ReqHeroRankBuyEnergy) Reset() {
	*x = ReqHeroRankBuyEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHeroRankBuyEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHeroRankBuyEnergy) ProtoMessage() {}

func (x *ReqHeroRankBuyEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHeroRankBuyEnergy.ProtoReflect.Descriptor instead.
func (*ReqHeroRankBuyEnergy) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{16}
}

func (x *ReqHeroRankBuyEnergy) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type RspHeroRankBuyEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        *int32              `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	PlayerInfo *HeroRankPlayerInfo `protobuf:"bytes,2,opt,name=playerInfo" json:"playerInfo,omitempty"`
}

func (x *RspHeroRankBuyEnergy) Reset() {
	*x = RspHeroRankBuyEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HeroRank_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHeroRankBuyEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHeroRankBuyEnergy) ProtoMessage() {}

func (x *RspHeroRankBuyEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_HeroRank_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHeroRankBuyEnergy.ProtoReflect.Descriptor instead.
func (*RspHeroRankBuyEnergy) Descriptor() ([]byte, []int) {
	return file_HeroRank_proto_rawDescGZIP(), []int{17}
}

func (x *RspHeroRankBuyEnergy) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspHeroRankBuyEnergy) GetPlayerInfo() *HeroRankPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

var File_HeroRank_proto protoreflect.FileDescriptor

var file_HeroRank_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61,
	0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5f,
	0x0a, 0x15, 0x53, 0x79, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67,
	0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x80, 0x02, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e,
	0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c,
	0x0a, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72,
	0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0x30, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e,
	0x6b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x52, 0x73, 0x70, 0x48, 0x65, 0x72, 0x6f,
	0x52, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0xc4, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x76, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x64, 0x22, 0xaf, 0x03, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61,
	0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x66,
	0x0a, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x19, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x5c, 0x0a, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x48, 0x65, 0x72, 0x6f, 0x52,
	0x61, 0x6e, 0x6b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x8a, 0x02, 0x0a, 0x10, 0x52, 0x73, 0x70,
	0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61,
	0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x5c, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e,
	0x6b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f,
	0x52, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x1a, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x76, 0x22, 0x70, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d,
	0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x59,
	0x0a, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72,
	0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x57, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x57, 0x69, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x48, 0x65, 0x72,
	0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x52, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64,
	0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0f, 0x68, 0x65, 0x61,
	0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x2f, 0x0a, 0x15,
	0x52, 0x65, 0x71, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x15, 0x52, 0x73, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x22, 0x28, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x42,
	0x75, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x70, 0x0a, 0x14, 0x52, 0x73,
	0x70, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x75, 0x79, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x71, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x65,
	0x72, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x7a, 0x68, 0x6f,
	0x6e, 0x67, 0x71, 0x69, 0x2f, 0x78, 0x64, 0x64, 0x71, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70,
	0x62, 0x3b, 0x70, 0x62,
}

var (
	file_HeroRank_proto_rawDescOnce sync.Once
	file_HeroRank_proto_rawDescData = file_HeroRank_proto_rawDesc
)

func file_HeroRank_proto_rawDescGZIP() []byte {
	file_HeroRank_proto_rawDescOnce.Do(func() {
		file_HeroRank_proto_rawDescData = protoimpl.X.CompressGZIP(file_HeroRank_proto_rawDescData)
	})
	return file_HeroRank_proto_rawDescData
}

var file_HeroRank_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_HeroRank_proto_goTypes = []any{
	(*HeroRankPlayerInfo)(nil),             // 0: com.yq.msg.CityMsg.HeroRankPlayerInfo
	(*SynHeroRankPlayerInfo)(nil),          // 1: com.yq.msg.CityMsg.SynHeroRankPlayerInfo
	(*RspHeroRankEnter)(nil),               // 2: com.yq.msg.CityMsg.RspHeroRankEnter
	(*ReqHeroRankFightPlayerList)(nil),     // 3: com.yq.msg.CityMsg.ReqHeroRankFightPlayerList
	(*RspHeroRankFightPlayerList)(nil),     // 4: com.yq.msg.CityMsg.RspHeroRankFightPlayerList
	(*ReqHeroRankFight)(nil),               // 5: com.yq.msg.CityMsg.ReqHeroRankFight
	(*RspHeroRankFight)(nil),               // 6: com.yq.msg.CityMsg.RspHeroRankFight
	(*ReqHeroRankClear)(nil),               // 7: com.yq.msg.CityMsg.ReqHeroRankClear
	(*RspHeroRankClear)(nil),               // 8: com.yq.msg.CityMsg.RspHeroRankClear
	(*HeroRankFightPlayerDataListMsg)(nil), // 9: com.yq.msg.CityMsg.HeroRankFightPlayerDataListMsg
	(*HeroRankFightPlayerDataMsg)(nil),     // 10: com.yq.msg.CityMsg.HeroRankFightPlayerDataMsg
	(*RspHeroRankRecord)(nil),              // 11: com.yq.msg.CityMsg.RspHeroRankRecord
	(*HeroRankRecordDataMsg)(nil),          // 12: com.yq.msg.CityMsg.HeroRankRecordDataMsg
	(*HeroRankRecordPlayerDataMsg)(nil),    // 13: com.yq.msg.CityMsg.HeroRankRecordPlayerDataMsg
	(*ReqHeroRankGetAchieve)(nil),          // 14: com.yq.msg.CityMsg.ReqHeroRankGetAchieve
	(*RspHeroRankGetAchieve)(nil),          // 15: com.yq.msg.CityMsg.RspHeroRankGetAchieve
	(*ReqHeroRankBuyEnergy)(nil),           // 16: com.yq.msg.CityMsg.ReqHeroRankBuyEnergy
	(*RspHeroRankBuyEnergy)(nil),           // 17: com.yq.msg.CityMsg.RspHeroRankBuyEnergy
	(*BattleRecordMsg)(nil),                // 18: com.yq.msg.CityMsg.BattleRecordMsg
	(*PlayerHeadAndNameMsg)(nil),           // 19: com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	(*PlayerAppearanceDataMsg)(nil),        // 20: com.yq.msg.CityMsg.PlayerAppearanceDataMsg
}
var file_HeroRank_proto_depIdxs = []int32{
	0,  // 0: com.yq.msg.CityMsg.SynHeroRankPlayerInfo.playerInfo:type_name -> com.yq.msg.CityMsg.HeroRankPlayerInfo
	0,  // 1: com.yq.msg.CityMsg.RspHeroRankEnter.playerInfo:type_name -> com.yq.msg.CityMsg.HeroRankPlayerInfo
	9,  // 2: com.yq.msg.CityMsg.RspHeroRankEnter.fightPlayerList:type_name -> com.yq.msg.CityMsg.HeroRankFightPlayerDataListMsg
	9,  // 3: com.yq.msg.CityMsg.RspHeroRankFightPlayerList.fightPlayerList:type_name -> com.yq.msg.CityMsg.HeroRankFightPlayerDataListMsg
	0,  // 4: com.yq.msg.CityMsg.RspHeroRankFight.playerInfo:type_name -> com.yq.msg.CityMsg.HeroRankPlayerInfo
	18, // 5: com.yq.msg.CityMsg.RspHeroRankFight.allBattleRecord:type_name -> com.yq.msg.CityMsg.BattleRecordMsg
	19, // 6: com.yq.msg.CityMsg.RspHeroRankFight.otherPlayerHeadAndNameMsg:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	9,  // 7: com.yq.msg.CityMsg.RspHeroRankFight.fightPlayerList:type_name -> com.yq.msg.CityMsg.HeroRankFightPlayerDataListMsg
	19, // 8: com.yq.msg.CityMsg.RspHeroRankClear.otherPlayerHeadAndNameMsg:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	0,  // 9: com.yq.msg.CityMsg.RspHeroRankClear.playerInfo:type_name -> com.yq.msg.CityMsg.HeroRankPlayerInfo
	10, // 10: com.yq.msg.CityMsg.HeroRankFightPlayerDataListMsg.topPlayerInfoList:type_name -> com.yq.msg.CityMsg.HeroRankFightPlayerDataMsg
	10, // 11: com.yq.msg.CityMsg.HeroRankFightPlayerDataListMsg.canFightPlayerInfoList:type_name -> com.yq.msg.CityMsg.HeroRankFightPlayerDataMsg
	20, // 12: com.yq.msg.CityMsg.HeroRankFightPlayerDataMsg.showInfo:type_name -> com.yq.msg.CityMsg.PlayerAppearanceDataMsg
	12, // 13: com.yq.msg.CityMsg.RspHeroRankRecord.recordList:type_name -> com.yq.msg.CityMsg.HeroRankRecordDataMsg
	13, // 14: com.yq.msg.CityMsg.HeroRankRecordDataMsg.fightPlayerData:type_name -> com.yq.msg.CityMsg.HeroRankRecordPlayerDataMsg
	13, // 15: com.yq.msg.CityMsg.HeroRankRecordDataMsg.defensePlayerData:type_name -> com.yq.msg.CityMsg.HeroRankRecordPlayerDataMsg
	19, // 16: com.yq.msg.CityMsg.HeroRankRecordPlayerDataMsg.headAndNameData:type_name -> com.yq.msg.CityMsg.PlayerHeadAndNameMsg
	0,  // 17: com.yq.msg.CityMsg.RspHeroRankBuyEnergy.playerInfo:type_name -> com.yq.msg.CityMsg.HeroRankPlayerInfo
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_HeroRank_proto_init() }
func file_HeroRank_proto_init() {
	if File_HeroRank_proto != nil {
		return
	}
	file_Battle_proto_init()
	file_WatchPlayer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_HeroRank_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HeroRankPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SynHeroRankPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RspHeroRankEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ReqHeroRankFightPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RspHeroRankFightPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ReqHeroRankFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RspHeroRankFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ReqHeroRankClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RspHeroRankClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*HeroRankFightPlayerDataListMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*HeroRankFightPlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RspHeroRankRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*HeroRankRecordDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*HeroRankRecordPlayerDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ReqHeroRankGetAchieve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RspHeroRankGetAchieve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ReqHeroRankBuyEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HeroRank_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RspHeroRankBuyEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_HeroRank_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_HeroRank_proto_goTypes,
		DependencyIndexes: file_HeroRank_proto_depIdxs,
		MessageInfos:      file_HeroRank_proto_msgTypes,
	}.Build()
	File_HeroRank_proto = out.File
	file_HeroRank_proto_rawDesc = nil
	file_HeroRank_proto_goTypes = nil
	file_HeroRank_proto_depIdxs = nil
}
